
catfeed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000200a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bbc  08020278  08020278  00030278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000028cc  08023e34  08023e34  00033e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000008  08026700  08026700  00036700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00075d60  08026708  08026708  00036708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000018  0809c468  0809c468  000ac468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0809c480  0809c480  000b00fc  2**0
                  CONTENTS
  8 .ARM          00000008  0809c480  0809c480  000ac480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0809c488  0809c488  000b00fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  0809c488  0809c488  000ac488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0809c49c  0809c49c  000ac49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000fc  20000000  0809c4a4  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000a400  200000fc  0809c5a0  000b00fc  2**2
                  ALLOC
 14 ._user_heap_stack 00001404  2000a4fc  0809c5a0  000ba4fc  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000b00fc  2**0
                  CONTENTS, READONLY
 16 .debug_info   00080fb6  00000000  00000000  000b012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000f2e7  00000000  00000000  001310e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003208  00000000  00000000  001403d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002d70  00000000  00000000  001435d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00032aab  00000000  00000000  00146348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00038d17  00000000  00000000  00178df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00116ca6  00000000  00000000  001b1b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  002c87b0  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000d8fc  00000000  00000000  002c8884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08020260 	.word	0x08020260

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	08020260 	.word	0x08020260

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <MX_CRC_Init+0x3c>)
 80005ae:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <MX_CRC_Init+0x40>)
 80005b0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_CRC_Init+0x3c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <MX_CRC_Init+0x3c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_CRC_Init+0x3c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <MX_CRC_Init+0x3c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_CRC_Init+0x3c>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005d0:	4804      	ldr	r0, [pc, #16]	; (80005e4 <MX_CRC_Init+0x3c>)
 80005d2:	f001 fa2f 	bl	8001a34 <HAL_CRC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80005dc:	f000 fe18 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000a230 	.word	0x2000a230
 80005e8:	40023000 	.word	0x40023000

080005ec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <HAL_CRC_MspInit+0x38>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d10b      	bne.n	8000616 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <HAL_CRC_MspInit+0x3c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <HAL_CRC_MspInit+0x3c>)
 8000604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <HAL_CRC_MspInit+0x3c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40023000 	.word	0x40023000
 8000628:	40023800 	.word	0x40023800

0800062c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_DMA2D_Init+0x5c>)
 8000632:	4a16      	ldr	r2, [pc, #88]	; (800068c <MX_DMA2D_Init+0x60>)
 8000634:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_DMA2D_Init+0x5c>)
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_DMA2D_Init+0x5c>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_DMA2D_Init+0x5c>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_DMA2D_Init+0x5c>)
 800064a:	2200      	movs	r2, #0
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_DMA2D_Init+0x5c>)
 8000650:	2200      	movs	r2, #0
 8000652:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_DMA2D_Init+0x5c>)
 8000656:	2200      	movs	r2, #0
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_DMA2D_Init+0x5c>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <MX_DMA2D_Init+0x5c>)
 8000662:	f001 fad1 	bl	8001c08 <HAL_DMA2D_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800066c:	f000 fdd0 	bl	8001210 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000670:	2101      	movs	r1, #1
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_DMA2D_Init+0x5c>)
 8000674:	f001 fc22 	bl	8001ebc <HAL_DMA2D_ConfigLayer>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800067e:	f000 fdc7 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000a254 	.word	0x2000a254
 800068c:	4002b000 	.word	0x4002b000

08000690 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <HAL_DMA2D_MspInit+0x44>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d113      	bne.n	80006ca <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <HAL_DMA2D_MspInit+0x48>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <HAL_DMA2D_MspInit+0x48>)
 80006a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_DMA2D_MspInit+0x48>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2105      	movs	r1, #5
 80006be:	205a      	movs	r0, #90	; 0x5a
 80006c0:	f001 f912 	bl	80018e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80006c4:	205a      	movs	r0, #90	; 0x5a
 80006c6:	f001 f92b 	bl	8001920 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	4002b000 	.word	0x4002b000
 80006d8:	40023800 	.word	0x40023800

080006dc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
 80006f0:	615a      	str	r2, [r3, #20]
 80006f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_FMC_Init+0x98>)
 80006f6:	4a20      	ldr	r2, [pc, #128]	; (8000778 <MX_FMC_Init+0x9c>)
 80006f8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_FMC_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_FMC_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_FMC_Init+0x98>)
 8000708:	2204      	movs	r2, #4
 800070a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_FMC_Init+0x98>)
 800070e:	2210      	movs	r2, #16
 8000710:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_FMC_Init+0x98>)
 8000714:	2240      	movs	r2, #64	; 0x40
 8000716:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_FMC_Init+0x98>)
 800071a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800071e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_FMC_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_FMC_Init+0x98>)
 8000728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800072c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_FMC_Init+0x98>)
 8000730:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_FMC_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000748:	2307      	movs	r3, #7
 800074a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800074c:	2303      	movs	r3, #3
 800074e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_FMC_Init+0x98>)
 800075e:	f003 fc5f 	bl	8004020 <HAL_SDRAM_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000768:	f000 fd52 	bl	8001210 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000a294 	.word	0x2000a294
 8000778:	a0000140 	.word	0xa0000140

0800077c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000790:	4b3a      	ldr	r3, [pc, #232]	; (800087c <HAL_FMC_MspInit+0x100>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d16d      	bne.n	8000874 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000798:	4b38      	ldr	r3, [pc, #224]	; (800087c <HAL_FMC_MspInit+0x100>)
 800079a:	2201      	movs	r2, #1
 800079c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800079e:	4b38      	ldr	r3, [pc, #224]	; (8000880 <HAL_FMC_MspInit+0x104>)
 80007a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007a2:	4a37      	ldr	r2, [pc, #220]	; (8000880 <HAL_FMC_MspInit+0x104>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6393      	str	r3, [r2, #56]	; 0x38
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <HAL_FMC_MspInit+0x104>)
 80007ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80007b6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80007ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007c8:	230c      	movs	r3, #12
 80007ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	482c      	ldr	r0, [pc, #176]	; (8000884 <HAL_FMC_MspInit+0x108>)
 80007d2:	f001 fc05 	bl	8001fe0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80007d6:	f248 1333 	movw	r3, #33075	; 0x8133
 80007da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007e8:	230c      	movs	r3, #12
 80007ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4825      	ldr	r0, [pc, #148]	; (8000888 <HAL_FMC_MspInit+0x10c>)
 80007f2:	f001 fbf5 	bl	8001fe0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80007f6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80007fa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000808:	230c      	movs	r3, #12
 800080a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	481e      	ldr	r0, [pc, #120]	; (800088c <HAL_FMC_MspInit+0x110>)
 8000812:	f001 fbe5 	bl	8001fe0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000816:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800081a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000828:	230c      	movs	r3, #12
 800082a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	4619      	mov	r1, r3
 8000830:	4817      	ldr	r0, [pc, #92]	; (8000890 <HAL_FMC_MspInit+0x114>)
 8000832:	f001 fbd5 	bl	8001fe0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8000836:	2328      	movs	r3, #40	; 0x28
 8000838:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000846:	230c      	movs	r3, #12
 8000848:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4811      	ldr	r0, [pc, #68]	; (8000894 <HAL_FMC_MspInit+0x118>)
 8000850:	f001 fbc6 	bl	8001fe0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000854:	2308      	movs	r3, #8
 8000856:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000864:	230c      	movs	r3, #12
 8000866:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	480a      	ldr	r0, [pc, #40]	; (8000898 <HAL_FMC_MspInit+0x11c>)
 800086e:	f001 fbb7 	bl	8001fe0 <HAL_GPIO_Init>
 8000872:	e000      	b.n	8000876 <HAL_FMC_MspInit+0xfa>
    return;
 8000874:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000118 	.word	0x20000118
 8000880:	40023800 	.word	0x40023800
 8000884:	40021000 	.word	0x40021000
 8000888:	40021800 	.word	0x40021800
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40021400 	.word	0x40021400
 8000894:	40021c00 	.word	0x40021c00
 8000898:	40020800 	.word	0x40020800

0800089c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80008a4:	f7ff ff6a 	bl	800077c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008c4:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <MX_FREERTOS_Init+0x28>)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4808      	ldr	r0, [pc, #32]	; (80008ec <MX_FREERTOS_Init+0x2c>)
 80008ca:	f004 f821 	bl	8004910 <osThreadNew>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <MX_FREERTOS_Init+0x30>)
 80008d2:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <MX_FREERTOS_Init+0x34>)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <MX_FREERTOS_Init+0x38>)
 80008da:	f004 f819 	bl	8004910 <osThreadNew>
 80008de:	4603      	mov	r3, r0
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <MX_FREERTOS_Init+0x3c>)
 80008e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	08020d60 	.word	0x08020d60
 80008ec:	08000901 	.word	0x08000901
 80008f0:	2000a2c8 	.word	0x2000a2c8
 80008f4:	08020d84 	.word	0x08020d84
 80008f8:	080082c9 	.word	0x080082c9
 80008fc:	2000a2cc 	.word	0x2000a2cc

08000900 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000908:	2001      	movs	r0, #1
 800090a:	f004 f8d9 	bl	8004ac0 <osDelay>
 800090e:	e7fb      	b.n	8000908 <StartDefaultTask+0x8>

08000910 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	; 0x40
 8000914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000926:	4b58      	ldr	r3, [pc, #352]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a57      	ldr	r2, [pc, #348]	; (8000a88 <MX_GPIO_Init+0x178>)
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b55      	ldr	r3, [pc, #340]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
 800093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b52      	ldr	r3, [pc, #328]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a51      	ldr	r2, [pc, #324]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b4f      	ldr	r3, [pc, #316]	; (8000a88 <MX_GPIO_Init+0x178>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b4c      	ldr	r3, [pc, #304]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a4b      	ldr	r2, [pc, #300]	; (8000a88 <MX_GPIO_Init+0x178>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b49      	ldr	r3, [pc, #292]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	623b      	str	r3, [r7, #32]
 800096c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096e:	4b46      	ldr	r3, [pc, #280]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a45      	ldr	r2, [pc, #276]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b43      	ldr	r3, [pc, #268]	; (8000a88 <MX_GPIO_Init+0x178>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000982:	61fb      	str	r3, [r7, #28]
 8000984:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000986:	4b40      	ldr	r3, [pc, #256]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a3f      	ldr	r2, [pc, #252]	; (8000a88 <MX_GPIO_Init+0x178>)
 800098c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b3d      	ldr	r3, [pc, #244]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800099a:	61bb      	str	r3, [r7, #24]
 800099c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <MX_GPIO_Init+0x178>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a39      	ldr	r2, [pc, #228]	; (8000a88 <MX_GPIO_Init+0x178>)
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <MX_GPIO_Init+0x178>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009b6:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <MX_GPIO_Init+0x178>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a33      	ldr	r2, [pc, #204]	; (8000a88 <MX_GPIO_Init+0x178>)
 80009bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b31      	ldr	r3, [pc, #196]	; (8000a88 <MX_GPIO_Init+0x178>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ce:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <MX_GPIO_Init+0x178>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <MX_GPIO_Init+0x178>)
 80009d4:	f043 0320 	orr.w	r3, r3, #32
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <MX_GPIO_Init+0x178>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0320 	and.w	r3, r3, #32
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009e6:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <MX_GPIO_Init+0x178>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <MX_GPIO_Init+0x178>)
 80009ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <MX_GPIO_Init+0x178>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fe:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a21      	ldr	r2, [pc, #132]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a1b      	ldr	r2, [pc, #108]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_GPIO_Init+0x178>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2108      	movs	r1, #8
 8000a32:	4816      	ldr	r0, [pc, #88]	; (8000a8c <MX_GPIO_Init+0x17c>)
 8000a34:	f001 fc80 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3e:	4814      	ldr	r0, [pc, #80]	; (8000a90 <MX_GPIO_Init+0x180>)
 8000a40:	f001 fc7a 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a44:	2308      	movs	r3, #8
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <MX_GPIO_Init+0x17c>)
 8000a5c:	f001 fac0 	bl	8001fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_GPIO_Init+0x180>)
 8000a7a:	f001 fab1 	bl	8001fe0 <HAL_GPIO_Init>

}
 8000a7e:	bf00      	nop
 8000a80:	3740      	adds	r7, #64	; 0x40
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40022800 	.word	0x40022800
 8000a90:	40022000 	.word	0x40022000

08000a94 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <MX_I2C1_Init+0x7c>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ad0:	f001 fc4c 	bl	800236c <HAL_I2C_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ada:	f000 fb99 	bl	8001210 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ae2:	f001 fcd3 	bl	800248c <HAL_I2CEx_ConfigAnalogFilter>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000aec:	f000 fb90 	bl	8001210 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000af4:	f001 fd15 	bl	8002522 <HAL_I2CEx_ConfigDigitalFilter>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000afe:	f000 fb87 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000a31c 	.word	0x2000a31c
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	00c0eaff 	.word	0x00c0eaff

08000b14 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <MX_I2C3_Init+0x74>)
 8000b1a:	4a1c      	ldr	r2, [pc, #112]	; (8000b8c <MX_I2C3_Init+0x78>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_I2C3_Init+0x74>)
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <MX_I2C3_Init+0x7c>)
 8000b22:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <MX_I2C3_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_I2C3_Init+0x74>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_I2C3_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_I2C3_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_I2C3_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_I2C3_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_I2C3_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b4e:	480e      	ldr	r0, [pc, #56]	; (8000b88 <MX_I2C3_Init+0x74>)
 8000b50:	f001 fc0c 	bl	800236c <HAL_I2C_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b5a:	f000 fb59 	bl	8001210 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <MX_I2C3_Init+0x74>)
 8000b62:	f001 fc93 	bl	800248c <HAL_I2CEx_ConfigAnalogFilter>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b6c:	f000 fb50 	bl	8001210 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_I2C3_Init+0x74>)
 8000b74:	f001 fcd5 	bl	8002522 <HAL_I2CEx_ConfigDigitalFilter>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b7e:	f000 fb47 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	2000a2d0 	.word	0x2000a2d0
 8000b8c:	40005c00 	.word	0x40005c00
 8000b90:	00c0eaff 	.word	0x00c0eaff

08000b94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a2f      	ldr	r2, [pc, #188]	; (8000c70 <HAL_I2C_MspInit+0xdc>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <HAL_I2C_MspInit+0xe0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a2e      	ldr	r2, [pc, #184]	; (8000c74 <HAL_I2C_MspInit+0xe0>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <HAL_I2C_MspInit+0xe0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd4:	2312      	movs	r3, #18
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be0:	2304      	movs	r3, #4
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	4823      	ldr	r0, [pc, #140]	; (8000c78 <HAL_I2C_MspInit+0xe4>)
 8000bec:	f001 f9f8 	bl	8001fe0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf0:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <HAL_I2C_MspInit+0xe0>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <HAL_I2C_MspInit+0xe0>)
 8000bf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_I2C_MspInit+0xe0>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c08:	e02d      	b.n	8000c66 <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C3)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <HAL_I2C_MspInit+0xe8>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d128      	bne.n	8000c66 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_I2C_MspInit+0xe0>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <HAL_I2C_MspInit+0xe0>)
 8000c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_I2C_MspInit+0xe0>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000c2c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c32:	2312      	movs	r3, #18
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <HAL_I2C_MspInit+0xec>)
 8000c4a:	f001 f9c9 	bl	8001fe0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_I2C_MspInit+0xe0>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_I2C_MspInit+0xe0>)
 8000c54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_I2C_MspInit+0xe0>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
}
 8000c66:	bf00      	nop
 8000c68:	3730      	adds	r7, #48	; 0x30
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40005400 	.word	0x40005400
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020400 	.word	0x40020400
 8000c7c:	40005c00 	.word	0x40005c00
 8000c80:	40021c00 	.word	0x40021c00

08000c84 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08e      	sub	sp, #56	; 0x38
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2234      	movs	r2, #52	; 0x34
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f01e fb87 	bl	801f3a4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c96:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000c98:	4a3a      	ldr	r2, [pc, #232]	; (8000d84 <MX_LTDC_Init+0x100>)
 8000c9a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c9c:	4b38      	ldr	r3, [pc, #224]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ca2:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ca8:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cae:	4b34      	ldr	r3, [pc, #208]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000cb6:	2228      	movs	r2, #40	; 0x28
 8000cb8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000cba:	4b31      	ldr	r3, [pc, #196]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000cbc:	2209      	movs	r2, #9
 8000cbe:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000cc2:	2235      	movs	r2, #53	; 0x35
 8000cc4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000cc6:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000cc8:	220b      	movs	r2, #11
 8000cca:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000cce:	f240 2215 	movw	r2, #533	; 0x215
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000cd6:	f240 121b 	movw	r2, #283	; 0x11b
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000cdc:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000cde:	f240 2235 	movw	r2, #565	; 0x235
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000ce6:	f240 121d 	movw	r2, #285	; 0x11d
 8000cea:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d04:	481e      	ldr	r0, [pc, #120]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000d06:	f001 fc59 	bl	80025bc <HAL_LTDC_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000d10:	f000 fa7e 	bl	8001210 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000d18:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d1c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000d22:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000d26:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d2c:	23ff      	movs	r3, #255	; 0xff
 8000d2e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d38:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000d3e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000d44:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000d4a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_LTDC_Init+0xfc>)
 8000d6a:	f001 fdaf 	bl	80028cc <HAL_LTDC_ConfigLayer>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000d74:	f000 fa4c 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3738      	adds	r7, #56	; 0x38
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	2000a368 	.word	0x2000a368
 8000d84:	40016800 	.word	0x40016800

08000d88 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08e      	sub	sp, #56	; 0x38
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a55      	ldr	r2, [pc, #340]	; (8000efc <HAL_LTDC_MspInit+0x174>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	f040 80a3 	bne.w	8000ef2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000dac:	4b54      	ldr	r3, [pc, #336]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db0:	4a53      	ldr	r2, [pc, #332]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000db2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000db6:	6453      	str	r3, [r2, #68]	; 0x44
 8000db8:	4b51      	ldr	r3, [pc, #324]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dc0:	623b      	str	r3, [r7, #32]
 8000dc2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc4:	4b4e      	ldr	r3, [pc, #312]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4a4d      	ldr	r2, [pc, #308]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000dca:	f043 0310 	orr.w	r3, r3, #16
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 0310 	and.w	r3, r3, #16
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ddc:	4b48      	ldr	r3, [pc, #288]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	4a47      	ldr	r2, [pc, #284]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de6:	6313      	str	r3, [r2, #48]	; 0x30
 8000de8:	4b45      	ldr	r3, [pc, #276]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000df4:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	4a41      	ldr	r2, [pc, #260]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000e00:	4b3f      	ldr	r3, [pc, #252]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e0c:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	4a3b      	ldr	r2, [pc, #236]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e16:	6313      	str	r3, [r2, #48]	; 0x30
 8000e18:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e24:	4b36      	ldr	r3, [pc, #216]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a35      	ldr	r2, [pc, #212]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e30:	4b33      	ldr	r3, [pc, #204]	; (8000f00 <HAL_LTDC_MspInit+0x178>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e4c:	230e      	movs	r3, #14
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	482b      	ldr	r0, [pc, #172]	; (8000f04 <HAL_LTDC_MspInit+0x17c>)
 8000e58:	f001 f8c2 	bl	8001fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8000e5c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e6e:	230e      	movs	r3, #14
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	4823      	ldr	r0, [pc, #140]	; (8000f08 <HAL_LTDC_MspInit+0x180>)
 8000e7a:	f001 f8b1 	bl	8001fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000e7e:	23f7      	movs	r3, #247	; 0xf7
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e8e:	230e      	movs	r3, #14
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	481c      	ldr	r0, [pc, #112]	; (8000f0c <HAL_LTDC_MspInit+0x184>)
 8000e9a:	f001 f8a1 	bl	8001fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000eb0:	2309      	movs	r3, #9
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4815      	ldr	r0, [pc, #84]	; (8000f10 <HAL_LTDC_MspInit+0x188>)
 8000ebc:	f001 f890 	bl	8001fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8000ec0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed2:	230e      	movs	r3, #14
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <HAL_LTDC_MspInit+0x18c>)
 8000ede:	f001 f87f 	bl	8001fe0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	2058      	movs	r0, #88	; 0x58
 8000ee8:	f000 fcfe 	bl	80018e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000eec:	2058      	movs	r0, #88	; 0x58
 8000eee:	f000 fd17 	bl	8001920 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3738      	adds	r7, #56	; 0x38
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40016800 	.word	0x40016800
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40022400 	.word	0x40022400
 8000f0c:	40022800 	.word	0x40022800
 8000f10:	40021800 	.word	0x40021800
 8000f14:	40022000 	.word	0x40022000

08000f18 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f1c:	f3bf 8f4f 	dsb	sy
}
 8000f20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f22:	f3bf 8f6f 	isb	sy
}
 8000f26:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <SCB_EnableICache+0x48>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f30:	f3bf 8f4f 	dsb	sy
}
 8000f34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f36:	f3bf 8f6f 	isb	sy
}
 8000f3a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <SCB_EnableICache+0x48>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <SCB_EnableICache+0x48>)
 8000f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f46:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f48:	f3bf 8f4f 	dsb	sy
}
 8000f4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f4e:	f3bf 8f6f 	isb	sy
}
 8000f52:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <SCB_EnableDCache+0x84>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f72:	f3bf 8f4f 	dsb	sy
}
 8000f76:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <SCB_EnableDCache+0x84>)
 8000f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f7e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	0b5b      	lsrs	r3, r3, #13
 8000f84:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f88:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	08db      	lsrs	r3, r3, #3
 8000f8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f92:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	015a      	lsls	r2, r3, #5
 8000f98:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000f9c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fa2:	4911      	ldr	r1, [pc, #68]	; (8000fe8 <SCB_EnableDCache+0x84>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1e5a      	subs	r2, r3, #1
 8000fae:	60ba      	str	r2, [r7, #8]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1ef      	bne.n	8000f94 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	1e5a      	subs	r2, r3, #1
 8000fb8:	60fa      	str	r2, [r7, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1e5      	bne.n	8000f8a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fbe:	f3bf 8f4f 	dsb	sy
}
 8000fc2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <SCB_EnableDCache+0x84>)
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <SCB_EnableDCache+0x84>)
 8000fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd0:	f3bf 8f4f 	dsb	sy
}
 8000fd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd6:	f3bf 8f6f 	isb	sy
}
 8000fda:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ff0:	f000 f8c4 	bl	800117c <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000ff4:	f7ff ff90 	bl	8000f18 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000ff8:	f7ff ffb4 	bl	8000f64 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffc:	f000 fb80 	bl	8001700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001000:	f000 f81a 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001004:	f7ff fc84 	bl	8000910 <MX_GPIO_Init>
  MX_CRC_Init();
 8001008:	f7ff face 	bl	80005a8 <MX_CRC_Init>
  MX_DMA2D_Init();
 800100c:	f7ff fb0e 	bl	800062c <MX_DMA2D_Init>
  MX_FMC_Init();
 8001010:	f7ff fb64 	bl	80006dc <MX_FMC_Init>
  MX_I2C3_Init();
 8001014:	f7ff fd7e 	bl	8000b14 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001018:	f7ff fe34 	bl	8000c84 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800101c:	f000 f8fe 	bl	800121c <MX_QUADSPI_Init>
  MX_I2C1_Init();
 8001020:	f7ff fd38 	bl	8000a94 <MX_I2C1_Init>
  MX_TouchGFX_Init();
 8001024:	f007 f94a 	bl	80082bc <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001028:	f003 fc08 	bl	800483c <osKernelInitialize>
  MX_FREERTOS_Init();
 800102c:	f7ff fc48 	bl	80008c0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001030:	f003 fc38 	bl	80048a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001034:	e7fe      	b.n	8001034 <main+0x48>
	...

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0b4      	sub	sp, #208	; 0xd0
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001042:	2230      	movs	r2, #48	; 0x30
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f01e f9ac 	bl	801f3a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	2284      	movs	r2, #132	; 0x84
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f01e f99d 	bl	801f3a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <SystemClock_Config+0x138>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a40      	ldr	r2, [pc, #256]	; (8001170 <SystemClock_Config+0x138>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <SystemClock_Config+0x138>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001082:	4b3c      	ldr	r3, [pc, #240]	; (8001174 <SystemClock_Config+0x13c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a3b      	ldr	r2, [pc, #236]	; (8001174 <SystemClock_Config+0x13c>)
 8001088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <SystemClock_Config+0x13c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109a:	2301      	movs	r3, #1
 800109c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a8:	2302      	movs	r3, #2
 80010aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010b6:	2319      	movs	r3, #25
 80010b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80010bc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80010c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 ff1b 	bl	8002f10 <HAL_RCC_OscConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80010e0:	f000 f896 	bl	8001210 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010e4:	f001 fe02 	bl	8002cec <HAL_PWREx_EnableOverDrive>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80010ee:	f000 f88f 	bl	8001210 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001104:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001108:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001110:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001114:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001118:	2106      	movs	r1, #6
 800111a:	4618      	mov	r0, r3
 800111c:	f002 f99c 	bl	8003458 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001126:	f000 f873 	bl	8001210 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C1
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <SystemClock_Config+0x140>)
 800112c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800112e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001132:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001134:	2305      	movs	r3, #5
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001140:	2301      	movs	r3, #1
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800114a:	2300      	movs	r3, #0
 800114c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800114e:	2300      	movs	r3, #0
 8001150:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fb72 	bl	8003840 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8001162:	f000 f855 	bl	8001210 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	37d0      	adds	r7, #208	; 0xd0
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000
 8001178:	00014008 	.word	0x00014008

0800117c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800118e:	f000 fbd5 	bl	800193c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001192:	2301      	movs	r3, #1
 8001194:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001196:	2300      	movs	r3, #0
 8001198:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 800119a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800119e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80011a0:	231b      	movs	r3, #27
 80011a2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80011ac:	2303      	movs	r3, #3
 80011ae:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011c0:	463b      	mov	r3, r7
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fbf2 	bl	80019ac <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80011cc:	2317      	movs	r3, #23
 80011ce:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011d4:	463b      	mov	r3, r7
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fbe8 	bl	80019ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011dc:	2004      	movs	r0, #4
 80011de:	f000 fbc5 	bl	800196c <HAL_MPU_Enable>

}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011fe:	f000 fa9b 	bl	8001738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40001000 	.word	0x40001000

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001218:	e7fe      	b.n	8001218 <Error_Handler+0x8>
	...

0800121c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_QUADSPI_Init+0x50>)
 8001222:	4a13      	ldr	r2, [pc, #76]	; (8001270 <MX_QUADSPI_Init+0x54>)
 8001224:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_QUADSPI_Init+0x50>)
 8001228:	2201      	movs	r2, #1
 800122a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_QUADSPI_Init+0x50>)
 800122e:	2204      	movs	r2, #4
 8001230:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_QUADSPI_Init+0x50>)
 8001234:	2210      	movs	r2, #16
 8001236:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_QUADSPI_Init+0x50>)
 800123a:	2218      	movs	r2, #24
 800123c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_QUADSPI_Init+0x50>)
 8001240:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001244:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_QUADSPI_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <MX_QUADSPI_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_QUADSPI_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_QUADSPI_Init+0x50>)
 800125a:	f001 fd97 	bl	8002d8c <HAL_QSPI_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001264:	f7ff ffd4 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000a410 	.word	0x2000a410
 8001270:	a0001000 	.word	0xa0001000

08001274 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08c      	sub	sp, #48	; 0x30
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a3b      	ldr	r2, [pc, #236]	; (8001380 <HAL_QSPI_MspInit+0x10c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d170      	bne.n	8001378 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <HAL_QSPI_MspInit+0x110>)
 8001298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129a:	4a3a      	ldr	r2, [pc, #232]	; (8001384 <HAL_QSPI_MspInit+0x110>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6393      	str	r3, [r2, #56]	; 0x38
 80012a2:	4b38      	ldr	r3, [pc, #224]	; (8001384 <HAL_QSPI_MspInit+0x110>)
 80012a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ae:	4b35      	ldr	r3, [pc, #212]	; (8001384 <HAL_QSPI_MspInit+0x110>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a34      	ldr	r2, [pc, #208]	; (8001384 <HAL_QSPI_MspInit+0x110>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b32      	ldr	r3, [pc, #200]	; (8001384 <HAL_QSPI_MspInit+0x110>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <HAL_QSPI_MspInit+0x110>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a2e      	ldr	r2, [pc, #184]	; (8001384 <HAL_QSPI_MspInit+0x110>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <HAL_QSPI_MspInit+0x110>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012de:	4b29      	ldr	r3, [pc, #164]	; (8001384 <HAL_QSPI_MspInit+0x110>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a28      	ldr	r2, [pc, #160]	; (8001384 <HAL_QSPI_MspInit+0x110>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_QSPI_MspInit+0x110>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012f6:	2304      	movs	r3, #4
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001306:	2309      	movs	r3, #9
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	481d      	ldr	r0, [pc, #116]	; (8001388 <HAL_QSPI_MspInit+0x114>)
 8001312:	f000 fe65 	bl	8001fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001316:	2340      	movs	r3, #64	; 0x40
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001326:	230a      	movs	r3, #10
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4816      	ldr	r0, [pc, #88]	; (800138c <HAL_QSPI_MspInit+0x118>)
 8001332:	f000 fe55 	bl	8001fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001336:	2304      	movs	r3, #4
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001346:	2309      	movs	r3, #9
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	480e      	ldr	r0, [pc, #56]	; (800138c <HAL_QSPI_MspInit+0x118>)
 8001352:	f000 fe45 	bl	8001fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8001356:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001368:	2309      	movs	r3, #9
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <HAL_QSPI_MspInit+0x11c>)
 8001374:	f000 fe34 	bl	8001fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001378:	bf00      	nop
 800137a:	3730      	adds	r7, #48	; 0x30
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	a0001000 	.word	0xa0001000
 8001384:	40023800 	.word	0x40023800
 8001388:	40021000 	.word	0x40021000
 800138c:	40020400 	.word	0x40020400
 8001390:	40020c00 	.word	0x40020c00

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <HAL_MspInit+0x4c>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_MspInit+0x4c>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_MspInit+0x4c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	210f      	movs	r1, #15
 80013ce:	f06f 0001 	mvn.w	r0, #1
 80013d2:	f000 fa89 	bl	80018e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800

080013e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	2036      	movs	r0, #54	; 0x36
 80013fa:	f000 fa75 	bl	80018e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013fe:	2036      	movs	r0, #54	; 0x36
 8001400:	f000 fa8e 	bl	8001920 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <HAL_InitTick+0xa0>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <HAL_InitTick+0xa0>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6413      	str	r3, [r2, #64]	; 0x40
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_InitTick+0xa0>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800141c:	f107 0210 	add.w	r2, r7, #16
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f002 f9d8 	bl	80037dc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800142c:	f002 f9c2 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 8001430:	4603      	mov	r3, r0
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001438:	4a13      	ldr	r2, [pc, #76]	; (8001488 <HAL_InitTick+0xa4>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	0c9b      	lsrs	r3, r3, #18
 8001440:	3b01      	subs	r3, #1
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_InitTick+0xa8>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <HAL_InitTick+0xac>)
 8001448:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_InitTick+0xa8>)
 800144c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001450:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001452:	4a0e      	ldr	r2, [pc, #56]	; (800148c <HAL_InitTick+0xa8>)
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_InitTick+0xa8>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_InitTick+0xa8>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001464:	4809      	ldr	r0, [pc, #36]	; (800148c <HAL_InitTick+0xa8>)
 8001466:	f002 fe0f 	bl	8004088 <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d104      	bne.n	800147a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001470:	4806      	ldr	r0, [pc, #24]	; (800148c <HAL_InitTick+0xa8>)
 8001472:	f002 fe6b 	bl	800414c <HAL_TIM_Base_Start_IT>
 8001476:	4603      	mov	r3, r0
 8001478:	e000      	b.n	800147c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	3730      	adds	r7, #48	; 0x30
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	431bde83 	.word	0x431bde83
 800148c:	2000a45c 	.word	0x2000a45c
 8001490:	40001000 	.word	0x40001000

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <NMI_Handler+0x4>

0800149a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <HardFault_Handler+0x4>

080014a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <MemManage_Handler+0x4>

080014a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <TIM6_DAC_IRQHandler+0x10>)
 80014c6:	f002 feb9 	bl	800423c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000a45c 	.word	0x2000a45c

080014d4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <LTDC_IRQHandler+0x10>)
 80014da:	f001 f93f 	bl	800275c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000a368 	.word	0x2000a368

080014e8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <DMA2D_IRQHandler+0x10>)
 80014ee:	f000 fbd5 	bl	8001c9c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000a254 	.word	0x2000a254

080014fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
	return 1;
 8001500:	2301      	movs	r3, #1
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_kill>:

int _kill(int pid, int sig)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001516:	f01d fdf1 	bl	801f0fc <__errno>
 800151a:	4603      	mov	r3, r0
 800151c:	2216      	movs	r2, #22
 800151e:	601a      	str	r2, [r3, #0]
	return -1;
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_exit>:

void _exit (int status)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ffe7 	bl	800150c <_kill>
	while (1) {}		/* Make sure we hang here */
 800153e:	e7fe      	b.n	800153e <_exit+0x12>

08001540 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e00a      	b.n	8001568 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001552:	f3af 8000 	nop.w
 8001556:	4601      	mov	r1, r0
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	60ba      	str	r2, [r7, #8]
 800155e:	b2ca      	uxtb	r2, r1
 8001560:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	dbf0      	blt.n	8001552 <_read+0x12>
	}

return len;
 8001570:	687b      	ldr	r3, [r7, #4]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e009      	b.n	80015a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	60ba      	str	r2, [r7, #8]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbf1      	blt.n	800158c <_write+0x12>
	}
	return len;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_close>:

int _close(int file)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
	return -1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015da:	605a      	str	r2, [r3, #4]
	return 0;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_isatty>:

int _isatty(int file)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	return 1;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
	return 0;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800164c:	f01d fd56 	bl	801f0fc <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	220c      	movs	r2, #12
 8001654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e009      	b.n	8001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <_sbrk+0x64>)
 800166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20050000 	.word	0x20050000
 800167c:	00000a00 	.word	0x00000a00
 8001680:	2000011c 	.word	0x2000011c
 8001684:	2000a500 	.word	0x2000a500

08001688 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016b2:	490e      	ldr	r1, [pc, #56]	; (80016ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016c8:	4c0b      	ldr	r4, [pc, #44]	; (80016f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016d6:	f7ff ffd7 	bl	8001688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016da:	f01d fe1d 	bl	801f318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016de:	f7ff fc85 	bl	8000fec <main>
  bx  lr    
 80016e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80016f0:	0809c4a4 	.word	0x0809c4a4
  ldr r2, =_sbss
 80016f4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80016f8:	2000a4fc 	.word	0x2000a4fc

080016fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC_IRQHandler>
	...

08001700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_Init+0x34>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_Init+0x34>)
 800170a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_Init+0x34>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_Init+0x34>)
 8001716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171c:	2003      	movs	r0, #3
 800171e:	f000 f8d8 	bl	80018d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff fe5e 	bl	80013e4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001728:	f7ff fe34 	bl	8001394 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023c00 	.word	0x40023c00

08001738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x20>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_IncTick+0x24>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_IncTick+0x24>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	2000000c 	.word	0x2000000c
 800175c:	2000a4a8 	.word	0x2000a4a8

08001760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return uwTick;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <HAL_GetTick+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	2000a4a8 	.word	0x2000a4a8

08001778 <__NVIC_SetPriorityGrouping>:
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <__NVIC_SetPriorityGrouping+0x40>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <__NVIC_SetPriorityGrouping+0x40>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00
 80017bc:	05fa0000 	.word	0x05fa0000

080017c0 <__NVIC_GetPriorityGrouping>:
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff4c 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fa:	f7ff ff61 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 80018fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	68b9      	ldr	r1, [r7, #8]
 8001904:	6978      	ldr	r0, [r7, #20]
 8001906:	f7ff ffb1 	bl	800186c <NVIC_EncodePriority>
 800190a:	4602      	mov	r2, r0
 800190c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff80 	bl	8001818 <__NVIC_SetPriority>
}
 8001918:	bf00      	nop
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff54 	bl	80017dc <__NVIC_EnableIRQ>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001940:	f3bf 8f5f 	dmb	sy
}
 8001944:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <HAL_MPU_Disable+0x28>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	4a06      	ldr	r2, [pc, #24]	; (8001964 <HAL_MPU_Disable+0x28>)
 800194c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001950:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_MPU_Disable+0x2c>)
 8001954:	2200      	movs	r2, #0
 8001956:	605a      	str	r2, [r3, #4]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00
 8001968:	e000ed90 	.word	0xe000ed90

0800196c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001974:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <HAL_MPU_Enable+0x38>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_MPU_Enable+0x3c>)
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_MPU_Enable+0x3c>)
 8001984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001988:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800198a:	f3bf 8f4f 	dsb	sy
}
 800198e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001990:	f3bf 8f6f 	isb	sy
}
 8001994:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed90 	.word	0xe000ed90
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	785a      	ldrb	r2, [r3, #1]
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_MPU_ConfigRegion+0x84>)
 80019ba:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d029      	beq.n	8001a18 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80019c4:	4a1a      	ldr	r2, [pc, #104]	; (8001a30 <HAL_MPU_ConfigRegion+0x84>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7b1b      	ldrb	r3, [r3, #12]
 80019d0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7adb      	ldrb	r3, [r3, #11]
 80019d6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7a9b      	ldrb	r3, [r3, #10]
 80019de:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7b5b      	ldrb	r3, [r3, #13]
 80019e6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7b9b      	ldrb	r3, [r3, #14]
 80019ee:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7bdb      	ldrb	r3, [r3, #15]
 80019f6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7a5b      	ldrb	r3, [r3, #9]
 80019fe:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7a1b      	ldrb	r3, [r3, #8]
 8001a06:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a08:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	7812      	ldrb	r2, [r2, #0]
 8001a0e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a12:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a14:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001a16:	e005      	b.n	8001a24 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_MPU_ConfigRegion+0x84>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <HAL_MPU_ConfigRegion+0x84>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed90 	.word	0xe000ed90

08001a34 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e054      	b.n	8001af0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7f5b      	ldrb	r3, [r3, #29]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d105      	bne.n	8001a5c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7fe fdc8 	bl	80005ec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	791b      	ldrb	r3, [r3, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10c      	bne.n	8001a84 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a22      	ldr	r2, [pc, #136]	; (8001af8 <HAL_CRC_Init+0xc4>)
 8001a70:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0218 	bic.w	r2, r2, #24
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	e00c      	b.n	8001a9e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6899      	ldr	r1, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f834 	bl	8001afc <HAL_CRCEx_Polynomial_Set>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e028      	b.n	8001af0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	795b      	ldrb	r3, [r3, #5]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d105      	bne.n	8001ab2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8001aae:	611a      	str	r2, [r3, #16]
 8001ab0:	e004      	b.n	8001abc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6912      	ldr	r2, [r2, #16]
 8001aba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	04c11db7 	.word	0x04c11db7

08001afc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001b0c:	231f      	movs	r3, #31
 8001b0e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001b10:	bf00      	nop
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1e5a      	subs	r2, r3, #1
 8001b16:	613a      	str	r2, [r7, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d009      	beq.n	8001b30 <HAL_CRCEx_Polynomial_Set+0x34>
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_CRCEx_Polynomial_Set+0x16>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b18      	cmp	r3, #24
 8001b34:	d846      	bhi.n	8001bc4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001b36:	a201      	add	r2, pc, #4	; (adr r2, 8001b3c <HAL_CRCEx_Polynomial_Set+0x40>)
 8001b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3c:	08001bcb 	.word	0x08001bcb
 8001b40:	08001bc5 	.word	0x08001bc5
 8001b44:	08001bc5 	.word	0x08001bc5
 8001b48:	08001bc5 	.word	0x08001bc5
 8001b4c:	08001bc5 	.word	0x08001bc5
 8001b50:	08001bc5 	.word	0x08001bc5
 8001b54:	08001bc5 	.word	0x08001bc5
 8001b58:	08001bc5 	.word	0x08001bc5
 8001b5c:	08001bb9 	.word	0x08001bb9
 8001b60:	08001bc5 	.word	0x08001bc5
 8001b64:	08001bc5 	.word	0x08001bc5
 8001b68:	08001bc5 	.word	0x08001bc5
 8001b6c:	08001bc5 	.word	0x08001bc5
 8001b70:	08001bc5 	.word	0x08001bc5
 8001b74:	08001bc5 	.word	0x08001bc5
 8001b78:	08001bc5 	.word	0x08001bc5
 8001b7c:	08001bad 	.word	0x08001bad
 8001b80:	08001bc5 	.word	0x08001bc5
 8001b84:	08001bc5 	.word	0x08001bc5
 8001b88:	08001bc5 	.word	0x08001bc5
 8001b8c:	08001bc5 	.word	0x08001bc5
 8001b90:	08001bc5 	.word	0x08001bc5
 8001b94:	08001bc5 	.word	0x08001bc5
 8001b98:	08001bc5 	.word	0x08001bc5
 8001b9c:	08001ba1 	.word	0x08001ba1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d913      	bls.n	8001bce <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001baa:	e010      	b.n	8001bce <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	2b07      	cmp	r3, #7
 8001bb0:	d90f      	bls.n	8001bd2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001bb6:	e00c      	b.n	8001bd2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	2b0f      	cmp	r3, #15
 8001bbc:	d90b      	bls.n	8001bd6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001bc2:	e008      	b.n	8001bd6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8001bc8:	e006      	b.n	8001bd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001bca:	bf00      	nop
 8001bcc:	e004      	b.n	8001bd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001bce:	bf00      	nop
 8001bd0:	e002      	b.n	8001bd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001bd2:	bf00      	nop
 8001bd4:	e000      	b.n	8001bd8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001bd6:	bf00      	nop
  }
  if (status == HAL_OK)
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10d      	bne.n	8001bfa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 0118 	bic.w	r1, r3, #24
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	371c      	adds	r7, #28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e039      	b.n	8001c8e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe fd2e 	bl	8000690 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c58:	f023 0107 	bic.w	r1, r3, #7
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_DMA2D_Init+0x90>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68d1      	ldr	r1, [r2, #12]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	430b      	orrs	r3, r1
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	ffffc000 	.word	0xffffc000

08001c9c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d026      	beq.n	8001d0c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d021      	beq.n	8001d0c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2204      	movs	r2, #4
 8001cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d026      	beq.n	8001d64 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d021      	beq.n	8001d64 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d2e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2220      	movs	r2, #32
 8001d36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3c:	f043 0202 	orr.w	r2, r3, #2
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2204      	movs	r2, #4
 8001d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d026      	beq.n	8001dbc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d021      	beq.n	8001dbc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d86:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d94:	f043 0204 	orr.w	r2, r3, #4
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2204      	movs	r2, #4
 8001da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d013      	beq.n	8001dee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00e      	beq.n	8001dee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dde:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2204      	movs	r2, #4
 8001de6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f853 	bl	8001e94 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d024      	beq.n	8001e42 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01f      	beq.n	8001e42 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e10:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2202      	movs	r2, #2
 8001e18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01f      	beq.n	8001e8c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01a      	beq.n	8001e8c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e64:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2210      	movs	r2, #16
 8001e6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f80e 	bl	8001ea8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_DMA2D_ConfigLayer+0x20>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e079      	b.n	8001fd0 <HAL_DMA2D_ConfigLayer+0x114>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	3318      	adds	r3, #24
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	041b      	lsls	r3, r3, #16
 8001f02:	4313      	orrs	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001f06:	4b35      	ldr	r3, [pc, #212]	; (8001fdc <HAL_DMA2D_ConfigLayer+0x120>)
 8001f08:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b0a      	cmp	r3, #10
 8001f10:	d003      	beq.n	8001f1a <HAL_DMA2D_ConfigLayer+0x5e>
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b09      	cmp	r3, #9
 8001f18:	d107      	bne.n	8001f2a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	e005      	b.n	8001f36 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	061b      	lsls	r3, r3, #24
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d120      	bne.n	8001f7e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	ea02 0103 	and.w	r1, r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b0a      	cmp	r3, #10
 8001f64:	d003      	beq.n	8001f6e <HAL_DMA2D_ConfigLayer+0xb2>
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b09      	cmp	r3, #9
 8001f6c:	d127      	bne.n	8001fbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f7c:	e01f      	b.n	8001fbe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	69da      	ldr	r2, [r3, #28]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	ea02 0103 	and.w	r1, r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b0a      	cmp	r3, #10
 8001fa6:	d003      	beq.n	8001fb0 <HAL_DMA2D_ConfigLayer+0xf4>
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b09      	cmp	r3, #9
 8001fae:	d106      	bne.n	8001fbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001fbc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	ff03000f 	.word	0xff03000f

08001fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e175      	b.n	80022ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002000:	2201      	movs	r2, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	f040 8164 	bne.w	80022e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d00b      	beq.n	800203e <HAL_GPIO_Init+0x5e>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d007      	beq.n	800203e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002032:	2b11      	cmp	r3, #17
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b12      	cmp	r3, #18
 800203c:	d130      	bne.n	80020a0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 0201 	and.w	r2, r3, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x100>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b12      	cmp	r3, #18
 80020de:	d123      	bne.n	8002128 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	08da      	lsrs	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3208      	adds	r2, #8
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	69b9      	ldr	r1, [r7, #24]
 8002124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0203 	and.w	r2, r3, #3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80be 	beq.w	80022e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	4b66      	ldr	r3, [pc, #408]	; (8002304 <HAL_GPIO_Init+0x324>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a65      	ldr	r2, [pc, #404]	; (8002304 <HAL_GPIO_Init+0x324>)
 8002170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b63      	ldr	r3, [pc, #396]	; (8002304 <HAL_GPIO_Init+0x324>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002182:	4a61      	ldr	r2, [pc, #388]	; (8002308 <HAL_GPIO_Init+0x328>)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	220f      	movs	r2, #15
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_GPIO_Init+0x32c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d037      	beq.n	800221e <HAL_GPIO_Init+0x23e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a57      	ldr	r2, [pc, #348]	; (8002310 <HAL_GPIO_Init+0x330>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d031      	beq.n	800221a <HAL_GPIO_Init+0x23a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a56      	ldr	r2, [pc, #344]	; (8002314 <HAL_GPIO_Init+0x334>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d02b      	beq.n	8002216 <HAL_GPIO_Init+0x236>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a55      	ldr	r2, [pc, #340]	; (8002318 <HAL_GPIO_Init+0x338>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d025      	beq.n	8002212 <HAL_GPIO_Init+0x232>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a54      	ldr	r2, [pc, #336]	; (800231c <HAL_GPIO_Init+0x33c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01f      	beq.n	800220e <HAL_GPIO_Init+0x22e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a53      	ldr	r2, [pc, #332]	; (8002320 <HAL_GPIO_Init+0x340>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d019      	beq.n	800220a <HAL_GPIO_Init+0x22a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a52      	ldr	r2, [pc, #328]	; (8002324 <HAL_GPIO_Init+0x344>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d013      	beq.n	8002206 <HAL_GPIO_Init+0x226>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a51      	ldr	r2, [pc, #324]	; (8002328 <HAL_GPIO_Init+0x348>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00d      	beq.n	8002202 <HAL_GPIO_Init+0x222>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a50      	ldr	r2, [pc, #320]	; (800232c <HAL_GPIO_Init+0x34c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <HAL_GPIO_Init+0x21e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4f      	ldr	r2, [pc, #316]	; (8002330 <HAL_GPIO_Init+0x350>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_GPIO_Init+0x21a>
 80021f6:	2309      	movs	r3, #9
 80021f8:	e012      	b.n	8002220 <HAL_GPIO_Init+0x240>
 80021fa:	230a      	movs	r3, #10
 80021fc:	e010      	b.n	8002220 <HAL_GPIO_Init+0x240>
 80021fe:	2308      	movs	r3, #8
 8002200:	e00e      	b.n	8002220 <HAL_GPIO_Init+0x240>
 8002202:	2307      	movs	r3, #7
 8002204:	e00c      	b.n	8002220 <HAL_GPIO_Init+0x240>
 8002206:	2306      	movs	r3, #6
 8002208:	e00a      	b.n	8002220 <HAL_GPIO_Init+0x240>
 800220a:	2305      	movs	r3, #5
 800220c:	e008      	b.n	8002220 <HAL_GPIO_Init+0x240>
 800220e:	2304      	movs	r3, #4
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x240>
 8002212:	2303      	movs	r3, #3
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x240>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x240>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x240>
 800221e:	2300      	movs	r3, #0
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f002 0203 	and.w	r2, r2, #3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002230:	4935      	ldr	r1, [pc, #212]	; (8002308 <HAL_GPIO_Init+0x328>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <HAL_GPIO_Init+0x354>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002262:	4a34      	ldr	r2, [pc, #208]	; (8002334 <HAL_GPIO_Init+0x354>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002268:	4b32      	ldr	r3, [pc, #200]	; (8002334 <HAL_GPIO_Init+0x354>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800228c:	4a29      	ldr	r2, [pc, #164]	; (8002334 <HAL_GPIO_Init+0x354>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002292:	4b28      	ldr	r3, [pc, #160]	; (8002334 <HAL_GPIO_Init+0x354>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022b6:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <HAL_GPIO_Init+0x354>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_GPIO_Init+0x354>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e0:	4a14      	ldr	r2, [pc, #80]	; (8002334 <HAL_GPIO_Init+0x354>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	f67f ae86 	bls.w	8002000 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40013800 	.word	0x40013800
 800230c:	40020000 	.word	0x40020000
 8002310:	40020400 	.word	0x40020400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40021000 	.word	0x40021000
 8002320:	40021400 	.word	0x40021400
 8002324:	40021800 	.word	0x40021800
 8002328:	40021c00 	.word	0x40021c00
 800232c:	40022000 	.word	0x40022000
 8002330:	40022400 	.word	0x40022400
 8002334:	40013c00 	.word	0x40013c00

08002338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
 8002344:	4613      	mov	r3, r2
 8002346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002348:	787b      	ldrb	r3, [r7, #1]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002354:	e003      	b.n	800235e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002356:	887b      	ldrh	r3, [r7, #2]
 8002358:	041a      	lsls	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	619a      	str	r2, [r3, #24]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e07f      	b.n	800247e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe fbfe 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2224      	movs	r2, #36	; 0x24
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d107      	bne.n	80023e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	e006      	b.n	80023f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d104      	bne.n	8002406 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002404:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_I2C_Init+0x11c>)
 8002412:	430b      	orrs	r3, r1
 8002414:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002424:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	ea42 0103 	orr.w	r1, r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	021a      	lsls	r2, r3, #8
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69d9      	ldr	r1, [r3, #28]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	02008000 	.word	0x02008000

0800248c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d138      	bne.n	8002514 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e032      	b.n	8002516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2224      	movs	r2, #36	; 0x24
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e000      	b.n	8002516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002514:	2302      	movs	r3, #2
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b20      	cmp	r3, #32
 8002536:	d139      	bne.n	80025ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002542:	2302      	movs	r3, #2
 8002544:	e033      	b.n	80025ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2224      	movs	r2, #36	; 0x24
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002574:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e0bf      	b.n	800274e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe fbd0 	bl	8000d88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80025fe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6999      	ldr	r1, [r3, #24]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002614:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6899      	ldr	r1, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b4a      	ldr	r3, [pc, #296]	; (8002758 <HAL_LTDC_Init+0x19c>)
 8002630:	400b      	ands	r3, r1
 8002632:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6899      	ldr	r1, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68d9      	ldr	r1, [r3, #12]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b3e      	ldr	r3, [pc, #248]	; (8002758 <HAL_LTDC_Init+0x19c>)
 800265e:	400b      	ands	r3, r1
 8002660:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	041b      	lsls	r3, r3, #16
 8002668:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68d9      	ldr	r1, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1a      	ldr	r2, [r3, #32]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6919      	ldr	r1, [r3, #16]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b33      	ldr	r3, [pc, #204]	; (8002758 <HAL_LTDC_Init+0x19c>)
 800268c:	400b      	ands	r3, r1
 800268e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6919      	ldr	r1, [r3, #16]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6959      	ldr	r1, [r3, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b27      	ldr	r3, [pc, #156]	; (8002758 <HAL_LTDC_Init+0x19c>)
 80026ba:	400b      	ands	r3, r1
 80026bc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	041b      	lsls	r3, r3, #16
 80026c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6959      	ldr	r1, [r3, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80026fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0206 	orr.w	r2, r2, #6
 800272a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	f000f800 	.word	0xf000f800

0800275c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002772:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	d023      	beq.n	80027c6 <HAL_LTDC_IRQHandler+0x6a>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01e      	beq.n	80027c6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0204 	bic.w	r2, r2, #4
 8002796:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2204      	movs	r2, #4
 800279e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027a6:	f043 0201 	orr.w	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2204      	movs	r2, #4
 80027b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f86f 	bl	80028a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d023      	beq.n	8002818 <HAL_LTDC_IRQHandler+0xbc>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01e      	beq.n	8002818 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0202 	bic.w	r2, r2, #2
 80027e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2202      	movs	r2, #2
 80027f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027f8:	f043 0202 	orr.w	r2, r3, #2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2204      	movs	r2, #4
 8002806:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f846 	bl	80028a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01b      	beq.n	800285a <HAL_LTDC_IRQHandler+0xfe>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d016      	beq.n	800285a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2201      	movs	r2, #1
 8002842:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f009 ff83 	bl	800c760 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <HAL_LTDC_IRQHandler+0x140>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d016      	beq.n	800289c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0208 	bic.w	r2, r2, #8
 800287c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2208      	movs	r2, #8
 8002884:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f80e 	bl	80028b8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80028cc:	b5b0      	push	{r4, r5, r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_LTDC_ConfigLayer+0x1a>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e02c      	b.n	8002940 <HAL_LTDC_ConfigLayer+0x74>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2202      	movs	r2, #2
 80028f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2134      	movs	r1, #52	; 0x34
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4614      	mov	r4, r2
 800290a:	461d      	mov	r5, r3
 800290c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002918:	682b      	ldr	r3, [r5, #0]
 800291a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f849 	bl	80029b8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2201      	movs	r2, #1
 800292c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bdb0      	pop	{r4, r5, r7, pc}

08002948 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_LTDC_ProgramLineEvent+0x18>
 800295c:	2302      	movs	r3, #2
 800295e:	e023      	b.n	80029a8 <HAL_LTDC_ProgramLineEvent+0x60>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8002980:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40016800 	.word	0x40016800

080029b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	0c1b      	lsrs	r3, r3, #16
 80029d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d4:	4413      	add	r3, r2
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	01db      	lsls	r3, r3, #7
 80029e4:	4413      	add	r3, r2
 80029e6:	3384      	adds	r3, #132	; 0x84
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	4611      	mov	r1, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	01d2      	lsls	r2, r2, #7
 80029f4:	440a      	add	r2, r1
 80029f6:	3284      	adds	r2, #132	; 0x84
 80029f8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80029fc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0e:	4413      	add	r3, r2
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4619      	mov	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	01db      	lsls	r3, r3, #7
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3384      	adds	r3, #132	; 0x84
 8002a20:	4619      	mov	r1, r3
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a36:	4413      	add	r3, r2
 8002a38:	041b      	lsls	r3, r3, #16
 8002a3a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	01db      	lsls	r3, r3, #7
 8002a46:	4413      	add	r3, r2
 8002a48:	3384      	adds	r3, #132	; 0x84
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	4611      	mov	r1, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	01d2      	lsls	r2, r2, #7
 8002a56:	440a      	add	r2, r1
 8002a58:	3284      	adds	r2, #132	; 0x84
 8002a5a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002a5e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a6e:	4413      	add	r3, r2
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4619      	mov	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	01db      	lsls	r3, r3, #7
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3384      	adds	r3, #132	; 0x84
 8002a80:	4619      	mov	r1, r3
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	01db      	lsls	r3, r3, #7
 8002a92:	4413      	add	r3, r2
 8002a94:	3384      	adds	r3, #132	; 0x84
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	01d2      	lsls	r2, r2, #7
 8002aa2:	440a      	add	r2, r1
 8002aa4:	3284      	adds	r2, #132	; 0x84
 8002aa6:	f023 0307 	bic.w	r3, r3, #7
 8002aaa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	01db      	lsls	r3, r3, #7
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3384      	adds	r3, #132	; 0x84
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	061b      	lsls	r3, r3, #24
 8002adc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	01db      	lsls	r3, r3, #7
 8002ae8:	4413      	add	r3, r2
 8002aea:	3384      	adds	r3, #132	; 0x84
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	01db      	lsls	r3, r3, #7
 8002af8:	4413      	add	r3, r2
 8002afa:	3384      	adds	r3, #132	; 0x84
 8002afc:	461a      	mov	r2, r3
 8002afe:	2300      	movs	r3, #0
 8002b00:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b08:	461a      	mov	r2, r3
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4619      	mov	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	01db      	lsls	r3, r3, #7
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3384      	adds	r3, #132	; 0x84
 8002b20:	4619      	mov	r1, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	01db      	lsls	r3, r3, #7
 8002b32:	4413      	add	r3, r2
 8002b34:	3384      	adds	r3, #132	; 0x84
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	01d2      	lsls	r2, r2, #7
 8002b42:	440a      	add	r2, r1
 8002b44:	3284      	adds	r2, #132	; 0x84
 8002b46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b4a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	01db      	lsls	r3, r3, #7
 8002b56:	4413      	add	r3, r2
 8002b58:	3384      	adds	r3, #132	; 0x84
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	01db      	lsls	r3, r3, #7
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3384      	adds	r3, #132	; 0x84
 8002b70:	69da      	ldr	r2, [r3, #28]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4619      	mov	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	01db      	lsls	r3, r3, #7
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3384      	adds	r3, #132	; 0x84
 8002b80:	4619      	mov	r1, r3
 8002b82:	4b58      	ldr	r3, [pc, #352]	; (8002ce4 <LTDC_SetConfig+0x32c>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	69da      	ldr	r2, [r3, #28]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	68f9      	ldr	r1, [r7, #12]
 8002b92:	6809      	ldr	r1, [r1, #0]
 8002b94:	4608      	mov	r0, r1
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	01c9      	lsls	r1, r1, #7
 8002b9a:	4401      	add	r1, r0
 8002b9c:	3184      	adds	r1, #132	; 0x84
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	01db      	lsls	r3, r3, #7
 8002bac:	4413      	add	r3, r2
 8002bae:	3384      	adds	r3, #132	; 0x84
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	01db      	lsls	r3, r3, #7
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3384      	adds	r3, #132	; 0x84
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	01db      	lsls	r3, r3, #7
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3384      	adds	r3, #132	; 0x84
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002be4:	2304      	movs	r3, #4
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	e01b      	b.n	8002c22 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d102      	bne.n	8002bf8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	e014      	b.n	8002c22 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d00b      	beq.n	8002c18 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d007      	beq.n	8002c18 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d003      	beq.n	8002c18 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002c14:	2b07      	cmp	r3, #7
 8002c16:	d102      	bne.n	8002c1e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	e001      	b.n	8002c22 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	01db      	lsls	r3, r3, #7
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3384      	adds	r3, #132	; 0x84
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	4611      	mov	r1, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	01d2      	lsls	r2, r2, #7
 8002c3c:	440a      	add	r2, r1
 8002c3e:	3284      	adds	r2, #132	; 0x84
 8002c40:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002c44:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	fb02 f303 	mul.w	r3, r2, r3
 8002c50:	041a      	lsls	r2, r3, #16
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	1acb      	subs	r3, r1, r3
 8002c5c:	69f9      	ldr	r1, [r7, #28]
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	3303      	adds	r3, #3
 8002c64:	68f9      	ldr	r1, [r7, #12]
 8002c66:	6809      	ldr	r1, [r1, #0]
 8002c68:	4608      	mov	r0, r1
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	01c9      	lsls	r1, r1, #7
 8002c6e:	4401      	add	r1, r0
 8002c70:	3184      	adds	r1, #132	; 0x84
 8002c72:	4313      	orrs	r3, r2
 8002c74:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	01db      	lsls	r3, r3, #7
 8002c80:	4413      	add	r3, r2
 8002c82:	3384      	adds	r3, #132	; 0x84
 8002c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	01db      	lsls	r3, r3, #7
 8002c90:	440b      	add	r3, r1
 8002c92:	3384      	adds	r3, #132	; 0x84
 8002c94:	4619      	mov	r1, r3
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <LTDC_SetConfig+0x330>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	01db      	lsls	r3, r3, #7
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3384      	adds	r3, #132	; 0x84
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	01db      	lsls	r3, r3, #7
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3384      	adds	r3, #132	; 0x84
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	01d2      	lsls	r2, r2, #7
 8002ccc:	440a      	add	r2, r1
 8002cce:	3284      	adds	r2, #132	; 0x84
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6013      	str	r3, [r2, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	3724      	adds	r7, #36	; 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	fffff8f8 	.word	0xfffff8f8
 8002ce8:	fffff800 	.word	0xfffff800

08002cec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf6:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a22      	ldr	r2, [pc, #136]	; (8002d84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d0e:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d1a:	f7fe fd21 	bl	8001760 <HAL_GetTick>
 8002d1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d20:	e009      	b.n	8002d36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d22:	f7fe fd1d 	bl	8001760 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d30:	d901      	bls.n	8002d36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e022      	b.n	8002d7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d42:	d1ee      	bne.n	8002d22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d44:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0f      	ldr	r2, [pc, #60]	; (8002d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d50:	f7fe fd06 	bl	8001760 <HAL_GetTick>
 8002d54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d56:	e009      	b.n	8002d6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d58:	f7fe fd02 	bl	8001760 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d66:	d901      	bls.n	8002d6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e007      	b.n	8002d7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d78:	d1ee      	bne.n	8002d58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40007000 	.word	0x40007000

08002d8c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7fe fce4 	bl	8001760 <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e067      	b.n	8002e74 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10b      	bne.n	8002dc8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7fe fa5b 	bl	8001274 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002dbe:	f241 3188 	movw	r1, #5000	; 0x1388
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f85e 	bl	8002e84 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	021a      	lsls	r2, r3, #8
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	2120      	movs	r1, #32
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f856 	bl	8002ea0 <QSPI_WaitFlagStateUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002df8:	7afb      	ldrb	r3, [r7, #11]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d135      	bne.n	8002e6a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_QSPI_Init+0xf0>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6852      	ldr	r2, [r2, #4]
 8002e0c:	0611      	lsls	r1, r2, #24
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68d2      	ldr	r2, [r2, #12]
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	69d2      	ldr	r2, [r2, #28]
 8002e18:	4311      	orrs	r1, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6a12      	ldr	r2, [r2, #32]
 8002e1e:	4311      	orrs	r1, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <HAL_QSPI_Init+0xf4>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6912      	ldr	r2, [r2, #16]
 8002e36:	0411      	lsls	r1, r2, #16
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6952      	ldr	r2, [r2, #20]
 8002e3c:	4311      	orrs	r1, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6992      	ldr	r2, [r2, #24]
 8002e42:	4311      	orrs	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002e72:	7afb      	ldrb	r3, [r7, #11]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	00ffff2f 	.word	0x00ffff2f
 8002e80:	ffe0f8fe 	.word	0xffe0f8fe

08002e84 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002eb0:	e01a      	b.n	8002ee8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d016      	beq.n	8002ee8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eba:	f7fe fc51 	bl	8001760 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10b      	bne.n	8002ee8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e00e      	b.n	8002f06 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf14      	ite	ne
 8002ef6:	2301      	movne	r3, #1
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d1d6      	bne.n	8002eb2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e291      	b.n	800344a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8087 	beq.w	8003042 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f34:	4b96      	ldr	r3, [pc, #600]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d00c      	beq.n	8002f5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f40:	4b93      	ldr	r3, [pc, #588]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d112      	bne.n	8002f72 <HAL_RCC_OscConfig+0x62>
 8002f4c:	4b90      	ldr	r3, [pc, #576]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f58:	d10b      	bne.n	8002f72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5a:	4b8d      	ldr	r3, [pc, #564]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d06c      	beq.n	8003040 <HAL_RCC_OscConfig+0x130>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d168      	bne.n	8003040 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e26b      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x7a>
 8002f7c:	4b84      	ldr	r3, [pc, #528]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a83      	ldr	r2, [pc, #524]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	e02e      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd8>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x9c>
 8002f92:	4b7f      	ldr	r3, [pc, #508]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7e      	ldr	r2, [pc, #504]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b7c      	ldr	r3, [pc, #496]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7b      	ldr	r2, [pc, #492]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e01d      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0xc0>
 8002fb6:	4b76      	ldr	r3, [pc, #472]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a75      	ldr	r2, [pc, #468]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b73      	ldr	r3, [pc, #460]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a72      	ldr	r2, [pc, #456]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd8>
 8002fd0:	4b6f      	ldr	r3, [pc, #444]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a6e      	ldr	r2, [pc, #440]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b6c      	ldr	r3, [pc, #432]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a6b      	ldr	r2, [pc, #428]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8002fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d013      	beq.n	8003018 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fbb6 	bl	8001760 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fe fbb2 	bl	8001760 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e21f      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b61      	ldr	r3, [pc, #388]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xe8>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fe fba2 	bl	8001760 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003020:	f7fe fb9e 	bl	8001760 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e20b      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003032:	4b57      	ldr	r3, [pc, #348]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x110>
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d069      	beq.n	8003122 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800304e:	4b50      	ldr	r3, [pc, #320]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305a:	4b4d      	ldr	r3, [pc, #308]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b08      	cmp	r3, #8
 8003064:	d11c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x190>
 8003066:	4b4a      	ldr	r3, [pc, #296]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_RCC_OscConfig+0x17a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e1df      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308a:	4b41      	ldr	r3, [pc, #260]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	493d      	ldr	r1, [pc, #244]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	e040      	b.n	8003122 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d023      	beq.n	80030f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a8:	4b39      	ldr	r3, [pc, #228]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a38      	ldr	r2, [pc, #224]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe fb54 	bl	8001760 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030bc:	f7fe fb50 	bl	8001760 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e1bd      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ce:	4b30      	ldr	r3, [pc, #192]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4929      	ldr	r1, [pc, #164]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]
 80030ee:	e018      	b.n	8003122 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f0:	4b27      	ldr	r3, [pc, #156]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a26      	ldr	r2, [pc, #152]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fe fb30 	bl	8001760 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003104:	f7fe fb2c 	bl	8001760 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e199      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003116:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d038      	beq.n	80031a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d019      	beq.n	800316a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8003138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313a:	4a15      	ldr	r2, [pc, #84]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003142:	f7fe fb0d 	bl	8001760 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314a:	f7fe fb09 	bl	8001760 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e176      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 800315e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x23a>
 8003168:	e01a      	b.n	80031a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 800316c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316e:	4a08      	ldr	r2, [pc, #32]	; (8003190 <HAL_RCC_OscConfig+0x280>)
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7fe faf3 	bl	8001760 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317e:	f7fe faef 	bl	8001760 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d903      	bls.n	8003194 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e15c      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
 8003190:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003194:	4b91      	ldr	r3, [pc, #580]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ee      	bne.n	800317e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80a4 	beq.w	80032f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ae:	4b8b      	ldr	r3, [pc, #556]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10d      	bne.n	80031d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ba:	4b88      	ldr	r3, [pc, #544]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	4a87      	ldr	r2, [pc, #540]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 80031c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c4:	6413      	str	r3, [r2, #64]	; 0x40
 80031c6:	4b85      	ldr	r3, [pc, #532]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d6:	4b82      	ldr	r3, [pc, #520]	; (80033e0 <HAL_RCC_OscConfig+0x4d0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d118      	bne.n	8003214 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031e2:	4b7f      	ldr	r3, [pc, #508]	; (80033e0 <HAL_RCC_OscConfig+0x4d0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a7e      	ldr	r2, [pc, #504]	; (80033e0 <HAL_RCC_OscConfig+0x4d0>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ee:	f7fe fab7 	bl	8001760 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f6:	f7fe fab3 	bl	8001760 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b64      	cmp	r3, #100	; 0x64
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e120      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003208:	4b75      	ldr	r3, [pc, #468]	; (80033e0 <HAL_RCC_OscConfig+0x4d0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d106      	bne.n	800322a <HAL_RCC_OscConfig+0x31a>
 800321c:	4b6f      	ldr	r3, [pc, #444]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	4a6e      	ldr	r2, [pc, #440]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6713      	str	r3, [r2, #112]	; 0x70
 8003228:	e02d      	b.n	8003286 <HAL_RCC_OscConfig+0x376>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0x33c>
 8003232:	4b6a      	ldr	r3, [pc, #424]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	4a69      	ldr	r2, [pc, #420]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	6713      	str	r3, [r2, #112]	; 0x70
 800323e:	4b67      	ldr	r3, [pc, #412]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003242:	4a66      	ldr	r2, [pc, #408]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003244:	f023 0304 	bic.w	r3, r3, #4
 8003248:	6713      	str	r3, [r2, #112]	; 0x70
 800324a:	e01c      	b.n	8003286 <HAL_RCC_OscConfig+0x376>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b05      	cmp	r3, #5
 8003252:	d10c      	bne.n	800326e <HAL_RCC_OscConfig+0x35e>
 8003254:	4b61      	ldr	r3, [pc, #388]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	4a60      	ldr	r2, [pc, #384]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 800325a:	f043 0304 	orr.w	r3, r3, #4
 800325e:	6713      	str	r3, [r2, #112]	; 0x70
 8003260:	4b5e      	ldr	r3, [pc, #376]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	4a5d      	ldr	r2, [pc, #372]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6713      	str	r3, [r2, #112]	; 0x70
 800326c:	e00b      	b.n	8003286 <HAL_RCC_OscConfig+0x376>
 800326e:	4b5b      	ldr	r3, [pc, #364]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a5a      	ldr	r2, [pc, #360]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	6713      	str	r3, [r2, #112]	; 0x70
 800327a:	4b58      	ldr	r3, [pc, #352]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	4a57      	ldr	r2, [pc, #348]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003280:	f023 0304 	bic.w	r3, r3, #4
 8003284:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d015      	beq.n	80032ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328e:	f7fe fa67 	bl	8001760 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003294:	e00a      	b.n	80032ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fe fa63 	bl	8001760 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e0ce      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ac:	4b4b      	ldr	r3, [pc, #300]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ee      	beq.n	8003296 <HAL_RCC_OscConfig+0x386>
 80032b8:	e014      	b.n	80032e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fe fa51 	bl	8001760 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fe fa4d 	bl	8001760 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0b8      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d8:	4b40      	ldr	r3, [pc, #256]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1ee      	bne.n	80032c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d105      	bne.n	80032f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ea:	4b3c      	ldr	r3, [pc, #240]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	4a3b      	ldr	r2, [pc, #236]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 80032f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80a4 	beq.w	8003448 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003300:	4b36      	ldr	r3, [pc, #216]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b08      	cmp	r3, #8
 800330a:	d06b      	beq.n	80033e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d149      	bne.n	80033a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003314:	4b31      	ldr	r3, [pc, #196]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a30      	ldr	r2, [pc, #192]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 800331a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800331e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003320:	f7fe fa1e 	bl	8001760 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003328:	f7fe fa1a 	bl	8001760 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e087      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333a:	4b28      	ldr	r3, [pc, #160]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	019b      	lsls	r3, r3, #6
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	3b01      	subs	r3, #1
 8003360:	041b      	lsls	r3, r3, #16
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	061b      	lsls	r3, r3, #24
 800336a:	4313      	orrs	r3, r2
 800336c:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 800336e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003372:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a18      	ldr	r2, [pc, #96]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 800337a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe f9ee 	bl	8001760 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe f9ea 	bl	8001760 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e057      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x478>
 80033a6:	e04f      	b.n	8003448 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0b      	ldr	r2, [pc, #44]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 80033ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe f9d4 	bl	8001760 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033bc:	f7fe f9d0 	bl	8001760 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e03d      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ce:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x4ac>
 80033da:	e035      	b.n	8003448 <HAL_RCC_OscConfig+0x538>
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_RCC_OscConfig+0x544>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d028      	beq.n	8003444 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d121      	bne.n	8003444 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d11a      	bne.n	8003444 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800341a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800341c:	4293      	cmp	r3, r2
 800341e:	d111      	bne.n	8003444 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	3b01      	subs	r3, #1
 800342e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d107      	bne.n	8003444 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800

08003458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0d0      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003470:	4b6a      	ldr	r3, [pc, #424]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d910      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b67      	ldr	r3, [pc, #412]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 020f 	bic.w	r2, r3, #15
 8003486:	4965      	ldr	r1, [pc, #404]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0b8      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d020      	beq.n	80034ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b8:	4b59      	ldr	r3, [pc, #356]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4a58      	ldr	r2, [pc, #352]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80034be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d0:	4b53      	ldr	r3, [pc, #332]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a52      	ldr	r2, [pc, #328]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80034d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	494d      	ldr	r1, [pc, #308]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d040      	beq.n	800357c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b47      	ldr	r3, [pc, #284]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d115      	bne.n	800353a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e07f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351a:	4b41      	ldr	r3, [pc, #260]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e073      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352a:	4b3d      	ldr	r3, [pc, #244]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e06b      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353a:	4b39      	ldr	r3, [pc, #228]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4936      	ldr	r1, [pc, #216]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	4313      	orrs	r3, r2
 800354a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800354c:	f7fe f908 	bl	8001760 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	e00a      	b.n	800356a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7fe f904 	bl	8001760 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e053      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 020c 	and.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	429a      	cmp	r2, r3
 800357a:	d1eb      	bne.n	8003554 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800357c:	4b27      	ldr	r3, [pc, #156]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d210      	bcs.n	80035ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 020f 	bic.w	r2, r3, #15
 8003592:	4922      	ldr	r1, [pc, #136]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e032      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4916      	ldr	r1, [pc, #88]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	490e      	ldr	r1, [pc, #56]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ea:	f000 f821 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035ee:	4602      	mov	r2, r0
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	490a      	ldr	r1, [pc, #40]	; (8003624 <HAL_RCC_ClockConfig+0x1cc>)
 80035fc:	5ccb      	ldrb	r3, [r1, r3]
 80035fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003602:	4a09      	ldr	r2, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x1d0>)
 8003604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_ClockConfig+0x1d4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd feea 	bl	80013e4 <HAL_InitTick>

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40023c00 	.word	0x40023c00
 8003620:	40023800 	.word	0x40023800
 8003624:	08020da8 	.word	0x08020da8
 8003628:	20000004 	.word	0x20000004
 800362c:	20000008 	.word	0x20000008

08003630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	b5b0      	push	{r4, r5, r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003636:	2100      	movs	r1, #0
 8003638:	6079      	str	r1, [r7, #4]
 800363a:	2100      	movs	r1, #0
 800363c:	60f9      	str	r1, [r7, #12]
 800363e:	2100      	movs	r1, #0
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003642:	2100      	movs	r1, #0
 8003644:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003646:	4952      	ldr	r1, [pc, #328]	; (8003790 <HAL_RCC_GetSysClockFreq+0x160>)
 8003648:	6889      	ldr	r1, [r1, #8]
 800364a:	f001 010c 	and.w	r1, r1, #12
 800364e:	2908      	cmp	r1, #8
 8003650:	d00d      	beq.n	800366e <HAL_RCC_GetSysClockFreq+0x3e>
 8003652:	2908      	cmp	r1, #8
 8003654:	f200 8094 	bhi.w	8003780 <HAL_RCC_GetSysClockFreq+0x150>
 8003658:	2900      	cmp	r1, #0
 800365a:	d002      	beq.n	8003662 <HAL_RCC_GetSysClockFreq+0x32>
 800365c:	2904      	cmp	r1, #4
 800365e:	d003      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x38>
 8003660:	e08e      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003662:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <HAL_RCC_GetSysClockFreq+0x164>)
 8003664:	60bb      	str	r3, [r7, #8]
      break;
 8003666:	e08e      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003668:	4b4b      	ldr	r3, [pc, #300]	; (8003798 <HAL_RCC_GetSysClockFreq+0x168>)
 800366a:	60bb      	str	r3, [r7, #8]
      break;
 800366c:	e08b      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800366e:	4948      	ldr	r1, [pc, #288]	; (8003790 <HAL_RCC_GetSysClockFreq+0x160>)
 8003670:	6849      	ldr	r1, [r1, #4]
 8003672:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003676:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003678:	4945      	ldr	r1, [pc, #276]	; (8003790 <HAL_RCC_GetSysClockFreq+0x160>)
 800367a:	6849      	ldr	r1, [r1, #4]
 800367c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003680:	2900      	cmp	r1, #0
 8003682:	d024      	beq.n	80036ce <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003684:	4942      	ldr	r1, [pc, #264]	; (8003790 <HAL_RCC_GetSysClockFreq+0x160>)
 8003686:	6849      	ldr	r1, [r1, #4]
 8003688:	0989      	lsrs	r1, r1, #6
 800368a:	4608      	mov	r0, r1
 800368c:	f04f 0100 	mov.w	r1, #0
 8003690:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003694:	f04f 0500 	mov.w	r5, #0
 8003698:	ea00 0204 	and.w	r2, r0, r4
 800369c:	ea01 0305 	and.w	r3, r1, r5
 80036a0:	493d      	ldr	r1, [pc, #244]	; (8003798 <HAL_RCC_GetSysClockFreq+0x168>)
 80036a2:	fb01 f003 	mul.w	r0, r1, r3
 80036a6:	2100      	movs	r1, #0
 80036a8:	fb01 f102 	mul.w	r1, r1, r2
 80036ac:	1844      	adds	r4, r0, r1
 80036ae:	493a      	ldr	r1, [pc, #232]	; (8003798 <HAL_RCC_GetSysClockFreq+0x168>)
 80036b0:	fba2 0101 	umull	r0, r1, r2, r1
 80036b4:	1863      	adds	r3, r4, r1
 80036b6:	4619      	mov	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	461a      	mov	r2, r3
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	f7fc fdf6 	bl	80002b0 <__aeabi_uldivmod>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4613      	mov	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	e04a      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ce:	4b30      	ldr	r3, [pc, #192]	; (8003790 <HAL_RCC_GetSysClockFreq+0x160>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	099b      	lsrs	r3, r3, #6
 80036d4:	461a      	mov	r2, r3
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036de:	f04f 0100 	mov.w	r1, #0
 80036e2:	ea02 0400 	and.w	r4, r2, r0
 80036e6:	ea03 0501 	and.w	r5, r3, r1
 80036ea:	4620      	mov	r0, r4
 80036ec:	4629      	mov	r1, r5
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	014b      	lsls	r3, r1, #5
 80036f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036fc:	0142      	lsls	r2, r0, #5
 80036fe:	4610      	mov	r0, r2
 8003700:	4619      	mov	r1, r3
 8003702:	1b00      	subs	r0, r0, r4
 8003704:	eb61 0105 	sbc.w	r1, r1, r5
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	018b      	lsls	r3, r1, #6
 8003712:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003716:	0182      	lsls	r2, r0, #6
 8003718:	1a12      	subs	r2, r2, r0
 800371a:	eb63 0301 	sbc.w	r3, r3, r1
 800371e:	f04f 0000 	mov.w	r0, #0
 8003722:	f04f 0100 	mov.w	r1, #0
 8003726:	00d9      	lsls	r1, r3, #3
 8003728:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800372c:	00d0      	lsls	r0, r2, #3
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	1912      	adds	r2, r2, r4
 8003734:	eb45 0303 	adc.w	r3, r5, r3
 8003738:	f04f 0000 	mov.w	r0, #0
 800373c:	f04f 0100 	mov.w	r1, #0
 8003740:	0299      	lsls	r1, r3, #10
 8003742:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003746:	0290      	lsls	r0, r2, #10
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	461a      	mov	r2, r3
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	f7fc fdaa 	bl	80002b0 <__aeabi_uldivmod>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4613      	mov	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <HAL_RCC_GetSysClockFreq+0x160>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	0c1b      	lsrs	r3, r3, #16
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	3301      	adds	r3, #1
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	60bb      	str	r3, [r7, #8]
      break;
 800377e:	e002      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <HAL_RCC_GetSysClockFreq+0x164>)
 8003782:	60bb      	str	r3, [r7, #8]
      break;
 8003784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003786:	68bb      	ldr	r3, [r7, #8]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bdb0      	pop	{r4, r5, r7, pc}
 8003790:	40023800 	.word	0x40023800
 8003794:	00f42400 	.word	0x00f42400
 8003798:	017d7840 	.word	0x017d7840

0800379c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037a2:	681b      	ldr	r3, [r3, #0]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000004 	.word	0x20000004

080037b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037b8:	f7ff fff0 	bl	800379c <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	0a9b      	lsrs	r3, r3, #10
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4903      	ldr	r1, [pc, #12]	; (80037d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40023800 	.word	0x40023800
 80037d8:	08020db8 	.word	0x08020db8

080037dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	220f      	movs	r2, #15
 80037ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0203 	and.w	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	08db      	lsrs	r3, r3, #3
 8003816:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800381e:	4b07      	ldr	r3, [pc, #28]	; (800383c <HAL_RCC_GetClockConfig+0x60>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 020f 	and.w	r2, r3, #15
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	601a      	str	r2, [r3, #0]
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800
 800383c:	40023c00 	.word	0x40023c00

08003840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d012      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003868:	4b69      	ldr	r3, [pc, #420]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a68      	ldr	r2, [pc, #416]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003872:	6093      	str	r3, [r2, #8]
 8003874:	4b66      	ldr	r3, [pc, #408]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387c:	4964      	ldr	r1, [pc, #400]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800388a:	2301      	movs	r3, #1
 800388c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d017      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800389a:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	4959      	ldr	r1, [pc, #356]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b8:	d101      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038ba:	2301      	movs	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d017      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038d6:	4b4e      	ldr	r3, [pc, #312]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	494a      	ldr	r1, [pc, #296]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038f4:	d101      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038f6:	2301      	movs	r3, #1
 80038f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003902:	2301      	movs	r3, #1
 8003904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 808b 	beq.w	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003924:	4b3a      	ldr	r3, [pc, #232]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	4a39      	ldr	r2, [pc, #228]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392e:	6413      	str	r3, [r2, #64]	; 0x40
 8003930:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800393c:	4b35      	ldr	r3, [pc, #212]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a34      	ldr	r2, [pc, #208]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003948:	f7fd ff0a 	bl	8001760 <HAL_GetTick>
 800394c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003950:	f7fd ff06 	bl	8001760 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e357      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003962:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f0      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800396e:	4b28      	ldr	r3, [pc, #160]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003976:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d035      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	429a      	cmp	r2, r3
 800398a:	d02e      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800398c:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003994:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003996:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039a2:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039ae:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039b4:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d114      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd fece 	bl	8001760 <HAL_GetTick>
 80039c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c6:	e00a      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fd feca 	bl	8001760 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e319      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039de:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0ee      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039f6:	d111      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a04:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a06:	400b      	ands	r3, r1
 8003a08:	4901      	ldr	r1, [pc, #4]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40007000 	.word	0x40007000
 8003a18:	0ffffcff 	.word	0x0ffffcff
 8003a1c:	4bb1      	ldr	r3, [pc, #708]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4ab0      	ldr	r2, [pc, #704]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a26:	6093      	str	r3, [r2, #8]
 8003a28:	4bae      	ldr	r3, [pc, #696]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a34:	49ab      	ldr	r1, [pc, #684]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d010      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a46:	4ba7      	ldr	r3, [pc, #668]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a4c:	4aa5      	ldr	r2, [pc, #660]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a56:	4ba3      	ldr	r3, [pc, #652]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	49a0      	ldr	r1, [pc, #640]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a74:	4b9b      	ldr	r3, [pc, #620]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a82:	4998      	ldr	r1, [pc, #608]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a96:	4b93      	ldr	r3, [pc, #588]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa4:	498f      	ldr	r1, [pc, #572]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ab8:	4b8a      	ldr	r3, [pc, #552]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac6:	4987      	ldr	r1, [pc, #540]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ada:	4b82      	ldr	r3, [pc, #520]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	497e      	ldr	r1, [pc, #504]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003afc:	4b79      	ldr	r3, [pc, #484]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f023 0203 	bic.w	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	4976      	ldr	r1, [pc, #472]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b1e:	4b71      	ldr	r3, [pc, #452]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f023 020c 	bic.w	r2, r3, #12
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2c:	496d      	ldr	r1, [pc, #436]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b40:	4b68      	ldr	r3, [pc, #416]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	4965      	ldr	r1, [pc, #404]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b62:	4b60      	ldr	r3, [pc, #384]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b68:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b70:	495c      	ldr	r1, [pc, #368]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b84:	4b57      	ldr	r3, [pc, #348]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	4954      	ldr	r1, [pc, #336]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ba6:	4b4f      	ldr	r3, [pc, #316]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	494b      	ldr	r1, [pc, #300]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bc8:	4b46      	ldr	r3, [pc, #280]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd6:	4943      	ldr	r1, [pc, #268]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bea:	4b3e      	ldr	r3, [pc, #248]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf8:	493a      	ldr	r1, [pc, #232]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c0c:	4b35      	ldr	r3, [pc, #212]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c1a:	4932      	ldr	r1, [pc, #200]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d011      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c34:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c3c:	4929      	ldr	r1, [pc, #164]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7c:	4919      	ldr	r1, [pc, #100]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00b      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c90:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca0:	4910      	ldr	r1, [pc, #64]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d006      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80d9 	beq.w	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc8:	f7fd fd4a 	bl	8001760 <HAL_GetTick>
 8003ccc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cd0:	f7fd fd46 	bl	8001760 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d904      	bls.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e197      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ce8:	4b6c      	ldr	r3, [pc, #432]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1ed      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d021      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d11d      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d08:	4b64      	ldr	r3, [pc, #400]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d0e:	0c1b      	lsrs	r3, r3, #16
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d16:	4b61      	ldr	r3, [pc, #388]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d1c:	0e1b      	lsrs	r3, r3, #24
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	019a      	lsls	r2, r3, #6
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	041b      	lsls	r3, r3, #16
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	061b      	lsls	r3, r3, #24
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	071b      	lsls	r3, r3, #28
 8003d3c:	4957      	ldr	r1, [pc, #348]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d004      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d02e      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6e:	d129      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d70:	4b4a      	ldr	r3, [pc, #296]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d76:	0c1b      	lsrs	r3, r3, #16
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d7e:	4b47      	ldr	r3, [pc, #284]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d84:	0f1b      	lsrs	r3, r3, #28
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	019a      	lsls	r2, r3, #6
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	061b      	lsls	r3, r3, #24
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	071b      	lsls	r3, r3, #28
 8003da4:	493d      	ldr	r1, [pc, #244]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dac:	4b3b      	ldr	r3, [pc, #236]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003db2:	f023 021f 	bic.w	r2, r3, #31
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	4937      	ldr	r1, [pc, #220]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01d      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dd0:	4b32      	ldr	r3, [pc, #200]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd6:	0e1b      	lsrs	r3, r3, #24
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dde:	4b2f      	ldr	r3, [pc, #188]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de4:	0f1b      	lsrs	r3, r3, #28
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	019a      	lsls	r2, r3, #6
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	071b      	lsls	r3, r3, #28
 8003e04:	4925      	ldr	r1, [pc, #148]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d011      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	019a      	lsls	r2, r3, #6
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	041b      	lsls	r3, r3, #16
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	061b      	lsls	r3, r3, #24
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	071b      	lsls	r3, r3, #28
 8003e34:	4919      	ldr	r1, [pc, #100]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e3c:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a16      	ldr	r2, [pc, #88]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e48:	f7fd fc8a 	bl	8001760 <HAL_GetTick>
 8003e4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e50:	f7fd fc86 	bl	8001760 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b64      	cmp	r3, #100	; 0x64
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0d7      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e62:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	f040 80cd 	bne.w	8004010 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e82:	f7fd fc6d 	bl	8001760 <HAL_GetTick>
 8003e86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e8a:	f7fd fc69 	bl	8001760 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b64      	cmp	r3, #100	; 0x64
 8003e96:	d903      	bls.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e0ba      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003e9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ea0:	4b5e      	ldr	r3, [pc, #376]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eac:	d0ed      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d02e      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d12a      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ed6:	4b51      	ldr	r3, [pc, #324]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003edc:	0c1b      	lsrs	r3, r3, #16
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ee4:	4b4d      	ldr	r3, [pc, #308]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	0f1b      	lsrs	r3, r3, #28
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	019a      	lsls	r2, r3, #6
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	061b      	lsls	r3, r3, #24
 8003f04:	431a      	orrs	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	071b      	lsls	r3, r3, #28
 8003f0a:	4944      	ldr	r1, [pc, #272]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f12:	4b42      	ldr	r3, [pc, #264]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	3b01      	subs	r3, #1
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	493d      	ldr	r1, [pc, #244]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d022      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f40:	d11d      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f42:	4b36      	ldr	r3, [pc, #216]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	0e1b      	lsrs	r3, r3, #24
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f50:	4b32      	ldr	r3, [pc, #200]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	0f1b      	lsrs	r3, r3, #28
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	019a      	lsls	r2, r3, #6
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	041b      	lsls	r3, r3, #16
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	061b      	lsls	r3, r3, #24
 8003f70:	431a      	orrs	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	071b      	lsls	r3, r3, #28
 8003f76:	4929      	ldr	r1, [pc, #164]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d028      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f8a:	4b24      	ldr	r3, [pc, #144]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	0e1b      	lsrs	r3, r3, #24
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f98:	4b20      	ldr	r3, [pc, #128]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	0c1b      	lsrs	r3, r3, #16
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	019a      	lsls	r2, r3, #6
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	041b      	lsls	r3, r3, #16
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	071b      	lsls	r3, r3, #28
 8003fbe:	4917      	ldr	r1, [pc, #92]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003fc6:	4b15      	ldr	r3, [pc, #84]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	4911      	ldr	r1, [pc, #68]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a0e      	ldr	r2, [pc, #56]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe8:	f7fd fbba 	bl	8001760 <HAL_GetTick>
 8003fec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ff0:	f7fd fbb6 	bl	8001760 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e007      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800400a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800400e:	d1ef      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3720      	adds	r7, #32
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800

08004020 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e025      	b.n	8004080 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7fc fc27 	bl	800089c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2202      	movs	r2, #2
 8004052:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3304      	adds	r3, #4
 800405e:	4619      	mov	r1, r3
 8004060:	4610      	mov	r0, r2
 8004062:	f000 faf1 	bl	8004648 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	461a      	mov	r2, r3
 8004070:	6839      	ldr	r1, [r7, #0]
 8004072:	f000 fb5b 	bl	800472c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e049      	b.n	800412e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f841 	bl	8004136 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3304      	adds	r3, #4
 80040c4:	4619      	mov	r1, r3
 80040c6:	4610      	mov	r0, r2
 80040c8:	f000 fa00 	bl	80044cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d001      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e054      	b.n	800420e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a26      	ldr	r2, [pc, #152]	; (800421c <HAL_TIM_Base_Start_IT+0xd0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d022      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x80>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418e:	d01d      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x80>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a22      	ldr	r2, [pc, #136]	; (8004220 <HAL_TIM_Base_Start_IT+0xd4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d018      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x80>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a21      	ldr	r2, [pc, #132]	; (8004224 <HAL_TIM_Base_Start_IT+0xd8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d013      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x80>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <HAL_TIM_Base_Start_IT+0xdc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00e      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x80>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1e      	ldr	r2, [pc, #120]	; (800422c <HAL_TIM_Base_Start_IT+0xe0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d009      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x80>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <HAL_TIM_Base_Start_IT+0xe4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x80>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <HAL_TIM_Base_Start_IT+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d115      	bne.n	80041f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	4b19      	ldr	r3, [pc, #100]	; (8004238 <HAL_TIM_Base_Start_IT+0xec>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b06      	cmp	r3, #6
 80041dc:	d015      	beq.n	800420a <HAL_TIM_Base_Start_IT+0xbe>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e4:	d011      	beq.n	800420a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0201 	orr.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f6:	e008      	b.n	800420a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e000      	b.n	800420c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800
 8004228:	40000c00 	.word	0x40000c00
 800422c:	40010400 	.word	0x40010400
 8004230:	40014000 	.word	0x40014000
 8004234:	40001800 	.word	0x40001800
 8004238:	00010007 	.word	0x00010007

0800423c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b02      	cmp	r3, #2
 8004250:	d122      	bne.n	8004298 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b02      	cmp	r3, #2
 800425e:	d11b      	bne.n	8004298 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0202 	mvn.w	r2, #2
 8004268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f905 	bl	800448e <HAL_TIM_IC_CaptureCallback>
 8004284:	e005      	b.n	8004292 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f8f7 	bl	800447a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f908 	bl	80044a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d122      	bne.n	80042ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d11b      	bne.n	80042ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0204 	mvn.w	r2, #4
 80042bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f8db 	bl	800448e <HAL_TIM_IC_CaptureCallback>
 80042d8:	e005      	b.n	80042e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f8cd 	bl	800447a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f8de 	bl	80044a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d122      	bne.n	8004340 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b08      	cmp	r3, #8
 8004306:	d11b      	bne.n	8004340 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0208 	mvn.w	r2, #8
 8004310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2204      	movs	r2, #4
 8004316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f8b1 	bl	800448e <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8a3 	bl	800447a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f8b4 	bl	80044a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b10      	cmp	r3, #16
 800434c:	d122      	bne.n	8004394 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b10      	cmp	r3, #16
 800435a:	d11b      	bne.n	8004394 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0210 	mvn.w	r2, #16
 8004364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2208      	movs	r2, #8
 800436a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f887 	bl	800448e <HAL_TIM_IC_CaptureCallback>
 8004380:	e005      	b.n	800438e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f879 	bl	800447a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f88a 	bl	80044a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d10e      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d107      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0201 	mvn.w	r2, #1
 80043b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fc ff16 	bl	80011ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ca:	2b80      	cmp	r3, #128	; 0x80
 80043cc:	d10e      	bne.n	80043ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b80      	cmp	r3, #128	; 0x80
 80043da:	d107      	bne.n	80043ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f91a 	bl	8004620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fa:	d10e      	bne.n	800441a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004406:	2b80      	cmp	r3, #128	; 0x80
 8004408:	d107      	bne.n	800441a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f90d 	bl	8004634 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004424:	2b40      	cmp	r3, #64	; 0x40
 8004426:	d10e      	bne.n	8004446 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b40      	cmp	r3, #64	; 0x40
 8004434:	d107      	bne.n	8004446 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800443e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f838 	bl	80044b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b20      	cmp	r3, #32
 8004452:	d10e      	bne.n	8004472 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b20      	cmp	r3, #32
 8004460:	d107      	bne.n	8004472 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f06f 0220 	mvn.w	r2, #32
 800446a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f8cd 	bl	800460c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a40      	ldr	r2, [pc, #256]	; (80045e0 <TIM_Base_SetConfig+0x114>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d013      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ea:	d00f      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a3d      	ldr	r2, [pc, #244]	; (80045e4 <TIM_Base_SetConfig+0x118>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00b      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a3c      	ldr	r2, [pc, #240]	; (80045e8 <TIM_Base_SetConfig+0x11c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d007      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a3b      	ldr	r2, [pc, #236]	; (80045ec <TIM_Base_SetConfig+0x120>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a3a      	ldr	r2, [pc, #232]	; (80045f0 <TIM_Base_SetConfig+0x124>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d108      	bne.n	800451e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2f      	ldr	r2, [pc, #188]	; (80045e0 <TIM_Base_SetConfig+0x114>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d02b      	beq.n	800457e <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452c:	d027      	beq.n	800457e <TIM_Base_SetConfig+0xb2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2c      	ldr	r2, [pc, #176]	; (80045e4 <TIM_Base_SetConfig+0x118>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d023      	beq.n	800457e <TIM_Base_SetConfig+0xb2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a2b      	ldr	r2, [pc, #172]	; (80045e8 <TIM_Base_SetConfig+0x11c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01f      	beq.n	800457e <TIM_Base_SetConfig+0xb2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a2a      	ldr	r2, [pc, #168]	; (80045ec <TIM_Base_SetConfig+0x120>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01b      	beq.n	800457e <TIM_Base_SetConfig+0xb2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a29      	ldr	r2, [pc, #164]	; (80045f0 <TIM_Base_SetConfig+0x124>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d017      	beq.n	800457e <TIM_Base_SetConfig+0xb2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a28      	ldr	r2, [pc, #160]	; (80045f4 <TIM_Base_SetConfig+0x128>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <TIM_Base_SetConfig+0xb2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <TIM_Base_SetConfig+0x12c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00f      	beq.n	800457e <TIM_Base_SetConfig+0xb2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a26      	ldr	r2, [pc, #152]	; (80045fc <TIM_Base_SetConfig+0x130>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00b      	beq.n	800457e <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a25      	ldr	r2, [pc, #148]	; (8004600 <TIM_Base_SetConfig+0x134>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d007      	beq.n	800457e <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a24      	ldr	r2, [pc, #144]	; (8004604 <TIM_Base_SetConfig+0x138>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d003      	beq.n	800457e <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a23      	ldr	r2, [pc, #140]	; (8004608 <TIM_Base_SetConfig+0x13c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d108      	bne.n	8004590 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a0a      	ldr	r2, [pc, #40]	; (80045e0 <TIM_Base_SetConfig+0x114>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_Base_SetConfig+0xf8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a0c      	ldr	r2, [pc, #48]	; (80045f0 <TIM_Base_SetConfig+0x124>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d103      	bne.n	80045cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	615a      	str	r2, [r3, #20]
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40010400 	.word	0x40010400
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40014400 	.word	0x40014400
 80045fc:	40014800 	.word	0x40014800
 8004600:	40001800 	.word	0x40001800
 8004604:	40001c00 	.word	0x40001c00
 8004608:	40002000 	.word	0x40002000

0800460c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d027      	beq.n	80046b2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4b2f      	ldr	r3, [pc, #188]	; (8004728 <FMC_SDRAM_Init+0xe0>)
 800466c:	4013      	ands	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004678:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800467e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8004684:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800468a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8004690:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8004696:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800469c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80046a2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	e032      	b.n	8004718 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046be:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80046c8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80046ce:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	4b12      	ldr	r3, [pc, #72]	; (8004728 <FMC_SDRAM_Init+0xe0>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80046ec:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80046f2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80046f8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80046fe:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8004704:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	4313      	orrs	r3, r2
 800470a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	ffff8000 	.word	0xffff8000

0800472c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d02e      	beq.n	80047a4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004752:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	3b01      	subs	r3, #1
 8004760:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004762:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	3b01      	subs	r3, #1
 800476a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800476c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	3b01      	subs	r3, #1
 8004774:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004776:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	3b01      	subs	r3, #1
 800477e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8004780:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	3b01      	subs	r3, #1
 8004788:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800478a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	3b01      	subs	r3, #1
 8004792:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004794:	4313      	orrs	r3, r2
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	609a      	str	r2, [r3, #8]
 80047a2:	e039      	b.n	8004818 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <FMC_SDRAM_Timing_Init+0xfc>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	3b01      	subs	r3, #1
 80047c0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80047c2:	4313      	orrs	r3, r2
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80047d6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80047e6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80047f0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80047fa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	3b01      	subs	r3, #1
 8004802:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004804:	4313      	orrs	r3, r2
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	ff0f0fff 	.word	0xff0f0fff

0800482c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004830:	bf00      	nop
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004842:	f3ef 8305 	mrs	r3, IPSR
 8004846:	60bb      	str	r3, [r7, #8]
  return(result);
 8004848:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10f      	bne.n	800486e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800484e:	f3ef 8310 	mrs	r3, PRIMASK
 8004852:	607b      	str	r3, [r7, #4]
  return(result);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d105      	bne.n	8004866 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800485a:	f3ef 8311 	mrs	r3, BASEPRI
 800485e:	603b      	str	r3, [r7, #0]
  return(result);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <osKernelInitialize+0x3a>
 8004866:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <osKernelInitialize+0x64>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d103      	bne.n	8004876 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800486e:	f06f 0305 	mvn.w	r3, #5
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e00c      	b.n	8004890 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004876:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <osKernelInitialize+0x64>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d105      	bne.n	800488a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800487e:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <osKernelInitialize+0x64>)
 8004880:	2201      	movs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	e002      	b.n	8004890 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800488a:	f04f 33ff 	mov.w	r3, #4294967295
 800488e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004890:	68fb      	ldr	r3, [r7, #12]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000120 	.word	0x20000120

080048a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048aa:	f3ef 8305 	mrs	r3, IPSR
 80048ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80048b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ba:	607b      	str	r3, [r7, #4]
  return(result);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d105      	bne.n	80048ce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048c2:	f3ef 8311 	mrs	r3, BASEPRI
 80048c6:	603b      	str	r3, [r7, #0]
  return(result);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <osKernelStart+0x3a>
 80048ce:	4b0f      	ldr	r3, [pc, #60]	; (800490c <osKernelStart+0x68>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d103      	bne.n	80048de <osKernelStart+0x3a>
    stat = osErrorISR;
 80048d6:	f06f 0305 	mvn.w	r3, #5
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e010      	b.n	8004900 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <osKernelStart+0x68>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d109      	bne.n	80048fa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80048e6:	f7ff ffa1 	bl	800482c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80048ea:	4b08      	ldr	r3, [pc, #32]	; (800490c <osKernelStart+0x68>)
 80048ec:	2202      	movs	r2, #2
 80048ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80048f0:	f001 ff12 	bl	8006718 <vTaskStartScheduler>
      stat = osOK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	e002      	b.n	8004900 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80048fa:	f04f 33ff 	mov.w	r3, #4294967295
 80048fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004900:	68fb      	ldr	r3, [r7, #12]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000120 	.word	0x20000120

08004910 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004910:	b580      	push	{r7, lr}
 8004912:	b090      	sub	sp, #64	; 0x40
 8004914:	af04      	add	r7, sp, #16
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004920:	f3ef 8305 	mrs	r3, IPSR
 8004924:	61fb      	str	r3, [r7, #28]
  return(result);
 8004926:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004928:	2b00      	cmp	r3, #0
 800492a:	f040 808f 	bne.w	8004a4c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800492e:	f3ef 8310 	mrs	r3, PRIMASK
 8004932:	61bb      	str	r3, [r7, #24]
  return(result);
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d105      	bne.n	8004946 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800493a:	f3ef 8311 	mrs	r3, BASEPRI
 800493e:	617b      	str	r3, [r7, #20]
  return(result);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <osThreadNew+0x3e>
 8004946:	4b44      	ldr	r3, [pc, #272]	; (8004a58 <osThreadNew+0x148>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d07e      	beq.n	8004a4c <osThreadNew+0x13c>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d07b      	beq.n	8004a4c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004954:	2380      	movs	r3, #128	; 0x80
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004958:	2318      	movs	r3, #24
 800495a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800495c:	2300      	movs	r3, #0
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004960:	f04f 33ff 	mov.w	r3, #4294967295
 8004964:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d045      	beq.n	80049f8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <osThreadNew+0x6a>
        name = attr->name;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	2b00      	cmp	r3, #0
 800498c:	d008      	beq.n	80049a0 <osThreadNew+0x90>
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	2b38      	cmp	r3, #56	; 0x38
 8004992:	d805      	bhi.n	80049a0 <osThreadNew+0x90>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <osThreadNew+0x94>
        return (NULL);
 80049a0:	2300      	movs	r3, #0
 80049a2:	e054      	b.n	8004a4e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	089b      	lsrs	r3, r3, #2
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00e      	beq.n	80049da <osThreadNew+0xca>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	2bbf      	cmp	r3, #191	; 0xbf
 80049c2:	d90a      	bls.n	80049da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d006      	beq.n	80049da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <osThreadNew+0xca>
        mem = 1;
 80049d4:	2301      	movs	r3, #1
 80049d6:	623b      	str	r3, [r7, #32]
 80049d8:	e010      	b.n	80049fc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10c      	bne.n	80049fc <osThreadNew+0xec>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d108      	bne.n	80049fc <osThreadNew+0xec>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d104      	bne.n	80049fc <osThreadNew+0xec>
          mem = 0;
 80049f2:	2300      	movs	r3, #0
 80049f4:	623b      	str	r3, [r7, #32]
 80049f6:	e001      	b.n	80049fc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d110      	bne.n	8004a24 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a0a:	9202      	str	r2, [sp, #8]
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f001 fc83 	bl	8006324 <xTaskCreateStatic>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	e013      	b.n	8004a4c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d110      	bne.n	8004a4c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	f107 0310 	add.w	r3, r7, #16
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f001 fcd4 	bl	80063ea <xTaskCreate>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d001      	beq.n	8004a4c <osThreadNew+0x13c>
          hTask = NULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a4c:	693b      	ldr	r3, [r7, #16]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3730      	adds	r7, #48	; 0x30
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000120 	.word	0x20000120

08004a5c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a62:	f3ef 8305 	mrs	r3, IPSR
 8004a66:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10f      	bne.n	8004a8e <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a72:	607b      	str	r3, [r7, #4]
  return(result);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d105      	bne.n	8004a86 <osThreadYield+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a7a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a7e:	603b      	str	r3, [r7, #0]
  return(result);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d007      	beq.n	8004a96 <osThreadYield+0x3a>
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <osThreadYield+0x5c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d103      	bne.n	8004a96 <osThreadYield+0x3a>
    stat = osErrorISR;
 8004a8e:	f06f 0305 	mvn.w	r3, #5
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	e009      	b.n	8004aaa <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8004a9a:	4b08      	ldr	r3, [pc, #32]	; (8004abc <osThreadYield+0x60>)
 8004a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	20000120 	.word	0x20000120
 8004abc:	e000ed04 	.word	0xe000ed04

08004ac0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ac8:	f3ef 8305 	mrs	r3, IPSR
 8004acc:	613b      	str	r3, [r7, #16]
  return(result);
 8004ace:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10f      	bne.n	8004af4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ae0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <osDelay+0x3c>
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <osDelay+0x58>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d103      	bne.n	8004afc <osDelay+0x3c>
    stat = osErrorISR;
 8004af4:	f06f 0305 	mvn.w	r3, #5
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e007      	b.n	8004b0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f001 fdd0 	bl	80066ac <vTaskDelay>
    }
  }

  return (stat);
 8004b0c:	697b      	ldr	r3, [r7, #20]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20000120 	.word	0x20000120

08004b1c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08c      	sub	sp, #48	; 0x30
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b2c:	f3ef 8305 	mrs	r3, IPSR
 8004b30:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b32:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f040 8086 	bne.w	8004c46 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3e:	617b      	str	r3, [r7, #20]
  return(result);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d105      	bne.n	8004b52 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b46:	f3ef 8311 	mrs	r3, BASEPRI
 8004b4a:	613b      	str	r3, [r7, #16]
  return(result);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <osSemaphoreNew+0x3e>
 8004b52:	4b3f      	ldr	r3, [pc, #252]	; (8004c50 <osSemaphoreNew+0x134>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d075      	beq.n	8004c46 <osSemaphoreNew+0x12a>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d072      	beq.n	8004c46 <osSemaphoreNew+0x12a>
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d86e      	bhi.n	8004c46 <osSemaphoreNew+0x12a>
    mem = -1;
 8004b68:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d015      	beq.n	8004ba0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d006      	beq.n	8004b8a <osSemaphoreNew+0x6e>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b4f      	cmp	r3, #79	; 0x4f
 8004b82:	d902      	bls.n	8004b8a <osSemaphoreNew+0x6e>
        mem = 1;
 8004b84:	2301      	movs	r3, #1
 8004b86:	623b      	str	r3, [r7, #32]
 8004b88:	e00c      	b.n	8004ba4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d108      	bne.n	8004ba4 <osSemaphoreNew+0x88>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d104      	bne.n	8004ba4 <osSemaphoreNew+0x88>
          mem = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	623b      	str	r3, [r7, #32]
 8004b9e:	e001      	b.n	8004ba4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d04c      	beq.n	8004c46 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d128      	bne.n	8004c04 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d10a      	bne.n	8004bce <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	9200      	str	r2, [sp, #0]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	f000 fbc1 	bl	800534c <xQueueGenericCreateStatic>
 8004bca:	6278      	str	r0, [r7, #36]	; 0x24
 8004bcc:	e005      	b.n	8004bda <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004bce:	2203      	movs	r2, #3
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	f000 fc3c 	bl	8005450 <xQueueGenericCreate>
 8004bd8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d022      	beq.n	8004c26 <osSemaphoreNew+0x10a>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01f      	beq.n	8004c26 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004be6:	2300      	movs	r3, #0
 8004be8:	2200      	movs	r2, #0
 8004bea:	2100      	movs	r1, #0
 8004bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bee:	f000 fd07 	bl	8005600 <xQueueGenericSend>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d016      	beq.n	8004c26 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bfa:	f001 f9bd 	bl	8005f78 <vQueueDelete>
            hSemaphore = NULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
 8004c02:	e010      	b.n	8004c26 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d108      	bne.n	8004c1c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fc81 	bl	800551a <xQueueCreateCountingSemaphoreStatic>
 8004c18:	6278      	str	r0, [r7, #36]	; 0x24
 8004c1a:	e004      	b.n	8004c26 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fcb6 	bl	8005590 <xQueueCreateCountingSemaphore>
 8004c24:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00c      	beq.n	8004c46 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <osSemaphoreNew+0x11e>
          name = attr->name;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	e001      	b.n	8004c3e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004c3e:	69f9      	ldr	r1, [r7, #28]
 8004c40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c42:	f001 fae7 	bl	8006214 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3728      	adds	r7, #40	; 0x28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20000120 	.word	0x20000120

08004c54 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d103      	bne.n	8004c74 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004c6c:	f06f 0303 	mvn.w	r3, #3
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	e04b      	b.n	8004d0c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c74:	f3ef 8305 	mrs	r3, IPSR
 8004c78:	617b      	str	r3, [r7, #20]
  return(result);
 8004c7a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10f      	bne.n	8004ca0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c80:	f3ef 8310 	mrs	r3, PRIMASK
 8004c84:	613b      	str	r3, [r7, #16]
  return(result);
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c90:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d026      	beq.n	8004ce6 <osSemaphoreAcquire+0x92>
 8004c98:	4b1f      	ldr	r3, [pc, #124]	; (8004d18 <osSemaphoreAcquire+0xc4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d122      	bne.n	8004ce6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004ca6:	f06f 0303 	mvn.w	r3, #3
 8004caa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004cac:	e02d      	b.n	8004d0a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004cb2:	f107 0308 	add.w	r3, r7, #8
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2100      	movs	r1, #0
 8004cba:	69b8      	ldr	r0, [r7, #24]
 8004cbc:	f001 f8d6 	bl	8005e6c <xQueueReceiveFromISR>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d003      	beq.n	8004cce <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004cc6:	f06f 0302 	mvn.w	r3, #2
 8004cca:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004ccc:	e01d      	b.n	8004d0a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01a      	beq.n	8004d0a <osSemaphoreAcquire+0xb6>
 8004cd4:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <osSemaphoreAcquire+0xc8>)
 8004cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004ce4:	e011      	b.n	8004d0a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004ce6:	6839      	ldr	r1, [r7, #0]
 8004ce8:	69b8      	ldr	r0, [r7, #24]
 8004cea:	f000 ffab 	bl	8005c44 <xQueueSemaphoreTake>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d00b      	beq.n	8004d0c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004cfa:	f06f 0301 	mvn.w	r3, #1
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	e004      	b.n	8004d0c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004d02:	f06f 0302 	mvn.w	r3, #2
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	e000      	b.n	8004d0c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004d0a:	bf00      	nop
      }
    }
  }

  return (stat);
 8004d0c:	69fb      	ldr	r3, [r7, #28]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000120 	.word	0x20000120
 8004d1c:	e000ed04 	.word	0xe000ed04

08004d20 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d103      	bne.n	8004d3e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004d36:	f06f 0303 	mvn.w	r3, #3
 8004d3a:	61fb      	str	r3, [r7, #28]
 8004d3c:	e03e      	b.n	8004dbc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d3e:	f3ef 8305 	mrs	r3, IPSR
 8004d42:	617b      	str	r3, [r7, #20]
  return(result);
 8004d44:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4e:	613b      	str	r3, [r7, #16]
  return(result);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d105      	bne.n	8004d62 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d56:	f3ef 8311 	mrs	r3, BASEPRI
 8004d5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01e      	beq.n	8004da0 <osSemaphoreRelease+0x80>
 8004d62:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <osSemaphoreRelease+0xa8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d11a      	bne.n	8004da0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004d6e:	f107 0308 	add.w	r3, r7, #8
 8004d72:	4619      	mov	r1, r3
 8004d74:	69b8      	ldr	r0, [r7, #24]
 8004d76:	f000 fde9 	bl	800594c <xQueueGiveFromISR>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d003      	beq.n	8004d88 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004d80:	f06f 0302 	mvn.w	r3, #2
 8004d84:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004d86:	e018      	b.n	8004dba <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d015      	beq.n	8004dba <osSemaphoreRelease+0x9a>
 8004d8e:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <osSemaphoreRelease+0xac>)
 8004d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004d9e:	e00c      	b.n	8004dba <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004da0:	2300      	movs	r3, #0
 8004da2:	2200      	movs	r2, #0
 8004da4:	2100      	movs	r1, #0
 8004da6:	69b8      	ldr	r0, [r7, #24]
 8004da8:	f000 fc2a 	bl	8005600 <xQueueGenericSend>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d004      	beq.n	8004dbc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004db2:	f06f 0302 	mvn.w	r3, #2
 8004db6:	61fb      	str	r3, [r7, #28]
 8004db8:	e000      	b.n	8004dbc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004dba:	bf00      	nop
    }
  }

  return (stat);
 8004dbc:	69fb      	ldr	r3, [r7, #28]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3720      	adds	r7, #32
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000120 	.word	0x20000120
 8004dcc:	e000ed04 	.word	0xe000ed04

08004dd0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08c      	sub	sp, #48	; 0x30
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004de0:	f3ef 8305 	mrs	r3, IPSR
 8004de4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004de6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d16f      	bne.n	8004ecc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dec:	f3ef 8310 	mrs	r3, PRIMASK
 8004df0:	617b      	str	r3, [r7, #20]
  return(result);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004df8:	f3ef 8311 	mrs	r3, BASEPRI
 8004dfc:	613b      	str	r3, [r7, #16]
  return(result);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <osMessageQueueNew+0x3c>
 8004e04:	4b34      	ldr	r3, [pc, #208]	; (8004ed8 <osMessageQueueNew+0x108>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d05f      	beq.n	8004ecc <osMessageQueueNew+0xfc>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d05c      	beq.n	8004ecc <osMessageQueueNew+0xfc>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d059      	beq.n	8004ecc <osMessageQueueNew+0xfc>
    mem = -1;
 8004e18:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d029      	beq.n	8004e78 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d012      	beq.n	8004e52 <osMessageQueueNew+0x82>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	2b4f      	cmp	r3, #79	; 0x4f
 8004e32:	d90e      	bls.n	8004e52 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d302      	bcc.n	8004e52 <osMessageQueueNew+0x82>
        mem = 1;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	623b      	str	r3, [r7, #32]
 8004e50:	e014      	b.n	8004e7c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d110      	bne.n	8004e7c <osMessageQueueNew+0xac>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10c      	bne.n	8004e7c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d108      	bne.n	8004e7c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d104      	bne.n	8004e7c <osMessageQueueNew+0xac>
          mem = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	623b      	str	r3, [r7, #32]
 8004e76:	e001      	b.n	8004e7c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d10b      	bne.n	8004e9a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	9100      	str	r1, [sp, #0]
 8004e8e:	68b9      	ldr	r1, [r7, #8]
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 fa5b 	bl	800534c <xQueueGenericCreateStatic>
 8004e96:	6278      	str	r0, [r7, #36]	; 0x24
 8004e98:	e008      	b.n	8004eac <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d105      	bne.n	8004eac <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 fad3 	bl	8005450 <xQueueGenericCreate>
 8004eaa:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00c      	beq.n	8004ecc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <osMessageQueueNew+0xf0>
        name = attr->name;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	e001      	b.n	8004ec4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004ec4:	69f9      	ldr	r1, [r7, #28]
 8004ec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ec8:	f001 f9a4 	bl	8006214 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3728      	adds	r7, #40	; 0x28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000120 	.word	0x20000120

08004edc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	; 0x28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ef4:	f3ef 8305 	mrs	r3, IPSR
 8004ef8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004efa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10f      	bne.n	8004f20 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f00:	f3ef 8310 	mrs	r3, PRIMASK
 8004f04:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f10:	617b      	str	r3, [r7, #20]
  return(result);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d02c      	beq.n	8004f72 <osMessageQueuePut+0x96>
 8004f18:	4b28      	ldr	r3, [pc, #160]	; (8004fbc <osMessageQueuePut+0xe0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d128      	bne.n	8004f72 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <osMessageQueuePut+0x56>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <osMessageQueuePut+0x56>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004f32:	f06f 0303 	mvn.w	r3, #3
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004f38:	e039      	b.n	8004fae <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004f3e:	f107 0210 	add.w	r2, r7, #16
 8004f42:	2300      	movs	r3, #0
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	6a38      	ldr	r0, [r7, #32]
 8004f48:	f000 fc60 	bl	800580c <xQueueGenericSendFromISR>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d003      	beq.n	8004f5a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004f52:	f06f 0302 	mvn.w	r3, #2
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004f58:	e029      	b.n	8004fae <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d026      	beq.n	8004fae <osMessageQueuePut+0xd2>
 8004f60:	4b17      	ldr	r3, [pc, #92]	; (8004fc0 <osMessageQueuePut+0xe4>)
 8004f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004f70:	e01d      	b.n	8004fae <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <osMessageQueuePut+0xa2>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d103      	bne.n	8004f86 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004f7e:	f06f 0303 	mvn.w	r3, #3
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
 8004f84:	e014      	b.n	8004fb0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004f86:	2300      	movs	r3, #0
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	6a38      	ldr	r0, [r7, #32]
 8004f8e:	f000 fb37 	bl	8005600 <xQueueGenericSend>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d00b      	beq.n	8004fb0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004f9e:	f06f 0301 	mvn.w	r3, #1
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa4:	e004      	b.n	8004fb0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004fa6:	f06f 0302 	mvn.w	r3, #2
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
 8004fac:	e000      	b.n	8004fb0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004fae:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3728      	adds	r7, #40	; 0x28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000120 	.word	0x20000120
 8004fc0:	e000ed04 	.word	0xe000ed04

08004fc4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fda:	f3ef 8305 	mrs	r3, IPSR
 8004fde:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fe0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10f      	bne.n	8005006 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fea:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d105      	bne.n	8004ffe <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ff2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff6:	617b      	str	r3, [r7, #20]
  return(result);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d02c      	beq.n	8005058 <osMessageQueueGet+0x94>
 8004ffe:	4b28      	ldr	r3, [pc, #160]	; (80050a0 <osMessageQueueGet+0xdc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d128      	bne.n	8005058 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <osMessageQueueGet+0x54>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <osMessageQueueGet+0x54>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005018:	f06f 0303 	mvn.w	r3, #3
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800501e:	e038      	b.n	8005092 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005024:	f107 0310 	add.w	r3, r7, #16
 8005028:	461a      	mov	r2, r3
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	6a38      	ldr	r0, [r7, #32]
 800502e:	f000 ff1d 	bl	8005e6c <xQueueReceiveFromISR>
 8005032:	4603      	mov	r3, r0
 8005034:	2b01      	cmp	r3, #1
 8005036:	d003      	beq.n	8005040 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005038:	f06f 0302 	mvn.w	r3, #2
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800503e:	e028      	b.n	8005092 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d025      	beq.n	8005092 <osMessageQueueGet+0xce>
 8005046:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <osMessageQueueGet+0xe0>)
 8005048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005056:	e01c      	b.n	8005092 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <osMessageQueueGet+0xa0>
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d103      	bne.n	800506c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005064:	f06f 0303 	mvn.w	r3, #3
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
 800506a:	e013      	b.n	8005094 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	6a38      	ldr	r0, [r7, #32]
 8005072:	f000 fd01 	bl	8005a78 <xQueueReceive>
 8005076:	4603      	mov	r3, r0
 8005078:	2b01      	cmp	r3, #1
 800507a:	d00b      	beq.n	8005094 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005082:	f06f 0301 	mvn.w	r3, #1
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
 8005088:	e004      	b.n	8005094 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800508a:	f06f 0302 	mvn.w	r3, #2
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
 8005090:	e000      	b.n	8005094 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005092:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005096:	4618      	mov	r0, r3
 8005098:	3728      	adds	r7, #40	; 0x28
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000120 	.word	0x20000120
 80050a4:	e000ed04 	.word	0xe000ed04

080050a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4a07      	ldr	r2, [pc, #28]	; (80050d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80050b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4a06      	ldr	r2, [pc, #24]	; (80050d8 <vApplicationGetIdleTaskMemory+0x30>)
 80050be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2280      	movs	r2, #128	; 0x80
 80050c4:	601a      	str	r2, [r3, #0]
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000124 	.word	0x20000124
 80050d8:	200001e4 	.word	0x200001e4

080050dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4a07      	ldr	r2, [pc, #28]	; (8005108 <vApplicationGetTimerTaskMemory+0x2c>)
 80050ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	4a06      	ldr	r2, [pc, #24]	; (800510c <vApplicationGetTimerTaskMemory+0x30>)
 80050f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050fa:	601a      	str	r2, [r3, #0]
}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	200003e4 	.word	0x200003e4
 800510c:	200004a4 	.word	0x200004a4

08005110 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f103 0208 	add.w	r2, r3, #8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f04f 32ff 	mov.w	r2, #4294967295
 8005128:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f103 0208 	add.w	r2, r3, #8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f103 0208 	add.w	r2, r3, #8
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800516a:	b480      	push	{r7}
 800516c:	b085      	sub	sp, #20
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	601a      	str	r2, [r3, #0]
}
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d103      	bne.n	80051d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	e00c      	b.n	80051ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3308      	adds	r3, #8
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	e002      	b.n	80051e0 <vListInsert+0x2e>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d2f6      	bcs.n	80051da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	601a      	str	r2, [r3, #0]
}
 8005218:	bf00      	nop
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6892      	ldr	r2, [r2, #8]
 800523a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6852      	ldr	r2, [r2, #4]
 8005244:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	d103      	bne.n	8005258 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	1e5a      	subs	r2, r3, #1
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10c      	bne.n	80052a6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	b672      	cpsid	i
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	b662      	cpsie	i
 80052a0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052a2:	bf00      	nop
 80052a4:	e7fe      	b.n	80052a4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80052a6:	f002 fcf9 	bl	8007c9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	68f9      	ldr	r1, [r7, #12]
 80052b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052b6:	fb01 f303 	mul.w	r3, r1, r3
 80052ba:	441a      	add	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d6:	3b01      	subs	r3, #1
 80052d8:	68f9      	ldr	r1, [r7, #12]
 80052da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	441a      	add	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	22ff      	movs	r2, #255	; 0xff
 80052ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	22ff      	movs	r2, #255	; 0xff
 80052f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d114      	bne.n	8005326 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01a      	beq.n	800533a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3310      	adds	r3, #16
 8005308:	4618      	mov	r0, r3
 800530a:	f001 fcad 	bl	8006c68 <xTaskRemoveFromEventList>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d012      	beq.n	800533a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <xQueueGenericReset+0xd0>)
 8005316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	e009      	b.n	800533a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3310      	adds	r3, #16
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff fef0 	bl	8005110 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3324      	adds	r3, #36	; 0x24
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff feeb 	bl	8005110 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800533a:	f002 fce3 	bl	8007d04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800533e:	2301      	movs	r3, #1
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	e000ed04 	.word	0xe000ed04

0800534c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08e      	sub	sp, #56	; 0x38
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10c      	bne.n	800537a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	b672      	cpsid	i
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	b662      	cpsie	i
 8005374:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005376:	bf00      	nop
 8005378:	e7fe      	b.n	8005378 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10c      	bne.n	800539a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	b672      	cpsid	i
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	b662      	cpsie	i
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005396:	bf00      	nop
 8005398:	e7fe      	b.n	8005398 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <xQueueGenericCreateStatic+0x5a>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <xQueueGenericCreateStatic+0x5e>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <xQueueGenericCreateStatic+0x60>
 80053aa:	2300      	movs	r3, #0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10c      	bne.n	80053ca <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	b672      	cpsid	i
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	b662      	cpsie	i
 80053c4:	623b      	str	r3, [r7, #32]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <xQueueGenericCreateStatic+0x8a>
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <xQueueGenericCreateStatic+0x8e>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <xQueueGenericCreateStatic+0x90>
 80053da:	2300      	movs	r3, #0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10c      	bne.n	80053fa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	b672      	cpsid	i
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	b662      	cpsie	i
 80053f4:	61fb      	str	r3, [r7, #28]
}
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053fa:	2350      	movs	r3, #80	; 0x50
 80053fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b50      	cmp	r3, #80	; 0x50
 8005402:	d00c      	beq.n	800541e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	b672      	cpsid	i
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	b662      	cpsie	i
 8005418:	61bb      	str	r3, [r7, #24]
}
 800541a:	bf00      	nop
 800541c:	e7fe      	b.n	800541c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800541e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00d      	beq.n	8005446 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005432:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	4613      	mov	r3, r2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f847 	bl	80054d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005448:	4618      	mov	r0, r3
 800544a:	3730      	adds	r7, #48	; 0x30
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08a      	sub	sp, #40	; 0x28
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	4613      	mov	r3, r2
 800545c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10c      	bne.n	800547e <xQueueGenericCreate+0x2e>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	b672      	cpsid	i
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	b662      	cpsie	i
 8005478:	613b      	str	r3, [r7, #16]
}
 800547a:	bf00      	nop
 800547c:	e7fe      	b.n	800547c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d102      	bne.n	800548a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005484:	2300      	movs	r3, #0
 8005486:	61fb      	str	r3, [r7, #28]
 8005488:	e004      	b.n	8005494 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	3350      	adds	r3, #80	; 0x50
 8005498:	4618      	mov	r0, r3
 800549a:	f002 fd2b 	bl	8007ef4 <pvPortMalloc>
 800549e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d011      	beq.n	80054ca <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	3350      	adds	r3, #80	; 0x50
 80054ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054b8:	79fa      	ldrb	r2, [r7, #7]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f805 	bl	80054d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054ca:	69bb      	ldr	r3, [r7, #24]
	}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3720      	adds	r7, #32
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d103      	bne.n	80054f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e002      	b.n	80054f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005502:	2101      	movs	r1, #1
 8005504:	69b8      	ldr	r0, [r7, #24]
 8005506:	f7ff feb7 	bl	8005278 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	78fa      	ldrb	r2, [r7, #3]
 800550e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800551a:	b580      	push	{r7, lr}
 800551c:	b08a      	sub	sp, #40	; 0x28
 800551e:	af02      	add	r7, sp, #8
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10c      	bne.n	8005546 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	b672      	cpsid	i
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	b662      	cpsie	i
 8005540:	61bb      	str	r3, [r7, #24]
}
 8005542:	bf00      	nop
 8005544:	e7fe      	b.n	8005544 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	429a      	cmp	r2, r3
 800554c:	d90c      	bls.n	8005568 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	b672      	cpsid	i
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	b662      	cpsie	i
 8005562:	617b      	str	r3, [r7, #20]
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005568:	2302      	movs	r3, #2
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	2100      	movs	r1, #0
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff feea 	bl	800534c <xQueueGenericCreateStatic>
 8005578:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005586:	69fb      	ldr	r3, [r7, #28]
	}
 8005588:	4618      	mov	r0, r3
 800558a:	3720      	adds	r7, #32
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10c      	bne.n	80055ba <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	b672      	cpsid	i
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	b662      	cpsie	i
 80055b4:	613b      	str	r3, [r7, #16]
}
 80055b6:	bf00      	nop
 80055b8:	e7fe      	b.n	80055b8 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d90c      	bls.n	80055dc <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	b672      	cpsid	i
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	b662      	cpsie	i
 80055d6:	60fb      	str	r3, [r7, #12]
}
 80055d8:	bf00      	nop
 80055da:	e7fe      	b.n	80055da <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80055dc:	2202      	movs	r2, #2
 80055de:	2100      	movs	r1, #0
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff ff35 	bl	8005450 <xQueueGenericCreate>
 80055e6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80055f4:	697b      	ldr	r3, [r7, #20]
	}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08e      	sub	sp, #56	; 0x38
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800560e:	2300      	movs	r3, #0
 8005610:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10c      	bne.n	8005636 <xQueueGenericSend+0x36>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	b672      	cpsid	i
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	b662      	cpsie	i
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <xQueueGenericSend+0x44>
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <xQueueGenericSend+0x48>
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <xQueueGenericSend+0x4a>
 8005648:	2300      	movs	r3, #0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10c      	bne.n	8005668 <xQueueGenericSend+0x68>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	b672      	cpsid	i
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	b662      	cpsie	i
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d103      	bne.n	8005676 <xQueueGenericSend+0x76>
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <xQueueGenericSend+0x7a>
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <xQueueGenericSend+0x7c>
 800567a:	2300      	movs	r3, #0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10c      	bne.n	800569a <xQueueGenericSend+0x9a>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	b672      	cpsid	i
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	b662      	cpsie	i
 8005694:	623b      	str	r3, [r7, #32]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800569a:	f001 fcb1 	bl	8007000 <xTaskGetSchedulerState>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d102      	bne.n	80056aa <xQueueGenericSend+0xaa>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <xQueueGenericSend+0xae>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <xQueueGenericSend+0xb0>
 80056ae:	2300      	movs	r3, #0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10c      	bne.n	80056ce <xQueueGenericSend+0xce>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	b672      	cpsid	i
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	b662      	cpsie	i
 80056c8:	61fb      	str	r3, [r7, #28]
}
 80056ca:	bf00      	nop
 80056cc:	e7fe      	b.n	80056cc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ce:	f002 fae5 	bl	8007c9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056da:	429a      	cmp	r2, r3
 80056dc:	d302      	bcc.n	80056e4 <xQueueGenericSend+0xe4>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d129      	bne.n	8005738 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ea:	f000 fc82 	bl	8005ff2 <prvCopyDataToQueue>
 80056ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d010      	beq.n	800571a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	3324      	adds	r3, #36	; 0x24
 80056fc:	4618      	mov	r0, r3
 80056fe:	f001 fab3 	bl	8006c68 <xTaskRemoveFromEventList>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d013      	beq.n	8005730 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005708:	4b3f      	ldr	r3, [pc, #252]	; (8005808 <xQueueGenericSend+0x208>)
 800570a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	e00a      	b.n	8005730 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d007      	beq.n	8005730 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005720:	4b39      	ldr	r3, [pc, #228]	; (8005808 <xQueueGenericSend+0x208>)
 8005722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005730:	f002 fae8 	bl	8007d04 <vPortExitCritical>
				return pdPASS;
 8005734:	2301      	movs	r3, #1
 8005736:	e063      	b.n	8005800 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800573e:	f002 fae1 	bl	8007d04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005742:	2300      	movs	r3, #0
 8005744:	e05c      	b.n	8005800 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	2b00      	cmp	r3, #0
 800574a:	d106      	bne.n	800575a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800574c:	f107 0314 	add.w	r3, r7, #20
 8005750:	4618      	mov	r0, r3
 8005752:	f001 faef 	bl	8006d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005756:	2301      	movs	r3, #1
 8005758:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800575a:	f002 fad3 	bl	8007d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800575e:	f001 f84f 	bl	8006800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005762:	f002 fa9b 	bl	8007c9c <vPortEnterCritical>
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800576c:	b25b      	sxtb	r3, r3
 800576e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005772:	d103      	bne.n	800577c <xQueueGenericSend+0x17c>
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005782:	b25b      	sxtb	r3, r3
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d103      	bne.n	8005792 <xQueueGenericSend+0x192>
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005792:	f002 fab7 	bl	8007d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005796:	1d3a      	adds	r2, r7, #4
 8005798:	f107 0314 	add.w	r3, r7, #20
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 fade 	bl	8006d60 <xTaskCheckForTimeOut>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d124      	bne.n	80057f4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ac:	f000 fd19 	bl	80061e2 <prvIsQueueFull>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d018      	beq.n	80057e8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	3310      	adds	r3, #16
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 f9fe 	bl	8006bc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057c6:	f000 fca4 	bl	8006112 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057ca:	f001 f827 	bl	800681c <xTaskResumeAll>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f47f af7c 	bne.w	80056ce <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <xQueueGenericSend+0x208>)
 80057d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	e772      	b.n	80056ce <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ea:	f000 fc92 	bl	8006112 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057ee:	f001 f815 	bl	800681c <xTaskResumeAll>
 80057f2:	e76c      	b.n	80056ce <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057f6:	f000 fc8c 	bl	8006112 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057fa:	f001 f80f 	bl	800681c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005800:	4618      	mov	r0, r3
 8005802:	3738      	adds	r7, #56	; 0x38
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	e000ed04 	.word	0xe000ed04

0800580c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08e      	sub	sp, #56	; 0x38
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10c      	bne.n	800583e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	b672      	cpsid	i
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	b662      	cpsie	i
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
}
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d103      	bne.n	800584c <xQueueGenericSendFromISR+0x40>
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <xQueueGenericSendFromISR+0x44>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <xQueueGenericSendFromISR+0x46>
 8005850:	2300      	movs	r3, #0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10c      	bne.n	8005870 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	b672      	cpsid	i
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	b662      	cpsie	i
 800586a:	623b      	str	r3, [r7, #32]
}
 800586c:	bf00      	nop
 800586e:	e7fe      	b.n	800586e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d103      	bne.n	800587e <xQueueGenericSendFromISR+0x72>
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587a:	2b01      	cmp	r3, #1
 800587c:	d101      	bne.n	8005882 <xQueueGenericSendFromISR+0x76>
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <xQueueGenericSendFromISR+0x78>
 8005882:	2300      	movs	r3, #0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10c      	bne.n	80058a2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	b672      	cpsid	i
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	b662      	cpsie	i
 800589c:	61fb      	str	r3, [r7, #28]
}
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058a2:	f002 fae3 	bl	8007e6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058a6:	f3ef 8211 	mrs	r2, BASEPRI
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	b672      	cpsid	i
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	b662      	cpsie	i
 80058be:	61ba      	str	r2, [r7, #24]
 80058c0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058c2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d302      	bcc.n	80058d8 <xQueueGenericSendFromISR+0xcc>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d12c      	bne.n	8005932 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058e8:	f000 fb83 	bl	8005ff2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058ec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f4:	d112      	bne.n	800591c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d016      	beq.n	800592c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	3324      	adds	r3, #36	; 0x24
 8005902:	4618      	mov	r0, r3
 8005904:	f001 f9b0 	bl	8006c68 <xTaskRemoveFromEventList>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00e      	beq.n	800592c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00b      	beq.n	800592c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	e007      	b.n	800592c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800591c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005920:	3301      	adds	r3, #1
 8005922:	b2db      	uxtb	r3, r3
 8005924:	b25a      	sxtb	r2, r3
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800592c:	2301      	movs	r3, #1
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005930:	e001      	b.n	8005936 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005932:	2300      	movs	r3, #0
 8005934:	637b      	str	r3, [r7, #52]	; 0x34
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005940:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005944:	4618      	mov	r0, r3
 8005946:	3738      	adds	r7, #56	; 0x38
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08e      	sub	sp, #56	; 0x38
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10c      	bne.n	800597a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	b672      	cpsid	i
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	b662      	cpsie	i
 8005974:	623b      	str	r3, [r7, #32]
}
 8005976:	bf00      	nop
 8005978:	e7fe      	b.n	8005978 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00c      	beq.n	800599c <xQueueGiveFromISR+0x50>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	b672      	cpsid	i
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	b662      	cpsie	i
 8005996:	61fb      	str	r3, [r7, #28]
}
 8005998:	bf00      	nop
 800599a:	e7fe      	b.n	800599a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d103      	bne.n	80059ac <xQueueGiveFromISR+0x60>
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <xQueueGiveFromISR+0x64>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <xQueueGiveFromISR+0x66>
 80059b0:	2300      	movs	r3, #0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10c      	bne.n	80059d0 <xQueueGiveFromISR+0x84>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	b672      	cpsid	i
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	b662      	cpsie	i
 80059ca:	61bb      	str	r3, [r7, #24]
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059d0:	f002 fa4c 	bl	8007e6c <vPortValidateInterruptPriority>
	__asm volatile
 80059d4:	f3ef 8211 	mrs	r2, BASEPRI
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	b672      	cpsid	i
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	b662      	cpsie	i
 80059ec:	617a      	str	r2, [r7, #20]
 80059ee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80059f0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d22b      	bcs.n	8005a5c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d112      	bne.n	8005a46 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d016      	beq.n	8005a56 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	3324      	adds	r3, #36	; 0x24
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 f91b 	bl	8006c68 <xTaskRemoveFromEventList>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00e      	beq.n	8005a56 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2201      	movs	r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	e007      	b.n	8005a56 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	b25a      	sxtb	r2, r3
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a56:	2301      	movs	r3, #1
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
 8005a5a:	e001      	b.n	8005a60 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f383 8811 	msr	BASEPRI, r3
}
 8005a6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3738      	adds	r7, #56	; 0x38
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08c      	sub	sp, #48	; 0x30
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10c      	bne.n	8005aac <xQueueReceive+0x34>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	b672      	cpsid	i
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	b662      	cpsie	i
 8005aa6:	623b      	str	r3, [r7, #32]
}
 8005aa8:	bf00      	nop
 8005aaa:	e7fe      	b.n	8005aaa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <xQueueReceive+0x42>
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <xQueueReceive+0x46>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <xQueueReceive+0x48>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10c      	bne.n	8005ade <xQueueReceive+0x66>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	b672      	cpsid	i
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	b662      	cpsie	i
 8005ad8:	61fb      	str	r3, [r7, #28]
}
 8005ada:	bf00      	nop
 8005adc:	e7fe      	b.n	8005adc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ade:	f001 fa8f 	bl	8007000 <xTaskGetSchedulerState>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d102      	bne.n	8005aee <xQueueReceive+0x76>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <xQueueReceive+0x7a>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <xQueueReceive+0x7c>
 8005af2:	2300      	movs	r3, #0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10c      	bne.n	8005b12 <xQueueReceive+0x9a>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	b672      	cpsid	i
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	b662      	cpsie	i
 8005b0c:	61bb      	str	r3, [r7, #24]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b12:	f002 f8c3 	bl	8007c9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01f      	beq.n	8005b62 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b26:	f000 face 	bl	80060c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	1e5a      	subs	r2, r3, #1
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00f      	beq.n	8005b5a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	3310      	adds	r3, #16
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f001 f892 	bl	8006c68 <xTaskRemoveFromEventList>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b4a:	4b3d      	ldr	r3, [pc, #244]	; (8005c40 <xQueueReceive+0x1c8>)
 8005b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b5a:	f002 f8d3 	bl	8007d04 <vPortExitCritical>
				return pdPASS;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e069      	b.n	8005c36 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d103      	bne.n	8005b70 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b68:	f002 f8cc 	bl	8007d04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e062      	b.n	8005c36 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b76:	f107 0310 	add.w	r3, r7, #16
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 f8da 	bl	8006d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b80:	2301      	movs	r3, #1
 8005b82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b84:	f002 f8be 	bl	8007d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b88:	f000 fe3a 	bl	8006800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b8c:	f002 f886 	bl	8007c9c <vPortEnterCritical>
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b96:	b25b      	sxtb	r3, r3
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d103      	bne.n	8005ba6 <xQueueReceive+0x12e>
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bac:	b25b      	sxtb	r3, r3
 8005bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb2:	d103      	bne.n	8005bbc <xQueueReceive+0x144>
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bbc:	f002 f8a2 	bl	8007d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bc0:	1d3a      	adds	r2, r7, #4
 8005bc2:	f107 0310 	add.w	r3, r7, #16
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f001 f8c9 	bl	8006d60 <xTaskCheckForTimeOut>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d123      	bne.n	8005c1c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bd6:	f000 faee 	bl	80061b6 <prvIsQueueEmpty>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d017      	beq.n	8005c10 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	3324      	adds	r3, #36	; 0x24
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 ffe9 	bl	8006bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf0:	f000 fa8f 	bl	8006112 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bf4:	f000 fe12 	bl	800681c <xTaskResumeAll>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d189      	bne.n	8005b12 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005bfe:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <xQueueReceive+0x1c8>)
 8005c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	e780      	b.n	8005b12 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c12:	f000 fa7e 	bl	8006112 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c16:	f000 fe01 	bl	800681c <xTaskResumeAll>
 8005c1a:	e77a      	b.n	8005b12 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c1e:	f000 fa78 	bl	8006112 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c22:	f000 fdfb 	bl	800681c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c28:	f000 fac5 	bl	80061b6 <prvIsQueueEmpty>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f43f af6f 	beq.w	8005b12 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3730      	adds	r7, #48	; 0x30
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08e      	sub	sp, #56	; 0x38
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005c56:	2300      	movs	r3, #0
 8005c58:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10c      	bne.n	8005c7a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	b672      	cpsid	i
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	b662      	cpsie	i
 8005c74:	623b      	str	r3, [r7, #32]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00c      	beq.n	8005c9c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	b672      	cpsid	i
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	b662      	cpsie	i
 8005c96:	61fb      	str	r3, [r7, #28]
}
 8005c98:	bf00      	nop
 8005c9a:	e7fe      	b.n	8005c9a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c9c:	f001 f9b0 	bl	8007000 <xTaskGetSchedulerState>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <xQueueSemaphoreTake+0x68>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <xQueueSemaphoreTake+0x6c>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <xQueueSemaphoreTake+0x6e>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10c      	bne.n	8005cd0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	b672      	cpsid	i
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	b662      	cpsie	i
 8005cca:	61bb      	str	r3, [r7, #24]
}
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cd0:	f001 ffe4 	bl	8007c9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d024      	beq.n	8005d2a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	1e5a      	subs	r2, r3, #1
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d104      	bne.n	8005cfa <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005cf0:	f001 fb04 	bl	80072fc <pvTaskIncrementMutexHeldCount>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00f      	beq.n	8005d22 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d04:	3310      	adds	r3, #16
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 ffae 	bl	8006c68 <xTaskRemoveFromEventList>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d12:	4b55      	ldr	r3, [pc, #340]	; (8005e68 <xQueueSemaphoreTake+0x224>)
 8005d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d22:	f001 ffef 	bl	8007d04 <vPortExitCritical>
				return pdPASS;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e099      	b.n	8005e5e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d113      	bne.n	8005d58 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00c      	beq.n	8005d50 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	b672      	cpsid	i
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	b662      	cpsie	i
 8005d4a:	617b      	str	r3, [r7, #20]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005d50:	f001 ffd8 	bl	8007d04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e082      	b.n	8005e5e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d5e:	f107 030c 	add.w	r3, r7, #12
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 ffe6 	bl	8006d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d6c:	f001 ffca 	bl	8007d04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d70:	f000 fd46 	bl	8006800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d74:	f001 ff92 	bl	8007c9c <vPortEnterCritical>
 8005d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d7e:	b25b      	sxtb	r3, r3
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d84:	d103      	bne.n	8005d8e <xQueueSemaphoreTake+0x14a>
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d94:	b25b      	sxtb	r3, r3
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9a:	d103      	bne.n	8005da4 <xQueueSemaphoreTake+0x160>
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005da4:	f001 ffae 	bl	8007d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005da8:	463a      	mov	r2, r7
 8005daa:	f107 030c 	add.w	r3, r7, #12
 8005dae:	4611      	mov	r1, r2
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 ffd5 	bl	8006d60 <xTaskCheckForTimeOut>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d132      	bne.n	8005e22 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dbe:	f000 f9fa 	bl	80061b6 <prvIsQueueEmpty>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d026      	beq.n	8005e16 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d109      	bne.n	8005de4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8005dd0:	f001 ff64 	bl	8007c9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 f92f 	bl	800703c <xTaskPriorityInherit>
 8005dde:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005de0:	f001 ff90 	bl	8007d04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de6:	3324      	adds	r3, #36	; 0x24
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	4611      	mov	r1, r2
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fee7 	bl	8006bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005df2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005df4:	f000 f98d 	bl	8006112 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005df8:	f000 fd10 	bl	800681c <xTaskResumeAll>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f47f af66 	bne.w	8005cd0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8005e04:	4b18      	ldr	r3, [pc, #96]	; (8005e68 <xQueueSemaphoreTake+0x224>)
 8005e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	e75c      	b.n	8005cd0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e18:	f000 f97b 	bl	8006112 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e1c:	f000 fcfe 	bl	800681c <xTaskResumeAll>
 8005e20:	e756      	b.n	8005cd0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005e22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e24:	f000 f975 	bl	8006112 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e28:	f000 fcf8 	bl	800681c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e2e:	f000 f9c2 	bl	80061b6 <prvIsQueueEmpty>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f43f af4b 	beq.w	8005cd0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00d      	beq.n	8005e5c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8005e40:	f001 ff2c 	bl	8007c9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005e44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e46:	f000 f8bc 	bl	8005fc2 <prvGetDisinheritPriorityAfterTimeout>
 8005e4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 f9cc 	bl	80071f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005e58:	f001 ff54 	bl	8007d04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3738      	adds	r7, #56	; 0x38
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08e      	sub	sp, #56	; 0x38
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10c      	bne.n	8005e9c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	b672      	cpsid	i
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	b662      	cpsie	i
 8005e96:	623b      	str	r3, [r7, #32]
}
 8005e98:	bf00      	nop
 8005e9a:	e7fe      	b.n	8005e9a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d103      	bne.n	8005eaa <xQueueReceiveFromISR+0x3e>
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <xQueueReceiveFromISR+0x42>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e000      	b.n	8005eb0 <xQueueReceiveFromISR+0x44>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10c      	bne.n	8005ece <xQueueReceiveFromISR+0x62>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	b672      	cpsid	i
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	b662      	cpsie	i
 8005ec8:	61fb      	str	r3, [r7, #28]
}
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ece:	f001 ffcd 	bl	8007e6c <vPortValidateInterruptPriority>
	__asm volatile
 8005ed2:	f3ef 8211 	mrs	r2, BASEPRI
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	b672      	cpsid	i
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	b662      	cpsie	i
 8005eea:	61ba      	str	r2, [r7, #24]
 8005eec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005eee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d02f      	beq.n	8005f5e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f08:	68b9      	ldr	r1, [r7, #8]
 8005f0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f0c:	f000 f8db 	bl	80060c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	1e5a      	subs	r2, r3, #1
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f20:	d112      	bne.n	8005f48 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d016      	beq.n	8005f58 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	3310      	adds	r3, #16
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fe9a 	bl	8006c68 <xTaskRemoveFromEventList>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00e      	beq.n	8005f58 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00b      	beq.n	8005f58 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	e007      	b.n	8005f58 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	b25a      	sxtb	r2, r3
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f5c:	e001      	b.n	8005f62 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	637b      	str	r3, [r7, #52]	; 0x34
 8005f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f383 8811 	msr	BASEPRI, r3
}
 8005f6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3738      	adds	r7, #56	; 0x38
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10c      	bne.n	8005fa4 <vQueueDelete+0x2c>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	b672      	cpsid	i
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	b662      	cpsie	i
 8005f9e:	60bb      	str	r3, [r7, #8]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f95f 	bl	8006268 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f002 f867 	bl	8008088 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005fba:	bf00      	nop
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d006      	beq.n	8005fe0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	e001      	b.n	8005fe4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
	}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b086      	sub	sp, #24
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ffe:	2300      	movs	r3, #0
 8006000:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10d      	bne.n	800602c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d14d      	bne.n	80060b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	4618      	mov	r0, r3
 800601e:	f001 f875 	bl	800710c <xTaskPriorityDisinherit>
 8006022:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	609a      	str	r2, [r3, #8]
 800602a:	e043      	b.n	80060b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d119      	bne.n	8006066 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6858      	ldr	r0, [r3, #4]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	461a      	mov	r2, r3
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	f019 f9a3 	bl	801f388 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	441a      	add	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	429a      	cmp	r2, r3
 800605a:	d32b      	bcc.n	80060b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	605a      	str	r2, [r3, #4]
 8006064:	e026      	b.n	80060b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	68d8      	ldr	r0, [r3, #12]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	461a      	mov	r2, r3
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	f019 f989 	bl	801f388 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	425b      	negs	r3, r3
 8006080:	441a      	add	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d207      	bcs.n	80060a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	425b      	negs	r3, r3
 800609c:	441a      	add	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d105      	bne.n	80060b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060bc:	697b      	ldr	r3, [r7, #20]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d018      	beq.n	800610a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	441a      	add	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d303      	bcc.n	80060fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68d9      	ldr	r1, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	461a      	mov	r2, r3
 8006104:	6838      	ldr	r0, [r7, #0]
 8006106:	f019 f93f 	bl	801f388 <memcpy>
	}
}
 800610a:	bf00      	nop
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800611a:	f001 fdbf 	bl	8007c9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006124:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006126:	e011      	b.n	800614c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	2b00      	cmp	r3, #0
 800612e:	d012      	beq.n	8006156 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3324      	adds	r3, #36	; 0x24
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fd97 	bl	8006c68 <xTaskRemoveFromEventList>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006140:	f000 fe74 	bl	8006e2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	3b01      	subs	r3, #1
 8006148:	b2db      	uxtb	r3, r3
 800614a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800614c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006150:	2b00      	cmp	r3, #0
 8006152:	dce9      	bgt.n	8006128 <prvUnlockQueue+0x16>
 8006154:	e000      	b.n	8006158 <prvUnlockQueue+0x46>
					break;
 8006156:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	22ff      	movs	r2, #255	; 0xff
 800615c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006160:	f001 fdd0 	bl	8007d04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006164:	f001 fd9a 	bl	8007c9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800616e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006170:	e011      	b.n	8006196 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d012      	beq.n	80061a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3310      	adds	r3, #16
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fd72 	bl	8006c68 <xTaskRemoveFromEventList>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800618a:	f000 fe4f 	bl	8006e2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800618e:	7bbb      	ldrb	r3, [r7, #14]
 8006190:	3b01      	subs	r3, #1
 8006192:	b2db      	uxtb	r3, r3
 8006194:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006196:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800619a:	2b00      	cmp	r3, #0
 800619c:	dce9      	bgt.n	8006172 <prvUnlockQueue+0x60>
 800619e:	e000      	b.n	80061a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	22ff      	movs	r2, #255	; 0xff
 80061a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061aa:	f001 fdab 	bl	8007d04 <vPortExitCritical>
}
 80061ae:	bf00      	nop
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061be:	f001 fd6d 	bl	8007c9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d102      	bne.n	80061d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061ca:	2301      	movs	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	e001      	b.n	80061d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061d4:	f001 fd96 	bl	8007d04 <vPortExitCritical>

	return xReturn;
 80061d8:	68fb      	ldr	r3, [r7, #12]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061ea:	f001 fd57 	bl	8007c9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d102      	bne.n	8006200 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061fa:	2301      	movs	r3, #1
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	e001      	b.n	8006204 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006204:	f001 fd7e 	bl	8007d04 <vPortExitCritical>

	return xReturn;
 8006208:	68fb      	ldr	r3, [r7, #12]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	e014      	b.n	800624e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006224:	4a0f      	ldr	r2, [pc, #60]	; (8006264 <vQueueAddToRegistry+0x50>)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10b      	bne.n	8006248 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006230:	490c      	ldr	r1, [pc, #48]	; (8006264 <vQueueAddToRegistry+0x50>)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800623a:	4a0a      	ldr	r2, [pc, #40]	; (8006264 <vQueueAddToRegistry+0x50>)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	4413      	add	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006246:	e006      	b.n	8006256 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3301      	adds	r3, #1
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b07      	cmp	r3, #7
 8006252:	d9e7      	bls.n	8006224 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	2000a4ac 	.word	0x2000a4ac

08006268 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	e016      	b.n	80062a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006276:	4a10      	ldr	r2, [pc, #64]	; (80062b8 <vQueueUnregisterQueue+0x50>)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	4413      	add	r3, r2
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	429a      	cmp	r2, r3
 8006284:	d10b      	bne.n	800629e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006286:	4a0c      	ldr	r2, [pc, #48]	; (80062b8 <vQueueUnregisterQueue+0x50>)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2100      	movs	r1, #0
 800628c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006290:	4a09      	ldr	r2, [pc, #36]	; (80062b8 <vQueueUnregisterQueue+0x50>)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	4413      	add	r3, r2
 8006298:	2200      	movs	r2, #0
 800629a:	605a      	str	r2, [r3, #4]
				break;
 800629c:	e006      	b.n	80062ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3301      	adds	r3, #1
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b07      	cmp	r3, #7
 80062a8:	d9e5      	bls.n	8006276 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80062aa:	bf00      	nop
 80062ac:	bf00      	nop
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	2000a4ac 	.word	0x2000a4ac

080062bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062cc:	f001 fce6 	bl	8007c9c <vPortEnterCritical>
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062d6:	b25b      	sxtb	r3, r3
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062dc:	d103      	bne.n	80062e6 <vQueueWaitForMessageRestricted+0x2a>
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ec:	b25b      	sxtb	r3, r3
 80062ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f2:	d103      	bne.n	80062fc <vQueueWaitForMessageRestricted+0x40>
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062fc:	f001 fd02 	bl	8007d04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	2b00      	cmp	r3, #0
 8006306:	d106      	bne.n	8006316 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	3324      	adds	r3, #36	; 0x24
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fc7b 	bl	8006c0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006316:	6978      	ldr	r0, [r7, #20]
 8006318:	f7ff fefb 	bl	8006112 <prvUnlockQueue>
	}
 800631c:	bf00      	nop
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08e      	sub	sp, #56	; 0x38
 8006328:	af04      	add	r7, sp, #16
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10c      	bne.n	8006352 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633c:	b672      	cpsid	i
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	b662      	cpsie	i
 800634c:	623b      	str	r3, [r7, #32]
}
 800634e:	bf00      	nop
 8006350:	e7fe      	b.n	8006350 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10c      	bne.n	8006372 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	b672      	cpsid	i
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	b662      	cpsie	i
 800636c:	61fb      	str	r3, [r7, #28]
}
 800636e:	bf00      	nop
 8006370:	e7fe      	b.n	8006370 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006372:	23c0      	movs	r3, #192	; 0xc0
 8006374:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	2bc0      	cmp	r3, #192	; 0xc0
 800637a:	d00c      	beq.n	8006396 <xTaskCreateStatic+0x72>
	__asm volatile
 800637c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006380:	b672      	cpsid	i
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	b662      	cpsie	i
 8006390:	61bb      	str	r3, [r7, #24]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006396:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	2b00      	cmp	r3, #0
 800639c:	d01e      	beq.n	80063dc <xTaskCreateStatic+0xb8>
 800639e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01b      	beq.n	80063dc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	2202      	movs	r2, #2
 80063b2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063b6:	2300      	movs	r3, #0
 80063b8:	9303      	str	r3, [sp, #12]
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	9302      	str	r3, [sp, #8]
 80063be:	f107 0314 	add.w	r3, r7, #20
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f850 	bl	8006474 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063d6:	f000 f8f9 	bl	80065cc <prvAddNewTaskToReadyList>
 80063da:	e001      	b.n	80063e0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063e0:	697b      	ldr	r3, [r7, #20]
	}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3728      	adds	r7, #40	; 0x28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b08c      	sub	sp, #48	; 0x30
 80063ee:	af04      	add	r7, sp, #16
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	603b      	str	r3, [r7, #0]
 80063f6:	4613      	mov	r3, r2
 80063f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063fa:	88fb      	ldrh	r3, [r7, #6]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4618      	mov	r0, r3
 8006400:	f001 fd78 	bl	8007ef4 <pvPortMalloc>
 8006404:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00e      	beq.n	800642a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800640c:	20c0      	movs	r0, #192	; 0xc0
 800640e:	f001 fd71 	bl	8007ef4 <pvPortMalloc>
 8006412:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	631a      	str	r2, [r3, #48]	; 0x30
 8006420:	e005      	b.n	800642e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006422:	6978      	ldr	r0, [r7, #20]
 8006424:	f001 fe30 	bl	8008088 <vPortFree>
 8006428:	e001      	b.n	800642e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d017      	beq.n	8006464 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800643c:	88fa      	ldrh	r2, [r7, #6]
 800643e:	2300      	movs	r3, #0
 8006440:	9303      	str	r3, [sp, #12]
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	9302      	str	r3, [sp, #8]
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68b9      	ldr	r1, [r7, #8]
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 f80e 	bl	8006474 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006458:	69f8      	ldr	r0, [r7, #28]
 800645a:	f000 f8b7 	bl	80065cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800645e:	2301      	movs	r3, #1
 8006460:	61bb      	str	r3, [r7, #24]
 8006462:	e002      	b.n	800646a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006464:	f04f 33ff 	mov.w	r3, #4294967295
 8006468:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800646a:	69bb      	ldr	r3, [r7, #24]
	}
 800646c:	4618      	mov	r0, r3
 800646e:	3720      	adds	r7, #32
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	461a      	mov	r2, r3
 800648c:	21a5      	movs	r1, #165	; 0xa5
 800648e:	f018 ff89 	bl	801f3a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800649c:	440b      	add	r3, r1
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	f023 0307 	bic.w	r3, r3, #7
 80064aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00c      	beq.n	80064d0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	b672      	cpsid	i
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	b662      	cpsie	i
 80064ca:	617b      	str	r3, [r7, #20]
}
 80064cc:	bf00      	nop
 80064ce:	e7fe      	b.n	80064ce <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d01f      	beq.n	8006516 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064d6:	2300      	movs	r3, #0
 80064d8:	61fb      	str	r3, [r7, #28]
 80064da:	e012      	b.n	8006502 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	7819      	ldrb	r1, [r3, #0]
 80064e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	3334      	adds	r3, #52	; 0x34
 80064ec:	460a      	mov	r2, r1
 80064ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d006      	beq.n	800650a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	3301      	adds	r3, #1
 8006500:	61fb      	str	r3, [r7, #28]
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	2b0f      	cmp	r3, #15
 8006506:	d9e9      	bls.n	80064dc <prvInitialiseNewTask+0x68>
 8006508:	e000      	b.n	800650c <prvInitialiseNewTask+0x98>
			{
				break;
 800650a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006514:	e003      	b.n	800651e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	2b37      	cmp	r3, #55	; 0x37
 8006522:	d901      	bls.n	8006528 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006524:	2337      	movs	r3, #55	; 0x37
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800652c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006532:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	2200      	movs	r2, #0
 8006538:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	3304      	adds	r3, #4
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fe06 	bl	8005150 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	3318      	adds	r3, #24
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe fe01 	bl	8005150 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006552:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006562:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	2200      	movs	r2, #0
 8006568:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	2200      	movs	r2, #0
 800656e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	2200      	movs	r2, #0
 8006576:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	3358      	adds	r3, #88	; 0x58
 800657e:	2260      	movs	r2, #96	; 0x60
 8006580:	2100      	movs	r1, #0
 8006582:	4618      	mov	r0, r3
 8006584:	f018 ff0e 	bl	801f3a4 <memset>
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	4a0d      	ldr	r2, [pc, #52]	; (80065c0 <prvInitialiseNewTask+0x14c>)
 800658c:	65da      	str	r2, [r3, #92]	; 0x5c
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	4a0c      	ldr	r2, [pc, #48]	; (80065c4 <prvInitialiseNewTask+0x150>)
 8006592:	661a      	str	r2, [r3, #96]	; 0x60
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	4a0c      	ldr	r2, [pc, #48]	; (80065c8 <prvInitialiseNewTask+0x154>)
 8006598:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	68f9      	ldr	r1, [r7, #12]
 800659e:	69b8      	ldr	r0, [r7, #24]
 80065a0:	f001 fa70 	bl	8007a84 <pxPortInitialiseStack>
 80065a4:	4602      	mov	r2, r0
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065b6:	bf00      	nop
 80065b8:	3720      	adds	r7, #32
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	08023db8 	.word	0x08023db8
 80065c4:	08023dd8 	.word	0x08023dd8
 80065c8:	08023d98 	.word	0x08023d98

080065cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065d4:	f001 fb62 	bl	8007c9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065d8:	4b2d      	ldr	r3, [pc, #180]	; (8006690 <prvAddNewTaskToReadyList+0xc4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3301      	adds	r3, #1
 80065de:	4a2c      	ldr	r2, [pc, #176]	; (8006690 <prvAddNewTaskToReadyList+0xc4>)
 80065e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065e2:	4b2c      	ldr	r3, [pc, #176]	; (8006694 <prvAddNewTaskToReadyList+0xc8>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065ea:	4a2a      	ldr	r2, [pc, #168]	; (8006694 <prvAddNewTaskToReadyList+0xc8>)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065f0:	4b27      	ldr	r3, [pc, #156]	; (8006690 <prvAddNewTaskToReadyList+0xc4>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d110      	bne.n	800661a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065f8:	f000 fc3e 	bl	8006e78 <prvInitialiseTaskLists>
 80065fc:	e00d      	b.n	800661a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065fe:	4b26      	ldr	r3, [pc, #152]	; (8006698 <prvAddNewTaskToReadyList+0xcc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006606:	4b23      	ldr	r3, [pc, #140]	; (8006694 <prvAddNewTaskToReadyList+0xc8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	429a      	cmp	r2, r3
 8006612:	d802      	bhi.n	800661a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006614:	4a1f      	ldr	r2, [pc, #124]	; (8006694 <prvAddNewTaskToReadyList+0xc8>)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800661a:	4b20      	ldr	r3, [pc, #128]	; (800669c <prvAddNewTaskToReadyList+0xd0>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3301      	adds	r3, #1
 8006620:	4a1e      	ldr	r2, [pc, #120]	; (800669c <prvAddNewTaskToReadyList+0xd0>)
 8006622:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006624:	4b1d      	ldr	r3, [pc, #116]	; (800669c <prvAddNewTaskToReadyList+0xd0>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	4b1b      	ldr	r3, [pc, #108]	; (80066a0 <prvAddNewTaskToReadyList+0xd4>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d903      	bls.n	8006640 <prvAddNewTaskToReadyList+0x74>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	4a18      	ldr	r2, [pc, #96]	; (80066a0 <prvAddNewTaskToReadyList+0xd4>)
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4a15      	ldr	r2, [pc, #84]	; (80066a4 <prvAddNewTaskToReadyList+0xd8>)
 800664e:	441a      	add	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3304      	adds	r3, #4
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f7fe fd87 	bl	800516a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800665c:	f001 fb52 	bl	8007d04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006660:	4b0d      	ldr	r3, [pc, #52]	; (8006698 <prvAddNewTaskToReadyList+0xcc>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00e      	beq.n	8006686 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <prvAddNewTaskToReadyList+0xc8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006672:	429a      	cmp	r2, r3
 8006674:	d207      	bcs.n	8006686 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006676:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <prvAddNewTaskToReadyList+0xdc>)
 8006678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000d78 	.word	0x20000d78
 8006694:	200008a4 	.word	0x200008a4
 8006698:	20000d84 	.word	0x20000d84
 800669c:	20000d94 	.word	0x20000d94
 80066a0:	20000d80 	.word	0x20000d80
 80066a4:	200008a8 	.word	0x200008a8
 80066a8:	e000ed04 	.word	0xe000ed04

080066ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d019      	beq.n	80066f2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066be:	4b14      	ldr	r3, [pc, #80]	; (8006710 <vTaskDelay+0x64>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00c      	beq.n	80066e0 <vTaskDelay+0x34>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	b672      	cpsid	i
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	b662      	cpsie	i
 80066da:	60bb      	str	r3, [r7, #8]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <vTaskDelay+0x32>
			vTaskSuspendAll();
 80066e0:	f000 f88e 	bl	8006800 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066e4:	2100      	movs	r1, #0
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fe1c 	bl	8007324 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066ec:	f000 f896 	bl	800681c <xTaskResumeAll>
 80066f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d107      	bne.n	8006708 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <vTaskDelay+0x68>)
 80066fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006708:	bf00      	nop
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20000da0 	.word	0x20000da0
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08a      	sub	sp, #40	; 0x28
 800671c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800671e:	2300      	movs	r3, #0
 8006720:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006726:	463a      	mov	r2, r7
 8006728:	1d39      	adds	r1, r7, #4
 800672a:	f107 0308 	add.w	r3, r7, #8
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe fcba 	bl	80050a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	9202      	str	r2, [sp, #8]
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	2300      	movs	r3, #0
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	2300      	movs	r3, #0
 8006744:	460a      	mov	r2, r1
 8006746:	4926      	ldr	r1, [pc, #152]	; (80067e0 <vTaskStartScheduler+0xc8>)
 8006748:	4826      	ldr	r0, [pc, #152]	; (80067e4 <vTaskStartScheduler+0xcc>)
 800674a:	f7ff fdeb 	bl	8006324 <xTaskCreateStatic>
 800674e:	4603      	mov	r3, r0
 8006750:	4a25      	ldr	r2, [pc, #148]	; (80067e8 <vTaskStartScheduler+0xd0>)
 8006752:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006754:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <vTaskStartScheduler+0xd0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800675c:	2301      	movs	r3, #1
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	e001      	b.n	8006766 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d102      	bne.n	8006772 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800676c:	f000 fe2e 	bl	80073cc <xTimerCreateTimerTask>
 8006770:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d11d      	bne.n	80067b4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	b672      	cpsid	i
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	b662      	cpsie	i
 800678c:	613b      	str	r3, [r7, #16]
}
 800678e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006790:	4b16      	ldr	r3, [pc, #88]	; (80067ec <vTaskStartScheduler+0xd4>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3358      	adds	r3, #88	; 0x58
 8006796:	4a16      	ldr	r2, [pc, #88]	; (80067f0 <vTaskStartScheduler+0xd8>)
 8006798:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800679a:	4b16      	ldr	r3, [pc, #88]	; (80067f4 <vTaskStartScheduler+0xdc>)
 800679c:	f04f 32ff 	mov.w	r2, #4294967295
 80067a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067a2:	4b15      	ldr	r3, [pc, #84]	; (80067f8 <vTaskStartScheduler+0xe0>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067a8:	4b14      	ldr	r3, [pc, #80]	; (80067fc <vTaskStartScheduler+0xe4>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067ae:	f001 f9f7 	bl	8007ba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067b2:	e010      	b.n	80067d6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ba:	d10c      	bne.n	80067d6 <vTaskStartScheduler+0xbe>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	b672      	cpsid	i
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	b662      	cpsie	i
 80067d0:	60fb      	str	r3, [r7, #12]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <vTaskStartScheduler+0xbc>
}
 80067d6:	bf00      	nop
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	08020294 	.word	0x08020294
 80067e4:	08006e45 	.word	0x08006e45
 80067e8:	20000d9c 	.word	0x20000d9c
 80067ec:	200008a4 	.word	0x200008a4
 80067f0:	20000094 	.word	0x20000094
 80067f4:	20000d98 	.word	0x20000d98
 80067f8:	20000d84 	.word	0x20000d84
 80067fc:	20000d7c 	.word	0x20000d7c

08006800 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006804:	4b04      	ldr	r3, [pc, #16]	; (8006818 <vTaskSuspendAll+0x18>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3301      	adds	r3, #1
 800680a:	4a03      	ldr	r2, [pc, #12]	; (8006818 <vTaskSuspendAll+0x18>)
 800680c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800680e:	bf00      	nop
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	20000da0 	.word	0x20000da0

0800681c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006826:	2300      	movs	r3, #0
 8006828:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800682a:	4b43      	ldr	r3, [pc, #268]	; (8006938 <xTaskResumeAll+0x11c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10c      	bne.n	800684c <xTaskResumeAll+0x30>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	b672      	cpsid	i
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	b662      	cpsie	i
 8006846:	603b      	str	r3, [r7, #0]
}
 8006848:	bf00      	nop
 800684a:	e7fe      	b.n	800684a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800684c:	f001 fa26 	bl	8007c9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006850:	4b39      	ldr	r3, [pc, #228]	; (8006938 <xTaskResumeAll+0x11c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3b01      	subs	r3, #1
 8006856:	4a38      	ldr	r2, [pc, #224]	; (8006938 <xTaskResumeAll+0x11c>)
 8006858:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800685a:	4b37      	ldr	r3, [pc, #220]	; (8006938 <xTaskResumeAll+0x11c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d162      	bne.n	8006928 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006862:	4b36      	ldr	r3, [pc, #216]	; (800693c <xTaskResumeAll+0x120>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d05e      	beq.n	8006928 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800686a:	e02f      	b.n	80068cc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800686c:	4b34      	ldr	r3, [pc, #208]	; (8006940 <xTaskResumeAll+0x124>)
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3318      	adds	r3, #24
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fcd3 	bl	8005224 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3304      	adds	r3, #4
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fcce 	bl	8005224 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688c:	4b2d      	ldr	r3, [pc, #180]	; (8006944 <xTaskResumeAll+0x128>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d903      	bls.n	800689c <xTaskResumeAll+0x80>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	4a2a      	ldr	r2, [pc, #168]	; (8006944 <xTaskResumeAll+0x128>)
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4a27      	ldr	r2, [pc, #156]	; (8006948 <xTaskResumeAll+0x12c>)
 80068aa:	441a      	add	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f7fe fc59 	bl	800516a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068bc:	4b23      	ldr	r3, [pc, #140]	; (800694c <xTaskResumeAll+0x130>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d302      	bcc.n	80068cc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80068c6:	4b22      	ldr	r3, [pc, #136]	; (8006950 <xTaskResumeAll+0x134>)
 80068c8:	2201      	movs	r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068cc:	4b1c      	ldr	r3, [pc, #112]	; (8006940 <xTaskResumeAll+0x124>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1cb      	bne.n	800686c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068da:	f000 fb71 	bl	8006fc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068de:	4b1d      	ldr	r3, [pc, #116]	; (8006954 <xTaskResumeAll+0x138>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d010      	beq.n	800690c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068ea:	f000 f847 	bl	800697c <xTaskIncrementTick>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80068f4:	4b16      	ldr	r3, [pc, #88]	; (8006950 <xTaskResumeAll+0x134>)
 80068f6:	2201      	movs	r2, #1
 80068f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f1      	bne.n	80068ea <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006906:	4b13      	ldr	r3, [pc, #76]	; (8006954 <xTaskResumeAll+0x138>)
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800690c:	4b10      	ldr	r3, [pc, #64]	; (8006950 <xTaskResumeAll+0x134>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d009      	beq.n	8006928 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006914:	2301      	movs	r3, #1
 8006916:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006918:	4b0f      	ldr	r3, [pc, #60]	; (8006958 <xTaskResumeAll+0x13c>)
 800691a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006928:	f001 f9ec 	bl	8007d04 <vPortExitCritical>

	return xAlreadyYielded;
 800692c:	68bb      	ldr	r3, [r7, #8]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20000da0 	.word	0x20000da0
 800693c:	20000d78 	.word	0x20000d78
 8006940:	20000d38 	.word	0x20000d38
 8006944:	20000d80 	.word	0x20000d80
 8006948:	200008a8 	.word	0x200008a8
 800694c:	200008a4 	.word	0x200008a4
 8006950:	20000d8c 	.word	0x20000d8c
 8006954:	20000d88 	.word	0x20000d88
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006962:	4b05      	ldr	r3, [pc, #20]	; (8006978 <xTaskGetTickCount+0x1c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006968:	687b      	ldr	r3, [r7, #4]
}
 800696a:	4618      	mov	r0, r3
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	20000d7c 	.word	0x20000d7c

0800697c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006986:	4b50      	ldr	r3, [pc, #320]	; (8006ac8 <xTaskIncrementTick+0x14c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 808b 	bne.w	8006aa6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006990:	4b4e      	ldr	r3, [pc, #312]	; (8006acc <xTaskIncrementTick+0x150>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3301      	adds	r3, #1
 8006996:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006998:	4a4c      	ldr	r2, [pc, #304]	; (8006acc <xTaskIncrementTick+0x150>)
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d122      	bne.n	80069ea <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80069a4:	4b4a      	ldr	r3, [pc, #296]	; (8006ad0 <xTaskIncrementTick+0x154>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00c      	beq.n	80069c8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	b672      	cpsid	i
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	b662      	cpsie	i
 80069c2:	603b      	str	r3, [r7, #0]
}
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <xTaskIncrementTick+0x4a>
 80069c8:	4b41      	ldr	r3, [pc, #260]	; (8006ad0 <xTaskIncrementTick+0x154>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	4b41      	ldr	r3, [pc, #260]	; (8006ad4 <xTaskIncrementTick+0x158>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a3f      	ldr	r2, [pc, #252]	; (8006ad0 <xTaskIncrementTick+0x154>)
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	4a3f      	ldr	r2, [pc, #252]	; (8006ad4 <xTaskIncrementTick+0x158>)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	4b3e      	ldr	r3, [pc, #248]	; (8006ad8 <xTaskIncrementTick+0x15c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	4a3d      	ldr	r2, [pc, #244]	; (8006ad8 <xTaskIncrementTick+0x15c>)
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	f000 faeb 	bl	8006fc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069ea:	4b3c      	ldr	r3, [pc, #240]	; (8006adc <xTaskIncrementTick+0x160>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d349      	bcc.n	8006a88 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069f4:	4b36      	ldr	r3, [pc, #216]	; (8006ad0 <xTaskIncrementTick+0x154>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d104      	bne.n	8006a08 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069fe:	4b37      	ldr	r3, [pc, #220]	; (8006adc <xTaskIncrementTick+0x160>)
 8006a00:	f04f 32ff 	mov.w	r2, #4294967295
 8006a04:	601a      	str	r2, [r3, #0]
					break;
 8006a06:	e03f      	b.n	8006a88 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a08:	4b31      	ldr	r3, [pc, #196]	; (8006ad0 <xTaskIncrementTick+0x154>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d203      	bcs.n	8006a28 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a20:	4a2e      	ldr	r2, [pc, #184]	; (8006adc <xTaskIncrementTick+0x160>)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a26:	e02f      	b.n	8006a88 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fe fbf9 	bl	8005224 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d004      	beq.n	8006a44 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	3318      	adds	r3, #24
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fe fbf0 	bl	8005224 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <xTaskIncrementTick+0x164>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d903      	bls.n	8006a58 <xTaskIncrementTick+0xdc>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	4a22      	ldr	r2, [pc, #136]	; (8006ae0 <xTaskIncrementTick+0x164>)
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4a1f      	ldr	r2, [pc, #124]	; (8006ae4 <xTaskIncrementTick+0x168>)
 8006a66:	441a      	add	r2, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4610      	mov	r0, r2
 8006a70:	f7fe fb7b 	bl	800516a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a78:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <xTaskIncrementTick+0x16c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d3b8      	bcc.n	80069f4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006a82:	2301      	movs	r3, #1
 8006a84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a86:	e7b5      	b.n	80069f4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a88:	4b17      	ldr	r3, [pc, #92]	; (8006ae8 <xTaskIncrementTick+0x16c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8e:	4915      	ldr	r1, [pc, #84]	; (8006ae4 <xTaskIncrementTick+0x168>)
 8006a90:	4613      	mov	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d907      	bls.n	8006ab0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	e004      	b.n	8006ab0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006aa6:	4b11      	ldr	r3, [pc, #68]	; (8006aec <xTaskIncrementTick+0x170>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	4a0f      	ldr	r2, [pc, #60]	; (8006aec <xTaskIncrementTick+0x170>)
 8006aae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ab0:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <xTaskIncrementTick+0x174>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006abc:	697b      	ldr	r3, [r7, #20]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000da0 	.word	0x20000da0
 8006acc:	20000d7c 	.word	0x20000d7c
 8006ad0:	20000d30 	.word	0x20000d30
 8006ad4:	20000d34 	.word	0x20000d34
 8006ad8:	20000d90 	.word	0x20000d90
 8006adc:	20000d98 	.word	0x20000d98
 8006ae0:	20000d80 	.word	0x20000d80
 8006ae4:	200008a8 	.word	0x200008a8
 8006ae8:	200008a4 	.word	0x200008a4
 8006aec:	20000d88 	.word	0x20000d88
 8006af0:	20000d8c 	.word	0x20000d8c

08006af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006afa:	4b2b      	ldr	r3, [pc, #172]	; (8006ba8 <vTaskSwitchContext+0xb4>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b02:	4b2a      	ldr	r3, [pc, #168]	; (8006bac <vTaskSwitchContext+0xb8>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b08:	e048      	b.n	8006b9c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8006b0a:	4b28      	ldr	r3, [pc, #160]	; (8006bac <vTaskSwitchContext+0xb8>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b10:	4b27      	ldr	r3, [pc, #156]	; (8006bb0 <vTaskSwitchContext+0xbc>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	e012      	b.n	8006b3e <vTaskSwitchContext+0x4a>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10c      	bne.n	8006b38 <vTaskSwitchContext+0x44>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	b672      	cpsid	i
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	b662      	cpsie	i
 8006b32:	607b      	str	r3, [r7, #4]
}
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <vTaskSwitchContext+0x42>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	491d      	ldr	r1, [pc, #116]	; (8006bb4 <vTaskSwitchContext+0xc0>)
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0e2      	beq.n	8006b18 <vTaskSwitchContext+0x24>
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4613      	mov	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4a15      	ldr	r2, [pc, #84]	; (8006bb4 <vTaskSwitchContext+0xc0>)
 8006b5e:	4413      	add	r3, r2
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	605a      	str	r2, [r3, #4]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	3308      	adds	r3, #8
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d104      	bne.n	8006b82 <vTaskSwitchContext+0x8e>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	605a      	str	r2, [r3, #4]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	4a0b      	ldr	r2, [pc, #44]	; (8006bb8 <vTaskSwitchContext+0xc4>)
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	4a08      	ldr	r2, [pc, #32]	; (8006bb0 <vTaskSwitchContext+0xbc>)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b92:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <vTaskSwitchContext+0xc4>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3358      	adds	r3, #88	; 0x58
 8006b98:	4a08      	ldr	r2, [pc, #32]	; (8006bbc <vTaskSwitchContext+0xc8>)
 8006b9a:	6013      	str	r3, [r2, #0]
}
 8006b9c:	bf00      	nop
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	20000da0 	.word	0x20000da0
 8006bac:	20000d8c 	.word	0x20000d8c
 8006bb0:	20000d80 	.word	0x20000d80
 8006bb4:	200008a8 	.word	0x200008a8
 8006bb8:	200008a4 	.word	0x200008a4
 8006bbc:	20000094 	.word	0x20000094

08006bc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10c      	bne.n	8006bea <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	b672      	cpsid	i
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	b662      	cpsie	i
 8006be4:	60fb      	str	r3, [r7, #12]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bea:	4b07      	ldr	r3, [pc, #28]	; (8006c08 <vTaskPlaceOnEventList+0x48>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3318      	adds	r3, #24
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fe fadd 	bl	80051b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	6838      	ldr	r0, [r7, #0]
 8006bfc:	f000 fb92 	bl	8007324 <prvAddCurrentTaskToDelayedList>
}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	200008a4 	.word	0x200008a4

08006c0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10c      	bne.n	8006c38 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	b672      	cpsid	i
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	b662      	cpsie	i
 8006c32:	617b      	str	r3, [r7, #20]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c38:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <vTaskPlaceOnEventListRestricted+0x58>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3318      	adds	r3, #24
 8006c3e:	4619      	mov	r1, r3
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7fe fa92 	bl	800516a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	68b8      	ldr	r0, [r7, #8]
 8006c56:	f000 fb65 	bl	8007324 <prvAddCurrentTaskToDelayedList>
	}
 8006c5a:	bf00      	nop
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	200008a4 	.word	0x200008a4

08006c68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10c      	bne.n	8006c98 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	b672      	cpsid	i
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	b662      	cpsie	i
 8006c92:	60fb      	str	r3, [r7, #12]
}
 8006c94:	bf00      	nop
 8006c96:	e7fe      	b.n	8006c96 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	3318      	adds	r3, #24
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe fac1 	bl	8005224 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ca2:	4b1e      	ldr	r3, [pc, #120]	; (8006d1c <xTaskRemoveFromEventList+0xb4>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d11d      	bne.n	8006ce6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	3304      	adds	r3, #4
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe fab8 	bl	8005224 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb8:	4b19      	ldr	r3, [pc, #100]	; (8006d20 <xTaskRemoveFromEventList+0xb8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d903      	bls.n	8006cc8 <xTaskRemoveFromEventList+0x60>
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc4:	4a16      	ldr	r2, [pc, #88]	; (8006d20 <xTaskRemoveFromEventList+0xb8>)
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4a13      	ldr	r2, [pc, #76]	; (8006d24 <xTaskRemoveFromEventList+0xbc>)
 8006cd6:	441a      	add	r2, r3
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4610      	mov	r0, r2
 8006ce0:	f7fe fa43 	bl	800516a <vListInsertEnd>
 8006ce4:	e005      	b.n	8006cf2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	3318      	adds	r3, #24
 8006cea:	4619      	mov	r1, r3
 8006cec:	480e      	ldr	r0, [pc, #56]	; (8006d28 <xTaskRemoveFromEventList+0xc0>)
 8006cee:	f7fe fa3c 	bl	800516a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <xTaskRemoveFromEventList+0xc4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d905      	bls.n	8006d0c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d00:	2301      	movs	r3, #1
 8006d02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d04:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <xTaskRemoveFromEventList+0xc8>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	e001      	b.n	8006d10 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d10:	697b      	ldr	r3, [r7, #20]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20000da0 	.word	0x20000da0
 8006d20:	20000d80 	.word	0x20000d80
 8006d24:	200008a8 	.word	0x200008a8
 8006d28:	20000d38 	.word	0x20000d38
 8006d2c:	200008a4 	.word	0x200008a4
 8006d30:	20000d8c 	.word	0x20000d8c

08006d34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <vTaskInternalSetTimeOutState+0x24>)
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <vTaskInternalSetTimeOutState+0x28>)
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	605a      	str	r2, [r3, #4]
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	20000d90 	.word	0x20000d90
 8006d5c:	20000d7c 	.word	0x20000d7c

08006d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10c      	bne.n	8006d8a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	b672      	cpsid	i
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	b662      	cpsie	i
 8006d84:	613b      	str	r3, [r7, #16]
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10c      	bne.n	8006daa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	b672      	cpsid	i
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	b662      	cpsie	i
 8006da4:	60fb      	str	r3, [r7, #12]
}
 8006da6:	bf00      	nop
 8006da8:	e7fe      	b.n	8006da8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006daa:	f000 ff77 	bl	8007c9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006dae:	4b1d      	ldr	r3, [pc, #116]	; (8006e24 <xTaskCheckForTimeOut+0xc4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc6:	d102      	bne.n	8006dce <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	61fb      	str	r3, [r7, #28]
 8006dcc:	e023      	b.n	8006e16 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <xTaskCheckForTimeOut+0xc8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d007      	beq.n	8006dea <xTaskCheckForTimeOut+0x8a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d302      	bcc.n	8006dea <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006de4:	2301      	movs	r3, #1
 8006de6:	61fb      	str	r3, [r7, #28]
 8006de8:	e015      	b.n	8006e16 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d20b      	bcs.n	8006e0c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	1ad2      	subs	r2, r2, r3
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff ff97 	bl	8006d34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e06:	2300      	movs	r3, #0
 8006e08:	61fb      	str	r3, [r7, #28]
 8006e0a:	e004      	b.n	8006e16 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e12:	2301      	movs	r3, #1
 8006e14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e16:	f000 ff75 	bl	8007d04 <vPortExitCritical>

	return xReturn;
 8006e1a:	69fb      	ldr	r3, [r7, #28]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3720      	adds	r7, #32
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	20000d7c 	.word	0x20000d7c
 8006e28:	20000d90 	.word	0x20000d90

08006e2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e30:	4b03      	ldr	r3, [pc, #12]	; (8006e40 <vTaskMissedYield+0x14>)
 8006e32:	2201      	movs	r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
}
 8006e36:	bf00      	nop
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	20000d8c 	.word	0x20000d8c

08006e44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e4c:	f000 f854 	bl	8006ef8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <prvIdleTask+0x2c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d907      	bls.n	8006e68 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006e58:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <prvIdleTask+0x30>)
 8006e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006e68:	f7f9 fd22 	bl	80008b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006e6c:	e7ee      	b.n	8006e4c <prvIdleTask+0x8>
 8006e6e:	bf00      	nop
 8006e70:	200008a8 	.word	0x200008a8
 8006e74:	e000ed04 	.word	0xe000ed04

08006e78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e7e:	2300      	movs	r3, #0
 8006e80:	607b      	str	r3, [r7, #4]
 8006e82:	e00c      	b.n	8006e9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4a12      	ldr	r2, [pc, #72]	; (8006ed8 <prvInitialiseTaskLists+0x60>)
 8006e90:	4413      	add	r3, r2
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe f93c 	bl	8005110 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	607b      	str	r3, [r7, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b37      	cmp	r3, #55	; 0x37
 8006ea2:	d9ef      	bls.n	8006e84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ea4:	480d      	ldr	r0, [pc, #52]	; (8006edc <prvInitialiseTaskLists+0x64>)
 8006ea6:	f7fe f933 	bl	8005110 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006eaa:	480d      	ldr	r0, [pc, #52]	; (8006ee0 <prvInitialiseTaskLists+0x68>)
 8006eac:	f7fe f930 	bl	8005110 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006eb0:	480c      	ldr	r0, [pc, #48]	; (8006ee4 <prvInitialiseTaskLists+0x6c>)
 8006eb2:	f7fe f92d 	bl	8005110 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006eb6:	480c      	ldr	r0, [pc, #48]	; (8006ee8 <prvInitialiseTaskLists+0x70>)
 8006eb8:	f7fe f92a 	bl	8005110 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ebc:	480b      	ldr	r0, [pc, #44]	; (8006eec <prvInitialiseTaskLists+0x74>)
 8006ebe:	f7fe f927 	bl	8005110 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ec2:	4b0b      	ldr	r3, [pc, #44]	; (8006ef0 <prvInitialiseTaskLists+0x78>)
 8006ec4:	4a05      	ldr	r2, [pc, #20]	; (8006edc <prvInitialiseTaskLists+0x64>)
 8006ec6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ec8:	4b0a      	ldr	r3, [pc, #40]	; (8006ef4 <prvInitialiseTaskLists+0x7c>)
 8006eca:	4a05      	ldr	r2, [pc, #20]	; (8006ee0 <prvInitialiseTaskLists+0x68>)
 8006ecc:	601a      	str	r2, [r3, #0]
}
 8006ece:	bf00      	nop
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	200008a8 	.word	0x200008a8
 8006edc:	20000d08 	.word	0x20000d08
 8006ee0:	20000d1c 	.word	0x20000d1c
 8006ee4:	20000d38 	.word	0x20000d38
 8006ee8:	20000d4c 	.word	0x20000d4c
 8006eec:	20000d64 	.word	0x20000d64
 8006ef0:	20000d30 	.word	0x20000d30
 8006ef4:	20000d34 	.word	0x20000d34

08006ef8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006efe:	e019      	b.n	8006f34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f00:	f000 fecc 	bl	8007c9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f04:	4b10      	ldr	r3, [pc, #64]	; (8006f48 <prvCheckTasksWaitingTermination+0x50>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fe f987 	bl	8005224 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f16:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <prvCheckTasksWaitingTermination+0x54>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	4a0b      	ldr	r2, [pc, #44]	; (8006f4c <prvCheckTasksWaitingTermination+0x54>)
 8006f1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f20:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <prvCheckTasksWaitingTermination+0x58>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	4a0a      	ldr	r2, [pc, #40]	; (8006f50 <prvCheckTasksWaitingTermination+0x58>)
 8006f28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f2a:	f000 feeb 	bl	8007d04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f810 	bl	8006f54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f34:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <prvCheckTasksWaitingTermination+0x58>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e1      	bne.n	8006f00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20000d4c 	.word	0x20000d4c
 8006f4c:	20000d78 	.word	0x20000d78
 8006f50:	20000d60 	.word	0x20000d60

08006f54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3358      	adds	r3, #88	; 0x58
 8006f60:	4618      	mov	r0, r3
 8006f62:	f018 fdcd 	bl	801fb00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d108      	bne.n	8006f82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 f887 	bl	8008088 <vPortFree>
				vPortFree( pxTCB );
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 f884 	bl	8008088 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f80:	e01a      	b.n	8006fb8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d103      	bne.n	8006f94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 f87b 	bl	8008088 <vPortFree>
	}
 8006f92:	e011      	b.n	8006fb8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d00c      	beq.n	8006fb8 <prvDeleteTCB+0x64>
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	b672      	cpsid	i
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	b662      	cpsie	i
 8006fb2:	60fb      	str	r3, [r7, #12]
}
 8006fb4:	bf00      	nop
 8006fb6:	e7fe      	b.n	8006fb6 <prvDeleteTCB+0x62>
	}
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fc6:	4b0c      	ldr	r3, [pc, #48]	; (8006ff8 <prvResetNextTaskUnblockTime+0x38>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fd0:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <prvResetNextTaskUnblockTime+0x3c>)
 8006fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006fd8:	e008      	b.n	8006fec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fda:	4b07      	ldr	r3, [pc, #28]	; (8006ff8 <prvResetNextTaskUnblockTime+0x38>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	4a04      	ldr	r2, [pc, #16]	; (8006ffc <prvResetNextTaskUnblockTime+0x3c>)
 8006fea:	6013      	str	r3, [r2, #0]
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	20000d30 	.word	0x20000d30
 8006ffc:	20000d98 	.word	0x20000d98

08007000 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007006:	4b0b      	ldr	r3, [pc, #44]	; (8007034 <xTaskGetSchedulerState+0x34>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d102      	bne.n	8007014 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800700e:	2301      	movs	r3, #1
 8007010:	607b      	str	r3, [r7, #4]
 8007012:	e008      	b.n	8007026 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007014:	4b08      	ldr	r3, [pc, #32]	; (8007038 <xTaskGetSchedulerState+0x38>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d102      	bne.n	8007022 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800701c:	2302      	movs	r3, #2
 800701e:	607b      	str	r3, [r7, #4]
 8007020:	e001      	b.n	8007026 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007022:	2300      	movs	r3, #0
 8007024:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007026:	687b      	ldr	r3, [r7, #4]
	}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	20000d84 	.word	0x20000d84
 8007038:	20000da0 	.word	0x20000da0

0800703c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d051      	beq.n	80070f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007056:	4b2a      	ldr	r3, [pc, #168]	; (8007100 <xTaskPriorityInherit+0xc4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	429a      	cmp	r2, r3
 800705e:	d241      	bcs.n	80070e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	2b00      	cmp	r3, #0
 8007066:	db06      	blt.n	8007076 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007068:	4b25      	ldr	r3, [pc, #148]	; (8007100 <xTaskPriorityInherit+0xc4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	6959      	ldr	r1, [r3, #20]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4a1f      	ldr	r2, [pc, #124]	; (8007104 <xTaskPriorityInherit+0xc8>)
 8007088:	4413      	add	r3, r2
 800708a:	4299      	cmp	r1, r3
 800708c:	d122      	bne.n	80070d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	3304      	adds	r3, #4
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe f8c6 	bl	8005224 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007098:	4b19      	ldr	r3, [pc, #100]	; (8007100 <xTaskPriorityInherit+0xc4>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a6:	4b18      	ldr	r3, [pc, #96]	; (8007108 <xTaskPriorityInherit+0xcc>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d903      	bls.n	80070b6 <xTaskPriorityInherit+0x7a>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	4a15      	ldr	r2, [pc, #84]	; (8007108 <xTaskPriorityInherit+0xcc>)
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4a10      	ldr	r2, [pc, #64]	; (8007104 <xTaskPriorityInherit+0xc8>)
 80070c4:	441a      	add	r2, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4619      	mov	r1, r3
 80070cc:	4610      	mov	r0, r2
 80070ce:	f7fe f84c 	bl	800516a <vListInsertEnd>
 80070d2:	e004      	b.n	80070de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070d4:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <xTaskPriorityInherit+0xc4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070de:	2301      	movs	r3, #1
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e008      	b.n	80070f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070e8:	4b05      	ldr	r3, [pc, #20]	; (8007100 <xTaskPriorityInherit+0xc4>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d201      	bcs.n	80070f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070f2:	2301      	movs	r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070f6:	68fb      	ldr	r3, [r7, #12]
	}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	200008a4 	.word	0x200008a4
 8007104:	200008a8 	.word	0x200008a8
 8007108:	20000d80 	.word	0x20000d80

0800710c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007118:	2300      	movs	r3, #0
 800711a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d05a      	beq.n	80071d8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007122:	4b30      	ldr	r3, [pc, #192]	; (80071e4 <xTaskPriorityDisinherit+0xd8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	429a      	cmp	r2, r3
 800712a:	d00c      	beq.n	8007146 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	b672      	cpsid	i
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	b662      	cpsie	i
 8007140:	60fb      	str	r3, [r7, #12]
}
 8007142:	bf00      	nop
 8007144:	e7fe      	b.n	8007144 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10c      	bne.n	8007168 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	b672      	cpsid	i
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	b662      	cpsie	i
 8007162:	60bb      	str	r3, [r7, #8]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800716c:	1e5a      	subs	r2, r3, #1
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800717a:	429a      	cmp	r2, r3
 800717c:	d02c      	beq.n	80071d8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007182:	2b00      	cmp	r3, #0
 8007184:	d128      	bne.n	80071d8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	3304      	adds	r3, #4
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe f84a 	bl	8005224 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a8:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <xTaskPriorityDisinherit+0xdc>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d903      	bls.n	80071b8 <xTaskPriorityDisinherit+0xac>
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	4a0c      	ldr	r2, [pc, #48]	; (80071e8 <xTaskPriorityDisinherit+0xdc>)
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071bc:	4613      	mov	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4a09      	ldr	r2, [pc, #36]	; (80071ec <xTaskPriorityDisinherit+0xe0>)
 80071c6:	441a      	add	r2, r3
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	3304      	adds	r3, #4
 80071cc:	4619      	mov	r1, r3
 80071ce:	4610      	mov	r0, r2
 80071d0:	f7fd ffcb 	bl	800516a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071d4:	2301      	movs	r3, #1
 80071d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071d8:	697b      	ldr	r3, [r7, #20]
	}
 80071da:	4618      	mov	r0, r3
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	200008a4 	.word	0x200008a4
 80071e8:	20000d80 	.word	0x20000d80
 80071ec:	200008a8 	.word	0x200008a8

080071f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071fe:	2301      	movs	r3, #1
 8007200:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d06e      	beq.n	80072e6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10c      	bne.n	800722a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	b672      	cpsid	i
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	b662      	cpsie	i
 8007224:	60fb      	str	r3, [r7, #12]
}
 8007226:	bf00      	nop
 8007228:	e7fe      	b.n	8007228 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	429a      	cmp	r2, r3
 8007232:	d902      	bls.n	800723a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	61fb      	str	r3, [r7, #28]
 8007238:	e002      	b.n	8007240 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	429a      	cmp	r2, r3
 8007248:	d04d      	beq.n	80072e6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	429a      	cmp	r2, r3
 8007252:	d148      	bne.n	80072e6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007254:	4b26      	ldr	r3, [pc, #152]	; (80072f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	429a      	cmp	r2, r3
 800725c:	d10c      	bne.n	8007278 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	b672      	cpsid	i
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	b662      	cpsie	i
 8007272:	60bb      	str	r3, [r7, #8]
}
 8007274:	bf00      	nop
 8007276:	e7fe      	b.n	8007276 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	db04      	blt.n	8007296 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	6959      	ldr	r1, [r3, #20]
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4a13      	ldr	r2, [pc, #76]	; (80072f4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80072a6:	4413      	add	r3, r2
 80072a8:	4299      	cmp	r1, r3
 80072aa:	d11c      	bne.n	80072e6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	3304      	adds	r3, #4
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fd ffb7 	bl	8005224 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ba:	4b0f      	ldr	r3, [pc, #60]	; (80072f8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d903      	bls.n	80072ca <vTaskPriorityDisinheritAfterTimeout+0xda>
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	4a0c      	ldr	r2, [pc, #48]	; (80072f8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4a07      	ldr	r2, [pc, #28]	; (80072f4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80072d8:	441a      	add	r2, r3
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	3304      	adds	r3, #4
 80072de:	4619      	mov	r1, r3
 80072e0:	4610      	mov	r0, r2
 80072e2:	f7fd ff42 	bl	800516a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072e6:	bf00      	nop
 80072e8:	3720      	adds	r7, #32
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	200008a4 	.word	0x200008a4
 80072f4:	200008a8 	.word	0x200008a8
 80072f8:	20000d80 	.word	0x20000d80

080072fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007300:	4b07      	ldr	r3, [pc, #28]	; (8007320 <pvTaskIncrementMutexHeldCount+0x24>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <pvTaskIncrementMutexHeldCount+0x24>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800730e:	3201      	adds	r2, #1
 8007310:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007312:	4b03      	ldr	r3, [pc, #12]	; (8007320 <pvTaskIncrementMutexHeldCount+0x24>)
 8007314:	681b      	ldr	r3, [r3, #0]
	}
 8007316:	4618      	mov	r0, r3
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	200008a4 	.word	0x200008a4

08007324 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800732e:	4b21      	ldr	r3, [pc, #132]	; (80073b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007334:	4b20      	ldr	r3, [pc, #128]	; (80073b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3304      	adds	r3, #4
 800733a:	4618      	mov	r0, r3
 800733c:	f7fd ff72 	bl	8005224 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007346:	d10a      	bne.n	800735e <prvAddCurrentTaskToDelayedList+0x3a>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d007      	beq.n	800735e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800734e:	4b1a      	ldr	r3, [pc, #104]	; (80073b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3304      	adds	r3, #4
 8007354:	4619      	mov	r1, r3
 8007356:	4819      	ldr	r0, [pc, #100]	; (80073bc <prvAddCurrentTaskToDelayedList+0x98>)
 8007358:	f7fd ff07 	bl	800516a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800735c:	e026      	b.n	80073ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4413      	add	r3, r2
 8007364:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007366:	4b14      	ldr	r3, [pc, #80]	; (80073b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	429a      	cmp	r2, r3
 8007374:	d209      	bcs.n	800738a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007376:	4b12      	ldr	r3, [pc, #72]	; (80073c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	4b0f      	ldr	r3, [pc, #60]	; (80073b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3304      	adds	r3, #4
 8007380:	4619      	mov	r1, r3
 8007382:	4610      	mov	r0, r2
 8007384:	f7fd ff15 	bl	80051b2 <vListInsert>
}
 8007388:	e010      	b.n	80073ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800738a:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3304      	adds	r3, #4
 8007394:	4619      	mov	r1, r3
 8007396:	4610      	mov	r0, r2
 8007398:	f7fd ff0b 	bl	80051b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800739c:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d202      	bcs.n	80073ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80073a6:	4a08      	ldr	r2, [pc, #32]	; (80073c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	6013      	str	r3, [r2, #0]
}
 80073ac:	bf00      	nop
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	20000d7c 	.word	0x20000d7c
 80073b8:	200008a4 	.word	0x200008a4
 80073bc:	20000d64 	.word	0x20000d64
 80073c0:	20000d34 	.word	0x20000d34
 80073c4:	20000d30 	.word	0x20000d30
 80073c8:	20000d98 	.word	0x20000d98

080073cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08a      	sub	sp, #40	; 0x28
 80073d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073d6:	f000 fb15 	bl	8007a04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073da:	4b1d      	ldr	r3, [pc, #116]	; (8007450 <xTimerCreateTimerTask+0x84>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d021      	beq.n	8007426 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073ea:	1d3a      	adds	r2, r7, #4
 80073ec:	f107 0108 	add.w	r1, r7, #8
 80073f0:	f107 030c 	add.w	r3, r7, #12
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fd fe71 	bl	80050dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	9202      	str	r2, [sp, #8]
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	2302      	movs	r3, #2
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	2300      	movs	r3, #0
 800740a:	460a      	mov	r2, r1
 800740c:	4911      	ldr	r1, [pc, #68]	; (8007454 <xTimerCreateTimerTask+0x88>)
 800740e:	4812      	ldr	r0, [pc, #72]	; (8007458 <xTimerCreateTimerTask+0x8c>)
 8007410:	f7fe ff88 	bl	8006324 <xTaskCreateStatic>
 8007414:	4603      	mov	r3, r0
 8007416:	4a11      	ldr	r2, [pc, #68]	; (800745c <xTimerCreateTimerTask+0x90>)
 8007418:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800741a:	4b10      	ldr	r3, [pc, #64]	; (800745c <xTimerCreateTimerTask+0x90>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007422:	2301      	movs	r3, #1
 8007424:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10c      	bne.n	8007446 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	b672      	cpsid	i
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	b662      	cpsie	i
 8007440:	613b      	str	r3, [r7, #16]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007446:	697b      	ldr	r3, [r7, #20]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	20000dd4 	.word	0x20000dd4
 8007454:	0802029c 	.word	0x0802029c
 8007458:	0800759d 	.word	0x0800759d
 800745c:	20000dd8 	.word	0x20000dd8

08007460 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08a      	sub	sp, #40	; 0x28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800746e:	2300      	movs	r3, #0
 8007470:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10c      	bne.n	8007492 <xTimerGenericCommand+0x32>
	__asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	b672      	cpsid	i
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	b662      	cpsie	i
 800748c:	623b      	str	r3, [r7, #32]
}
 800748e:	bf00      	nop
 8007490:	e7fe      	b.n	8007490 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007492:	4b1a      	ldr	r3, [pc, #104]	; (80074fc <xTimerGenericCommand+0x9c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d02a      	beq.n	80074f0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b05      	cmp	r3, #5
 80074aa:	dc18      	bgt.n	80074de <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074ac:	f7ff fda8 	bl	8007000 <xTaskGetSchedulerState>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d109      	bne.n	80074ca <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074b6:	4b11      	ldr	r3, [pc, #68]	; (80074fc <xTimerGenericCommand+0x9c>)
 80074b8:	6818      	ldr	r0, [r3, #0]
 80074ba:	f107 0110 	add.w	r1, r7, #16
 80074be:	2300      	movs	r3, #0
 80074c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c2:	f7fe f89d 	bl	8005600 <xQueueGenericSend>
 80074c6:	6278      	str	r0, [r7, #36]	; 0x24
 80074c8:	e012      	b.n	80074f0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074ca:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <xTimerGenericCommand+0x9c>)
 80074cc:	6818      	ldr	r0, [r3, #0]
 80074ce:	f107 0110 	add.w	r1, r7, #16
 80074d2:	2300      	movs	r3, #0
 80074d4:	2200      	movs	r2, #0
 80074d6:	f7fe f893 	bl	8005600 <xQueueGenericSend>
 80074da:	6278      	str	r0, [r7, #36]	; 0x24
 80074dc:	e008      	b.n	80074f0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074de:	4b07      	ldr	r3, [pc, #28]	; (80074fc <xTimerGenericCommand+0x9c>)
 80074e0:	6818      	ldr	r0, [r3, #0]
 80074e2:	f107 0110 	add.w	r1, r7, #16
 80074e6:	2300      	movs	r3, #0
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	f7fe f98f 	bl	800580c <xQueueGenericSendFromISR>
 80074ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3728      	adds	r7, #40	; 0x28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20000dd4 	.word	0x20000dd4

08007500 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af02      	add	r7, sp, #8
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800750a:	4b23      	ldr	r3, [pc, #140]	; (8007598 <prvProcessExpiredTimer+0x98>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	3304      	adds	r3, #4
 8007518:	4618      	mov	r0, r3
 800751a:	f7fd fe83 	bl	8005224 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d024      	beq.n	8007576 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	699a      	ldr	r2, [r3, #24]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	18d1      	adds	r1, r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	6978      	ldr	r0, [r7, #20]
 800753a:	f000 f8d3 	bl	80076e4 <prvInsertTimerInActiveList>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d021      	beq.n	8007588 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007544:	2300      	movs	r3, #0
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	2300      	movs	r3, #0
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	2100      	movs	r1, #0
 800754e:	6978      	ldr	r0, [r7, #20]
 8007550:	f7ff ff86 	bl	8007460 <xTimerGenericCommand>
 8007554:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d115      	bne.n	8007588 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	b672      	cpsid	i
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	b662      	cpsie	i
 8007570:	60fb      	str	r3, [r7, #12]
}
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800757c:	f023 0301 	bic.w	r3, r3, #1
 8007580:	b2da      	uxtb	r2, r3
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	6978      	ldr	r0, [r7, #20]
 800758e:	4798      	blx	r3
}
 8007590:	bf00      	nop
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	20000dcc 	.word	0x20000dcc

0800759c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075a4:	f107 0308 	add.w	r3, r7, #8
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 f857 	bl	800765c <prvGetNextExpireTime>
 80075ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4619      	mov	r1, r3
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 f803 	bl	80075c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075ba:	f000 f8d5 	bl	8007768 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075be:	e7f1      	b.n	80075a4 <prvTimerTask+0x8>

080075c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075ca:	f7ff f919 	bl	8006800 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075ce:	f107 0308 	add.w	r3, r7, #8
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 f866 	bl	80076a4 <prvSampleTimeNow>
 80075d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d130      	bne.n	8007642 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10a      	bne.n	80075fc <prvProcessTimerOrBlockTask+0x3c>
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d806      	bhi.n	80075fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075ee:	f7ff f915 	bl	800681c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075f2:	68f9      	ldr	r1, [r7, #12]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7ff ff83 	bl	8007500 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075fa:	e024      	b.n	8007646 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d008      	beq.n	8007614 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007602:	4b13      	ldr	r3, [pc, #76]	; (8007650 <prvProcessTimerOrBlockTask+0x90>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <prvProcessTimerOrBlockTask+0x50>
 800760c:	2301      	movs	r3, #1
 800760e:	e000      	b.n	8007612 <prvProcessTimerOrBlockTask+0x52>
 8007610:	2300      	movs	r3, #0
 8007612:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007614:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <prvProcessTimerOrBlockTask+0x94>)
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	4619      	mov	r1, r3
 8007622:	f7fe fe4b 	bl	80062bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007626:	f7ff f8f9 	bl	800681c <xTaskResumeAll>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007630:	4b09      	ldr	r3, [pc, #36]	; (8007658 <prvProcessTimerOrBlockTask+0x98>)
 8007632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	f3bf 8f6f 	isb	sy
}
 8007640:	e001      	b.n	8007646 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007642:	f7ff f8eb 	bl	800681c <xTaskResumeAll>
}
 8007646:	bf00      	nop
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20000dd0 	.word	0x20000dd0
 8007654:	20000dd4 	.word	0x20000dd4
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007664:	4b0e      	ldr	r3, [pc, #56]	; (80076a0 <prvGetNextExpireTime+0x44>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <prvGetNextExpireTime+0x16>
 800766e:	2201      	movs	r2, #1
 8007670:	e000      	b.n	8007674 <prvGetNextExpireTime+0x18>
 8007672:	2200      	movs	r2, #0
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d105      	bne.n	800768c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <prvGetNextExpireTime+0x44>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60fb      	str	r3, [r7, #12]
 800768a:	e001      	b.n	8007690 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007690:	68fb      	ldr	r3, [r7, #12]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	20000dcc 	.word	0x20000dcc

080076a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076ac:	f7ff f956 	bl	800695c <xTaskGetTickCount>
 80076b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80076b2:	4b0b      	ldr	r3, [pc, #44]	; (80076e0 <prvSampleTimeNow+0x3c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d205      	bcs.n	80076c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076bc:	f000 f93c 	bl	8007938 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	e002      	b.n	80076ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076ce:	4a04      	ldr	r2, [pc, #16]	; (80076e0 <prvSampleTimeNow+0x3c>)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076d4:	68fb      	ldr	r3, [r7, #12]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000ddc 	.word	0x20000ddc

080076e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076f2:	2300      	movs	r3, #0
 80076f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	429a      	cmp	r2, r3
 8007708:	d812      	bhi.n	8007730 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	429a      	cmp	r2, r3
 8007716:	d302      	bcc.n	800771e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007718:	2301      	movs	r3, #1
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	e01b      	b.n	8007756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800771e:	4b10      	ldr	r3, [pc, #64]	; (8007760 <prvInsertTimerInActiveList+0x7c>)
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3304      	adds	r3, #4
 8007726:	4619      	mov	r1, r3
 8007728:	4610      	mov	r0, r2
 800772a:	f7fd fd42 	bl	80051b2 <vListInsert>
 800772e:	e012      	b.n	8007756 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d206      	bcs.n	8007746 <prvInsertTimerInActiveList+0x62>
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	429a      	cmp	r2, r3
 800773e:	d302      	bcc.n	8007746 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007740:	2301      	movs	r3, #1
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	e007      	b.n	8007756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007746:	4b07      	ldr	r3, [pc, #28]	; (8007764 <prvInsertTimerInActiveList+0x80>)
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3304      	adds	r3, #4
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f7fd fd2e 	bl	80051b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007756:	697b      	ldr	r3, [r7, #20]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20000dd0 	.word	0x20000dd0
 8007764:	20000dcc 	.word	0x20000dcc

08007768 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08e      	sub	sp, #56	; 0x38
 800776c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800776e:	e0d0      	b.n	8007912 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	da1a      	bge.n	80077ac <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007776:	1d3b      	adds	r3, r7, #4
 8007778:	3304      	adds	r3, #4
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10c      	bne.n	800779c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	b672      	cpsid	i
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	b662      	cpsie	i
 8007796:	61fb      	str	r3, [r7, #28]
}
 8007798:	bf00      	nop
 800779a:	e7fe      	b.n	800779a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077a2:	6850      	ldr	r0, [r2, #4]
 80077a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077a6:	6892      	ldr	r2, [r2, #8]
 80077a8:	4611      	mov	r1, r2
 80077aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f2c0 80ae 	blt.w	8007910 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d004      	beq.n	80077ca <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	3304      	adds	r3, #4
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fd fd2d 	bl	8005224 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077ca:	463b      	mov	r3, r7
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7ff ff69 	bl	80076a4 <prvSampleTimeNow>
 80077d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b09      	cmp	r3, #9
 80077d8:	f200 809b 	bhi.w	8007912 <prvProcessReceivedCommands+0x1aa>
 80077dc:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <prvProcessReceivedCommands+0x7c>)
 80077de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e2:	bf00      	nop
 80077e4:	0800780d 	.word	0x0800780d
 80077e8:	0800780d 	.word	0x0800780d
 80077ec:	0800780d 	.word	0x0800780d
 80077f0:	08007885 	.word	0x08007885
 80077f4:	08007899 	.word	0x08007899
 80077f8:	080078e7 	.word	0x080078e7
 80077fc:	0800780d 	.word	0x0800780d
 8007800:	0800780d 	.word	0x0800780d
 8007804:	08007885 	.word	0x08007885
 8007808:	08007899 	.word	0x08007899
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007812:	f043 0301 	orr.w	r3, r3, #1
 8007816:	b2da      	uxtb	r2, r3
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	18d1      	adds	r1, r2, r3
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800782c:	f7ff ff5a 	bl	80076e4 <prvInsertTimerInActiveList>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d06d      	beq.n	8007912 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800783c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d062      	beq.n	8007912 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	441a      	add	r2, r3
 8007854:	2300      	movs	r3, #0
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	2300      	movs	r3, #0
 800785a:	2100      	movs	r1, #0
 800785c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800785e:	f7ff fdff 	bl	8007460 <xTimerGenericCommand>
 8007862:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d153      	bne.n	8007912 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	b672      	cpsid	i
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	b662      	cpsie	i
 800787e:	61bb      	str	r3, [r7, #24]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800788a:	f023 0301 	bic.w	r3, r3, #1
 800788e:	b2da      	uxtb	r2, r3
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007896:	e03c      	b.n	8007912 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800789e:	f043 0301 	orr.w	r3, r3, #1
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10c      	bne.n	80078d2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	b672      	cpsid	i
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	b662      	cpsie	i
 80078cc:	617b      	str	r3, [r7, #20]
}
 80078ce:	bf00      	nop
 80078d0:	e7fe      	b.n	80078d0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	18d1      	adds	r1, r2, r3
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e0:	f7ff ff00 	bl	80076e4 <prvInsertTimerInActiveList>
					break;
 80078e4:	e015      	b.n	8007912 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d103      	bne.n	80078fc <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80078f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f6:	f000 fbc7 	bl	8008088 <vPortFree>
 80078fa:	e00a      	b.n	8007912 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007902:	f023 0301 	bic.w	r3, r3, #1
 8007906:	b2da      	uxtb	r2, r3
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800790e:	e000      	b.n	8007912 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007910:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007912:	4b08      	ldr	r3, [pc, #32]	; (8007934 <prvProcessReceivedCommands+0x1cc>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	1d39      	adds	r1, r7, #4
 8007918:	2200      	movs	r2, #0
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe f8ac 	bl	8005a78 <xQueueReceive>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	f47f af24 	bne.w	8007770 <prvProcessReceivedCommands+0x8>
	}
}
 8007928:	bf00      	nop
 800792a:	bf00      	nop
 800792c:	3730      	adds	r7, #48	; 0x30
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20000dd4 	.word	0x20000dd4

08007938 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800793e:	e04a      	b.n	80079d6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007940:	4b2e      	ldr	r3, [pc, #184]	; (80079fc <prvSwitchTimerLists+0xc4>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800794a:	4b2c      	ldr	r3, [pc, #176]	; (80079fc <prvSwitchTimerLists+0xc4>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	3304      	adds	r3, #4
 8007958:	4618      	mov	r0, r3
 800795a:	f7fd fc63 	bl	8005224 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800796c:	f003 0304 	and.w	r3, r3, #4
 8007970:	2b00      	cmp	r3, #0
 8007972:	d030      	beq.n	80079d6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	4413      	add	r3, r2
 800797c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	429a      	cmp	r2, r3
 8007984:	d90e      	bls.n	80079a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007992:	4b1a      	ldr	r3, [pc, #104]	; (80079fc <prvSwitchTimerLists+0xc4>)
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3304      	adds	r3, #4
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f7fd fc08 	bl	80051b2 <vListInsert>
 80079a2:	e018      	b.n	80079d6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079a4:	2300      	movs	r3, #0
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	2300      	movs	r3, #0
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	2100      	movs	r1, #0
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f7ff fd56 	bl	8007460 <xTimerGenericCommand>
 80079b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10c      	bne.n	80079d6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	b672      	cpsid	i
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	b662      	cpsie	i
 80079d0:	603b      	str	r3, [r7, #0]
}
 80079d2:	bf00      	nop
 80079d4:	e7fe      	b.n	80079d4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079d6:	4b09      	ldr	r3, [pc, #36]	; (80079fc <prvSwitchTimerLists+0xc4>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1af      	bne.n	8007940 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079e0:	4b06      	ldr	r3, [pc, #24]	; (80079fc <prvSwitchTimerLists+0xc4>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079e6:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <prvSwitchTimerLists+0xc8>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a04      	ldr	r2, [pc, #16]	; (80079fc <prvSwitchTimerLists+0xc4>)
 80079ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079ee:	4a04      	ldr	r2, [pc, #16]	; (8007a00 <prvSwitchTimerLists+0xc8>)
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	6013      	str	r3, [r2, #0]
}
 80079f4:	bf00      	nop
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20000dcc 	.word	0x20000dcc
 8007a00:	20000dd0 	.word	0x20000dd0

08007a04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a0a:	f000 f947 	bl	8007c9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a0e:	4b15      	ldr	r3, [pc, #84]	; (8007a64 <prvCheckForValidListAndQueue+0x60>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d120      	bne.n	8007a58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a16:	4814      	ldr	r0, [pc, #80]	; (8007a68 <prvCheckForValidListAndQueue+0x64>)
 8007a18:	f7fd fb7a 	bl	8005110 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a1c:	4813      	ldr	r0, [pc, #76]	; (8007a6c <prvCheckForValidListAndQueue+0x68>)
 8007a1e:	f7fd fb77 	bl	8005110 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a22:	4b13      	ldr	r3, [pc, #76]	; (8007a70 <prvCheckForValidListAndQueue+0x6c>)
 8007a24:	4a10      	ldr	r2, [pc, #64]	; (8007a68 <prvCheckForValidListAndQueue+0x64>)
 8007a26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a28:	4b12      	ldr	r3, [pc, #72]	; (8007a74 <prvCheckForValidListAndQueue+0x70>)
 8007a2a:	4a10      	ldr	r2, [pc, #64]	; (8007a6c <prvCheckForValidListAndQueue+0x68>)
 8007a2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a2e:	2300      	movs	r3, #0
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	4b11      	ldr	r3, [pc, #68]	; (8007a78 <prvCheckForValidListAndQueue+0x74>)
 8007a34:	4a11      	ldr	r2, [pc, #68]	; (8007a7c <prvCheckForValidListAndQueue+0x78>)
 8007a36:	2110      	movs	r1, #16
 8007a38:	200a      	movs	r0, #10
 8007a3a:	f7fd fc87 	bl	800534c <xQueueGenericCreateStatic>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	4a08      	ldr	r2, [pc, #32]	; (8007a64 <prvCheckForValidListAndQueue+0x60>)
 8007a42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a44:	4b07      	ldr	r3, [pc, #28]	; (8007a64 <prvCheckForValidListAndQueue+0x60>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d005      	beq.n	8007a58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a4c:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <prvCheckForValidListAndQueue+0x60>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	490b      	ldr	r1, [pc, #44]	; (8007a80 <prvCheckForValidListAndQueue+0x7c>)
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fbde 	bl	8006214 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a58:	f000 f954 	bl	8007d04 <vPortExitCritical>
}
 8007a5c:	bf00      	nop
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000dd4 	.word	0x20000dd4
 8007a68:	20000da4 	.word	0x20000da4
 8007a6c:	20000db8 	.word	0x20000db8
 8007a70:	20000dcc 	.word	0x20000dcc
 8007a74:	20000dd0 	.word	0x20000dd0
 8007a78:	20000e80 	.word	0x20000e80
 8007a7c:	20000de0 	.word	0x20000de0
 8007a80:	080202a4 	.word	0x080202a4

08007a84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3b04      	subs	r3, #4
 8007a94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3b04      	subs	r3, #4
 8007aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f023 0201 	bic.w	r2, r3, #1
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3b04      	subs	r3, #4
 8007ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ab4:	4a0c      	ldr	r2, [pc, #48]	; (8007ae8 <pxPortInitialiseStack+0x64>)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3b14      	subs	r3, #20
 8007abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3b04      	subs	r3, #4
 8007aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f06f 0202 	mvn.w	r2, #2
 8007ad2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3b20      	subs	r3, #32
 8007ad8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ada:	68fb      	ldr	r3, [r7, #12]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	08007aed 	.word	0x08007aed

08007aec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007af6:	4b14      	ldr	r3, [pc, #80]	; (8007b48 <prvTaskExitError+0x5c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afe:	d00c      	beq.n	8007b1a <prvTaskExitError+0x2e>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b04:	b672      	cpsid	i
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	b662      	cpsie	i
 8007b14:	60fb      	str	r3, [r7, #12]
}
 8007b16:	bf00      	nop
 8007b18:	e7fe      	b.n	8007b18 <prvTaskExitError+0x2c>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	b672      	cpsid	i
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	b662      	cpsie	i
 8007b2e:	60bb      	str	r3, [r7, #8]
}
 8007b30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b32:	bf00      	nop
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0fc      	beq.n	8007b34 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b3a:	bf00      	nop
 8007b3c:	bf00      	nop
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	20000010 	.word	0x20000010
 8007b4c:	00000000 	.word	0x00000000

08007b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b50:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <pxCurrentTCBConst2>)
 8007b52:	6819      	ldr	r1, [r3, #0]
 8007b54:	6808      	ldr	r0, [r1, #0]
 8007b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	f380 8809 	msr	PSP, r0
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f04f 0000 	mov.w	r0, #0
 8007b66:	f380 8811 	msr	BASEPRI, r0
 8007b6a:	4770      	bx	lr
 8007b6c:	f3af 8000 	nop.w

08007b70 <pxCurrentTCBConst2>:
 8007b70:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop

08007b78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b78:	4808      	ldr	r0, [pc, #32]	; (8007b9c <prvPortStartFirstTask+0x24>)
 8007b7a:	6800      	ldr	r0, [r0, #0]
 8007b7c:	6800      	ldr	r0, [r0, #0]
 8007b7e:	f380 8808 	msr	MSP, r0
 8007b82:	f04f 0000 	mov.w	r0, #0
 8007b86:	f380 8814 	msr	CONTROL, r0
 8007b8a:	b662      	cpsie	i
 8007b8c:	b661      	cpsie	f
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	df00      	svc	0
 8007b98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b9a:	bf00      	nop
 8007b9c:	e000ed08 	.word	0xe000ed08

08007ba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ba6:	4b37      	ldr	r3, [pc, #220]	; (8007c84 <xPortStartScheduler+0xe4>)
 8007ba8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	22ff      	movs	r2, #255	; 0xff
 8007bb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	4b2f      	ldr	r3, [pc, #188]	; (8007c88 <xPortStartScheduler+0xe8>)
 8007bcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bce:	4b2f      	ldr	r3, [pc, #188]	; (8007c8c <xPortStartScheduler+0xec>)
 8007bd0:	2207      	movs	r2, #7
 8007bd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bd4:	e009      	b.n	8007bea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007bd6:	4b2d      	ldr	r3, [pc, #180]	; (8007c8c <xPortStartScheduler+0xec>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	4a2b      	ldr	r2, [pc, #172]	; (8007c8c <xPortStartScheduler+0xec>)
 8007bde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf2:	2b80      	cmp	r3, #128	; 0x80
 8007bf4:	d0ef      	beq.n	8007bd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bf6:	4b25      	ldr	r3, [pc, #148]	; (8007c8c <xPortStartScheduler+0xec>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f1c3 0307 	rsb	r3, r3, #7
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d00c      	beq.n	8007c1c <xPortStartScheduler+0x7c>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	b672      	cpsid	i
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	b662      	cpsie	i
 8007c16:	60bb      	str	r3, [r7, #8]
}
 8007c18:	bf00      	nop
 8007c1a:	e7fe      	b.n	8007c1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c1c:	4b1b      	ldr	r3, [pc, #108]	; (8007c8c <xPortStartScheduler+0xec>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	021b      	lsls	r3, r3, #8
 8007c22:	4a1a      	ldr	r2, [pc, #104]	; (8007c8c <xPortStartScheduler+0xec>)
 8007c24:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c26:	4b19      	ldr	r3, [pc, #100]	; (8007c8c <xPortStartScheduler+0xec>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c2e:	4a17      	ldr	r2, [pc, #92]	; (8007c8c <xPortStartScheduler+0xec>)
 8007c30:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c3a:	4b15      	ldr	r3, [pc, #84]	; (8007c90 <xPortStartScheduler+0xf0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a14      	ldr	r2, [pc, #80]	; (8007c90 <xPortStartScheduler+0xf0>)
 8007c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c46:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <xPortStartScheduler+0xf0>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a11      	ldr	r2, [pc, #68]	; (8007c90 <xPortStartScheduler+0xf0>)
 8007c4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c50:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c52:	f000 f8dd 	bl	8007e10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c56:	4b0f      	ldr	r3, [pc, #60]	; (8007c94 <xPortStartScheduler+0xf4>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c5c:	f000 f8fc 	bl	8007e58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c60:	4b0d      	ldr	r3, [pc, #52]	; (8007c98 <xPortStartScheduler+0xf8>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a0c      	ldr	r2, [pc, #48]	; (8007c98 <xPortStartScheduler+0xf8>)
 8007c66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c6a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c6c:	f7ff ff84 	bl	8007b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c70:	f7fe ff40 	bl	8006af4 <vTaskSwitchContext>
	prvTaskExitError();
 8007c74:	f7ff ff3a 	bl	8007aec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	e000e400 	.word	0xe000e400
 8007c88:	20000ed0 	.word	0x20000ed0
 8007c8c:	20000ed4 	.word	0x20000ed4
 8007c90:	e000ed20 	.word	0xe000ed20
 8007c94:	20000010 	.word	0x20000010
 8007c98:	e000ef34 	.word	0xe000ef34

08007c9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	b672      	cpsid	i
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	b662      	cpsie	i
 8007cb6:	607b      	str	r3, [r7, #4]
}
 8007cb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cba:	4b10      	ldr	r3, [pc, #64]	; (8007cfc <vPortEnterCritical+0x60>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	4a0e      	ldr	r2, [pc, #56]	; (8007cfc <vPortEnterCritical+0x60>)
 8007cc2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cc4:	4b0d      	ldr	r3, [pc, #52]	; (8007cfc <vPortEnterCritical+0x60>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d111      	bne.n	8007cf0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ccc:	4b0c      	ldr	r3, [pc, #48]	; (8007d00 <vPortEnterCritical+0x64>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00c      	beq.n	8007cf0 <vPortEnterCritical+0x54>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	b672      	cpsid	i
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	b662      	cpsie	i
 8007cea:	603b      	str	r3, [r7, #0]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <vPortEnterCritical+0x52>
	}
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	20000010 	.word	0x20000010
 8007d00:	e000ed04 	.word	0xe000ed04

08007d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d0a:	4b13      	ldr	r3, [pc, #76]	; (8007d58 <vPortExitCritical+0x54>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10c      	bne.n	8007d2c <vPortExitCritical+0x28>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	b672      	cpsid	i
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	b662      	cpsie	i
 8007d26:	607b      	str	r3, [r7, #4]
}
 8007d28:	bf00      	nop
 8007d2a:	e7fe      	b.n	8007d2a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007d2c:	4b0a      	ldr	r3, [pc, #40]	; (8007d58 <vPortExitCritical+0x54>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	4a09      	ldr	r2, [pc, #36]	; (8007d58 <vPortExitCritical+0x54>)
 8007d34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d36:	4b08      	ldr	r3, [pc, #32]	; (8007d58 <vPortExitCritical+0x54>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d105      	bne.n	8007d4a <vPortExitCritical+0x46>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	f383 8811 	msr	BASEPRI, r3
}
 8007d48:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d4a:	bf00      	nop
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	20000010 	.word	0x20000010
 8007d5c:	00000000 	.word	0x00000000

08007d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d60:	f3ef 8009 	mrs	r0, PSP
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	4b15      	ldr	r3, [pc, #84]	; (8007dc0 <pxCurrentTCBConst>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	f01e 0f10 	tst.w	lr, #16
 8007d70:	bf08      	it	eq
 8007d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7a:	6010      	str	r0, [r2, #0]
 8007d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d84:	b672      	cpsid	i
 8007d86:	f380 8811 	msr	BASEPRI, r0
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	b662      	cpsie	i
 8007d94:	f7fe feae 	bl	8006af4 <vTaskSwitchContext>
 8007d98:	f04f 0000 	mov.w	r0, #0
 8007d9c:	f380 8811 	msr	BASEPRI, r0
 8007da0:	bc09      	pop	{r0, r3}
 8007da2:	6819      	ldr	r1, [r3, #0]
 8007da4:	6808      	ldr	r0, [r1, #0]
 8007da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007daa:	f01e 0f10 	tst.w	lr, #16
 8007dae:	bf08      	it	eq
 8007db0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007db4:	f380 8809 	msr	PSP, r0
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop

08007dc0 <pxCurrentTCBConst>:
 8007dc0:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop

08007dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd2:	b672      	cpsid	i
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	b662      	cpsie	i
 8007de2:	607b      	str	r3, [r7, #4]
}
 8007de4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007de6:	f7fe fdc9 	bl	800697c <xTaskIncrementTick>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007df0:	4b06      	ldr	r3, [pc, #24]	; (8007e0c <SysTick_Handler+0x44>)
 8007df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	f383 8811 	msr	BASEPRI, r3
}
 8007e02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	e000ed04 	.word	0xe000ed04

08007e10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e10:	b480      	push	{r7}
 8007e12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e14:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <vPortSetupTimerInterrupt+0x34>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e1a:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <vPortSetupTimerInterrupt+0x38>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e20:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <vPortSetupTimerInterrupt+0x3c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a0a      	ldr	r2, [pc, #40]	; (8007e50 <vPortSetupTimerInterrupt+0x40>)
 8007e26:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2a:	099b      	lsrs	r3, r3, #6
 8007e2c:	4a09      	ldr	r2, [pc, #36]	; (8007e54 <vPortSetupTimerInterrupt+0x44>)
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e32:	4b04      	ldr	r3, [pc, #16]	; (8007e44 <vPortSetupTimerInterrupt+0x34>)
 8007e34:	2207      	movs	r2, #7
 8007e36:	601a      	str	r2, [r3, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	e000e010 	.word	0xe000e010
 8007e48:	e000e018 	.word	0xe000e018
 8007e4c:	20000004 	.word	0x20000004
 8007e50:	10624dd3 	.word	0x10624dd3
 8007e54:	e000e014 	.word	0xe000e014

08007e58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e58:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e68 <vPortEnableVFP+0x10>
 8007e5c:	6801      	ldr	r1, [r0, #0]
 8007e5e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e62:	6001      	str	r1, [r0, #0]
 8007e64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e66:	bf00      	nop
 8007e68:	e000ed88 	.word	0xe000ed88

08007e6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e72:	f3ef 8305 	mrs	r3, IPSR
 8007e76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2b0f      	cmp	r3, #15
 8007e7c:	d916      	bls.n	8007eac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e7e:	4a19      	ldr	r2, [pc, #100]	; (8007ee4 <vPortValidateInterruptPriority+0x78>)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4413      	add	r3, r2
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e88:	4b17      	ldr	r3, [pc, #92]	; (8007ee8 <vPortValidateInterruptPriority+0x7c>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	7afa      	ldrb	r2, [r7, #11]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d20c      	bcs.n	8007eac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e96:	b672      	cpsid	i
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	b662      	cpsie	i
 8007ea6:	607b      	str	r3, [r7, #4]
}
 8007ea8:	bf00      	nop
 8007eaa:	e7fe      	b.n	8007eaa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007eac:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <vPortValidateInterruptPriority+0x80>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <vPortValidateInterruptPriority+0x84>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d90c      	bls.n	8007ed6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	b672      	cpsid	i
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	b662      	cpsie	i
 8007ed0:	603b      	str	r3, [r7, #0]
}
 8007ed2:	bf00      	nop
 8007ed4:	e7fe      	b.n	8007ed4 <vPortValidateInterruptPriority+0x68>
	}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	e000e3f0 	.word	0xe000e3f0
 8007ee8:	20000ed0 	.word	0x20000ed0
 8007eec:	e000ed0c 	.word	0xe000ed0c
 8007ef0:	20000ed4 	.word	0x20000ed4

08007ef4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	; 0x28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f00:	f7fe fc7e 	bl	8006800 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f04:	4b5b      	ldr	r3, [pc, #364]	; (8008074 <pvPortMalloc+0x180>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f0c:	f000 f91a 	bl	8008144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f10:	4b59      	ldr	r3, [pc, #356]	; (8008078 <pvPortMalloc+0x184>)
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4013      	ands	r3, r2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f040 8092 	bne.w	8008042 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d01f      	beq.n	8007f64 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007f24:	2208      	movs	r2, #8
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4413      	add	r3, r2
 8007f2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d016      	beq.n	8007f64 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f023 0307 	bic.w	r3, r3, #7
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00c      	beq.n	8007f64 <pvPortMalloc+0x70>
	__asm volatile
 8007f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4e:	b672      	cpsid	i
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	b662      	cpsie	i
 8007f5e:	617b      	str	r3, [r7, #20]
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d06b      	beq.n	8008042 <pvPortMalloc+0x14e>
 8007f6a:	4b44      	ldr	r3, [pc, #272]	; (800807c <pvPortMalloc+0x188>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d866      	bhi.n	8008042 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f74:	4b42      	ldr	r3, [pc, #264]	; (8008080 <pvPortMalloc+0x18c>)
 8007f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f78:	4b41      	ldr	r3, [pc, #260]	; (8008080 <pvPortMalloc+0x18c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f7e:	e004      	b.n	8007f8a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d903      	bls.n	8007f9c <pvPortMalloc+0xa8>
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1f1      	bne.n	8007f80 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f9c:	4b35      	ldr	r3, [pc, #212]	; (8008074 <pvPortMalloc+0x180>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d04d      	beq.n	8008042 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2208      	movs	r2, #8
 8007fac:	4413      	add	r3, r2
 8007fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	1ad2      	subs	r2, r2, r3
 8007fc0:	2308      	movs	r3, #8
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d921      	bls.n	800800c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	f003 0307 	and.w	r3, r3, #7
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00c      	beq.n	8007ff4 <pvPortMalloc+0x100>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	b672      	cpsid	i
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	b662      	cpsie	i
 8007fee:	613b      	str	r3, [r7, #16]
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	1ad2      	subs	r2, r2, r3
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008006:	69b8      	ldr	r0, [r7, #24]
 8008008:	f000 f8fe 	bl	8008208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800800c:	4b1b      	ldr	r3, [pc, #108]	; (800807c <pvPortMalloc+0x188>)
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	4a19      	ldr	r2, [pc, #100]	; (800807c <pvPortMalloc+0x188>)
 8008018:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800801a:	4b18      	ldr	r3, [pc, #96]	; (800807c <pvPortMalloc+0x188>)
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b19      	ldr	r3, [pc, #100]	; (8008084 <pvPortMalloc+0x190>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	d203      	bcs.n	800802e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008026:	4b15      	ldr	r3, [pc, #84]	; (800807c <pvPortMalloc+0x188>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a16      	ldr	r2, [pc, #88]	; (8008084 <pvPortMalloc+0x190>)
 800802c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	4b11      	ldr	r3, [pc, #68]	; (8008078 <pvPortMalloc+0x184>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	431a      	orrs	r2, r3
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008042:	f7fe fbeb 	bl	800681c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	f003 0307 	and.w	r3, r3, #7
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <pvPortMalloc+0x176>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	b672      	cpsid	i
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	b662      	cpsie	i
 8008064:	60fb      	str	r3, [r7, #12]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <pvPortMalloc+0x174>
	return pvReturn;
 800806a:	69fb      	ldr	r3, [r7, #28]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3728      	adds	r7, #40	; 0x28
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20008ee0 	.word	0x20008ee0
 8008078:	20008eec 	.word	0x20008eec
 800807c:	20008ee4 	.word	0x20008ee4
 8008080:	20008ed8 	.word	0x20008ed8
 8008084:	20008ee8 	.word	0x20008ee8

08008088 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d04c      	beq.n	8008134 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800809a:	2308      	movs	r3, #8
 800809c:	425b      	negs	r3, r3
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	4413      	add	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	4b23      	ldr	r3, [pc, #140]	; (800813c <vPortFree+0xb4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4013      	ands	r3, r2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10c      	bne.n	80080d0 <vPortFree+0x48>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	b672      	cpsid	i
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	b662      	cpsie	i
 80080ca:	60fb      	str	r3, [r7, #12]
}
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00c      	beq.n	80080f2 <vPortFree+0x6a>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	b672      	cpsid	i
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	b662      	cpsie	i
 80080ec:	60bb      	str	r3, [r7, #8]
}
 80080ee:	bf00      	nop
 80080f0:	e7fe      	b.n	80080f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	4b11      	ldr	r3, [pc, #68]	; (800813c <vPortFree+0xb4>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4013      	ands	r3, r2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d019      	beq.n	8008134 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d115      	bne.n	8008134 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	4b0b      	ldr	r3, [pc, #44]	; (800813c <vPortFree+0xb4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	43db      	mvns	r3, r3
 8008112:	401a      	ands	r2, r3
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008118:	f7fe fb72 	bl	8006800 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	4b07      	ldr	r3, [pc, #28]	; (8008140 <vPortFree+0xb8>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4413      	add	r3, r2
 8008126:	4a06      	ldr	r2, [pc, #24]	; (8008140 <vPortFree+0xb8>)
 8008128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800812a:	6938      	ldr	r0, [r7, #16]
 800812c:	f000 f86c 	bl	8008208 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008130:	f7fe fb74 	bl	800681c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008134:	bf00      	nop
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	20008eec 	.word	0x20008eec
 8008140:	20008ee4 	.word	0x20008ee4

08008144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800814a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800814e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008150:	4b27      	ldr	r3, [pc, #156]	; (80081f0 <prvHeapInit+0xac>)
 8008152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00c      	beq.n	8008178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3307      	adds	r3, #7
 8008162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0307 	bic.w	r3, r3, #7
 800816a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	4a1f      	ldr	r2, [pc, #124]	; (80081f0 <prvHeapInit+0xac>)
 8008174:	4413      	add	r3, r2
 8008176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800817c:	4a1d      	ldr	r2, [pc, #116]	; (80081f4 <prvHeapInit+0xb0>)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008182:	4b1c      	ldr	r3, [pc, #112]	; (80081f4 <prvHeapInit+0xb0>)
 8008184:	2200      	movs	r2, #0
 8008186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	4413      	add	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008190:	2208      	movs	r2, #8
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	1a9b      	subs	r3, r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 0307 	bic.w	r3, r3, #7
 800819e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a15      	ldr	r2, [pc, #84]	; (80081f8 <prvHeapInit+0xb4>)
 80081a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081a6:	4b14      	ldr	r3, [pc, #80]	; (80081f8 <prvHeapInit+0xb4>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2200      	movs	r2, #0
 80081ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081ae:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <prvHeapInit+0xb4>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	1ad2      	subs	r2, r2, r3
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <prvHeapInit+0xb4>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4a0a      	ldr	r2, [pc, #40]	; (80081fc <prvHeapInit+0xb8>)
 80081d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	4a09      	ldr	r2, [pc, #36]	; (8008200 <prvHeapInit+0xbc>)
 80081da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081dc:	4b09      	ldr	r3, [pc, #36]	; (8008204 <prvHeapInit+0xc0>)
 80081de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081e2:	601a      	str	r2, [r3, #0]
}
 80081e4:	bf00      	nop
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	20000ed8 	.word	0x20000ed8
 80081f4:	20008ed8 	.word	0x20008ed8
 80081f8:	20008ee0 	.word	0x20008ee0
 80081fc:	20008ee8 	.word	0x20008ee8
 8008200:	20008ee4 	.word	0x20008ee4
 8008204:	20008eec 	.word	0x20008eec

08008208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008210:	4b28      	ldr	r3, [pc, #160]	; (80082b4 <prvInsertBlockIntoFreeList+0xac>)
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	e002      	b.n	800821c <prvInsertBlockIntoFreeList+0x14>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	429a      	cmp	r2, r3
 8008224:	d8f7      	bhi.n	8008216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	4413      	add	r3, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	429a      	cmp	r2, r3
 8008236:	d108      	bne.n	800824a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	441a      	add	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	441a      	add	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d118      	bne.n	8008290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	4b15      	ldr	r3, [pc, #84]	; (80082b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	429a      	cmp	r2, r3
 8008268:	d00d      	beq.n	8008286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	441a      	add	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	e008      	b.n	8008298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008286:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	e003      	b.n	8008298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	429a      	cmp	r2, r3
 800829e:	d002      	beq.n	80082a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082a6:	bf00      	nop
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	20008ed8 	.word	0x20008ed8
 80082b8:	20008ee0 	.word	0x20008ee0

080082bc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80082c0:	f003 fe58 	bl	800bf74 <touchgfx_init>
}
 80082c4:	bf00      	nop
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80082d0:	f003 fe7a 	bl	800bfc8 <touchgfx_taskEntry>
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
    {
 80082e4:	4a04      	ldr	r2, [pc, #16]	; (80082f8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	601a      	str	r2, [r3, #0]
    }
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	08020ddc 	.word	0x08020ddc

080082fc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
    }
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7ff ffe9 	bl	80082dc <_ZN8touchgfx12FontProviderD1Ev>
 800830a:	2104      	movs	r1, #4
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f016 fe94 	bl	801f03a <_ZdlPvj>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8008328:	887b      	ldrh	r3, [r7, #2]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d104      	bne.n	8008338 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
    {
    case Typography::DEFAULT:
        // Asap_Regular_80_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800832e:	f002 f927 	bl	800a580 <_ZN17TypedTextDatabase8getFontsEv>
 8008332:	4603      	mov	r3, r0
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	e000      	b.n	800833a <_ZN23ApplicationFontProvider7getFontEt+0x1e>
    default:
        return 0;
 8008338:	2300      	movs	r3, #0
    }
}
 800833a:	4618      	mov	r0, r3
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <_ZN23ApplicationFontProviderD1Ev>:
{
    static const touchgfx::FontId DEFAULT = 0; // Asap_Regular_80_4bpp
    static const uint16_t NUMBER_OF_FONTS = 1;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	4a05      	ldr	r2, [pc, #20]	; (8008364 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff ffc1 	bl	80082dc <_ZN8touchgfx12FontProviderD1Ev>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	08020dc8 	.word	0x08020dc8

08008368 <_ZN23ApplicationFontProviderD0Ev>:
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f7ff ffe7 	bl	8008344 <_ZN23ApplicationFontProviderD1Ev>
 8008376:	2104      	movs	r1, #4
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f016 fe5e 	bl	801f03a <_ZdlPvj>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
    {
 8008390:	4a04      	ldr	r2, [pc, #16]	; (80083a4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	601a      	str	r2, [r3, #0]
    }
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	08021124 	.word	0x08021124

080083a8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
    }
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff ffe9 	bl	8008388 <_ZN8touchgfx4FontD1Ev>
 80083b6:	2110      	movs	r1, #16
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f016 fe3e 	bl	801f03a <_ZdlPvj>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80083c8:	b590      	push	{r4, r7, lr}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80083d4:	887b      	ldrh	r3, [r7, #2]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	e010      	b.n	8008400 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3308      	adds	r3, #8
 80083ec:	681c      	ldr	r4, [r3, #0]
 80083ee:	f107 030f 	add.w	r3, r7, #15
 80083f2:	f107 0210 	add.w	r2, r7, #16
 80083f6:	8879      	ldrh	r1, [r7, #2]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	47a0      	blx	r4
 80083fc:	6178      	str	r0, [r7, #20]
        return glyph;
 80083fe:	697b      	ldr	r3, [r7, #20]
    }
 8008400:	4618      	mov	r0, r3
 8008402:	371c      	adds	r7, #28
 8008404:	46bd      	mov	sp, r7
 8008406:	bd90      	pop	{r4, r7, pc}

08008408 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	895b      	ldrh	r3, [r3, #10]
    }
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	899b      	ldrh	r3, [r3, #12]
    }
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	889b      	ldrh	r3, [r3, #4]
    }
 8008444:	4618      	mov	r0, r3
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	889a      	ldrh	r2, [r3, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	799b      	ldrb	r3, [r3, #6]
 8008460:	b29b      	uxth	r3, r3
 8008462:	4413      	add	r3, r2
 8008464:	b29b      	uxth	r3, r3
    }
 8008466:	4618      	mov	r0, r3
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	79db      	ldrb	r3, [r3, #7]
 800847e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8008482:	b2db      	uxtb	r3, r3
    }
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	79db      	ldrb	r3, [r3, #7]
 800849c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80084a0:	b2db      	uxtb	r3, r3
    }
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
	...

080084b0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	4a05      	ldr	r2, [pc, #20]	; (80084d0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7ff ff61 	bl	8008388 <_ZN8touchgfx4FontD1Ev>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	08022974 	.word	0x08022974

080084d4 <_ZN8touchgfx9ConstFontD0Ev>:
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff ffe7 	bl	80084b0 <_ZN8touchgfx9ConstFontD1Ev>
 80084e2:	2118      	movs	r1, #24
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f016 fda8 	bl	801f03a <_ZdlPvj>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	4a05      	ldr	r2, [pc, #20]	; (8008514 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff ffd3 	bl	80084b0 <_ZN8touchgfx9ConstFontD1Ev>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4618      	mov	r0, r3
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	08020e00 	.word	0x08020e00

08008518 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7ff ffe7 	bl	80084f4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008526:	2128      	movs	r1, #40	; 0x28
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f016 fd86 	bl	801f03a <_ZdlPvj>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4618      	mov	r0, r3
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
    {
 8008540:	4a04      	ldr	r2, [pc, #16]	; (8008554 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	601a      	str	r2, [r3, #0]
    }
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	08020df0 	.word	0x08020df0

08008558 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
    }
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff ffe9 	bl	8008538 <_ZN8touchgfx9TypedTextD1Ev>
 8008566:	2108      	movs	r1, #8
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f016 fd66 	bl	801f03a <_ZdlPvj>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4618      	mov	r0, r3
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a1b      	ldr	r3, [r3, #32]
    }
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800859c:	4618      	mov	r0, r3
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08c      	sub	sp, #48	; 0x30
 80085ac:	af08      	add	r7, sp, #32
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	4611      	mov	r1, r2
 80085b4:	461a      	mov	r2, r3
 80085b6:	460b      	mov	r3, r1
 80085b8:	80fb      	strh	r3, [r7, #6]
 80085ba:	4613      	mov	r3, r2
 80085bc:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	88b9      	ldrh	r1, [r7, #4]
 80085c2:	88fa      	ldrh	r2, [r7, #6]
 80085c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80085c6:	9306      	str	r3, [sp, #24]
 80085c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80085ca:	9305      	str	r3, [sp, #20]
 80085cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085d0:	9304      	str	r3, [sp, #16]
 80085d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80085d6:	9303      	str	r3, [sp, #12]
 80085d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80085dc:	9302      	str	r3, [sp, #8]
 80085de:	7f3b      	ldrb	r3, [r7, #28]
 80085e0:	9301      	str	r3, [sp, #4]
 80085e2:	7e3b      	ldrb	r3, [r7, #24]
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	460b      	mov	r3, r1
 80085e8:	68b9      	ldr	r1, [r7, #8]
 80085ea:	f008 fd43 	bl	8011074 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80085ee:	4a0a      	ldr	r2, [pc, #40]	; (8008618 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085f8:	619a      	str	r2, [r3, #24]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085fe:	61da      	str	r2, [r3, #28]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008604:	621a      	str	r2, [r3, #32]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800860a:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	08020e00 	.word	0x08020e00

0800861c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	889b      	ldrh	r3, [r3, #4]
 8008630:	0adb      	lsrs	r3, r3, #11
 8008632:	b29b      	uxth	r3, r3
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	4413      	add	r3, r2
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4413      	add	r3, r2
}
 8008642:	4618      	mov	r0, r3
 8008644:	3714      	adds	r7, #20
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800864e:	b480      	push	{r7}
 8008650:	b089      	sub	sp, #36	; 0x24
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	460b      	mov	r3, r1
 8008658:	607a      	str	r2, [r7, #4]
 800865a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	7b1b      	ldrb	r3, [r3, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800866a:	2300      	movs	r3, #0
 800866c:	e030      	b.n	80086d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	69da      	ldr	r2, [r3, #28]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	7b5b      	ldrb	r3, [r3, #13]
 800867a:	021b      	lsls	r3, r3, #8
 800867c:	b21b      	sxth	r3, r3
 800867e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008682:	b219      	sxth	r1, r3
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	7adb      	ldrb	r3, [r3, #11]
 8008688:	b21b      	sxth	r3, r3
 800868a:	430b      	orrs	r3, r1
 800868c:	b21b      	sxth	r3, r3
 800868e:	b29b      	uxth	r3, r3
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	7b1b      	ldrb	r3, [r3, #12]
 800869a:	837b      	strh	r3, [r7, #26]
 800869c:	8b7b      	ldrh	r3, [r7, #26]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d015      	beq.n	80086ce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	881b      	ldrh	r3, [r3, #0]
 80086a6:	897a      	ldrh	r2, [r7, #10]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d103      	bne.n	80086b4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80086b2:	e00d      	b.n	80086d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	897a      	ldrh	r2, [r7, #10]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d306      	bcc.n	80086cc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80086be:	8b7b      	ldrh	r3, [r7, #26]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	837b      	strh	r3, [r7, #26]
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	3304      	adds	r3, #4
 80086c8:	61fb      	str	r3, [r7, #28]
 80086ca:	e7e7      	b.n	800869c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 80086cc:	bf00      	nop
        }
    }
    return 0;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3724      	adds	r7, #36	; 0x24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Asap_Regular_80_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Asap_Regular_80_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Regular_80_4bpp()
{
    static touchgfx::GeneratedFont Asap_Regular_80_4bpp(glyphs_Asap_Regular_80_4bpp, 10, 80, 0, 4, 1, 0, 0, unicodes_Asap_Regular_80_4bpp, kerning_Asap_Regular_80_4bpp, 0, 0, 0, 0);
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
 80086e0:	4801      	ldr	r0, [pc, #4]	; (80086e8 <__tcf_0+0xc>)
 80086e2:	f7ff ff07 	bl	80084f4 <_ZN8touchgfx13GeneratedFontD1Ev>
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	20008ef0 	.word	0x20008ef0

080086ec <_Z28getFont_Asap_Regular_80_4bppv>:
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08c      	sub	sp, #48	; 0x30
 80086f0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont Asap_Regular_80_4bpp(glyphs_Asap_Regular_80_4bpp, 10, 80, 0, 4, 1, 0, 0, unicodes_Asap_Regular_80_4bpp, kerning_Asap_Regular_80_4bpp, 0, 0, 0, 0);
 80086f2:	4b1f      	ldr	r3, [pc, #124]	; (8008770 <_Z28getFont_Asap_Regular_80_4bppv+0x84>)
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	f3bf 8f5b 	dmb	ish
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b00      	cmp	r3, #0
 8008702:	bf0c      	ite	eq
 8008704:	2301      	moveq	r3, #1
 8008706:	2300      	movne	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d02c      	beq.n	8008768 <_Z28getFont_Asap_Regular_80_4bppv+0x7c>
 800870e:	4818      	ldr	r0, [pc, #96]	; (8008770 <_Z28getFont_Asap_Regular_80_4bppv+0x84>)
 8008710:	f016 fc95 	bl	801f03e <__cxa_guard_acquire>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	bf14      	ite	ne
 800871a:	2301      	movne	r3, #1
 800871c:	2300      	moveq	r3, #0
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	d021      	beq.n	8008768 <_Z28getFont_Asap_Regular_80_4bppv+0x7c>
 8008724:	2300      	movs	r3, #0
 8008726:	930a      	str	r3, [sp, #40]	; 0x28
 8008728:	2300      	movs	r3, #0
 800872a:	9309      	str	r3, [sp, #36]	; 0x24
 800872c:	2300      	movs	r3, #0
 800872e:	9308      	str	r3, [sp, #32]
 8008730:	2300      	movs	r3, #0
 8008732:	9307      	str	r3, [sp, #28]
 8008734:	4b0f      	ldr	r3, [pc, #60]	; (8008774 <_Z28getFont_Asap_Regular_80_4bppv+0x88>)
 8008736:	9306      	str	r3, [sp, #24]
 8008738:	4b0f      	ldr	r3, [pc, #60]	; (8008778 <_Z28getFont_Asap_Regular_80_4bppv+0x8c>)
 800873a:	9305      	str	r3, [sp, #20]
 800873c:	2300      	movs	r3, #0
 800873e:	9304      	str	r3, [sp, #16]
 8008740:	2300      	movs	r3, #0
 8008742:	9303      	str	r3, [sp, #12]
 8008744:	2301      	movs	r3, #1
 8008746:	9302      	str	r3, [sp, #8]
 8008748:	2304      	movs	r3, #4
 800874a:	9301      	str	r3, [sp, #4]
 800874c:	2300      	movs	r3, #0
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	2350      	movs	r3, #80	; 0x50
 8008752:	220a      	movs	r2, #10
 8008754:	4909      	ldr	r1, [pc, #36]	; (800877c <_Z28getFont_Asap_Regular_80_4bppv+0x90>)
 8008756:	480a      	ldr	r0, [pc, #40]	; (8008780 <_Z28getFont_Asap_Regular_80_4bppv+0x94>)
 8008758:	f7ff ff26 	bl	80085a8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800875c:	4804      	ldr	r0, [pc, #16]	; (8008770 <_Z28getFont_Asap_Regular_80_4bppv+0x84>)
 800875e:	f016 fc7a 	bl	801f056 <__cxa_guard_release>
 8008762:	4808      	ldr	r0, [pc, #32]	; (8008784 <_Z28getFont_Asap_Regular_80_4bppv+0x98>)
 8008764:	f016 fcb6 	bl	801f0d4 <atexit>
    return Asap_Regular_80_4bpp;
 8008768:	4b05      	ldr	r3, [pc, #20]	; (8008780 <_Z28getFont_Asap_Regular_80_4bppv+0x94>)
}
 800876a:	4618      	mov	r0, r3
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	20008f18 	.word	0x20008f18
 8008774:	08026700 	.word	0x08026700
 8008778:	08026704 	.word	0x08026704
 800877c:	08026674 	.word	0x08026674
 8008780:	20008ef0 	.word	0x20008ef0
 8008784:	080086dd 	.word	0x080086dd

08008788 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
    {
    }
 80087aa:	bf00      	nop
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	6039      	str	r1, [r7, #0]
    {
    }
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
    {
    }
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	460b      	mov	r3, r1
 80087ec:	70fb      	strb	r3, [r7, #3]
    {
    }
 80087ee:	bf00      	nop
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80087fa:	b480      	push	{r7}
 80087fc:	b083      	sub	sp, #12
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
    {
    }
 8008802:	bf00      	nop
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
    {
    }
 8008816:	bf00      	nop
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
	...

08008824 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
    {
 800882c:	4a04      	ldr	r2, [pc, #16]	; (8008840 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	601a      	str	r2, [r3, #0]
    }
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4618      	mov	r0, r3
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	08020f58 	.word	0x08020f58

08008844 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
    }
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff ffe9 	bl	8008824 <_ZN8touchgfx15UIEventListenerD1Ev>
 8008852:	2104      	movs	r1, #4
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f016 fbf0 	bl	801f03a <_ZdlPvj>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800888e:	6810      	ldr	r0, [r2, #0]
 8008890:	6851      	ldr	r1, [r2, #4]
 8008892:	c303      	stmia	r3!, {r0, r1}
    }
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
    {
 80088a8:	4a04      	ldr	r2, [pc, #16]	; (80088bc <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	601a      	str	r2, [r3, #0]
    }
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4618      	mov	r0, r3
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	08020f40 	.word	0x08020f40

080088c0 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
    }
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff ffe9 	bl	80088a0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80088ce:	2104      	movs	r1, #4
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f016 fbb2 	bl	801f03a <_ZdlPvj>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 80088e0:	b480      	push	{r7}
 80088e2:	af00      	add	r7, sp, #0
    {
        return instance;
 80088e4:	4b03      	ldr	r3, [pc, #12]	; (80088f4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80088e6:	681b      	ldr	r3, [r3, #0]
    }
 80088e8:	4618      	mov	r0, r3
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20009f94 	.word	0x20009f94

080088f8 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 80088f8:	b480      	push	{r7}
 80088fa:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80088fc:	4b0b      	ldr	r3, [pc, #44]	; (800892c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8008904:	2b00      	cmp	r3, #0
 8008906:	d008      	beq.n	800891a <_ZN8touchgfx3HAL3lcdEv+0x22>
 8008908:	4b08      	ldr	r3, [pc, #32]	; (800892c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8008912:	4b06      	ldr	r3, [pc, #24]	; (800892c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008918:	e002      	b.n	8008920 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800891a:	4b04      	ldr	r3, [pc, #16]	; (800892c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
    }
 8008920:	4618      	mov	r0, r3
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	20009f94 	.word	0x20009f94

08008930 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8008938:	4a07      	ldr	r2, [pc, #28]	; (8008958 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	605a      	str	r2, [r3, #4]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	721a      	strb	r2, [r3, #8]
    {
    }
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4618      	mov	r0, r3
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	08020f1c 	.word	0x08020f1c

0800895c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
    {
 8008964:	4a04      	ldr	r2, [pc, #16]	; (8008978 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	601a      	str	r2, [r3, #0]
    }
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	08020f1c 	.word	0x08020f1c

0800897c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
    }
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7ff ffe9 	bl	800895c <_ZN8touchgfx10TransitionD1Ev>
 800898a:	210c      	movs	r1, #12
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f016 fb54 	bl	801f03a <_ZdlPvj>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4618      	mov	r0, r3
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
    {
    }
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
    {
    }
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
    {
    }
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 80089e0:	f007 fb1c 	bl	801001c <_ZN8touchgfx11Application11getInstanceEv>
 80089e4:	4603      	mov	r3, r0
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	3230      	adds	r2, #48	; 0x30
 80089ea:	6812      	ldr	r2, [r2, #0]
 80089ec:	4618      	mov	r0, r3
 80089ee:	4790      	blx	r2
    }
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	605a      	str	r2, [r3, #4]
    }
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	4a05      	ldr	r2, [pc, #20]	; (8008a34 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	601a      	str	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7ff fefd 	bl	8008824 <_ZN8touchgfx15UIEventListenerD1Ev>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	080226f8 	.word	0x080226f8

08008a38 <_ZN8touchgfx11ApplicationD0Ev>:
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff ffe7 	bl	8008a14 <_ZN8touchgfx11ApplicationD1Ev>
 8008a46:	f44f 719c 	mov.w	r1, #312	; 0x138
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f016 faf5 	bl	801f03a <_ZdlPvj>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
	...

08008a5c <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f007 fafa 	bl	8010060 <_ZN8touchgfx11ApplicationC1Ev>
 8008a6c:	4a09      	ldr	r2, [pc, #36]	; (8008a94 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a04      	ldr	r2, [pc, #16]	; (8008a98 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8008a86:	6013      	str	r3, [r2, #0]
    }
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	08020ed8 	.word	0x08020ed8
 8008a98:	20009fe0 	.word	0x20009fe0

08008a9c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f804 	bl	8008ab2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8008aaa:	bf00      	nop
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b082      	sub	sp, #8
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00f      	beq.n	8008ae4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	330c      	adds	r3, #12
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	4798      	blx	r3
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e000      	b.n	8008ae6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00e      	beq.n	8008b08 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3308      	adds	r3, #8
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4610      	mov	r0, r2
 8008afe:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8008b08:	bf00      	nop
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	601a      	str	r2, [r3, #0]
    }
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	4a05      	ldr	r2, [pc, #20]	; (8008b4c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	601a      	str	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff ff69 	bl	8008a14 <_ZN8touchgfx11ApplicationD1Ev>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	08020ed8 	.word	0x08020ed8

08008b50 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff ffe7 	bl	8008b2c <_ZN8touchgfx14MVPApplicationD1Ev>
 8008b5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f016 fa69 	bl	801f03a <_ZdlPvj>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	4a08      	ldr	r2, [pc, #32]	; (8008ba0 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 fad3 	bl	8009134 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff ffcb 	bl	8008b2c <_ZN8touchgfx14MVPApplicationD1Ev>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	08020e7c 	.word	0x08020e7c

08008ba4 <_ZN23FrontendApplicationBaseD0Ev>:
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff ffe1 	bl	8008b74 <_ZN23FrontendApplicationBaseD1Ev>
 8008bb2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f016 fa3f 	bl	801f03a <_ZdlPvj>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	721a      	strb	r2, [r3, #8]
    }
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	605a      	str	r2, [r3, #4]
    }
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff ff26 	bl	8008a5c <_ZN8touchgfx14MVPApplicationC1Ev>
 8008c10:	4a13      	ldr	r2, [pc, #76]	; (8008c60 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f000 f89f 	bl	8008d60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8008c32:	f7ff fe55 	bl	80088e0 <_ZN8touchgfx3HAL11getInstanceEv>
 8008c36:	4603      	mov	r3, r0
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	3208      	adds	r2, #8
 8008c3c:	6812      	ldr	r2, [r2, #0]
 8008c3e:	2100      	movs	r1, #0
 8008c40:	4618      	mov	r0, r3
 8008c42:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8008c44:	2000      	movs	r0, #0
 8008c46:	f001 fc23 	bl	800a490 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8008c4a:	f7ff fe55 	bl	80088f8 <_ZN8touchgfx3HAL3lcdEv>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	4618      	mov	r0, r3
 8008c52:	f00f f8ae 	bl	8017db2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	08020e7c 	.word	0x08020e7c

08008c64 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4618      	mov	r0, r3
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7ff ffe9 	bl	8008c64 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	605a      	str	r2, [r3, #4]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	3208      	adds	r2, #8
 8008ca2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ca6:	e883 0003 	stmia.w	r3, {r0, r1}
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8008cb4:	b590      	push	{r4, r7, lr}
 8008cb6:	b089      	sub	sp, #36	; 0x24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8008cc2:	4b10      	ldr	r3, [pc, #64]	; (8008d04 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8008cc4:	61bb      	str	r3, [r7, #24]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	61fb      	str	r3, [r7, #28]
 8008cca:	f107 0008 	add.w	r0, r7, #8
 8008cce:	f107 0318 	add.w	r3, r7, #24
 8008cd2:	cb0c      	ldmia	r3, {r2, r3}
 8008cd4:	6879      	ldr	r1, [r7, #4]
 8008cd6:	f000 f85f 	bl	8008d98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8008cda:	f107 0308 	add.w	r3, r7, #8
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f7ff ffcb 	bl	8008c7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8008ce6:	f107 0308 	add.w	r3, r7, #8
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 fa22 	bl	8009134 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8008cfc:	bf00      	nop
 8008cfe:	3724      	adds	r7, #36	; 0x24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd90      	pop	{r4, r7, pc}
 8008d04:	08008d09 	.word	0x08008d09

08008d08 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af02      	add	r7, sp, #8
 8008d0e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	4b04      	ldr	r3, [pc, #16]	; (8008d38 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8008d28:	4804      	ldr	r0, [pc, #16]	; (8008d3c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8008d2a:	f000 f87d 	bl	8008e28 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8008d2e:	bf00      	nop
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20009fd4 	.word	0x20009fd4
 8008d3c:	20009fd0 	.word	0x20009fd0

08008d40 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	4a04      	ldr	r2, [pc, #16]	; (8008d5c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4618      	mov	r0, r3
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	08020f40 	.word	0x08020f40

08008d60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff ffe8 	bl	8008d40 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8008d70:	4a08      	ldr	r2, [pc, #32]	; (8008d94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	605a      	str	r2, [r3, #4]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	609a      	str	r2, [r3, #8]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	60da      	str	r2, [r3, #12]
    {
    }
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	08020ec0 	.word	0x08020ec0

08008d98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	4639      	mov	r1, r7
 8008da4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7ff ffc8 	bl	8008d40 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8008db0:	4a08      	ldr	r2, [pc, #32]	; (8008dd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	605a      	str	r2, [r3, #4]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	3308      	adds	r3, #8
 8008dc0:	463a      	mov	r2, r7
 8008dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dc6:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	08020ec0 	.word	0x08020ec0

08008dd8 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7ff fda4 	bl	8008930 <_ZN8touchgfx10TransitionC1Ev>
 8008de8:	4a03      	ldr	r2, [pc, #12]	; (8008df8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	08020e58 	.word	0x08020e58

08008dfc <_ZN8MainViewC1Ev>:
#include <gui/main_screen/MainPresenter.hpp>

class MainView : public MainViewBase
{
public:
    MainView() = default;
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 fe7c 	bl	8009b04 <_ZN12MainViewBaseC1Ev>
 8008e0c:	4a05      	ldr	r2, [pc, #20]	; (8008e24 <_ZN8MainViewC1Ev+0x28>)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	0802120c 	.word	0x0802120c

08008e28 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8008e28:	b590      	push	{r4, r7, lr}
 8008e2a:	b08f      	sub	sp, #60	; 0x3c
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	689a      	ldr	r2, [r3, #8]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3320      	adds	r3, #32
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4610      	mov	r0, r2
 8008e46:	4798      	blx	r3
 8008e48:	4603      	mov	r3, r0
 8008e4a:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 8008e4e:	d205      	bcs.n	8008e5c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8008e50:	4b7e      	ldr	r3, [pc, #504]	; (800904c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8008e52:	4a7f      	ldr	r2, [pc, #508]	; (8009050 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8008e54:	21a3      	movs	r1, #163	; 0xa3
 8008e56:	487f      	ldr	r0, [pc, #508]	; (8009054 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8008e58:	f016 f91e 	bl	801f098 <__assert_func>
 8008e5c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3320      	adds	r3, #32
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4798      	blx	r3
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b0f      	cmp	r3, #15
 8008e74:	d805      	bhi.n	8008e82 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8008e76:	4b78      	ldr	r3, [pc, #480]	; (8009058 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8008e78:	4a75      	ldr	r2, [pc, #468]	; (8009050 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8008e7a:	21a4      	movs	r1, #164	; 0xa4
 8008e7c:	4875      	ldr	r0, [pc, #468]	; (8009054 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8008e7e:	f016 f90b 	bl	801f098 <__assert_func>
 8008e82:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68da      	ldr	r2, [r3, #12]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3320      	adds	r3, #32
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4610      	mov	r0, r2
 8008e94:	4798      	blx	r3
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b0b      	cmp	r3, #11
 8008e9a:	d805      	bhi.n	8008ea8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8008e9c:	4b6f      	ldr	r3, [pc, #444]	; (800905c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8008e9e:	4a6c      	ldr	r2, [pc, #432]	; (8009050 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8008ea0:	21a5      	movs	r1, #165	; 0xa5
 8008ea2:	486c      	ldr	r0, [pc, #432]	; (8009054 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8008ea4:	f016 f8f8 	bl	801f098 <__assert_func>
 8008ea8:	bf00      	nop
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8008eb6:	f007 f8b1 	bl	801001c <_ZN8touchgfx11Application11getInstanceEv>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f007 f8b3 	bl	8010028 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d008      	beq.n	8008edc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	330c      	adds	r3, #12
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4610      	mov	r0, r2
 8008eda:	4798      	blx	r3
    if (*currentTrans)
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d007      	beq.n	8008ef4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4798      	blx	r3
    if (*currentScreen)
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d008      	beq.n	8008f0e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8008efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3314      	adds	r3, #20
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	4798      	blx	r3
    if (*currentPresenter)
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d008      	beq.n	8008f28 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3304      	adds	r3, #4
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4610      	mov	r0, r2
 8008f26:	4798      	blx	r3
    if (*currentScreen)
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d007      	beq.n	8008f40 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8008f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
    if (*currentPresenter)
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d008      	beq.n	8008f5a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3308      	adds	r3, #8
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4610      	mov	r0, r2
 8008f58:	4798      	blx	r3
}
 8008f5a:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	2100      	movs	r1, #0
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 f87c 	bl	8009060 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	200c      	movs	r0, #12
 8008f6e:	f7ff fc0b 	bl	8008788 <_ZnwjPv>
 8008f72:	4604      	mov	r4, r0
 8008f74:	4620      	mov	r0, r4
 8008f76:	f7ff ff2f 	bl	8008dd8 <_ZN8touchgfx12NoTransitionC1Ev>
 8008f7a:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	2100      	movs	r1, #0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 f87f 	bl	8009086 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8008f90:	f7ff fbfa 	bl	8008788 <_ZnwjPv>
 8008f94:	4604      	mov	r4, r0
 8008f96:	4620      	mov	r0, r4
 8008f98:	f7ff ff30 	bl	8008dfc <_ZN8MainViewC1Ev>
 8008f9c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 f881 	bl	80090ac <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8008faa:	4603      	mov	r3, r0
 8008fac:	4619      	mov	r1, r3
 8008fae:	2010      	movs	r0, #16
 8008fb0:	f7ff fbea 	bl	8008788 <_ZnwjPv>
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f001 fc03 	bl	800a7c4 <_ZN13MainPresenterC1ER8MainView>
 8008fbe:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fca:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8008fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	3304      	adds	r3, #4
 8008fdc:	e000      	b.n	8008fe0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008fe4:	f7ff fd94 	bl	8008b10 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8008fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fea:	3304      	adds	r3, #4
 8008fec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7ff fdf6 	bl	8008be0 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 f86a 	bl	80090d2 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	61fb      	str	r3, [r7, #28]
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	61bb      	str	r3, [r7, #24]
 8009006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009008:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	330c      	adds	r3, #12
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69f8      	ldr	r0, [r7, #28]
 8009014:	4798      	blx	r3
    newPresenter->activate();
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	69b8      	ldr	r0, [r7, #24]
 800901e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8009020:	6979      	ldr	r1, [r7, #20]
 8009022:	69f8      	ldr	r0, [r7, #28]
 8009024:	f008 fbbe 	bl	80117a4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3310      	adds	r3, #16
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6978      	ldr	r0, [r7, #20]
 8009032:	4798      	blx	r3
    newTransition->invalidate();
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3314      	adds	r3, #20
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6978      	ldr	r0, [r7, #20]
 800903e:	4798      	blx	r3
}
 8009040:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8009042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009044:	4618      	mov	r0, r3
 8009046:	373c      	adds	r7, #60	; 0x3c
 8009048:	46bd      	mov	sp, r7
 800904a:	bd90      	pop	{r4, r7, pc}
 800904c:	080202ac 	.word	0x080202ac
 8009050:	0802033c 	.word	0x0802033c
 8009054:	0802043c 	.word	0x0802043c
 8009058:	08020480 	.word	0x08020480
 800905c:	08020524 	.word	0x08020524

08009060 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	460b      	mov	r3, r1
 800906a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3324      	adds	r3, #36	; 0x24
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	887a      	ldrh	r2, [r7, #2]
 8009076:	4611      	mov	r1, r2
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	4798      	blx	r3
 800907c:	4603      	mov	r3, r0
    }
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3324      	adds	r3, #36	; 0x24
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	887a      	ldrh	r2, [r7, #2]
 800909c:	4611      	mov	r1, r2
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	4798      	blx	r3
 80090a2:	4603      	mov	r3, r0
    }
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3324      	adds	r3, #36	; 0x24
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	887a      	ldrh	r2, [r7, #2]
 80090c2:	4611      	mov	r1, r2
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	4798      	blx	r3
 80090c8:	4603      	mov	r3, r0
    }
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80090e2:	bf00      	nop
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
	...

080090f0 <_ZN8touchgfx12NoTransitionD1Ev>:
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	4a05      	ldr	r2, [pc, #20]	; (8009110 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	601a      	str	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4618      	mov	r0, r3
 8009102:	f7ff fc2b 	bl	800895c <_ZN8touchgfx10TransitionD1Ev>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4618      	mov	r0, r3
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	08020e58 	.word	0x08020e58

08009114 <_ZN8touchgfx12NoTransitionD0Ev>:
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7ff ffe7 	bl	80090f0 <_ZN8touchgfx12NoTransitionD1Ev>
 8009122:	210c      	movs	r1, #12
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f015 ff88 	bl	801f03a <_ZdlPvj>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4618      	mov	r0, r3
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	4a05      	ldr	r2, [pc, #20]	; (8009154 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff fbab 	bl	80088a0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	08020ec0 	.word	0x08020ec0

08009158 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff ffe7 	bl	8009134 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8009166:	2110      	movs	r1, #16
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f015 ff66 	bl	801f03a <_ZdlPvj>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4618      	mov	r0, r3
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	68d2      	ldr	r2, [r2, #12]
 8009188:	1052      	asrs	r2, r2, #1
 800918a:	1899      	adds	r1, r3, r2
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f003 0301 	and.w	r3, r3, #1
 8009194:	2b00      	cmp	r3, #0
 8009196:	d102      	bne.n	800919e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	e00a      	b.n	80091b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	68d2      	ldr	r2, [r2, #12]
 80091a6:	1052      	asrs	r2, r2, #1
 80091a8:	4413      	add	r3, r2
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	6892      	ldr	r2, [r2, #8]
 80091b0:	4413      	add	r3, r2
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4608      	mov	r0, r1
 80091b6:	4798      	blx	r3
    }
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d010      	beq.n	80091f2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d107      	bne.n	80091e8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80091e4:	2301      	movs	r3, #1
 80091e6:	e000      	b.n	80091ea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80091e8:	2300      	movs	r3, #0
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d001      	beq.n	80091f2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80091ee:	2301      	movs	r3, #1
 80091f0:	e000      	b.n	80091f4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80091f2:	2300      	movs	r3, #0
    }
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
        : color(col)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	601a      	str	r2, [r3, #0]
    {
    }
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	801a      	strh	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	805a      	strh	r2, [r3, #2]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	809a      	strh	r2, [r3, #4]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	80da      	strh	r2, [r3, #6]
    {
    }
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4618      	mov	r0, r3
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	887a      	ldrh	r2, [r7, #2]
 800925c:	801a      	strh	r2, [r3, #0]
    {
    }
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4618      	mov	r0, r3
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8009274:	4a14      	ldr	r2, [pc, #80]	; (80092c8 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	601a      	str	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	3304      	adds	r3, #4
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff ffcd 	bl	800921e <_ZN8touchgfx4RectC1Ev>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	330c      	adds	r3, #12
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff ffc8 	bl	800921e <_ZN8touchgfx4RectC1Ev>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	615a      	str	r2, [r3, #20]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	619a      	str	r2, [r3, #24]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	61da      	str	r2, [r3, #28]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	841a      	strh	r2, [r3, #32]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	845a      	strh	r2, [r3, #34]	; 0x22
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4618      	mov	r0, r3
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	08022910 	.word	0x08022910

080092cc <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
    {
 80092d4:	4a04      	ldr	r2, [pc, #16]	; (80092e8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	601a      	str	r2, [r3, #0]
    }
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	08022910 	.word	0x08022910

080092ec <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
    }
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7ff ffe9 	bl	80092cc <_ZN8touchgfx8DrawableD1Ev>
 80092fa:	2128      	movs	r1, #40	; 0x28
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f015 fe9c 	bl	801f03a <_ZdlPvj>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009314:	2300      	movs	r3, #0
    }
 8009316:	4618      	mov	r0, r3
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8009322:	b580      	push	{r7, lr}
 8009324:	b084      	sub	sp, #16
 8009326:	af00      	add	r7, sp, #0
 8009328:	60f8      	str	r0, [r7, #12]
 800932a:	4608      	mov	r0, r1
 800932c:	4611      	mov	r1, r2
 800932e:	461a      	mov	r2, r3
 8009330:	4603      	mov	r3, r0
 8009332:	817b      	strh	r3, [r7, #10]
 8009334:	460b      	mov	r3, r1
 8009336:	813b      	strh	r3, [r7, #8]
 8009338:	4613      	mov	r3, r2
 800933a:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800933c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009340:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009344:	4619      	mov	r1, r3
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f82a 	bl	80093a0 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800934c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009354:	4619      	mov	r1, r3
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f000 f87e 	bl	8009458 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800935c:	bf00      	nop
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	460b      	mov	r3, r1
 800936e:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	887a      	ldrh	r2, [r7, #2]
 8009374:	809a      	strh	r2, [r3, #4]
    }
 8009376:	bf00      	nop
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	887a      	ldrh	r2, [r7, #2]
 8009392:	80da      	strh	r2, [r3, #6]
    }
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	460b      	mov	r3, r1
 80093aa:	807b      	strh	r3, [r7, #2]
 80093ac:	4613      	mov	r3, r2
 80093ae:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	332c      	adds	r3, #44	; 0x2c
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80093bc:	4611      	mov	r1, r2
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	4798      	blx	r3
        setY(y);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3330      	adds	r3, #48	; 0x30
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f9b7 2000 	ldrsh.w	r2, [r7]
 80093ce:	4611      	mov	r1, r2
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	4798      	blx	r3
    }
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	460b      	mov	r3, r1
 80093e6:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	887a      	ldrh	r2, [r7, #2]
 80093ec:	811a      	strh	r2, [r3, #8]
    }
 80093ee:	bf00      	nop
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80093fa:	b480      	push	{r7}
 80093fc:	b083      	sub	sp, #12
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	460b      	mov	r3, r1
 8009404:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	887a      	ldrh	r2, [r7, #2]
 800940a:	815a      	strh	r2, [r3, #10]
    }
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
    {
    }
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
    {
    }
 8009436:	bf00      	nop
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8009442:	b480      	push	{r7}
 8009444:	b083      	sub	sp, #12
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	6039      	str	r1, [r7, #0]
    {
    }
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	460b      	mov	r3, r1
 8009462:	807b      	strh	r3, [r7, #2]
 8009464:	4613      	mov	r3, r2
 8009466:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3334      	adds	r3, #52	; 0x34
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009474:	4611      	mov	r1, r2
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	4798      	blx	r3
        setHeight(height);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3338      	adds	r3, #56	; 0x38
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009486:	4611      	mov	r1, r2
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	4798      	blx	r3
    }
 800948c:	bf00      	nop
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
    {
    }
 800949e:	bf00      	nop
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
    {
    }
 80094b2:	bf00      	nop
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 80094be:	b480      	push	{r7}
 80094c0:	b083      	sub	sp, #12
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	460b      	mov	r3, r1
 80094c8:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	78fa      	ldrb	r2, [r7, #3]
 80094ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80094d2:	bf00      	nop
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80094de:	b480      	push	{r7}
 80094e0:	b083      	sub	sp, #12
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80094ec:	4618      	mov	r0, r3
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8009506:	4618      	mov	r0, r3
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	460b      	mov	r3, r1
 800951c:	807b      	strh	r3, [r7, #2]
 800951e:	4613      	mov	r3, r2
 8009520:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3350      	adds	r3, #80	; 0x50
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	8879      	ldrh	r1, [r7, #2]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8009532:	b292      	uxth	r2, r2
 8009534:	1a8a      	subs	r2, r1, r2
 8009536:	b292      	uxth	r2, r2
 8009538:	b210      	sxth	r0, r2
 800953a:	8839      	ldrh	r1, [r7, #0]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8009542:	b292      	uxth	r2, r2
 8009544:	1a8a      	subs	r2, r1, r2
 8009546:	b292      	uxth	r2, r2
 8009548:	b212      	sxth	r2, r2
 800954a:	4601      	mov	r1, r0
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	4798      	blx	r3
    }
 8009550:	bf00      	nop
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009566:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800956e:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009576:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f7ff ffe1 	bl	8009558 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	601a      	str	r2, [r3, #0]
    }
 80095a4:	bf00      	nop
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
    {
 80095b4:	4a06      	ldr	r2, [pc, #24]	; (80095d0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	3304      	adds	r3, #4
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 fd28 	bl	800a014 <_ZN8touchgfx9ContainerD1Ev>
    }
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4618      	mov	r0, r3
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	08022a08 	.word	0x08022a08

080095d4 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
    }
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff ffe5 	bl	80095ac <_ZN8touchgfx6ScreenD1Ev>
 80095e2:	213c      	movs	r1, #60	; 0x3c
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f015 fd28 	bl	801f03a <_ZdlPvj>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4618      	mov	r0, r3
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
    {
    }
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
    {
    }
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
    {
    }
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
    {
    }
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	460b      	mov	r3, r1
 800964e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	3304      	adds	r3, #4
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	4618      	mov	r0, r3
 800966e:	f003 f9af 	bl	800c9d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	60f8      	str	r0, [r7, #12]
 8009682:	607b      	str	r3, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	817b      	strh	r3, [r7, #10]
 8009688:	4613      	mov	r3, r2
 800968a:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff ff25 	bl	80094de <_ZNK8touchgfx8Drawable9isVisibleEv>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d008      	beq.n	80096ac <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4618      	mov	r0, r3
 800969e:	f7ff ff2b 	bl	80094f8 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80096a8:	2301      	movs	r3, #1
 80096aa:	e000      	b.n	80096ae <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80096ac:	2300      	movs	r3, #0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	601a      	str	r2, [r3, #0]
        }
    }
 80096b8:	bf00      	nop
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff fdce 	bl	800926c <_ZN8touchgfx8DrawableC1Ev>
 80096d0:	4a03      	ldr	r2, [pc, #12]	; (80096e0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4618      	mov	r0, r3
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	08021020 	.word	0x08021020

080096e4 <_ZN8touchgfx6WidgetD1Ev>:
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	4a05      	ldr	r2, [pc, #20]	; (8009704 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	601a      	str	r2, [r3, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7ff fde9 	bl	80092cc <_ZN8touchgfx8DrawableD1Ev>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4618      	mov	r0, r3
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	08021020 	.word	0x08021020

08009708 <_ZN8touchgfx6WidgetD0Ev>:
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7ff ffe7 	bl	80096e4 <_ZN8touchgfx6WidgetD1Ev>
 8009716:	2128      	movs	r1, #40	; 0x28
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f015 fc8e 	bl	801f03a <_ZdlPvj>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4618      	mov	r0, r3
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4618      	mov	r0, r3
 8009734:	2326      	movs	r3, #38	; 0x26
 8009736:	461a      	mov	r2, r3
 8009738:	2100      	movs	r1, #0
 800973a:	f015 fe33 	bl	801f3a4 <memset>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff ffbd 	bl	80096c0 <_ZN8touchgfx6WidgetC1Ev>
 8009746:	4a09      	ldr	r2, [pc, #36]	; (800976c <_ZN8touchgfx3BoxC1Ev+0x44>)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	22ff      	movs	r2, #255	; 0xff
 8009750:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3328      	adds	r3, #40	; 0x28
 8009758:	2100      	movs	r1, #0
 800975a:	4618      	mov	r0, r3
 800975c:	f7ff fd50 	bl	8009200 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	08022390 	.word	0x08022390

08009770 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	683a      	ldr	r2, [r7, #0]
 800977e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4618      	mov	r0, r3
 800979a:	2326      	movs	r3, #38	; 0x26
 800979c:	461a      	mov	r2, r3
 800979e:	2100      	movs	r1, #0
 80097a0:	f015 fe00 	bl	801f3a4 <memset>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7ff ff8a 	bl	80096c0 <_ZN8touchgfx6WidgetC1Ev>
 80097ac:	4a09      	ldr	r2, [pc, #36]	; (80097d4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	8812      	ldrh	r2, [r2, #0]
 80097b8:	84da      	strh	r2, [r3, #38]	; 0x26
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	22ff      	movs	r2, #255	; 0xff
 80097be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bitmap);
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f004 ff1b 	bl	800e600 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	080225a4 	.word	0x080225a4

080097d8 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	460b      	mov	r3, r1
 80097e2:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 80097e4:	4a06      	ldr	r2, [pc, #24]	; (8009800 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	601a      	str	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	887a      	ldrh	r2, [r7, #2]
 80097ee:	809a      	strh	r2, [r3, #4]
    }
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4618      	mov	r0, r3
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	08020df0 	.word	0x08020df0

08009804 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4618      	mov	r0, r3
 8009810:	2326      	movs	r3, #38	; 0x26
 8009812:	461a      	mov	r2, r3
 8009814:	2100      	movs	r1, #0
 8009816:	f015 fdc5 	bl	801f3a4 <memset>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4618      	mov	r0, r3
 800981e:	f7ff ff4f 	bl	80096c0 <_ZN8touchgfx6WidgetC1Ev>
 8009822:	4a14      	ldr	r2, [pc, #80]	; (8009874 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	3328      	adds	r3, #40	; 0x28
 800982c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff ffd1 	bl	80097d8 <_ZN8touchgfx9TypedTextC1Et>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	3330      	adds	r3, #48	; 0x30
 800983a:	2100      	movs	r1, #0
 800983c:	4618      	mov	r0, r3
 800983e:	f7ff fcdf 	bl	8009200 <_ZN8touchgfx9colortypeC1Em>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	869a      	strh	r2, [r3, #52]	; 0x34
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	22ff      	movs	r2, #255	; 0xff
 800984c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4618      	mov	r0, r3
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	080222e8 	.word	0x080222e8

08009878 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	4a08      	ldr	r2, [pc, #32]	; (80098a4 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	3328      	adds	r3, #40	; 0x28
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe fe54 	bl	8008538 <_ZN8touchgfx9TypedTextD1Ev>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4618      	mov	r0, r3
 8009894:	f7ff ff26 	bl	80096e4 <_ZN8touchgfx6WidgetD1Ev>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	080222e8 	.word	0x080222e8

080098a8 <_ZN8touchgfx8TextAreaD0Ev>:
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7ff ffe1 	bl	8009878 <_ZN8touchgfx8TextAreaD1Ev>
 80098b6:	213c      	movs	r1, #60	; 0x3c
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f015 fbbe 	bl	801f03a <_ZdlPvj>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4618      	mov	r0, r3
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff ff96 	bl	8009804 <_ZN8touchgfx8TextAreaC1Ev>
 80098d8:	4a05      	ldr	r2, [pc, #20]	; (80098f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	080224fc 	.word	0x080224fc

080098f4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4618      	mov	r0, r3
 800991c:	2326      	movs	r3, #38	; 0x26
 800991e:	461a      	mov	r2, r3
 8009920:	2100      	movs	r1, #0
 8009922:	f015 fd3f 	bl	801f3a4 <memset>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4618      	mov	r0, r3
 800992a:	f7ff fec9 	bl	80096c0 <_ZN8touchgfx6WidgetC1Ev>
 800992e:	4a0a      	ldr	r2, [pc, #40]	; (8009958 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	629a      	str	r2, [r3, #40]	; 0x28
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2101      	movs	r1, #1
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff fdb9 	bl	80094be <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	080221bc 	.word	0x080221bc

0800995c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	4a05      	ldr	r2, [pc, #20]	; (8009998 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4618      	mov	r0, r3
 800998a:	f7ff feab 	bl	80096e4 <_ZN8touchgfx6WidgetD1Ev>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4618      	mov	r0, r3
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	080221bc 	.word	0x080221bc

0800999c <_ZN8touchgfx14AbstractButtonD0Ev>:
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff ffe7 	bl	8009978 <_ZN8touchgfx14AbstractButtonD1Ev>
 80099aa:	2130      	movs	r1, #48	; 0x30
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f015 fb44 	bl	801f03a <_ZdlPvj>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4618      	mov	r0, r3
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7ff ffa2 	bl	8009910 <_ZN8touchgfx14AbstractButtonC1Ev>
 80099cc:	4a0c      	ldr	r2, [pc, #48]	; (8009a00 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	601a      	str	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	332e      	adds	r3, #46	; 0x2e
 80099d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff fc36 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3330      	adds	r3, #48	; 0x30
 80099e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff fc2f 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	22ff      	movs	r2, #255	; 0xff
 80099f2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	08022458 	.word	0x08022458

08009a04 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	4a05      	ldr	r2, [pc, #20]	; (8009a24 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	601a      	str	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7ff fdc9 	bl	80095ac <_ZN8touchgfx6ScreenD1Ev>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	08020fd4 	.word	0x08020fd4

08009a28 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff ffe7 	bl	8009a04 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8009a36:	2140      	movs	r1, #64	; 0x40
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f015 fafe 	bl	801f03a <_ZdlPvj>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4618      	mov	r0, r3
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	4a18      	ldr	r2, [pc, #96]	; (8009ab4 <_ZN12MainViewBaseD1Ev+0x6c>)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	601a      	str	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 fab7 	bl	8009fd0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f000 fb5b 	bl	800a124 <_ZN8touchgfx6ButtonD1Ev>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 fb55 	bl	800a124 <_ZN8touchgfx6ButtonD1Ev>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	33c4      	adds	r3, #196	; 0xc4
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fb2e 	bl	800a0e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3398      	adds	r3, #152	; 0x98
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 fb07 	bl	800a09c <_ZN8touchgfx5ImageD1Ev>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	336c      	adds	r3, #108	; 0x6c
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 fb02 	bl	800a09c <_ZN8touchgfx5ImageD1Ev>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3340      	adds	r3, #64	; 0x40
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 fadb 	bl	800a058 <_ZN8touchgfx3BoxD1Ev>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7ff ffad 	bl	8009a04 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4618      	mov	r0, r3
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	08020f80 	.word	0x08020f80

08009ab8 <_ZN12MainViewBaseD0Ev>:
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff ffc1 	bl	8009a48 <_ZN12MainViewBaseD1Ev>
 8009ac6:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f015 fab5 	bl	801f03a <_ZdlPvj>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <_ZN12MainViewBase13increaseValueEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void increaseValue()
 8009ada:	b480      	push	{r7}
 8009adc:	b083      	sub	sp, #12
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8009ae2:	bf00      	nop
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <_ZN12MainViewBase13decreaseValueEv>:

    virtual void decreaseValue()
 8009aee:	b480      	push	{r7}
 8009af0:	b083      	sub	sp, #12
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8009af6:	bf00      	nop
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
	...

08009b04 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase() :
 8009b04:	b590      	push	{r4, r7, lr}
 8009b06:	b09d      	sub	sp, #116	; 0x74
 8009b08:	af02      	add	r7, sp, #8
 8009b0a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &MainViewBase::buttonCallbackHandler)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 f9f8 	bl	8009f04 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8009b14:	4a80      	ldr	r2, [pc, #512]	; (8009d18 <_ZN12MainViewBaseC1Ev+0x214>)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3340      	adds	r3, #64	; 0x40
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7ff fe02 	bl	8009728 <_ZN8touchgfx3BoxC1Ev>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8009b2a:	f107 0310 	add.w	r3, r7, #16
 8009b2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7ff fb8a 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 8009b38:	f107 0310 	add.w	r3, r7, #16
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f7ff fe24 	bl	800978c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8009b4a:	f107 0314 	add.w	r3, r7, #20
 8009b4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7ff fb7a 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 8009b58:	f107 0314 	add.w	r3, r7, #20
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f7ff fe14 	bl	800978c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	33c4      	adds	r3, #196	; 0xc4
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7ff fead 	bl	80098c8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff ff21 	bl	80099bc <_ZN8touchgfx6ButtonC1Ev>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7ff ff1b 	bl	80099bc <_ZN8touchgfx6ButtonC1Ev>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f503 70ba 	add.w	r0, r3, #372	; 0x174
 8009b8c:	4b63      	ldr	r3, [pc, #396]	; (8009d1c <_ZN12MainViewBaseC1Ev+0x218>)
 8009b8e:	61bb      	str	r3, [r7, #24]
 8009b90:	2300      	movs	r3, #0
 8009b92:	61fb      	str	r3, [r7, #28]
 8009b94:	f107 0318 	add.w	r3, r7, #24
 8009b98:	cb0c      	ldmia	r3, {r2, r3}
 8009b9a:	6879      	ldr	r1, [r7, #4]
 8009b9c:	f000 f9d8 	bl	8009f50 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8009ba6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	f7ff fbb5 	bl	8009322 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009bd0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009bd4:	041b      	lsls	r3, r3, #16
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009bdc:	021b      	lsls	r3, r3, #8
 8009bde:	431a      	orrs	r2, r3
 8009be0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8009be4:	4313      	orrs	r3, r2
 8009be6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009bea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009bee:	4611      	mov	r1, r2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7ff fb05 	bl	8009200 <_ZN8touchgfx9colortypeC1Em>
 8009bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f7ff fdb8 	bl	8009770 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    backgroundImage.setXY(0, 0);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	336c      	adds	r3, #108	; 0x6c
 8009c04:	2200      	movs	r2, #0
 8009c06:	2100      	movs	r1, #0
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff fbc9 	bl	80093a0 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setBitmap(touchgfx::Bitmap(BITMAP_BG_ID));
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8009c14:	f107 0320 	add.w	r3, r7, #32
 8009c18:	2100      	movs	r1, #0
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff fb16 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 8009c20:	f107 0320 	add.w	r3, r7, #32
 8009c24:	4619      	mov	r1, r3
 8009c26:	4620      	mov	r0, r4
 8009c28:	f004 fcea 	bl	800e600 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    counterBackgroundImage.setXY(293, 59);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	3398      	adds	r3, #152	; 0x98
 8009c30:	223b      	movs	r2, #59	; 0x3b
 8009c32:	f240 1125 	movw	r1, #293	; 0x125
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7ff fbb2 	bl	80093a0 <_ZN8touchgfx8Drawable5setXYEss>
    counterBackgroundImage.setBitmap(touchgfx::Bitmap(BITMAP_COUNTER_BOX_ID));
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8009c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c46:	2101      	movs	r1, #1
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7ff faff 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 8009c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c52:	4619      	mov	r1, r3
 8009c54:	4620      	mov	r0, r4
 8009c56:	f004 fcd3 	bl	800e600 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    countTxt.setPosition(293, 87, 152, 89);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8009c60:	2359      	movs	r3, #89	; 0x59
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	2398      	movs	r3, #152	; 0x98
 8009c66:	2257      	movs	r2, #87	; 0x57
 8009c68:	f240 1125 	movw	r1, #293	; 0x125
 8009c6c:	f7ff fb59 	bl	8009322 <_ZN8touchgfx8Drawable11setPositionEssss>
    countTxt.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8009c76:	23ff      	movs	r3, #255	; 0xff
 8009c78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8009c7c:	23ff      	movs	r3, #255	; 0xff
 8009c7e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8009c82:	23ff      	movs	r3, #255	; 0xff
 8009c84:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8009c88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c8c:	041b      	lsls	r3, r3, #16
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8009c94:	021b      	lsls	r3, r3, #8
 8009c96:	431a      	orrs	r2, r3
 8009c98:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009ca2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff faa9 	bl	8009200 <_ZN8touchgfx9colortypeC1Em>
 8009cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cb0:	65bc      	str	r4, [r7, #88]	; 0x58
 8009cb2:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8009cb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8009cba:	bf00      	nop
    countTxt.setLinespacing(0);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	33c4      	adds	r3, #196	; 0xc4
 8009cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8009cc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cca:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009cce:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8009cd0:	bf00      	nop
    Unicode::snprintf(countTxtBuffer, COUNTTXT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID1).getText());
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
 8009cd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009cdc:	2101      	movs	r1, #1
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff fd7a 	bl	80097d8 <_ZN8touchgfx9TypedTextC1Et>
 8009ce4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ce8:	667b      	str	r3, [r7, #100]	; 0x64
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8009cea:	4b0d      	ldr	r3, [pc, #52]	; (8009d20 <_ZN12MainViewBaseC1Ev+0x21c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d105      	bne.n	8009cfe <_ZN12MainViewBaseC1Ev+0x1fa>
 8009cf2:	4b0c      	ldr	r3, [pc, #48]	; (8009d24 <_ZN12MainViewBaseC1Ev+0x220>)
 8009cf4:	4a0c      	ldr	r2, [pc, #48]	; (8009d28 <_ZN12MainViewBaseC1Ev+0x224>)
 8009cf6:	21ae      	movs	r1, #174	; 0xae
 8009cf8:	480c      	ldr	r0, [pc, #48]	; (8009d2c <_ZN12MainViewBaseC1Ev+0x228>)
 8009cfa:	f015 f9cd 	bl	801f098 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8009cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d00:	889a      	ldrh	r2, [r3, #4]
 8009d02:	4b0b      	ldr	r3, [pc, #44]	; (8009d30 <_ZN12MainViewBaseC1Ev+0x22c>)
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d316      	bcc.n	8009d38 <_ZN12MainViewBaseC1Ev+0x234>
 8009d0a:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <_ZN12MainViewBaseC1Ev+0x230>)
 8009d0c:	4a06      	ldr	r2, [pc, #24]	; (8009d28 <_ZN12MainViewBaseC1Ev+0x224>)
 8009d0e:	21af      	movs	r1, #175	; 0xaf
 8009d10:	4806      	ldr	r0, [pc, #24]	; (8009d2c <_ZN12MainViewBaseC1Ev+0x228>)
 8009d12:	f015 f9c1 	bl	801f098 <__assert_func>
 8009d16:	bf00      	nop
 8009d18:	08020f80 	.word	0x08020f80
 8009d1c:	08009ec1 	.word	0x08009ec1
 8009d20:	20009fe4 	.word	0x20009fe4
 8009d24:	080205c8 	.word	0x080205c8
 8009d28:	0802060c 	.word	0x0802060c
 8009d2c:	0802063c 	.word	0x0802063c
 8009d30:	20009fe8 	.word	0x20009fe8
 8009d34:	08020680 	.word	0x08020680
    }
 8009d38:	bf00      	nop
        return texts->getText(typedTextId);
 8009d3a:	4b5a      	ldr	r3, [pc, #360]	; (8009ea4 <_ZN12MainViewBaseC1Ev+0x3a0>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009d40:	4611      	mov	r1, r2
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 fbfa 	bl	800a53c <_ZNK8touchgfx5Texts7getTextEt>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	bf00      	nop
 8009d4c:	4a56      	ldr	r2, [pc, #344]	; (8009ea8 <_ZN12MainViewBaseC1Ev+0x3a4>)
 8009d4e:	2103      	movs	r1, #3
 8009d50:	4620      	mov	r0, r4
 8009d52:	f009 f84f 	bl	8012df4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8009d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe fbec 	bl	8008538 <_ZN8touchgfx9TypedTextD1Ev>
    countTxt.setWildcard(countTxtBuffer);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	4610      	mov	r0, r2
 8009d70:	f7ff fdc0 	bl	80098f4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    countTxt.setTypedText(touchgfx::TypedText(T_TEXTID1));
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8009d7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d7e:	2100      	movs	r1, #0
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff fd29 	bl	80097d8 <_ZN8touchgfx9TypedTextC1Et>
 8009d86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f004 fa4a 	bl	800e226 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8009d92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fe fbce 	bl	8008538 <_ZN8touchgfx9TypedTextD1Ev>

    buttonUp.setXY(52, 59);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8009da2:	223b      	movs	r2, #59	; 0x3b
 8009da4:	2134      	movs	r1, #52	; 0x34
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff fafa 	bl	80093a0 <_ZN8touchgfx8Drawable5setXYEss>
    buttonUp.setBitmaps(touchgfx::Bitmap(BITMAP_UP_BTN_ID), touchgfx::Bitmap(BITMAP_UP_BTN_PRESSED_ID));
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f503 7482 	add.w	r4, r3, #260	; 0x104
 8009db2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009db6:	2105      	movs	r1, #5
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7ff fa47 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 8009dbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009dc2:	2107      	movs	r1, #7
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7ff fa41 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 8009dca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009dce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f004 fa5d 	bl	800e294 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonUp.setAction(buttonCallback);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8009de6:	4619      	mov	r1, r3
 8009de8:	4610      	mov	r0, r2
 8009dea:	f7ff fdb7 	bl	800995c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonDown.setXY(52, 157);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009df4:	229d      	movs	r2, #157	; 0x9d
 8009df6:	2134      	movs	r1, #52	; 0x34
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7ff fad1 	bl	80093a0 <_ZN8touchgfx8Drawable5setXYEss>
    buttonDown.setBitmaps(touchgfx::Bitmap(BITMAP_DOWN_BTN_ID), touchgfx::Bitmap(BITMAP_DOWN_BTN_PRESSED_ID));
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8009e04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e08:	2102      	movs	r1, #2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7ff fa1e 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 8009e10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009e14:	2104      	movs	r1, #4
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7ff fa18 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 8009e1c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8009e20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e24:	4619      	mov	r1, r3
 8009e26:	4620      	mov	r0, r4
 8009e28:	f004 fa34 	bl	800e294 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonDown.setAction(buttonCallback);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8009e38:	4619      	mov	r1, r3
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	f7ff fd8e 	bl	800995c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	3340      	adds	r3, #64	; 0x40
 8009e46:	4619      	mov	r1, r3
 8009e48:	4610      	mov	r0, r2
 8009e4a:	f7ff fc07 	bl	800965c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	336c      	adds	r3, #108	; 0x6c
 8009e54:	4619      	mov	r1, r3
 8009e56:	4610      	mov	r0, r2
 8009e58:	f7ff fc00 	bl	800965c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(counterBackgroundImage);
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	3398      	adds	r3, #152	; 0x98
 8009e62:	4619      	mov	r1, r3
 8009e64:	4610      	mov	r0, r2
 8009e66:	f7ff fbf9 	bl	800965c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(countTxt);
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	33c4      	adds	r3, #196	; 0xc4
 8009e70:	4619      	mov	r1, r3
 8009e72:	4610      	mov	r0, r2
 8009e74:	f7ff fbf2 	bl	800965c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonUp);
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8009e80:	4619      	mov	r1, r3
 8009e82:	4610      	mov	r0, r2
 8009e84:	f7ff fbea 	bl	800965c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonDown);
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009e90:	4619      	mov	r1, r3
 8009e92:	4610      	mov	r0, r2
 8009e94:	f7ff fbe2 	bl	800965c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	376c      	adds	r7, #108	; 0x6c
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd90      	pop	{r4, r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20009ff0 	.word	0x20009ff0
 8009ea8:	080206d4 	.word	0x080206d4

08009eac <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]

}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
    if (&src == &buttonUp)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8009ed0:	683a      	ldr	r2, [r7, #0]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d106      	bne.n	8009ee4 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //IncreaseValue
        //When buttonUp clicked call virtual function
        //Call increaseValue
        increaseValue();
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	332c      	adds	r3, #44	; 0x2c
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	4798      	blx	r3
        //DecreaseValue
        //When buttonDown clicked call virtual function
        //Call decreaseValue
        decreaseValue();
    }
}
 8009ee2:	e00b      	b.n	8009efc <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &buttonDown)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d105      	bne.n	8009efc <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        decreaseValue();
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3330      	adds	r3, #48	; 0x30
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	4798      	blx	r3
}
 8009efc:	bf00      	nop
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f007 fa9c 	bl	801144c <_ZN8touchgfx6ScreenC1Ev>
 8009f14:	4a05      	ldr	r2, [pc, #20]	; (8009f2c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	601a      	str	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4618      	mov	r0, r3
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	08020fd4 	.word	0x08020fd4

08009f30 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	4a04      	ldr	r2, [pc, #16]	; (8009f4c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4618      	mov	r0, r3
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	08021008 	.word	0x08021008

08009f50 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7ff ffe4 	bl	8009f30 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8009f68:	4a08      	ldr	r2, [pc, #32]	; (8009f8c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	601a      	str	r2, [r3, #0]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	605a      	str	r2, [r3, #4]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	3308      	adds	r3, #8
 8009f78:	463a      	mov	r2, r7
 8009f7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f7e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	08020fbc 	.word	0x08020fbc

08009f90 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
    }
 8009f98:	4a04      	ldr	r2, [pc, #16]	; (8009fac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	601a      	str	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	08021008 	.word	0x08021008

08009fb0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
    }
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f7ff ffe9 	bl	8009f90 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8009fbe:	2104      	movs	r1, #4
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f015 f83a 	bl	801f03a <_ZdlPvj>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	4a05      	ldr	r2, [pc, #20]	; (8009ff0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff ffd5 	bl	8009f90 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	08020fbc 	.word	0x08020fbc

08009ff4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7ff ffe7 	bl	8009fd0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800a002:	2110      	movs	r1, #16
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f015 f818 	bl	801f03a <_ZdlPvj>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4618      	mov	r0, r3
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	4a05      	ldr	r2, [pc, #20]	; (800a034 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	601a      	str	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4618      	mov	r0, r3
 800a026:	f7ff f951 	bl	80092cc <_ZN8touchgfx8DrawableD1Ev>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	08021818 	.word	0x08021818

0800a038 <_ZN8touchgfx9ContainerD0Ev>:
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7ff ffe7 	bl	800a014 <_ZN8touchgfx9ContainerD1Ev>
 800a046:	212c      	movs	r1, #44	; 0x2c
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f014 fff6 	bl	801f03a <_ZdlPvj>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4618      	mov	r0, r3
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	4a05      	ldr	r2, [pc, #20]	; (800a078 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	601a      	str	r2, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4618      	mov	r0, r3
 800a06a:	f7ff fb3b 	bl	80096e4 <_ZN8touchgfx6WidgetD1Ev>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4618      	mov	r0, r3
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	08022390 	.word	0x08022390

0800a07c <_ZN8touchgfx3BoxD0Ev>:
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7ff ffe7 	bl	800a058 <_ZN8touchgfx3BoxD1Ev>
 800a08a:	212c      	movs	r1, #44	; 0x2c
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f014 ffd4 	bl	801f03a <_ZdlPvj>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	4a05      	ldr	r2, [pc, #20]	; (800a0bc <_ZN8touchgfx5ImageD1Ev+0x20>)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	601a      	str	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7ff fb19 	bl	80096e4 <_ZN8touchgfx6WidgetD1Ev>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	080225a4 	.word	0x080225a4

0800a0c0 <_ZN8touchgfx5ImageD0Ev>:
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff ffe7 	bl	800a09c <_ZN8touchgfx5ImageD1Ev>
 800a0ce:	212c      	movs	r1, #44	; 0x2c
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f014 ffb2 	bl	801f03a <_ZdlPvj>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	4a05      	ldr	r2, [pc, #20]	; (800a100 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff fbc1 	bl	8009878 <_ZN8touchgfx8TextAreaD1Ev>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	080224fc 	.word	0x080224fc

0800a104 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7ff ffe7 	bl	800a0e0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800a112:	2140      	movs	r1, #64	; 0x40
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f014 ff90 	bl	801f03a <_ZdlPvj>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4618      	mov	r0, r3
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	4a05      	ldr	r2, [pc, #20]	; (800a144 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	601a      	str	r2, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4618      	mov	r0, r3
 800a136:	f7ff fc1f 	bl	8009978 <_ZN8touchgfx14AbstractButtonD1Ev>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	08022458 	.word	0x08022458

0800a148 <_ZN8touchgfx6ButtonD0Ev>:
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff ffe7 	bl	800a124 <_ZN8touchgfx6ButtonD1Ev>
 800a156:	2134      	movs	r1, #52	; 0x34
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f014 ff6e 	bl	801f03a <_ZdlPvj>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4618      	mov	r0, r3
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	68d2      	ldr	r2, [r2, #12]
 800a17a:	1052      	asrs	r2, r2, #1
 800a17c:	1898      	adds	r0, r3, r2
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	f003 0301 	and.w	r3, r3, #1
 800a186:	2b00      	cmp	r3, #0
 800a188:	d102      	bne.n	800a190 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	e00a      	b.n	800a1a6 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	68d2      	ldr	r2, [r2, #12]
 800a198:	1052      	asrs	r2, r2, #1
 800a19a:	4413      	add	r3, r2
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	6892      	ldr	r2, [r2, #8]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	4798      	blx	r3
    }
 800a1aa:	bf00      	nop
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800a1b2:	b480      	push	{r7}
 800a1b4:	b083      	sub	sp, #12
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d010      	beq.n	800a1e4 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d107      	bne.n	800a1da <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e000      	b.n	800a1dc <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d001      	beq.n	800a1e4 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e000      	b.n	800a1e6 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800a1e4:	2300      	movs	r3, #0
    }
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
	...

0800a1f4 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	af00      	add	r7, sp, #0
    return bitmap_database;
 800a1f8:	4b02      	ldr	r3, [pc, #8]	; (800a204 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	0802107c 	.word	0x0802107c

0800a208 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800a208:	b480      	push	{r7}
 800a20a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800a20c:	2308      	movs	r3, #8
}
 800a20e:	4618      	mov	r0, r3
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	460b      	mov	r3, r1
 800a222:	607a      	str	r2, [r7, #4]
 800a224:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 800a226:	2300      	movs	r3, #0
    }
 800a228:	4618      	mov	r0, r3
 800a22a:	3714      	adds	r7, #20
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800a23c:	2300      	movs	r3, #0
    }
 800a23e:	4618      	mov	r0, r3
 800a240:	370c      	adds	r7, #12
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800a24a:	b480      	push	{r7}
 800a24c:	b083      	sub	sp, #12
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800a252:	2300      	movs	r3, #0
    }
 800a254:	4618      	mov	r0, r3
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800a260:	b480      	push	{r7}
 800a262:	b085      	sub	sp, #20
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	4613      	mov	r3, r2
 800a26c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800a26e:	4a07      	ldr	r2, [pc, #28]	; (800a28c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6013      	str	r3, [r2, #0]
        fonts = f;
 800a274:	4a06      	ldr	r2, [pc, #24]	; (800a290 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800a27a:	4a06      	ldr	r2, [pc, #24]	; (800a294 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800a27c:	88fb      	ldrh	r3, [r7, #6]
 800a27e:	8013      	strh	r3, [r2, #0]
    }
 800a280:	bf00      	nop
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	20009fe4 	.word	0x20009fe4
 800a290:	20009fec 	.word	0x20009fec
 800a294:	20009fe8 	.word	0x20009fe8

0800a298 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800a298:	b40e      	push	{r1, r2, r3}
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b085      	sub	sp, #20
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800a2a2:	f107 0320 	add.w	r3, r7, #32
 800a2a6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	69fa      	ldr	r2, [r7, #28]
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f006 fd14 	bl	8010cdc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800a2b8:	89fb      	ldrh	r3, [r7, #14]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3714      	adds	r7, #20
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2c4:	b003      	add	sp, #12
 800a2c6:	4770      	bx	lr

0800a2c8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800a2c8:	b40c      	push	{r2, r3}
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800a2d6:	f107 031c 	add.w	r3, r7, #28
 800a2da:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800a2dc:	78f9      	ldrb	r1, [r7, #3]
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	69ba      	ldr	r2, [r7, #24]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f006 fcfa 	bl	8010cdc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800a2ec:	89fb      	ldrh	r3, [r7, #14]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2f8:	b002      	add	sp, #8
 800a2fa:	4770      	bx	lr

0800a2fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b08a      	sub	sp, #40	; 0x28
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	460b      	mov	r3, r1
 800a306:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d016      	beq.n	800a33e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	3322      	adds	r3, #34	; 0x22
 800a314:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	8adb      	ldrh	r3, [r3, #22]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d105      	bne.n	800a32a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800a31e:	4b43      	ldr	r3, [pc, #268]	; (800a42c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800a320:	4a43      	ldr	r2, [pc, #268]	; (800a430 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800a322:	21c0      	movs	r1, #192	; 0xc0
 800a324:	4843      	ldr	r0, [pc, #268]	; (800a434 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800a326:	f014 feb7 	bl	801f098 <__assert_func>
            return buffer[pos];
 800a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32c:	8a9b      	ldrh	r3, [r3, #20]
 800a32e:	461a      	mov	r2, r3
 800a330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a332:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800a33e:	2300      	movs	r3, #0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d06a      	beq.n	800a41a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f007 ff9d 	bl	8012284 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	3322      	adds	r3, #34	; 0x22
 800a34e:	623b      	str	r3, [r7, #32]
 800a350:	2301      	movs	r3, #1
 800a352:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	8adb      	ldrh	r3, [r3, #22]
 800a358:	8bfa      	ldrh	r2, [r7, #30]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d305      	bcc.n	800a36a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800a35e:	4b36      	ldr	r3, [pc, #216]	; (800a438 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800a360:	4a36      	ldr	r2, [pc, #216]	; (800a43c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800a362:	21c5      	movs	r1, #197	; 0xc5
 800a364:	4833      	ldr	r0, [pc, #204]	; (800a434 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800a366:	f014 fe97 	bl	801f098 <__assert_func>
            const uint16_t index = pos + offset;
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	8a9a      	ldrh	r2, [r3, #20]
 800a36e:	8bfb      	ldrh	r3, [r7, #30]
 800a370:	4413      	add	r3, r2
 800a372:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800a374:	8bbb      	ldrh	r3, [r7, #28]
 800a376:	2b09      	cmp	r3, #9
 800a378:	d801      	bhi.n	800a37e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800a37a:	8bbb      	ldrh	r3, [r7, #28]
 800a37c:	e001      	b.n	800a382 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800a37e:	8bbb      	ldrh	r3, [r7, #28]
 800a380:	3b0a      	subs	r3, #10
 800a382:	6a3a      	ldr	r2, [r7, #32]
 800a384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a388:	f640 123f 	movw	r2, #2367	; 0x93f
 800a38c:	4293      	cmp	r3, r2
 800a38e:	bf0c      	ite	eq
 800a390:	2301      	moveq	r3, #1
 800a392:	2300      	movne	r3, #0
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	d03f      	beq.n	800a41a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	3322      	adds	r3, #34	; 0x22
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	3222      	adds	r2, #34	; 0x22
 800a3a2:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	8ad2      	ldrh	r2, [r2, #22]
 800a3a8:	2a00      	cmp	r2, #0
 800a3aa:	d105      	bne.n	800a3b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800a3ac:	4b1f      	ldr	r3, [pc, #124]	; (800a42c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800a3ae:	4a20      	ldr	r2, [pc, #128]	; (800a430 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800a3b0:	21c0      	movs	r1, #192	; 0xc0
 800a3b2:	4820      	ldr	r0, [pc, #128]	; (800a434 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800a3b4:	f014 fe70 	bl	801f098 <__assert_func>
            return buffer[pos];
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	8a92      	ldrh	r2, [r2, #20]
 800a3bc:	4611      	mov	r1, r2
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800a3c4:	613b      	str	r3, [r7, #16]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	8adb      	ldrh	r3, [r3, #22]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d806      	bhi.n	800a3e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800a3d2:	4b1b      	ldr	r3, [pc, #108]	; (800a440 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800a3d4:	4a1b      	ldr	r2, [pc, #108]	; (800a444 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800a3d6:	f240 110d 	movw	r1, #269	; 0x10d
 800a3da:	4816      	ldr	r0, [pc, #88]	; (800a434 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800a3dc:	f014 fe5c 	bl	801f098 <__assert_func>
            const uint16_t index = pos + 1;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	8a9b      	ldrh	r3, [r3, #20]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800a3e8:	89bb      	ldrh	r3, [r7, #12]
 800a3ea:	2b09      	cmp	r3, #9
 800a3ec:	d801      	bhi.n	800a3f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800a3ee:	89bb      	ldrh	r3, [r7, #12]
 800a3f0:	e000      	b.n	800a3f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	89f9      	ldrh	r1, [r7, #14]
 800a3f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800a3fc:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	3322      	adds	r3, #34	; 0x22
 800a402:	61bb      	str	r3, [r7, #24]
 800a404:	f640 133f 	movw	r3, #2367	; 0x93f
 800a408:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	8a9b      	ldrh	r3, [r3, #20]
 800a40e:	4619      	mov	r1, r3
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	8afa      	ldrh	r2, [r7, #22]
 800a414:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800a418:	bf00      	nop
        }
    }
    return getNextChar();
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f007 fe16 	bl	801204c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800a420:	4603      	mov	r3, r0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3728      	adds	r7, #40	; 0x28
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	080206d8 	.word	0x080206d8
 800a430:	080206e4 	.word	0x080206e4
 800a434:	08020790 	.word	0x08020790
 800a438:	080207d8 	.word	0x080207d8
 800a43c:	080207e8 	.word	0x080207e8
 800a440:	080208bc 	.word	0x080208bc
 800a444:	080208c8 	.word	0x080208c8

0800a448 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f007 fdb3 	bl	8011fbc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800a456:	bf00      	nop
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b088      	sub	sp, #32
 800a462:	af02      	add	r7, sp, #8
 800a464:	60f8      	str	r0, [r7, #12]
 800a466:	1d38      	adds	r0, r7, #4
 800a468:	e880 0006 	stmia.w	r0, {r1, r2}
 800a46c:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800a46e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a472:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800a474:	1d39      	adds	r1, r7, #4
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	9301      	str	r3, [sp, #4]
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	6a3b      	ldr	r3, [r7, #32]
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f005 f94a 	bl	800f71c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800a488:	bf00      	nop
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800a490:	b590      	push	{r4, r7, lr}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	4603      	mov	r3, r0
 800a498:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800a49e:	88fb      	ldrh	r3, [r7, #6]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d127      	bne.n	800a4f4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800a4a4:	88fb      	ldrh	r3, [r7, #6]
 800a4a6:	4a1e      	ldr	r2, [pc, #120]	; (800a520 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800a4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d016      	beq.n	800a4de <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800a4b0:	88fb      	ldrh	r3, [r7, #6]
 800a4b2:	4a1b      	ldr	r2, [pc, #108]	; (800a520 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800a4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4b8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	4a18      	ldr	r2, [pc, #96]	; (800a524 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800a4c4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	4a16      	ldr	r2, [pc, #88]	; (800a528 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800a4d0:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	4413      	add	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	e00a      	b.n	800a4f4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800a4de:	4b11      	ldr	r3, [pc, #68]	; (800a524 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800a4e0:	4a12      	ldr	r2, [pc, #72]	; (800a52c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800a4e2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800a4e4:	4a12      	ldr	r2, [pc, #72]	; (800a530 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800a4e6:	4b10      	ldr	r3, [pc, #64]	; (800a528 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800a4e8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800a4ea:	88fb      	ldrh	r3, [r7, #6]
 800a4ec:	4a11      	ldr	r2, [pc, #68]	; (800a534 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800a4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4f2:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00d      	beq.n	800a516 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800a4fa:	4a0f      	ldr	r2, [pc, #60]	; (800a538 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800a4fc:	88fb      	ldrh	r3, [r7, #6]
 800a4fe:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800a500:	f000 f83e 	bl	800a580 <_ZN17TypedTextDatabase8getFontsEv>
 800a504:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800a506:	f000 f833 	bl	800a570 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800a50a:	4603      	mov	r3, r0
 800a50c:	461a      	mov	r2, r3
 800a50e:	4621      	mov	r1, r4
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f7ff fea5 	bl	800a260 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800a516:	bf00      	nop
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd90      	pop	{r4, r7, pc}
 800a51e:	bf00      	nop
 800a520:	20008f1c 	.word	0x20008f1c
 800a524:	20008f24 	.word	0x20008f24
 800a528:	20008f28 	.word	0x20008f28
 800a52c:	0809c470 	.word	0x0809c470
 800a530:	0809c468 	.word	0x0809c468
 800a534:	0809c47c 	.word	0x0809c47c
 800a538:	20008f20 	.word	0x20008f20

0800a53c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	460b      	mov	r3, r1
 800a546:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800a548:	4b07      	ldr	r3, [pc, #28]	; (800a568 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	4b07      	ldr	r3, [pc, #28]	; (800a56c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800a54e:	6819      	ldr	r1, [r3, #0]
 800a550:	887b      	ldrh	r3, [r7, #2]
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	440b      	add	r3, r1
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	005b      	lsls	r3, r3, #1
 800a55a:	4413      	add	r3, r2
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr
 800a568:	20008f24 	.word	0x20008f24
 800a56c:	20008f28 	.word	0x20008f28

0800a570 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800a570:	b480      	push	{r7}
 800a572:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800a574:	2302      	movs	r3, #2
}
 800a576:	4618      	mov	r0, r3
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800a580:	b480      	push	{r7}
 800a582:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800a584:	4b02      	ldr	r3, [pc, #8]	; (800a590 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800a586:	4618      	mov	r0, r3
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	20008f2c 	.word	0x20008f2c

0800a594 <_Z41__static_initialization_and_destruction_0ii>:
    case 0:
        touchgfx_fonts[0] = &(getFont_Asap_Regular_80_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d109      	bne.n	800a5b8 <_Z41__static_initialization_and_destruction_0ii+0x24>
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d104      	bne.n	800a5b8 <_Z41__static_initialization_and_destruction_0ii+0x24>
    &(getFont_Asap_Regular_80_4bpp())
 800a5ae:	f7fe f89d 	bl	80086ec <_Z28getFont_Asap_Regular_80_4bppv>
 800a5b2:	4603      	mov	r3, r0
};
 800a5b4:	4a02      	ldr	r2, [pc, #8]	; (800a5c0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800a5b6:	6013      	str	r3, [r2, #0]
} // namespace TypedTextDatabase
 800a5b8:	bf00      	nop
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	20008f2c 	.word	0x20008f2c

0800a5c4 <_GLOBAL__sub_I_touchgfx_fonts>:
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a5cc:	2001      	movs	r0, #1
 800a5ce:	f7ff ffe1 	bl	800a594 <_Z41__static_initialization_and_destruction_0ii>
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	4a05      	ldr	r2, [pc, #20]	; (800a5f4 <_ZN19FrontendApplicationD1Ev+0x20>)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fe fac5 	bl	8008b74 <_ZN23FrontendApplicationBaseD1Ev>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	08021178 	.word	0x08021178

0800a5f8 <_ZN19FrontendApplicationD0Ev>:
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7ff ffe7 	bl	800a5d4 <_ZN19FrontendApplicationD1Ev>
 800a606:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f014 fd15 	bl	801f03a <_ZdlPvj>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b082      	sub	sp, #8
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 fa22 	bl	800aa72 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4618      	mov	r0, r3
 800a632:	f005 fbc7 	bl	800fdc4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800a636:	bf00      	nop
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	68b9      	ldr	r1, [r7, #8]
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fad2 	bl	8008bfc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800a658:	4a03      	ldr	r2, [pc, #12]	; (800a668 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	601a      	str	r2, [r3, #0]
{
}
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	08021178 	.word	0x08021178

0800a66c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
    {
    }
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
    {
    }
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
    {
 800a69c:	4a04      	ldr	r2, [pc, #16]	; (800a6b0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	601a      	str	r2, [r3, #0]
    }
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	080211f4 	.word	0x080211f4

0800a6b4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
    }
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f7ff ffe9 	bl	800a694 <_ZN8touchgfx9PresenterD1Ev>
 800a6c2:	2104      	movs	r1, #4
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f014 fcb8 	bl	801f03a <_ZdlPvj>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
    {
 800a6dc:	4a04      	ldr	r2, [pc, #16]	; (800a6f0 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	601a      	str	r2, [r3, #0]
    }
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr
 800a6f0:	080211f4 	.word	0x080211f4

0800a6f4 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	4a06      	ldr	r2, [pc, #24]	; (800a718 <_ZN13ModelListenerC1Ev+0x24>)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	601a      	str	r2, [r3, #0]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	605a      	str	r2, [r3, #4]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4618      	mov	r0, r3
 800a70c:	370c      	adds	r7, #12
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	080211e4 	.word	0x080211e4

0800a71c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	4a04      	ldr	r2, [pc, #16]	; (800a738 <_ZN13ModelListenerD1Ev+0x1c>)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4618      	mov	r0, r3
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr
 800a738:	080211e4 	.word	0x080211e4

0800a73c <_ZN13ModelListenerD0Ev>:
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff ffe9 	bl	800a71c <_ZN13ModelListenerD1Ev>
 800a74a:	2108      	movs	r1, #8
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f014 fc74 	bl	801f03a <_ZdlPvj>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4618      	mov	r0, r3
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	4a09      	ldr	r2, [pc, #36]	; (800a78c <_ZN13MainPresenterD1Ev+0x30>)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	4a09      	ldr	r2, [pc, #36]	; (800a790 <_ZN13MainPresenterD1Ev+0x34>)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	605a      	str	r2, [r3, #4]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	3304      	adds	r3, #4
 800a774:	4618      	mov	r0, r3
 800a776:	f7ff ffd1 	bl	800a71c <_ZN13ModelListenerD1Ev>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7ff ff89 	bl	800a694 <_ZN8touchgfx9PresenterD1Ev>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4618      	mov	r0, r3
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	080211bc 	.word	0x080211bc
 800a790:	080211d4 	.word	0x080211d4

0800a794 <_ZThn4_N13MainPresenterD1Ev>:
 800a794:	f1a0 0004 	sub.w	r0, r0, #4
 800a798:	e7e0      	b.n	800a75c <_ZN13MainPresenterD1Ev>
 800a79a:	bf00      	nop

0800a79c <_ZN13MainPresenterD0Ev>:
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7ff ffd9 	bl	800a75c <_ZN13MainPresenterD1Ev>
 800a7aa:	2110      	movs	r1, #16
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f014 fc44 	bl	801f03a <_ZdlPvj>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <_ZThn4_N13MainPresenterD0Ev>:
 800a7bc:	f1a0 0004 	sub.w	r0, r0, #4
 800a7c0:	e7ec      	b.n	800a79c <_ZN13MainPresenterD0Ev>
	...

0800a7c4 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
    : view(v)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7ff ff7f 	bl	800a6d4 <_ZN8touchgfx9PresenterC1Ev>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	3304      	adds	r3, #4
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7ff ff8a 	bl	800a6f4 <_ZN13ModelListenerC1Ev>
 800a7e0:	4a06      	ldr	r2, [pc, #24]	; (800a7fc <_ZN13MainPresenterC1ER8MainView+0x38>)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	4a06      	ldr	r2, [pc, #24]	; (800a800 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	605a      	str	r2, [r3, #4]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	60da      	str	r2, [r3, #12]
{
}
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	080211bc 	.word	0x080211bc
 800a800:	080211d4 	.word	0x080211d4

0800a804 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <_ZN8MainView11setupScreenEv>:

constexpr uint8_t UPPER_LIMIT = 42;
constexpr uint8_t LOWER_LIMIT = 0;

void MainView::setupScreen()
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
    updateGFXElements();
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f841 	bl	800a8bc <_ZN8MainView17updateGFXElementsEv>
}
 800a83a:	bf00      	nop
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <_ZN8MainView13increaseValueEv>:

void MainView::increaseValue()
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
    count = (count++ > UPPER_LIMIT) ? UPPER_LIMIT : count;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800a850:	1c5a      	adds	r2, r3, #1
 800a852:	b2d1      	uxtb	r1, r2
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	f882 1184 	strb.w	r1, [r2, #388]	; 0x184
 800a85a:	2b2a      	cmp	r3, #42	; 0x2a
 800a85c:	d804      	bhi.n	800a868 <_ZN8MainView13increaseValueEv+0x26>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800a864:	781a      	ldrb	r2, [r3, #0]
 800a866:	e000      	b.n	800a86a <_ZN8MainView13increaseValueEv+0x28>
 800a868:	222a      	movs	r2, #42	; 0x2a
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
    updateGFXElements();
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f823 	bl	800a8bc <_ZN8MainView17updateGFXElementsEv>
}
 800a876:	bf00      	nop
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <_ZN8MainView13decreaseValueEv>:

void MainView::decreaseValue()
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b082      	sub	sp, #8
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
    count = (count-- <= LOWER_LIMIT) ? LOWER_LIMIT : count;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800a88c:	1e5a      	subs	r2, r3, #1
 800a88e:	b2d1      	uxtb	r1, r2
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	f882 1184 	strb.w	r1, [r2, #388]	; 0x184
 800a896:	2b00      	cmp	r3, #0
 800a898:	d004      	beq.n	800a8a4 <_ZN8MainView13decreaseValueEv+0x26>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800a8a0:	781a      	ldrb	r2, [r3, #0]
 800a8a2:	e000      	b.n	800a8a6 <_ZN8MainView13decreaseValueEv+0x28>
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
    updateGFXElements();
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 f805 	bl	800a8bc <_ZN8MainView17updateGFXElementsEv>
}
 800a8b2:	bf00      	nop
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
	...

0800a8bc <_ZN8MainView17updateGFXElementsEv>:

void MainView::updateGFXElements()
{
 800a8bc:	b590      	push	{r4, r7, lr}
 800a8be:	b08b      	sub	sp, #44	; 0x2c
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
    //Counter text area GFX uptade.
    Unicode::snprintf(countTxtBuffer, 3, "%d", count);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f503 70b6 	add.w	r0, r3, #364	; 0x16c
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800a8d0:	4a4e      	ldr	r2, [pc, #312]	; (800aa0c <_ZN8MainView17updateGFXElementsEv+0x150>)
 800a8d2:	2103      	movs	r1, #3
 800a8d4:	f008 fa8e 	bl	8012df4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    //Button GFX update and touchable.
    if (count < UPPER_LIMIT)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800a8de:	2b29      	cmp	r3, #41	; 0x29
 800a8e0:	d81e      	bhi.n	800a920 <_ZN8MainView17updateGFXElementsEv+0x64>
    {
        buttonUp.setBitmaps(Bitmap(BITMAP_UP_BTN_ID), Bitmap(BITMAP_UP_BTN_PRESSED_ID));
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f503 7482 	add.w	r4, r3, #260	; 0x104
 800a8e8:	f107 0308 	add.w	r3, r7, #8
 800a8ec:	2105      	movs	r1, #5
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fe fcac 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 800a8f4:	f107 030c 	add.w	r3, r7, #12
 800a8f8:	2107      	movs	r1, #7
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fe fca6 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 800a900:	f107 020c 	add.w	r2, r7, #12
 800a904:	f107 0308 	add.w	r3, r7, #8
 800a908:	4619      	mov	r1, r3
 800a90a:	4620      	mov	r0, r4
 800a90c:	f003 fcc2 	bl	800e294 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        buttonUp.setTouchable(true);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800a916:	2101      	movs	r1, #1
 800a918:	4618      	mov	r0, r3
 800a91a:	f7fe fdd0 	bl	80094be <_ZN8touchgfx8Drawable12setTouchableEb>
 800a91e:	e01d      	b.n	800a95c <_ZN8MainView17updateGFXElementsEv+0xa0>
    }
    else
    {
        buttonUp.setBitmaps(Bitmap(BITMAP_UP_BTN_DISABLED_ID), Bitmap(BITMAP_UP_BTN_DISABLED_ID));
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f503 7482 	add.w	r4, r3, #260	; 0x104
 800a926:	f107 0310 	add.w	r3, r7, #16
 800a92a:	2106      	movs	r1, #6
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7fe fc8d 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 800a932:	f107 0314 	add.w	r3, r7, #20
 800a936:	2106      	movs	r1, #6
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fe fc87 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 800a93e:	f107 0214 	add.w	r2, r7, #20
 800a942:	f107 0310 	add.w	r3, r7, #16
 800a946:	4619      	mov	r1, r3
 800a948:	4620      	mov	r0, r4
 800a94a:	f003 fca3 	bl	800e294 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        buttonUp.setTouchable(false);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800a954:	2100      	movs	r1, #0
 800a956:	4618      	mov	r0, r3
 800a958:	f7fe fdb1 	bl	80094be <_ZN8touchgfx8Drawable12setTouchableEb>
    }
    if (count > LOWER_LIMIT)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800a962:	2b00      	cmp	r3, #0
 800a964:	d01e      	beq.n	800a9a4 <_ZN8MainView17updateGFXElementsEv+0xe8>
    {
        buttonDown.setBitmaps(Bitmap(BITMAP_DOWN_BTN_ID), Bitmap(BITMAP_DOWN_BTN_PRESSED_ID));
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a96c:	f107 0318 	add.w	r3, r7, #24
 800a970:	2102      	movs	r1, #2
 800a972:	4618      	mov	r0, r3
 800a974:	f7fe fc6a 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 800a978:	f107 031c 	add.w	r3, r7, #28
 800a97c:	2104      	movs	r1, #4
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fe fc64 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 800a984:	f107 021c 	add.w	r2, r7, #28
 800a988:	f107 0318 	add.w	r3, r7, #24
 800a98c:	4619      	mov	r1, r3
 800a98e:	4620      	mov	r0, r4
 800a990:	f003 fc80 	bl	800e294 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        buttonDown.setTouchable(true);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a99a:	2101      	movs	r1, #1
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fe fd8e 	bl	80094be <_ZN8touchgfx8Drawable12setTouchableEb>
 800a9a2:	e01d      	b.n	800a9e0 <_ZN8MainView17updateGFXElementsEv+0x124>
    }
    else
    {
        buttonDown.setBitmaps(Bitmap(BITMAP_DOWN_BTN_DISABLED_ID), Bitmap(BITMAP_DOWN_BTN_DISABLED_ID));
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a9aa:	f107 0320 	add.w	r3, r7, #32
 800a9ae:	2103      	movs	r1, #3
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fe fc4b 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 800a9b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9ba:	2103      	movs	r1, #3
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fe fc45 	bl	800924c <_ZN8touchgfx6BitmapC1Et>
 800a9c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a9c6:	f107 0320 	add.w	r3, r7, #32
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f003 fc61 	bl	800e294 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        buttonDown.setTouchable(false);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a9d8:	2100      	movs	r1, #0
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fe fd6f 	bl	80094be <_ZN8touchgfx8Drawable12setTouchableEb>
    }
    // Invalidate all GFX area, which will result in it being redrawn in next tick.
    countTxt.invalidate();
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	33c4      	adds	r3, #196	; 0xc4
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f006 fa9b 	bl	8010f20 <_ZNK8touchgfx8Drawable10invalidateEv>
    buttonUp.invalidate();
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f006 fa95 	bl	8010f20 <_ZNK8touchgfx8Drawable10invalidateEv>
    buttonDown.invalidate();
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f006 fa8f 	bl	8010f20 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800aa02:	bf00      	nop
 800aa04:	372c      	adds	r7, #44	; 0x2c
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd90      	pop	{r4, r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	0802097c 	.word	0x0802097c

0800aa10 <_ZN8MainViewD1Ev>:
class MainView : public MainViewBase
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	4a05      	ldr	r2, [pc, #20]	; (800aa30 <_ZN8MainViewD1Ev+0x20>)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7ff f811 	bl	8009a48 <_ZN12MainViewBaseD1Ev>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	0802120c 	.word	0x0802120c

0800aa34 <_ZN8MainViewD0Ev>:
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f7ff ffe7 	bl	800aa10 <_ZN8MainViewD1Ev>
 800aa42:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f014 faf7 	bl	801f03a <_ZdlPvj>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800aa56:	b480      	push	{r7}
 800aa58:	b083      	sub	sp, #12
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	601a      	str	r2, [r3, #0]
{
}
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4618      	mov	r0, r3
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr

0800aa72 <_ZN5Model4tickEv>:

void Model::tick()
{
 800aa72:	b480      	push	{r7}
 800aa74:	b083      	sub	sp, #12
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
}
 800aa7a:	bf00      	nop
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
	...

0800aa88 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
    {
 800aa90:	4a04      	ldr	r2, [pc, #16]	; (800aaa4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	601a      	str	r2, [r3, #0]
    }
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4618      	mov	r0, r3
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	08021260 	.word	0x08021260

0800aaa8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
    }
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7ff ffe9 	bl	800aa88 <_ZN8touchgfx15TouchControllerD1Ev>
 800aab6:	2104      	movs	r1, #4
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f014 fabe 	bl	801f03a <_ZdlPvj>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4618      	mov	r0, r3
 800aac2:	3708      	adds	r7, #8
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
	...

0800aaf8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	4a05      	ldr	r2, [pc, #20]	; (800ab18 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	601a      	str	r2, [r3, #0]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7ff ffbd 	bl	800aa88 <_ZN8touchgfx15TouchControllerD1Ev>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4618      	mov	r0, r3
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	08021248 	.word	0x08021248

0800ab1c <_ZN20STM32TouchControllerD0Ev>:
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff ffe7 	bl	800aaf8 <_ZN20STM32TouchControllerD1Ev>
 800ab2a:	2104      	movs	r1, #4
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f014 fa84 	bl	801f03a <_ZdlPvj>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	4603      	mov	r3, r0
 800ab44:	71fb      	strb	r3, [r7, #7]

}
 800ab46:	bf00      	nop
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr

0800ab52 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800ab52:	b480      	push	{r7}
 800ab54:	b083      	sub	sp, #12
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	4603      	mov	r3, r0
 800ab5a:	71fb      	strb	r3, [r7, #7]

}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	4603      	mov	r3, r0
 800ab70:	71fb      	strb	r3, [r7, #7]

}
 800ab72:	bf00      	nop
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
	...

0800ab80 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
    {
 800ab88:	4a04      	ldr	r2, [pc, #16]	; (800ab9c <_ZN8touchgfx3HALD1Ev+0x1c>)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	601a      	str	r2, [r3, #0]
    }
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4618      	mov	r0, r3
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	08021b40 	.word	0x08021b40

0800aba0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
    }
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff ffe9 	bl	800ab80 <_ZN8touchgfx3HALD1Ev>
 800abae:	217c      	movs	r1, #124	; 0x7c
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f014 fa42 	bl	801f03a <_ZdlPvj>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4618      	mov	r0, r3
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	460b      	mov	r3, r1
 800abca:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	78fa      	ldrb	r2, [r7, #3]
 800abd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	460b      	mov	r3, r1
 800abf2:	807b      	strh	r3, [r7, #2]
 800abf4:	4613      	mov	r3, r2
 800abf6:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800abf8:	4b0c      	ldr	r3, [pc, #48]	; (800ac2c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800abfa:	881b      	ldrh	r3, [r3, #0]
 800abfc:	887a      	ldrh	r2, [r7, #2]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d304      	bcc.n	800ac0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800ac02:	4b0b      	ldr	r3, [pc, #44]	; (800ac30 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800ac04:	881b      	ldrh	r3, [r3, #0]
 800ac06:	883a      	ldrh	r2, [r7, #0]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d205      	bcs.n	800ac18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800ac0c:	4b09      	ldr	r3, [pc, #36]	; (800ac34 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800ac0e:	4a0a      	ldr	r2, [pc, #40]	; (800ac38 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800ac10:	219e      	movs	r1, #158	; 0x9e
 800ac12:	480a      	ldr	r0, [pc, #40]	; (800ac3c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800ac14:	f014 fa40 	bl	801f098 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800ac18:	4a09      	ldr	r2, [pc, #36]	; (800ac40 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800ac1a:	887b      	ldrh	r3, [r7, #2]
 800ac1c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800ac1e:	4a09      	ldr	r2, [pc, #36]	; (800ac44 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800ac20:	883b      	ldrh	r3, [r7, #0]
 800ac22:	8013      	strh	r3, [r2, #0]
    }
 800ac24:	bf00      	nop
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	20009f88 	.word	0x20009f88
 800ac30:	20009f8a 	.word	0x20009f8a
 800ac34:	08020980 	.word	0x08020980
 800ac38:	080209e4 	.word	0x080209e4
 800ac3c:	08020a28 	.word	0x08020a28
 800ac40:	20009f8e 	.word	0x20009f8e
 800ac44:	20009f90 	.word	0x20009f90

0800ac48 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d009      	beq.n	800ac6e <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	685a      	ldr	r2, [r3, #4]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4610      	mov	r0, r2
 800ac68:	4798      	blx	r3
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	e000      	b.n	800ac70 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800ac6e:	2300      	movs	r3, #0
    }
 800ac70:	4618      	mov	r0, r3
 800ac72:	3708      	adds	r7, #8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f002 ff43 	bl	800db0c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	33a4      	adds	r3, #164	; 0xa4
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	4798      	blx	r3
    }
 800ac92:	bf00      	nop
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800ac9a:	b480      	push	{r7}
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	6039      	str	r1, [r7, #0]
    {
        return false;
 800aca4:	2300      	movs	r3, #0
    }
 800aca6:	4618      	mov	r0, r3
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
	...

0800acb4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
 800acc0:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d106      	bne.n	800acd6 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800acc8:	4b11      	ldr	r3, [pc, #68]	; (800ad10 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800acca:	4a12      	ldr	r2, [pc, #72]	; (800ad14 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800accc:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 800acd0:	4811      	ldr	r0, [pc, #68]	; (800ad18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 800acd2:	f014 f9e1 	bl	801f098 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	68ba      	ldr	r2, [r7, #8]
 800acda:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	683a      	ldr	r2, [r7, #0]
 800ace6:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	bf14      	ite	ne
 800acee:	2301      	movne	r3, #1
 800acf0:	2300      	moveq	r3, #0
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	4b09      	ldr	r3, [pc, #36]	; (800ad1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800acf6:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	bf14      	ite	ne
 800acfe:	2301      	movne	r3, #1
 800ad00:	2300      	moveq	r3, #0
 800ad02:	b2da      	uxtb	r2, r3
 800ad04:	4b06      	ldr	r3, [pc, #24]	; (800ad20 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 800ad06:	701a      	strb	r2, [r3, #0]
    }
 800ad08:	bf00      	nop
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	08020a6c 	.word	0x08020a6c
 800ad14:	08020aa4 	.word	0x08020aa4
 800ad18:	08020a28 	.word	0x08020a28
 800ad1c:	20009f92 	.word	0x20009f92
 800ad20:	20009f93 	.word	0x20009f93

0800ad24 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800ad2c:	2300      	movs	r3, #0
    }
 800ad2e:	4618      	mov	r0, r3
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b082      	sub	sp, #8
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
 800ad42:	460b      	mov	r3, r1
 800ad44:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d004      	beq.n	800ad58 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad52:	887a      	ldrh	r2, [r7, #2]
 800ad54:	4610      	mov	r0, r2
 800ad56:	4798      	blx	r3
        }
    }
 800ad58:	bf00      	nop
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800ad68:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	685a      	ldr	r2, [r3, #4]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	3318      	adds	r3, #24
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4610      	mov	r0, r2
 800ad90:	4798      	blx	r3
 800ad92:	4603      	mov	r3, r0
    }
 800ad94:	4618      	mov	r0, r3
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d011      	beq.n	800add8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800adb4:	4b14      	ldr	r3, [pc, #80]	; (800ae08 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d11e      	bne.n	800adfa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800adbc:	4b13      	ldr	r3, [pc, #76]	; (800ae0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800adc2:	4b13      	ldr	r3, [pc, #76]	; (800ae10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800adc4:	881a      	ldrh	r2, [r3, #0]
 800adc6:	4b11      	ldr	r3, [pc, #68]	; (800ae0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800adc8:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800adca:	4a11      	ldr	r2, [pc, #68]	; (800ae10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800adcc:	89bb      	ldrh	r3, [r7, #12]
 800adce:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800add0:	4b0d      	ldr	r3, [pc, #52]	; (800ae08 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800add2:	2201      	movs	r2, #1
 800add4:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800add6:	e010      	b.n	800adfa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800add8:	4b0b      	ldr	r3, [pc, #44]	; (800ae08 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00c      	beq.n	800adfa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800ade0:	4b0a      	ldr	r3, [pc, #40]	; (800ae0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800ade2:	881b      	ldrh	r3, [r3, #0]
 800ade4:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800ade6:	4b0a      	ldr	r3, [pc, #40]	; (800ae10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800ade8:	881a      	ldrh	r2, [r3, #0]
 800adea:	4b08      	ldr	r3, [pc, #32]	; (800ae0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800adec:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800adee:	4a08      	ldr	r2, [pc, #32]	; (800ae10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800adf0:	89fb      	ldrh	r3, [r7, #14]
 800adf2:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800adf4:	4b04      	ldr	r3, [pc, #16]	; (800ae08 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800adf6:	2200      	movs	r2, #0
 800adf8:	701a      	strb	r2, [r3, #0]
    }
 800adfa:	bf00      	nop
 800adfc:	3714      	adds	r7, #20
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	20009f8c 	.word	0x20009f8c
 800ae0c:	20009f8a 	.word	0x20009f8a
 800ae10:	20009f88 	.word	0x20009f88

0800ae14 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f002 f82a 	bl	800ce78 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800ae24:	bf00      	nop
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	4a05      	ldr	r2, [pc, #20]	; (800ae4c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	601a      	str	r2, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7ff fe9f 	bl	800ab80 <_ZN8touchgfx3HALD1Ev>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4618      	mov	r0, r3
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	08021490 	.word	0x08021490

0800ae50 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7ff ffe7 	bl	800ae2c <_ZN20TouchGFXGeneratedHALD1Ev>
 800ae5e:	217c      	movs	r1, #124	; 0x7c
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f014 f8ea 	bl	801f03a <_ZdlPvj>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7ff ffca 	bl	800ae14 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f001 fb48 	bl	800c528 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800ae98:	bf00      	nop
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f001 fbd4 	bl	800c658 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800aeb0:	4603      	mov	r3, r0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b082      	sub	sp, #8
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
 800aec2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	4618      	mov	r0, r3
 800aeca:	f001 fbd3 	bl	800c674 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800aece:	bf00      	nop
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b082      	sub	sp, #8
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	4618      	mov	r0, r3
 800aee6:	f001 fbdb 	bl	800c6a0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800aeea:	bf00      	nop
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	60f8      	str	r0, [r7, #12]
 800aefa:	60b9      	str	r1, [r7, #8]
 800aefc:	607a      	str	r2, [r7, #4]
 800aefe:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	68b9      	ldr	r1, [r7, #8]
 800af08:	f001 fbe8 	bl	800c6dc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800af0c:	4603      	mov	r3, r0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b082      	sub	sp, #8
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4618      	mov	r0, r3
 800af22:	f001 fb25 	bl	800c570 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800af26:	bf00      	nop
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b082      	sub	sp, #8
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4618      	mov	r0, r3
 800af3a:	f001 fb29 	bl	800c590 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800af3e:	bf00      	nop
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b082      	sub	sp, #8
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4618      	mov	r0, r3
 800af52:	f001 fb2b 	bl	800c5ac <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800af56:	bf00      	nop
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b082      	sub	sp, #8
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4618      	mov	r0, r3
 800af6a:	f001 fb2d 	bl	800c5c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800af6e:	bf00      	nop
 800af70:	3708      	adds	r7, #8
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	4a05      	ldr	r2, [pc, #20]	; (800af98 <_ZN11TouchGFXHALD1Ev+0x20>)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4618      	mov	r0, r3
 800af8a:	f7ff ff4f 	bl	800ae2c <_ZN20TouchGFXGeneratedHALD1Ev>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4618      	mov	r0, r3
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	08021278 	.word	0x08021278

0800af9c <_ZN11TouchGFXHALD0Ev>:
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7ff ffe7 	bl	800af78 <_ZN11TouchGFXHALD1Ev>
 800afaa:	217c      	movs	r1, #124	; 0x7c
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f014 f844 	bl	801f03a <_ZdlPvj>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4618      	mov	r0, r3
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800afc0:	2200      	movs	r2, #0
 800afc2:	2101      	movs	r1, #1
 800afc4:	2001      	movs	r0, #1
 800afc6:	f7f9 fda9 	bl	8004b1c <osSemaphoreNew>
 800afca:	4603      	mov	r3, r0
 800afcc:	4a0f      	ldr	r2, [pc, #60]	; (800b00c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800afce:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800afd0:	4b0e      	ldr	r3, [pc, #56]	; (800b00c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d105      	bne.n	800afe4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800afd8:	4b0d      	ldr	r3, [pc, #52]	; (800b010 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800afda:	4a0e      	ldr	r2, [pc, #56]	; (800b014 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800afdc:	2127      	movs	r1, #39	; 0x27
 800afde:	480e      	ldr	r0, [pc, #56]	; (800b018 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800afe0:	f014 f85a 	bl	801f098 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800afe4:	2200      	movs	r2, #0
 800afe6:	2104      	movs	r1, #4
 800afe8:	2001      	movs	r0, #1
 800afea:	f7f9 fef1 	bl	8004dd0 <osMessageQueueNew>
 800afee:	4603      	mov	r3, r0
 800aff0:	4a0a      	ldr	r2, [pc, #40]	; (800b01c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800aff2:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800aff4:	4b09      	ldr	r3, [pc, #36]	; (800b01c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d105      	bne.n	800b008 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800affc:	4b08      	ldr	r3, [pc, #32]	; (800b020 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800affe:	4a05      	ldr	r2, [pc, #20]	; (800b014 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800b000:	212b      	movs	r1, #43	; 0x2b
 800b002:	4805      	ldr	r0, [pc, #20]	; (800b018 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800b004:	f014 f848 	bl	801f098 <__assert_func>
}
 800b008:	bf00      	nop
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	20008f30 	.word	0x20008f30
 800b010:	08020af4 	.word	0x08020af4
 800b014:	08020b40 	.word	0x08020b40
 800b018:	08020b70 	.word	0x08020b70
 800b01c:	20008f34 	.word	0x20008f34
 800b020:	08020b9c 	.word	0x08020b9c

0800b024 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800b024:	b580      	push	{r7, lr}
 800b026:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800b028:	4b04      	ldr	r3, [pc, #16]	; (800b03c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f04f 31ff 	mov.w	r1, #4294967295
 800b030:	4618      	mov	r0, r3
 800b032:	f7f9 fe0f 	bl	8004c54 <osSemaphoreAcquire>
}
 800b036:	bf00      	nop
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	20008f30 	.word	0x20008f30

0800b040 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800b040:	b580      	push	{r7, lr}
 800b042:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800b044:	4b03      	ldr	r3, [pc, #12]	; (800b054 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4618      	mov	r0, r3
 800b04a:	f7f9 fe69 	bl	8004d20 <osSemaphoreRelease>
}
 800b04e:	bf00      	nop
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	20008f30 	.word	0x20008f30

0800b058 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800b05c:	4b03      	ldr	r3, [pc, #12]	; (800b06c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2100      	movs	r1, #0
 800b062:	4618      	mov	r0, r3
 800b064:	f7f9 fdf6 	bl	8004c54 <osSemaphoreAcquire>
}
 800b068:	bf00      	nop
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	20008f30 	.word	0x20008f30

0800b070 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800b070:	b580      	push	{r7, lr}
 800b072:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800b074:	4b03      	ldr	r3, [pc, #12]	; (800b084 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7f9 fe51 	bl	8004d20 <osSemaphoreRelease>
}
 800b07e:	bf00      	nop
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	20008f30 	.word	0x20008f30

0800b088 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800b08c:	4b04      	ldr	r3, [pc, #16]	; (800b0a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800b08e:	6818      	ldr	r0, [r3, #0]
 800b090:	2300      	movs	r3, #0
 800b092:	2200      	movs	r2, #0
 800b094:	4903      	ldr	r1, [pc, #12]	; (800b0a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800b096:	f7f9 ff21 	bl	8004edc <osMessageQueuePut>
}
 800b09a:	bf00      	nop
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	20008f34 	.word	0x20008f34
 800b0a4:	20000014 	.word	0x20000014

0800b0a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800b0ae:	4b09      	ldr	r3, [pc, #36]	; (800b0d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800b0b0:	6818      	ldr	r0, [r3, #0]
 800b0b2:	1d39      	adds	r1, r7, #4
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f7f9 ff84 	bl	8004fc4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800b0bc:	4b05      	ldr	r3, [pc, #20]	; (800b0d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800b0be:	6818      	ldr	r0, [r3, #0]
 800b0c0:	1d39      	adds	r1, r7, #4
 800b0c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f7f9 ff7c 	bl	8004fc4 <osMessageQueueGet>
}
 800b0cc:	bf00      	nop
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	20008f34 	.word	0x20008f34

0800b0d8 <_ZN8touchgfx10OSWrappers9taskYieldEv>:
 * system to change to another task of similar priority. When
 * running without an operating system, the implementation can run
 * a very short task and return.
 */
void OSWrappers::taskYield()
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	af00      	add	r7, sp, #0
    osThreadYield();
 800b0dc:	f7f9 fcbe 	bl	8004a5c <osThreadYield>
}
 800b0e0:	bf00      	nop
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <__NVIC_EnableIRQ>:
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	db0b      	blt.n	800b10e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0f6:	79fb      	ldrb	r3, [r7, #7]
 800b0f8:	f003 021f 	and.w	r2, r3, #31
 800b0fc:	4907      	ldr	r1, [pc, #28]	; (800b11c <__NVIC_EnableIRQ+0x38>)
 800b0fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b102:	095b      	lsrs	r3, r3, #5
 800b104:	2001      	movs	r0, #1
 800b106:	fa00 f202 	lsl.w	r2, r0, r2
 800b10a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b10e:	bf00      	nop
 800b110:	370c      	adds	r7, #12
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop
 800b11c:	e000e100 	.word	0xe000e100

0800b120 <__NVIC_DisableIRQ>:
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	4603      	mov	r3, r0
 800b128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b12a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	db12      	blt.n	800b158 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b132:	79fb      	ldrb	r3, [r7, #7]
 800b134:	f003 021f 	and.w	r2, r3, #31
 800b138:	490a      	ldr	r1, [pc, #40]	; (800b164 <__NVIC_DisableIRQ+0x44>)
 800b13a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b13e:	095b      	lsrs	r3, r3, #5
 800b140:	2001      	movs	r0, #1
 800b142:	fa00 f202 	lsl.w	r2, r0, r2
 800b146:	3320      	adds	r3, #32
 800b148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b14c:	f3bf 8f4f 	dsb	sy
}
 800b150:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b152:	f3bf 8f6f 	isb	sy
}
 800b156:	bf00      	nop
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	e000e100 	.word	0xe000e100

0800b168 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
        : color(0)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	601a      	str	r2, [r3, #0]
    }
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4618      	mov	r0, r3
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
        return color;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
    }
 800b190:	4618      	mov	r0, r3
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
    {
 800b1a4:	4a04      	ldr	r2, [pc, #16]	; (800b1b8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	601a      	str	r2, [r3, #0]
    }
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr
 800b1b8:	08021398 	.word	0x08021398

0800b1bc <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
    }
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f7ff ffe9 	bl	800b19c <_ZN8touchgfx9DMA_QueueD1Ev>
 800b1ca:	2104      	movs	r1, #4
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f013 ff34 	bl	801f03a <_ZdlPvj>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	3344      	adds	r3, #68	; 0x44
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	4798      	blx	r3
    }
 800b1f0:	bf00      	nop
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
    {
 800b200:	4a04      	ldr	r2, [pc, #16]	; (800b214 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	601a      	str	r2, [r3, #0]
    }
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4618      	mov	r0, r3
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr
 800b214:	08022098 	.word	0x08022098

0800b218 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
    }
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7ff ffe9 	bl	800b1f8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800b226:	210c      	movs	r1, #12
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f013 ff06 	bl	801f03a <_ZdlPvj>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4618      	mov	r0, r3
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800b242:	4a09      	ldr	r2, [pc, #36]	; (800b268 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	601a      	str	r2, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	605a      	str	r2, [r3, #4]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	721a      	strb	r2, [r3, #8]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	725a      	strb	r2, [r3, #9]
    {
    }
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4618      	mov	r0, r3
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr
 800b268:	08022098 	.word	0x08022098

0800b26c <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800b274:	2301      	movs	r3, #1
    }
 800b276:	4618      	mov	r0, r3
 800b278:	370c      	adds	r7, #12
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800b282:	b580      	push	{r7, lr}
 800b284:	b082      	sub	sp, #8
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3328      	adds	r3, #40	; 0x28
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4610      	mov	r0, r2
 800b296:	4798      	blx	r3
    }
 800b298:	bf00      	nop
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3314      	adds	r3, #20
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4610      	mov	r0, r2
 800b2b8:	4798      	blx	r3
    }
 800b2ba:	bf00      	nop
 800b2bc:	3708      	adds	r7, #8
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b082      	sub	sp, #8
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800b2ca:	f7fd fb09 	bl	80088e0 <_ZN8touchgfx3HAL11getInstanceEv>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7ff ffe5 	bl	800b2a0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800b2d6:	bf00      	nop
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b082      	sub	sp, #8
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	330c      	adds	r3, #12
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7ff ff3c 	bl	800b168 <_ZN8touchgfx9colortypeC1Ev>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
	...

0800b2fc <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 800b2fc:	b5b0      	push	{r4, r5, r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	330c      	adds	r3, #12
 800b30a:	4619      	mov	r1, r3
 800b30c:	4610      	mov	r0, r2
 800b30e:	f7ff ff93 	bl	800b238 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800b312:	4a0e      	ldr	r2, [pc, #56]	; (800b34c <_ZN10STM32F7DMAC1Ev+0x50>)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	601a      	str	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f103 000c 	add.w	r0, r3, #12
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	3320      	adds	r3, #32
 800b322:	2260      	movs	r2, #96	; 0x60
 800b324:	4619      	mov	r1, r3
 800b326:	f002 fd57 	bl	800ddd8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	3320      	adds	r3, #32
 800b32e:	245f      	movs	r4, #95	; 0x5f
 800b330:	461d      	mov	r5, r3
 800b332:	2c00      	cmp	r4, #0
 800b334:	db05      	blt.n	800b342 <_ZN10STM32F7DMAC1Ev+0x46>
 800b336:	4628      	mov	r0, r5
 800b338:	f7ff ffd1 	bl	800b2de <_ZN8touchgfx6BlitOpC1Ev>
 800b33c:	3520      	adds	r5, #32
 800b33e:	3c01      	subs	r4, #1
 800b340:	e7f7      	b.n	800b332 <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4618      	mov	r0, r3
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bdb0      	pop	{r4, r5, r7, pc}
 800b34c:	08021348 	.word	0x08021348

0800b350 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	4a09      	ldr	r2, [pc, #36]	; (800b380 <_ZN10STM32F7DMAD1Ev+0x30>)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800b35e:	205a      	movs	r0, #90	; 0x5a
 800b360:	f7ff fede 	bl	800b120 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	330c      	adds	r3, #12
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 fb23 	bl	800b9b4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4618      	mov	r0, r3
 800b372:	f7ff ff41 	bl	800b1f8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4618      	mov	r0, r3
 800b37a:	3708      	adds	r7, #8
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	08021348 	.word	0x08021348

0800b384 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
}
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f7ff ffdf 	bl	800b350 <_ZN10STM32F7DMAD1Ev>
 800b392:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f013 fe4f 	bl	801f03a <_ZdlPvj>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
	...

0800b3a8 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800b3b0:	4b10      	ldr	r3, [pc, #64]	; (800b3f4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800b3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b4:	4a0f      	ldr	r2, [pc, #60]	; (800b3f4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800b3b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b3ba:	6313      	str	r3, [r2, #48]	; 0x30
 800b3bc:	4b0d      	ldr	r3, [pc, #52]	; (800b3f4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800b3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3c4:	60fb      	str	r3, [r7, #12]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800b3c8:	4b0a      	ldr	r3, [pc, #40]	; (800b3f4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	4a09      	ldr	r2, [pc, #36]	; (800b3f4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800b3ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b3d2:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800b3d4:	4b07      	ldr	r3, [pc, #28]	; (800b3f4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800b3d6:	691b      	ldr	r3, [r3, #16]
 800b3d8:	4a06      	ldr	r2, [pc, #24]	; (800b3f4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 800b3da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b3de:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800b3e0:	4b05      	ldr	r3, [pc, #20]	; (800b3f8 <_ZN10STM32F7DMA10initializeEv+0x50>)
 800b3e2:	4a06      	ldr	r2, [pc, #24]	; (800b3fc <_ZN10STM32F7DMA10initializeEv+0x54>)
 800b3e4:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800b3e6:	205a      	movs	r0, #90	; 0x5a
 800b3e8:	f7ff fe7c 	bl	800b0e4 <__NVIC_EnableIRQ>
}
 800b3ec:	bf00      	nop
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	40023800 	.word	0x40023800
 800b3f8:	2000a254 	.word	0x2000a254
 800b3fc:	0800b2c3 	.word	0x0800b2c3

0800b400 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	460b      	mov	r3, r1
 800b40a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800b40c:	2300      	movs	r3, #0
 800b40e:	60fb      	str	r3, [r7, #12]

    switch (format)
 800b410:	78fb      	ldrb	r3, [r7, #3]
 800b412:	2b0b      	cmp	r3, #11
 800b414:	d826      	bhi.n	800b464 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800b416:	a201      	add	r2, pc, #4	; (adr r2, 800b41c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800b418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41c:	0800b459 	.word	0x0800b459
 800b420:	0800b453 	.word	0x0800b453
 800b424:	0800b44d 	.word	0x0800b44d
 800b428:	0800b465 	.word	0x0800b465
 800b42c:	0800b465 	.word	0x0800b465
 800b430:	0800b465 	.word	0x0800b465
 800b434:	0800b465 	.word	0x0800b465
 800b438:	0800b45f 	.word	0x0800b45f
 800b43c:	0800b45f 	.word	0x0800b45f
 800b440:	0800b45f 	.word	0x0800b45f
 800b444:	0800b45f 	.word	0x0800b45f
 800b448:	0800b45f 	.word	0x0800b45f
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800b44c:	2300      	movs	r3, #0
 800b44e:	60fb      	str	r3, [r7, #12]
        break;
 800b450:	e00e      	b.n	800b470 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800b452:	2301      	movs	r3, #1
 800b454:	60fb      	str	r3, [r7, #12]
        break;
 800b456:	e00b      	b.n	800b470 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800b458:	2302      	movs	r3, #2
 800b45a:	60fb      	str	r3, [r7, #12]
        break;
 800b45c:	e008      	b.n	800b470 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800b45e:	2305      	movs	r3, #5
 800b460:	60fb      	str	r3, [r7, #12]
        break;
 800b462:	e005      	b.n	800b470 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800b464:	4b05      	ldr	r3, [pc, #20]	; (800b47c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800b466:	4a06      	ldr	r2, [pc, #24]	; (800b480 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800b468:	2165      	movs	r1, #101	; 0x65
 800b46a:	4806      	ldr	r0, [pc, #24]	; (800b484 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800b46c:	f013 fe14 	bl	801f098 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800b470:	68fb      	ldr	r3, [r7, #12]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	08020be0 	.word	0x08020be0
 800b480:	08020bfc 	.word	0x08020bfc
 800b484:	08020c48 	.word	0x08020c48

0800b488 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	460b      	mov	r3, r1
 800b492:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800b494:	2300      	movs	r3, #0
 800b496:	60fb      	str	r3, [r7, #12]

    switch (format)
 800b498:	78fb      	ldrb	r3, [r7, #3]
 800b49a:	2b0a      	cmp	r3, #10
 800b49c:	d821      	bhi.n	800b4e2 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800b49e:	a201      	add	r2, pc, #4	; (adr r2, 800b4a4 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800b4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a4:	0800b4dd 	.word	0x0800b4dd
 800b4a8:	0800b4d7 	.word	0x0800b4d7
 800b4ac:	0800b4d1 	.word	0x0800b4d1
 800b4b0:	0800b4e3 	.word	0x0800b4e3
 800b4b4:	0800b4e3 	.word	0x0800b4e3
 800b4b8:	0800b4e3 	.word	0x0800b4e3
 800b4bc:	0800b4e3 	.word	0x0800b4e3
 800b4c0:	0800b4d7 	.word	0x0800b4d7
 800b4c4:	0800b4d7 	.word	0x0800b4d7
 800b4c8:	0800b4d7 	.word	0x0800b4d7
 800b4cc:	0800b4d7 	.word	0x0800b4d7
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	60fb      	str	r3, [r7, #12]
        break;
 800b4d4:	e00b      	b.n	800b4ee <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	60fb      	str	r3, [r7, #12]
        break;
 800b4da:	e008      	b.n	800b4ee <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800b4dc:	2302      	movs	r3, #2
 800b4de:	60fb      	str	r3, [r7, #12]
        break;
 800b4e0:	e005      	b.n	800b4ee <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800b4e2:	4b05      	ldr	r3, [pc, #20]	; (800b4f8 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800b4e4:	4a05      	ldr	r2, [pc, #20]	; (800b4fc <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800b4e6:	2186      	movs	r1, #134	; 0x86
 800b4e8:	4805      	ldr	r0, [pc, #20]	; (800b500 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800b4ea:	f013 fdd5 	bl	801f098 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	08020be0 	.word	0x08020be0
 800b4fc:	08020c74 	.word	0x08020c74
 800b500:	08020c48 	.word	0x08020c48

0800b504 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800b50c:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 800b510:	4618      	mov	r0, r3
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 800b51c:	b590      	push	{r4, r7, lr}
 800b51e:	b089      	sub	sp, #36	; 0x24
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	7f5b      	ldrb	r3, [r3, #29]
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7ff ff67 	bl	800b400 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800b532:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	7f9b      	ldrb	r3, [r3, #30]
 800b538:	4619      	mov	r1, r3
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f7ff ff60 	bl	800b400 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800b540:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	7f9b      	ldrb	r3, [r3, #30]
 800b546:	4619      	mov	r1, r3
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7ff ff9d 	bl	800b488 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800b54e:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	8b5b      	ldrh	r3, [r3, #26]
 800b554:	461a      	mov	r2, r3
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	8a9b      	ldrh	r3, [r3, #20]
 800b55a:	1ad2      	subs	r2, r2, r3
 800b55c:	4ba0      	ldr	r3, [pc, #640]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b55e:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	8b5b      	ldrh	r3, [r3, #26]
 800b564:	461a      	mov	r2, r3
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	8a9b      	ldrh	r3, [r3, #20]
 800b56a:	1ad2      	subs	r2, r2, r3
 800b56c:	4b9c      	ldr	r3, [pc, #624]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b56e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	8b1b      	ldrh	r3, [r3, #24]
 800b574:	461a      	mov	r2, r3
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	8a9b      	ldrh	r3, [r3, #20]
 800b57a:	1ad2      	subs	r2, r2, r3
 800b57c:	4b98      	ldr	r3, [pc, #608]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b57e:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800b580:	4a97      	ldr	r2, [pc, #604]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	8adb      	ldrh	r3, [r3, #22]
 800b58a:	461a      	mov	r2, r3
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	8a9b      	ldrh	r3, [r3, #20]
 800b590:	041b      	lsls	r3, r3, #16
 800b592:	431a      	orrs	r2, r3
 800b594:	4b92      	ldr	r3, [pc, #584]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b596:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	691a      	ldr	r2, [r3, #16]
 800b59c:	4b90      	ldr	r3, [pc, #576]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b59e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	685a      	ldr	r2, [r3, #4]
 800b5a4:	4b8e      	ldr	r3, [pc, #568]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b5a6:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5b0:	d04e      	beq.n	800b650 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
 800b5b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5b6:	f200 8125 	bhi.w	800b804 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
 800b5ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5be:	d015      	beq.n	800b5ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800b5c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5c4:	f200 811e 	bhi.w	800b804 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
 800b5c8:	2b80      	cmp	r3, #128	; 0x80
 800b5ca:	f000 8088 	beq.w	800b6de <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 800b5ce:	2b80      	cmp	r3, #128	; 0x80
 800b5d0:	f200 8118 	bhi.w	800b804 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
 800b5d4:	2b40      	cmp	r3, #64	; 0x40
 800b5d6:	f000 80ee 	beq.w	800b7b6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29a>
 800b5da:	2b40      	cmp	r3, #64	; 0x40
 800b5dc:	f200 8112 	bhi.w	800b804 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
 800b5e0:	2b04      	cmp	r3, #4
 800b5e2:	d067      	beq.n	800b6b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
 800b5e4:	2b20      	cmp	r3, #32
 800b5e6:	f000 80e6 	beq.w	800b7b6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29a>
 800b5ea:	e10b      	b.n	800b804 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e8>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	7f1b      	ldrb	r3, [r3, #28]
 800b5f0:	061b      	lsls	r3, r3, #24
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	4a7a      	ldr	r2, [pc, #488]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b5f6:	4b7b      	ldr	r3, [pc, #492]	; (800b7e4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c8>)
 800b5f8:	430b      	orrs	r3, r1
 800b5fa:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	330c      	adds	r3, #12
 800b600:	4618      	mov	r0, r3
 800b602:	f7ff fdbf 	bl	800b184 <_ZNK8touchgfx9colortypecvmEv>
 800b606:	4603      	mov	r3, r0
 800b608:	021b      	lsls	r3, r3, #8
 800b60a:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	330c      	adds	r3, #12
 800b612:	4618      	mov	r0, r3
 800b614:	f7ff fdb6 	bl	800b184 <_ZNK8touchgfx9colortypecvmEv>
 800b618:	4603      	mov	r3, r0
 800b61a:	015b      	lsls	r3, r3, #5
 800b61c:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800b620:	431c      	orrs	r4, r3
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	330c      	adds	r3, #12
 800b626:	4618      	mov	r0, r3
 800b628:	f7ff fdac 	bl	800b184 <_ZNK8touchgfx9colortypecvmEv>
 800b62c:	4603      	mov	r3, r0
 800b62e:	00db      	lsls	r3, r3, #3
 800b630:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800b634:	4a6a      	ldr	r2, [pc, #424]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b636:	4323      	orrs	r3, r4
 800b638:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800b63a:	4a69      	ldr	r2, [pc, #420]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	691a      	ldr	r2, [r3, #16]
 800b644:	4b66      	ldr	r3, [pc, #408]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b646:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800b648:	4b65      	ldr	r3, [pc, #404]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b64a:	4a67      	ldr	r2, [pc, #412]	; (800b7e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2cc>)
 800b64c:	601a      	str	r2, [r3, #0]
        break;
 800b64e:	e0f2      	b.n	800b836 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	7f1b      	ldrb	r3, [r3, #28]
 800b654:	061b      	lsls	r3, r3, #24
 800b656:	4619      	mov	r1, r3
 800b658:	4a61      	ldr	r2, [pc, #388]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b65a:	4b64      	ldr	r3, [pc, #400]	; (800b7ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d0>)
 800b65c:	430b      	orrs	r3, r1
 800b65e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	330c      	adds	r3, #12
 800b664:	4618      	mov	r0, r3
 800b666:	f7ff fd8d 	bl	800b184 <_ZNK8touchgfx9colortypecvmEv>
 800b66a:	4603      	mov	r3, r0
 800b66c:	021b      	lsls	r3, r3, #8
 800b66e:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	330c      	adds	r3, #12
 800b676:	4618      	mov	r0, r3
 800b678:	f7ff fd84 	bl	800b184 <_ZNK8touchgfx9colortypecvmEv>
 800b67c:	4603      	mov	r3, r0
 800b67e:	015b      	lsls	r3, r3, #5
 800b680:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800b684:	431c      	orrs	r4, r3
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	330c      	adds	r3, #12
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7ff fd7a 	bl	800b184 <_ZNK8touchgfx9colortypecvmEv>
 800b690:	4603      	mov	r3, r0
 800b692:	00db      	lsls	r3, r3, #3
 800b694:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800b698:	4a51      	ldr	r2, [pc, #324]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b69a:	4323      	orrs	r3, r4
 800b69c:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800b69e:	4a50      	ldr	r2, [pc, #320]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	691a      	ldr	r2, [r3, #16]
 800b6a8:	4b4d      	ldr	r3, [pc, #308]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b6aa:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800b6ac:	4b4c      	ldr	r3, [pc, #304]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b6ae:	4a4e      	ldr	r2, [pc, #312]	; (800b7e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2cc>)
 800b6b0:	601a      	str	r2, [r3, #0]
        break;
 800b6b2:	e0c0      	b.n	800b836 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	7f1b      	ldrb	r3, [r3, #28]
 800b6b8:	061b      	lsls	r3, r3, #24
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	4a47      	ldr	r2, [pc, #284]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b6c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6c6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800b6c8:	4a45      	ldr	r2, [pc, #276]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	691a      	ldr	r2, [r3, #16]
 800b6d2:	4b43      	ldr	r3, [pc, #268]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b6d4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800b6d6:	4b42      	ldr	r3, [pc, #264]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b6d8:	4a43      	ldr	r2, [pc, #268]	; (800b7e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2cc>)
 800b6da:	601a      	str	r2, [r3, #0]
        break;
 800b6dc:	e0ab      	b.n	800b836 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	1d1a      	adds	r2, r3, #4
 800b6ec:	4b3c      	ldr	r3, [pc, #240]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b6ee:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	7f1b      	ldrb	r3, [r3, #28]
 800b6f4:	061b      	lsls	r3, r3, #24
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	4a38      	ldr	r2, [pc, #224]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b6fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b702:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800b704:	4a36      	ldr	r2, [pc, #216]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	691a      	ldr	r2, [r3, #16]
 800b70e:	4b34      	ldr	r3, [pc, #208]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b710:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	881b      	ldrh	r3, [r3, #0]
 800b716:	b2db      	uxtb	r3, r3
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d002      	beq.n	800b722 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d00d      	beq.n	800b73c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>
 800b720:	e020      	b.n	800b764 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800b722:	4b2f      	ldr	r3, [pc, #188]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b724:	69da      	ldr	r2, [r3, #28]
 800b726:	4b32      	ldr	r3, [pc, #200]	; (800b7f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>)
 800b728:	4013      	ands	r3, r2
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	8852      	ldrh	r2, [r2, #2]
 800b72e:	3a01      	subs	r2, #1
 800b730:	0212      	lsls	r2, r2, #8
 800b732:	4611      	mov	r1, r2
 800b734:	4a2a      	ldr	r2, [pc, #168]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b736:	430b      	orrs	r3, r1
 800b738:	61d3      	str	r3, [r2, #28]
                break;
 800b73a:	e01a      	b.n	800b772 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x256>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	7f1b      	ldrb	r3, [r3, #28]
 800b740:	2bff      	cmp	r3, #255	; 0xff
 800b742:	d101      	bne.n	800b748 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>
                {
                  blend = false;
 800b744:	2300      	movs	r3, #0
 800b746:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800b748:	4b25      	ldr	r3, [pc, #148]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b74a:	69da      	ldr	r2, [r3, #28]
 800b74c:	4b28      	ldr	r3, [pc, #160]	; (800b7f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>)
 800b74e:	4013      	ands	r3, r2
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	8852      	ldrh	r2, [r2, #2]
 800b754:	3a01      	subs	r2, #1
 800b756:	0212      	lsls	r2, r2, #8
 800b758:	4313      	orrs	r3, r2
 800b75a:	4a21      	ldr	r2, [pc, #132]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b75c:	f043 0310 	orr.w	r3, r3, #16
 800b760:	61d3      	str	r3, [r2, #28]
                break;
 800b762:	e006      	b.n	800b772 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x256>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800b764:	4b23      	ldr	r3, [pc, #140]	; (800b7f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d8>)
 800b766:	4a24      	ldr	r2, [pc, #144]	; (800b7f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2dc>)
 800b768:	f44f 7188 	mov.w	r1, #272	; 0x110
 800b76c:	4823      	ldr	r0, [pc, #140]	; (800b7fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e0>)
 800b76e:	f013 fc93 	bl	801f098 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800b772:	4b1b      	ldr	r3, [pc, #108]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b774:	69db      	ldr	r3, [r3, #28]
 800b776:	4a1a      	ldr	r2, [pc, #104]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b778:	f043 0320 	orr.w	r3, r3, #32
 800b77c:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800b77e:	4b18      	ldr	r3, [pc, #96]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b780:	69db      	ldr	r3, [r3, #28]
 800b782:	f003 0320 	and.w	r3, r3, #32
 800b786:	2b00      	cmp	r3, #0
 800b788:	bf14      	ite	ne
 800b78a:	2301      	movne	r3, #1
 800b78c:	2300      	moveq	r3, #0
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
            {
                OSWrappers::taskYield();
 800b794:	f7ff fca0 	bl	800b0d8 <_ZN8touchgfx10OSWrappers9taskYieldEv>
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800b798:	e7f1      	b.n	800b77e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800b79a:	4b11      	ldr	r3, [pc, #68]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b79c:	2210      	movs	r2, #16
 800b79e:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 800b7a0:	7ffb      	ldrb	r3, [r7, #31]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d003      	beq.n	800b7ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800b7a6:	4b0e      	ldr	r3, [pc, #56]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b7a8:	4a0f      	ldr	r2, [pc, #60]	; (800b7e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2cc>)
 800b7aa:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 800b7ac:	e043      	b.n	800b836 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800b7ae:	4b0c      	ldr	r3, [pc, #48]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b7b0:	4a13      	ldr	r2, [pc, #76]	; (800b800 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e4>)
 800b7b2:	601a      	str	r2, [r3, #0]
      break;
 800b7b4:	e03f      	b.n	800b836 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	7f1b      	ldrb	r3, [r3, #28]
 800b7ba:	061b      	lsls	r3, r3, #24
 800b7bc:	461a      	mov	r2, r3
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	4a07      	ldr	r2, [pc, #28]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b7c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7c8:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800b7ca:	4a05      	ldr	r2, [pc, #20]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	691a      	ldr	r2, [r3, #16]
 800b7d4:	4b02      	ldr	r3, [pc, #8]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b7d6:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800b7d8:	4b01      	ldr	r3, [pc, #4]	; (800b7e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800b7da:	4a03      	ldr	r2, [pc, #12]	; (800b7e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2cc>)
 800b7dc:	601a      	str	r2, [r3, #0]
        break;
 800b7de:	e02a      	b.n	800b836 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x31a>
 800b7e0:	4002b000 	.word	0x4002b000
 800b7e4:	0002000a 	.word	0x0002000a
 800b7e8:	00020201 	.word	0x00020201
 800b7ec:	00020009 	.word	0x00020009
 800b7f0:	ffff00ef 	.word	0xffff00ef
 800b7f4:	08020cc4 	.word	0x08020cc4
 800b7f8:	08020ce0 	.word	0x08020ce0
 800b7fc:	08020c48 	.word	0x08020c48
 800b800:	00010201 	.word	0x00010201
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	7f1b      	ldrb	r3, [r3, #28]
 800b808:	061b      	lsls	r3, r3, #24
 800b80a:	461a      	mov	r2, r3
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	4313      	orrs	r3, r2
 800b810:	4a0b      	ldr	r2, [pc, #44]	; (800b840 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 800b812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b816:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	7f5a      	ldrb	r2, [r3, #29]
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	7f9b      	ldrb	r3, [r3, #30]
 800b820:	429a      	cmp	r2, r3
 800b822:	d003      	beq.n	800b82c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x310>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800b824:	4b06      	ldr	r3, [pc, #24]	; (800b840 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 800b826:	4a07      	ldr	r2, [pc, #28]	; (800b844 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x328>)
 800b828:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 800b82a:	e003      	b.n	800b834 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x318>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800b82c:	4b04      	ldr	r3, [pc, #16]	; (800b840 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 800b82e:	f240 2201 	movw	r2, #513	; 0x201
 800b832:	601a      	str	r2, [r3, #0]
        break;
 800b834:	bf00      	nop
    }
}
 800b836:	bf00      	nop
 800b838:	3724      	adds	r7, #36	; 0x24
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd90      	pop	{r4, r7, pc}
 800b83e:	bf00      	nop
 800b840:	4002b000 	.word	0x4002b000
 800b844:	00010201 	.word	0x00010201

0800b848 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 800b848:	b590      	push	{r4, r7, lr}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	7f9b      	ldrb	r3, [r3, #30]
 800b856:	4619      	mov	r1, r3
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f7ff fe15 	bl	800b488 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800b85e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800b860:	4a50      	ldr	r2, [pc, #320]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	8adb      	ldrh	r3, [r3, #22]
 800b86a:	461a      	mov	r2, r3
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	8a9b      	ldrh	r3, [r3, #20]
 800b870:	041b      	lsls	r3, r3, #16
 800b872:	431a      	orrs	r2, r3
 800b874:	4b4b      	ldr	r3, [pc, #300]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b876:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	691a      	ldr	r2, [r3, #16]
 800b87c:	4b49      	ldr	r3, [pc, #292]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b87e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	8b5b      	ldrh	r3, [r3, #26]
 800b884:	461a      	mov	r2, r3
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	8a9b      	ldrh	r3, [r3, #20]
 800b88a:	1ad2      	subs	r2, r2, r3
 800b88c:	4b45      	ldr	r3, [pc, #276]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b88e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b08      	cmp	r3, #8
 800b896:	d147      	bne.n	800b928 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	8b5b      	ldrh	r3, [r3, #26]
 800b89c:	461a      	mov	r2, r3
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	8a9b      	ldrh	r3, [r3, #20]
 800b8a2:	1ad2      	subs	r2, r2, r3
 800b8a4:	4b3f      	ldr	r3, [pc, #252]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b8a6:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	8b5b      	ldrh	r3, [r3, #26]
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	8a9b      	ldrh	r3, [r3, #20]
 800b8b2:	1ad2      	subs	r2, r2, r3
 800b8b4:	4b3b      	ldr	r3, [pc, #236]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b8b6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800b8b8:	4a3a      	ldr	r2, [pc, #232]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	7f1b      	ldrb	r3, [r3, #28]
 800b8c2:	061b      	lsls	r3, r3, #24
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	4a37      	ldr	r2, [pc, #220]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b8c8:	4b37      	ldr	r3, [pc, #220]	; (800b9a8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>)
 800b8ca:	430b      	orrs	r3, r1
 800b8cc:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, (((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	330c      	adds	r3, #12
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7ff fc56 	bl	800b184 <_ZNK8touchgfx9colortypecvmEv>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	021b      	lsls	r3, r3, #8
 800b8dc:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	330c      	adds	r3, #12
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff fc4d 	bl	800b184 <_ZNK8touchgfx9colortypecvmEv>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	015b      	lsls	r3, r3, #5
 800b8ee:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800b8f2:	431c      	orrs	r4, r3
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	330c      	adds	r3, #12
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7ff fc43 	bl	800b184 <_ZNK8touchgfx9colortypecvmEv>
 800b8fe:	4603      	mov	r3, r0
 800b900:	00db      	lsls	r3, r3, #3
 800b902:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800b906:	4323      	orrs	r3, r4
 800b908:	4a26      	ldr	r2, [pc, #152]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b90a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b90e:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	691a      	ldr	r2, [r3, #16]
 800b914:	4b23      	ldr	r3, [pc, #140]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b916:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	691a      	ldr	r2, [r3, #16]
 800b91c:	4b21      	ldr	r3, [pc, #132]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b91e:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800b920:	4b20      	ldr	r3, [pc, #128]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b922:	4a22      	ldr	r2, [pc, #136]	; (800b9ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x164>)
 800b924:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800b926:	e039      	b.n	800b99c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x154>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800b928:	4a1e      	ldr	r2, [pc, #120]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800b92e:	4b1d      	ldr	r3, [pc, #116]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b930:	2200      	movs	r2, #0
 800b932:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	7f9b      	ldrb	r3, [r3, #30]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d108      	bne.n	800b94e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x106>
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	330c      	adds	r3, #12
 800b940:	4c18      	ldr	r4, [pc, #96]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b942:	4618      	mov	r0, r3
 800b944:	f7ff fc1e 	bl	800b184 <_ZNK8touchgfx9colortypecvmEv>
 800b948:	4603      	mov	r3, r0
 800b94a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b94c:	e023      	b.n	800b996 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x14e>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	7f1b      	ldrb	r3, [r3, #28]
 800b952:	061b      	lsls	r3, r3, #24
 800b954:	461c      	mov	r4, r3
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	330c      	adds	r3, #12
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7ff fc12 	bl	800b184 <_ZNK8touchgfx9colortypecvmEv>
 800b960:	4603      	mov	r3, r0
 800b962:	021b      	lsls	r3, r3, #8
 800b964:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 800b968:	431c      	orrs	r4, r3
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	330c      	adds	r3, #12
 800b96e:	4618      	mov	r0, r3
 800b970:	f7ff fc08 	bl	800b184 <_ZNK8touchgfx9colortypecvmEv>
 800b974:	4603      	mov	r3, r0
 800b976:	015b      	lsls	r3, r3, #5
 800b978:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800b97c:	431c      	orrs	r4, r3
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	330c      	adds	r3, #12
 800b982:	4618      	mov	r0, r3
 800b984:	f7ff fbfe 	bl	800b184 <_ZNK8touchgfx9colortypecvmEv>
 800b988:	4603      	mov	r3, r0
 800b98a:	00db      	lsls	r3, r3, #3
 800b98c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800b990:	4a04      	ldr	r2, [pc, #16]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b992:	4323      	orrs	r3, r4
 800b994:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800b996:	4b03      	ldr	r3, [pc, #12]	; (800b9a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15c>)
 800b998:	4a05      	ldr	r2, [pc, #20]	; (800b9b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 800b99a:	601a      	str	r2, [r3, #0]
}
 800b99c:	bf00      	nop
 800b99e:	3714      	adds	r7, #20
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd90      	pop	{r4, r7, pc}
 800b9a4:	4002b000 	.word	0x4002b000
 800b9a8:	00010009 	.word	0x00010009
 800b9ac:	00020201 	.word	0x00020201
 800b9b0:	00030201 	.word	0x00030201

0800b9b4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	4a05      	ldr	r2, [pc, #20]	; (800b9d4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	601a      	str	r2, [r3, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7ff fbe9 	bl	800b19c <_ZN8touchgfx9DMA_QueueD1Ev>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	080220e8 	.word	0x080220e8

0800b9d8 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff ffe7 	bl	800b9b4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800b9e6:	2114      	movs	r1, #20
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f013 fb26 	bl	801f03a <_ZdlPvj>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
        texts = t;
 800ba00:	4a04      	ldr	r2, [pc, #16]	; (800ba14 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6013      	str	r3, [r2, #0]
    }
 800ba06:	bf00      	nop
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	20009ff0 	.word	0x20009ff0

0800ba18 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
 800ba24:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800ba26:	4a0b      	ldr	r2, [pc, #44]	; (800ba54 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	601a      	str	r2, [r3, #0]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	605a      	str	r2, [r3, #4]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	609a      	str	r2, [r3, #8]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	683a      	ldr	r2, [r7, #0]
 800ba3c:	60da      	str	r2, [r3, #12]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	69ba      	ldr	r2, [r7, #24]
 800ba42:	611a      	str	r2, [r3, #16]
    {
    }
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	4618      	mov	r0, r3
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	08021480 	.word	0x08021480

0800ba58 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
    {
 800ba60:	4a04      	ldr	r2, [pc, #16]	; (800ba74 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	601a      	str	r2, [r3, #0]
    }
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr
 800ba74:	08021480 	.word	0x08021480

0800ba78 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
    }
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f7ff ffe9 	bl	800ba58 <_ZN8touchgfx7MVPHeapD1Ev>
 800ba86:	2114      	movs	r1, #20
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f013 fad6 	bl	801f03a <_ZdlPvj>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4618      	mov	r0, r3
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
    {
 800baa0:	4a04      	ldr	r2, [pc, #16]	; (800bab4 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	601a      	str	r2, [r3, #0]
    }
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4618      	mov	r0, r3
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	0802260c 	.word	0x0802260c

0800bab8 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
    }
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f7ff ffe9 	bl	800ba98 <_ZN8touchgfx3LCDD1Ev>
 800bac6:	2108      	movs	r1, #8
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f013 fab6 	bl	801f03a <_ZdlPvj>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	4618      	mov	r0, r3
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	801a      	strh	r2, [r3, #0]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	805a      	strh	r2, [r3, #2]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	809a      	strh	r2, [r3, #4]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	80da      	strh	r2, [r3, #6]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	811a      	strh	r2, [r3, #8]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	815a      	strh	r2, [r3, #10]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	819a      	strh	r2, [r3, #12]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	739a      	strb	r2, [r3, #14]
        {
        }
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4618      	mov	r0, r3
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b082      	sub	sp, #8
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7ff ffd5 	bl	800bad8 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	611a      	str	r2, [r3, #16]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	829a      	strh	r2, [r3, #20]
    {
    }
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
 800bb50:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800bb52:	4a55      	ldr	r2, [pc, #340]	; (800bca8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	601a      	str	r2, [r3, #0]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	605a      	str	r2, [r3, #4]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	609a      	str	r2, [r3, #8]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	60da      	str	r2, [r3, #12]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	611a      	str	r2, [r3, #16]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	615a      	str	r2, [r3, #20]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	619a      	str	r2, [r3, #24]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	331c      	adds	r3, #28
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7ff ffcc 	bl	800bb1e <_ZN8touchgfx8GesturesC1Ev>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2200      	movs	r2, #0
 800bb92:	639a      	str	r2, [r3, #56]	; 0x38
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2200      	movs	r2, #0
 800bb98:	63da      	str	r2, [r3, #60]	; 0x3c
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	641a      	str	r2, [r3, #64]	; 0x40
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	645a      	str	r2, [r3, #68]	; 0x44
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	64da      	str	r2, [r3, #76]	; 0x4c
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	3350      	adds	r3, #80	; 0x50
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7fd fb24 	bl	800921e <_ZN8touchgfx4RectC1Ev>
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	659a      	str	r2, [r3, #88]	; 0x58
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	65da      	str	r2, [r3, #92]	; 0x5c
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	661a      	str	r2, [r3, #96]	; 0x60
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2200      	movs	r2, #0
 800bc24:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	671a      	str	r2, [r3, #112]	; 0x70
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2201      	movs	r2, #1
 800bc52:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800bc5e:	4a13      	ldr	r2, [pc, #76]	; (800bcac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800bc64:	4a12      	ldr	r2, [pc, #72]	; (800bcb0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800bc66:	8b3b      	ldrh	r3, [r7, #24]
 800bc68:	8013      	strh	r3, [r2, #0]
 800bc6a:	4b11      	ldr	r3, [pc, #68]	; (800bcb0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800bc6c:	881a      	ldrh	r2, [r3, #0]
 800bc6e:	4b11      	ldr	r3, [pc, #68]	; (800bcb4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800bc70:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800bc72:	4a11      	ldr	r2, [pc, #68]	; (800bcb8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800bc74:	8bbb      	ldrh	r3, [r7, #28]
 800bc76:	8013      	strh	r3, [r2, #0]
 800bc78:	4b0f      	ldr	r3, [pc, #60]	; (800bcb8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800bc7a:	881a      	ldrh	r2, [r3, #0]
 800bc7c:	4b0f      	ldr	r3, [pc, #60]	; (800bcbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800bc7e:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800bc80:	4b0f      	ldr	r3, [pc, #60]	; (800bcc0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800bc86:	8b3a      	ldrh	r2, [r7, #24]
 800bc88:	8bbb      	ldrh	r3, [r7, #28]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	bf34      	ite	cc
 800bc8e:	2301      	movcc	r3, #1
 800bc90:	2300      	movcs	r3, #0
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	461a      	mov	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	08021b40 	.word	0x08021b40
 800bcac:	20009f94 	.word	0x20009f94
 800bcb0:	20009f88 	.word	0x20009f88
 800bcb4:	20009f8e 	.word	0x20009f8e
 800bcb8:	20009f8a 	.word	0x20009f8a
 800bcbc:	20009f90 	.word	0x20009f90
 800bcc0:	20009f8c 	.word	0x20009f8c

0800bcc4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7fc ffef 	bl	8008cb4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 800bcd6:	bf00      	nop
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
	...

0800bce0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af02      	add	r7, sp, #8
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
 800bcec:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	68b9      	ldr	r1, [r7, #8]
 800bcfa:	f7ff fe8d 	bl	800ba18 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800bcfe:	4a04      	ldr	r2, [pc, #16]	; (800bd10 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	601a      	str	r2, [r3, #0]
    {

    }
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	0802146c 	.word	0x0802146c

0800bd14 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800bd14:	b580      	push	{r7, lr}
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	4801      	ldr	r0, [pc, #4]	; (800bd20 <__tcf_0+0xc>)
 800bd1a:	f000 f95f 	bl	800bfdc <_ZN12FrontendHeapD1Ev>
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	20008f38 	.word	0x20008f38

0800bd24 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800bd24:	b580      	push	{r7, lr}
 800bd26:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800bd28:	4b12      	ldr	r3, [pc, #72]	; (800bd74 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	f3bf 8f5b 	dmb	ish
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	f003 0301 	and.w	r3, r3, #1
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	bf0c      	ite	eq
 800bd3a:	2301      	moveq	r3, #1
 800bd3c:	2300      	movne	r3, #0
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d013      	beq.n	800bd6c <_ZN12FrontendHeap11getInstanceEv+0x48>
 800bd44:	480b      	ldr	r0, [pc, #44]	; (800bd74 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800bd46:	f013 f97a 	bl	801f03e <__cxa_guard_acquire>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	bf14      	ite	ne
 800bd50:	2301      	movne	r3, #1
 800bd52:	2300      	moveq	r3, #0
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d008      	beq.n	800bd6c <_ZN12FrontendHeap11getInstanceEv+0x48>
 800bd5a:	4807      	ldr	r0, [pc, #28]	; (800bd78 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800bd5c:	f000 f868 	bl	800be30 <_ZN12FrontendHeapC1Ev>
 800bd60:	4804      	ldr	r0, [pc, #16]	; (800bd74 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800bd62:	f013 f978 	bl	801f056 <__cxa_guard_release>
 800bd66:	4805      	ldr	r0, [pc, #20]	; (800bd7c <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800bd68:	f013 f9b4 	bl	801f0d4 <atexit>
        return instance;
 800bd6c:	4b02      	ldr	r3, [pc, #8]	; (800bd78 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 800bd6e:	4618      	mov	r0, r3
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	20009264 	.word	0x20009264
 800bd78:	20008f38 	.word	0x20008f38
 800bd7c:	0800bd15 	.word	0x0800bd15

0800bd80 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	4a05      	ldr	r2, [pc, #20]	; (800bda0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	601a      	str	r2, [r3, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7ff fe61 	bl	800ba58 <_ZN8touchgfx7MVPHeapD1Ev>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	0802146c 	.word	0x0802146c

0800bda4 <_ZN16FrontendHeapBaseD0Ev>:
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f7ff ffe7 	bl	800bd80 <_ZN16FrontendHeapBaseD1Ev>
 800bdb2:	2114      	movs	r1, #20
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f013 f940 	bl	801f03a <_ZdlPvj>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f000 fd8c 	bl	800c8ec <_ZN8touchgfx17AbstractPartitionC1Ev>
 800bdd4:	4a03      	ldr	r2, [pc, #12]	; (800bde4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	601a      	str	r2, [r3, #0]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4618      	mov	r0, r3
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	08021438 	.word	0x08021438

0800bde8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f000 fd7a 	bl	800c8ec <_ZN8touchgfx17AbstractPartitionC1Ev>
 800bdf8:	4a03      	ldr	r2, [pc, #12]	; (800be08 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4618      	mov	r0, r3
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	08021404 	.word	0x08021404

0800be0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4618      	mov	r0, r3
 800be18:	f000 fd68 	bl	800c8ec <_ZN8touchgfx17AbstractPartitionC1Ev>
 800be1c:	4a03      	ldr	r2, [pc, #12]	; (800be2c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	601a      	str	r2, [r3, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4618      	mov	r0, r3
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	080213d0 	.word	0x080213d0

0800be30 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800be30:	b590      	push	{r4, r7, lr}
 800be32:	b085      	sub	sp, #20
 800be34:	af02      	add	r7, sp, #8
 800be36:	6078      	str	r0, [r7, #4]
        app(model, *this)
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f103 0114 	add.w	r1, r3, #20
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f503 74de 	add.w	r4, r3, #444	; 0x1bc
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
        app(model, *this)
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	4623      	mov	r3, r4
 800be56:	f7ff ff43 	bl	800bce0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800be5a:	4a18      	ldr	r2, [pc, #96]	; (800bebc <_ZN12FrontendHeapC1Ev+0x8c>)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	601a      	str	r2, [r3, #0]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	3314      	adds	r3, #20
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff ffad 	bl	800bdc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	332c      	adds	r3, #44	; 0x2c
 800be6e:	4618      	mov	r0, r3
 800be70:	f7ff ffba 	bl	800bde8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7ff ffc6 	bl	800be0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f503 70e8 	add.w	r0, r3, #464	; 0x1d0
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	4619      	mov	r1, r3
 800be90:	f7fe fbd6 	bl	800a640 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fe fddb 	bl	800aa56 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800bea8:	4619      	mov	r1, r3
 800beaa:	4610      	mov	r0, r2
 800beac:	f7ff ff0a 	bl	800bcc4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4618      	mov	r0, r3
 800beb4:	370c      	adds	r7, #12
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd90      	pop	{r4, r7, pc}
 800beba:	bf00      	nop
 800bebc:	080213bc 	.word	0x080213bc

0800bec0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af02      	add	r7, sp, #8
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
 800becc:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	8bbb      	ldrh	r3, [r7, #28]
 800bed2:	9301      	str	r3, [sp, #4]
 800bed4:	8b3b      	ldrh	r3, [r7, #24]
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	68b9      	ldr	r1, [r7, #8]
 800bede:	f7ff fe31 	bl	800bb44 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800bee2:	4a04      	ldr	r2, [pc, #16]	; (800bef4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	601a      	str	r2, [r3, #0]
    }
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	4618      	mov	r0, r3
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	08021490 	.word	0x08021490

0800bef8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800bef8:	b580      	push	{r7, lr}
 800befa:	b086      	sub	sp, #24
 800befc:	af02      	add	r7, sp, #8
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
 800bf04:	603b      	str	r3, [r7, #0]
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	8bbb      	ldrh	r3, [r7, #28]
 800bf0a:	9301      	str	r3, [sp, #4]
 800bf0c:	8b3b      	ldrh	r3, [r7, #24]
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	68b9      	ldr	r1, [r7, #8]
 800bf16:	f7ff ffd3 	bl	800bec0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800bf1a:	4a04      	ldr	r2, [pc, #16]	; (800bf2c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	601a      	str	r2, [r3, #0]
    }
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	08021278 	.word	0x08021278

0800bf30 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	4a04      	ldr	r2, [pc, #16]	; (800bf4c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	601a      	str	r2, [r3, #0]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4618      	mov	r0, r3
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	08021260 	.word	0x08021260

0800bf50 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7ff ffe8 	bl	800bf30 <_ZN8touchgfx15TouchControllerC1Ev>
 800bf60:	4a03      	ldr	r2, [pc, #12]	; (800bf70 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	601a      	str	r2, [r3, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	08021248 	.word	0x08021248

0800bf74 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 800bf74:	b590      	push	{r4, r7, lr}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800bf7a:	f7fe f93b 	bl	800a1f4 <_ZN14BitmapDatabase11getInstanceEv>
 800bf7e:	4604      	mov	r4, r0
 800bf80:	f7fe f942 	bl	800a208 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800bf84:	4603      	mov	r3, r0
 800bf86:	4619      	mov	r1, r3
 800bf88:	2300      	movs	r3, #0
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	2200      	movs	r2, #0
 800bf90:	4620      	mov	r0, r4
 800bf92:	f006 fffb 	bl	8012f8c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800bf96:	4809      	ldr	r0, [pc, #36]	; (800bfbc <touchgfx_init+0x48>)
 800bf98:	f7ff fd2e 	bl	800b9f8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	f7fe fa77 	bl	800a490 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800bfa2:	4807      	ldr	r0, [pc, #28]	; (800bfc0 <touchgfx_init+0x4c>)
 800bfa4:	f006 ff34 	bl	8012e10 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800bfa8:	f7ff febc 	bl	800bd24 <_ZN12FrontendHeap11getInstanceEv>
 800bfac:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800bfae:	4805      	ldr	r0, [pc, #20]	; (800bfc4 <touchgfx_init+0x50>)
 800bfb0:	f7fe ff6a 	bl	800ae88 <_ZN11TouchGFXHAL10initializeEv>
}
 800bfb4:	bf00      	nop
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd90      	pop	{r4, r7, pc}
 800bfbc:	20009f04 	.word	0x20009f04
 800bfc0:	20000018 	.word	0x20000018
 800bfc4:	20009f08 	.word	0x20009f08

0800bfc8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800bfcc:	4802      	ldr	r0, [pc, #8]	; (800bfd8 <touchgfx_taskEntry+0x10>)
 800bfce:	f000 ffba 	bl	800cf46 <_ZN8touchgfx3HAL9taskEntryEv>
}
 800bfd2:	bf00      	nop
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	20009f08 	.word	0x20009f08

0800bfdc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	4a10      	ldr	r2, [pc, #64]	; (800c028 <_ZN12FrontendHeapD1Ev+0x4c>)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	601a      	str	r2, [r3, #0]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7fe faef 	bl	800a5d4 <_ZN19FrontendApplicationD1Ev>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 f827 	bl	800c050 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	332c      	adds	r3, #44	; 0x2c
 800c006:	4618      	mov	r0, r3
 800c008:	f000 f844 	bl	800c094 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	3314      	adds	r3, #20
 800c010:	4618      	mov	r0, r3
 800c012:	f000 f863 	bl	800c0dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4618      	mov	r0, r3
 800c01a:	f7ff feb1 	bl	800bd80 <_ZN16FrontendHeapBaseD1Ev>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4618      	mov	r0, r3
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	080213bc 	.word	0x080213bc

0800c02c <_ZN12FrontendHeapD0Ev>:
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff ffd1 	bl	800bfdc <_ZN12FrontendHeapD1Ev>
 800c03a:	f44f 714b 	mov.w	r1, #812	; 0x32c
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f012 fffb 	bl	801f03a <_ZdlPvj>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4618      	mov	r0, r3
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
	...

0800c050 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	4a05      	ldr	r2, [pc, #20]	; (800c070 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	601a      	str	r2, [r3, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4618      	mov	r0, r3
 800c062:	f000 fc41 	bl	800c8e8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4618      	mov	r0, r3
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	080213d0 	.word	0x080213d0

0800c074 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f7ff ffe7 	bl	800c050 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c082:	2114      	movs	r1, #20
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f012 ffd8 	bl	801f03a <_ZdlPvj>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4618      	mov	r0, r3
 800c08e:	3708      	adds	r7, #8
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	4a05      	ldr	r2, [pc, #20]	; (800c0b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	601a      	str	r2, [r3, #0]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f000 fc1f 	bl	800c8e8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	08021404 	.word	0x08021404

0800c0b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff ffe7 	bl	800c094 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c0c6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f012 ffb5 	bl	801f03a <_ZdlPvj>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
	...

0800c0dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	4a05      	ldr	r2, [pc, #20]	; (800c0fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	601a      	str	r2, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f000 fbfb 	bl	800c8e8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	08021438 	.word	0x08021438

0800c100 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff ffe7 	bl	800c0dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800c10e:	2118      	movs	r1, #24
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f012 ff92 	bl	801f03a <_ZdlPvj>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4618      	mov	r0, r3
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	4a05      	ldr	r2, [pc, #20]	; (800c140 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	601a      	str	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4618      	mov	r0, r3
 800c132:	f7ff fcb1 	bl	800ba98 <_ZN8touchgfx3LCDD1Ev>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4618      	mov	r0, r3
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	08023840 	.word	0x08023840

0800c144 <_ZN8touchgfx8LCD16bppD0Ev>:
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7ff ffe7 	bl	800c120 <_ZN8touchgfx8LCD16bppD1Ev>
 800c152:	2178      	movs	r1, #120	; 0x78
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f012 ff70 	bl	801f03a <_ZdlPvj>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4618      	mov	r0, r3
 800c15e:	3708      	adds	r7, #8
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <_Z41__static_initialization_and_destruction_0ii>:
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af02      	add	r7, sp, #8
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b01      	cmp	r3, #1
 800c172:	d119      	bne.n	800c1a8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d114      	bne.n	800c1a8 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800c17e:	4818      	ldr	r0, [pc, #96]	; (800c1e0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800c180:	f7ff fee6 	bl	800bf50 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 800c184:	4817      	ldr	r0, [pc, #92]	; (800c1e4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800c186:	f7ff f8b9 	bl	800b2fc <_ZN10STM32F7DMAC1Ev>
static LCD16bpp display;
 800c18a:	4817      	ldr	r0, [pc, #92]	; (800c1e8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800c18c:	f009 ffc6 	bl	801611c <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 800c190:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c194:	9301      	str	r3, [sp, #4]
 800c196:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	4b10      	ldr	r3, [pc, #64]	; (800c1e0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800c19e:	4a12      	ldr	r2, [pc, #72]	; (800c1e8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800c1a0:	4910      	ldr	r1, [pc, #64]	; (800c1e4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800c1a2:	4812      	ldr	r0, [pc, #72]	; (800c1ec <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800c1a4:	f7ff fea8 	bl	800bef8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d113      	bne.n	800c1d6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d10e      	bne.n	800c1d6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800c1b8:	480c      	ldr	r0, [pc, #48]	; (800c1ec <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800c1ba:	f7fe fedd 	bl	800af78 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800c1be:	480c      	ldr	r0, [pc, #48]	; (800c1f0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800c1c0:	f7fc f8c0 	bl	8008344 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800c1c4:	4808      	ldr	r0, [pc, #32]	; (800c1e8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800c1c6:	f7ff ffab 	bl	800c120 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F7DMA dma;
 800c1ca:	4806      	ldr	r0, [pc, #24]	; (800c1e4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800c1cc:	f7ff f8c0 	bl	800b350 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 800c1d0:	4803      	ldr	r0, [pc, #12]	; (800c1e0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800c1d2:	f7fe fc91 	bl	800aaf8 <_ZN20STM32TouchControllerD1Ev>
}
 800c1d6:	bf00      	nop
 800c1d8:	3708      	adds	r7, #8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	20009268 	.word	0x20009268
 800c1e4:	2000926c 	.word	0x2000926c
 800c1e8:	20009e8c 	.word	0x20009e8c
 800c1ec:	20009f08 	.word	0x20009f08
 800c1f0:	20000018 	.word	0x20000018

0800c1f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800c1fc:	2301      	movs	r3, #1
    }
 800c1fe:	4618      	mov	r0, r3
 800c200:	370c      	adds	r7, #12
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800c20a:	b480      	push	{r7}
 800c20c:	b083      	sub	sp, #12
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800c212:	230c      	movs	r3, #12
    }
 800c214:	4618      	mov	r0, r3
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	460b      	mov	r3, r1
 800c22a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800c22c:	887a      	ldrh	r2, [r7, #2]
 800c22e:	4613      	mov	r3, r2
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	4413      	add	r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	3308      	adds	r3, #8
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	4413      	add	r3, r2
    }
 800c23c:	4618      	mov	r0, r3
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	460b      	mov	r3, r1
 800c252:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800c254:	887a      	ldrh	r2, [r7, #2]
 800c256:	4613      	mov	r3, r2
 800c258:	005b      	lsls	r3, r3, #1
 800c25a:	4413      	add	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	3308      	adds	r3, #8
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	4413      	add	r3, r2
    }
 800c264:	4618      	mov	r0, r3
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800c278:	2301      	movs	r3, #1
    }
 800c27a:	4618      	mov	r0, r3
 800c27c:	370c      	adds	r7, #12
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr

0800c286 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800c286:	b480      	push	{r7}
 800c288:	b083      	sub	sp, #12
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800c28e:	f44f 73c4 	mov.w	r3, #392	; 0x188
    }
 800c292:	4618      	mov	r0, r3
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr

0800c29e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800c29e:	b480      	push	{r7}
 800c2a0:	b083      	sub	sp, #12
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800c2aa:	887b      	ldrh	r3, [r7, #2]
 800c2ac:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800c2b0:	fb02 f303 	mul.w	r3, r2, r3
 800c2b4:	3308      	adds	r3, #8
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	4413      	add	r3, r2
    }
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	370c      	adds	r7, #12
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr

0800c2c6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800c2c6:	b480      	push	{r7}
 800c2c8:	b083      	sub	sp, #12
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800c2d2:	887b      	ldrh	r3, [r7, #2]
 800c2d4:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800c2d8:	fb02 f303 	mul.w	r3, r2, r3
 800c2dc:	3308      	adds	r3, #8
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	4413      	add	r3, r2
    }
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800c2ee:	b480      	push	{r7}
 800c2f0:	b083      	sub	sp, #12
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800c2f6:	2301      	movs	r3, #1
    }
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800c30c:	2310      	movs	r3, #16
    }
 800c30e:	4618      	mov	r0, r3
 800c310:	370c      	adds	r7, #12
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr

0800c31a <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800c31a:	b480      	push	{r7}
 800c31c:	b083      	sub	sp, #12
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
 800c322:	460b      	mov	r3, r1
 800c324:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800c326:	887b      	ldrh	r3, [r7, #2]
 800c328:	011b      	lsls	r3, r3, #4
 800c32a:	3308      	adds	r3, #8
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	4413      	add	r3, r2
    }
 800c330:	4618      	mov	r0, r3
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	460b      	mov	r3, r1
 800c346:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800c348:	887b      	ldrh	r3, [r7, #2]
 800c34a:	011b      	lsls	r3, r3, #4
 800c34c:	3308      	adds	r3, #8
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	4413      	add	r3, r2
    }
 800c352:	4618      	mov	r0, r3
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <_GLOBAL__sub_I_touchgfx_init>:
 800c35e:	b580      	push	{r7, lr}
 800c360:	af00      	add	r7, sp, #0
 800c362:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c366:	2001      	movs	r0, #1
 800c368:	f7ff fefc 	bl	800c164 <_Z41__static_initialization_and_destruction_0ii>
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <_GLOBAL__sub_D_touchgfx_init>:
 800c36e:	b580      	push	{r7, lr}
 800c370:	af00      	add	r7, sp, #0
 800c372:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c376:	2000      	movs	r0, #0
 800c378:	f7ff fef4 	bl	800c164 <_Z41__static_initialization_and_destruction_0ii>
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800c37e:	b580      	push	{r7, lr}
 800c380:	b082      	sub	sp, #8
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	3320      	adds	r3, #32
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	4798      	blx	r3
    }
 800c392:	bf00      	nop
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800c39a:	b480      	push	{r7}
 800c39c:	b083      	sub	sp, #12
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	b2da      	uxtb	r2, r3
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800c3b2:	bf00      	nop
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
	...

0800c3c0 <__NVIC_EnableIRQ>:
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	db0b      	blt.n	800c3ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c3d2:	79fb      	ldrb	r3, [r7, #7]
 800c3d4:	f003 021f 	and.w	r2, r3, #31
 800c3d8:	4907      	ldr	r1, [pc, #28]	; (800c3f8 <__NVIC_EnableIRQ+0x38>)
 800c3da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3de:	095b      	lsrs	r3, r3, #5
 800c3e0:	2001      	movs	r0, #1
 800c3e2:	fa00 f202 	lsl.w	r2, r0, r2
 800c3e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c3ea:	bf00      	nop
 800c3ec:	370c      	adds	r7, #12
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	e000e100 	.word	0xe000e100

0800c3fc <__NVIC_DisableIRQ>:
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
 800c402:	4603      	mov	r3, r0
 800c404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	db12      	blt.n	800c434 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c40e:	79fb      	ldrb	r3, [r7, #7]
 800c410:	f003 021f 	and.w	r2, r3, #31
 800c414:	490a      	ldr	r1, [pc, #40]	; (800c440 <__NVIC_DisableIRQ+0x44>)
 800c416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c41a:	095b      	lsrs	r3, r3, #5
 800c41c:	2001      	movs	r0, #1
 800c41e:	fa00 f202 	lsl.w	r2, r0, r2
 800c422:	3320      	adds	r3, #32
 800c424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c428:	f3bf 8f4f 	dsb	sy
}
 800c42c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c42e:	f3bf 8f6f 	isb	sy
}
 800c432:	bf00      	nop
}
 800c434:	bf00      	nop
 800c436:	370c      	adds	r7, #12
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr
 800c440:	e000e100 	.word	0xe000e100

0800c444 <__NVIC_SetPriority>:
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	4603      	mov	r3, r0
 800c44c:	6039      	str	r1, [r7, #0]
 800c44e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c454:	2b00      	cmp	r3, #0
 800c456:	db0a      	blt.n	800c46e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	490c      	ldr	r1, [pc, #48]	; (800c490 <__NVIC_SetPriority+0x4c>)
 800c45e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c462:	0112      	lsls	r2, r2, #4
 800c464:	b2d2      	uxtb	r2, r2
 800c466:	440b      	add	r3, r1
 800c468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c46c:	e00a      	b.n	800c484 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	b2da      	uxtb	r2, r3
 800c472:	4908      	ldr	r1, [pc, #32]	; (800c494 <__NVIC_SetPriority+0x50>)
 800c474:	79fb      	ldrb	r3, [r7, #7]
 800c476:	f003 030f 	and.w	r3, r3, #15
 800c47a:	3b04      	subs	r3, #4
 800c47c:	0112      	lsls	r2, r2, #4
 800c47e:	b2d2      	uxtb	r2, r2
 800c480:	440b      	add	r3, r1
 800c482:	761a      	strb	r2, [r3, #24]
}
 800c484:	bf00      	nop
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr
 800c490:	e000e100 	.word	0xe000e100
 800c494:	e000ed00 	.word	0xe000ed00

0800c498 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800c49e:	4b21      	ldr	r3, [pc, #132]	; (800c524 <SCB_CleanInvalidateDCache+0x8c>)
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800c4a6:	f3bf 8f4f 	dsb	sy
}
 800c4aa:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800c4ac:	4b1d      	ldr	r3, [pc, #116]	; (800c524 <SCB_CleanInvalidateDCache+0x8c>)
 800c4ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4b2:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	0b5b      	lsrs	r3, r3, #13
 800c4b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c4bc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	08db      	lsrs	r3, r3, #3
 800c4c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4c6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	015a      	lsls	r2, r3, #5
 800c4cc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800c4d0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800c4d2:	68ba      	ldr	r2, [r7, #8]
 800c4d4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800c4d6:	4913      	ldr	r1, [pc, #76]	; (800c524 <SCB_CleanInvalidateDCache+0x8c>)
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	1e5a      	subs	r2, r3, #1
 800c4e2:	60ba      	str	r2, [r7, #8]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	bf14      	ite	ne
 800c4e8:	2301      	movne	r3, #1
 800c4ea:	2300      	moveq	r3, #0
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d000      	beq.n	800c4f4 <SCB_CleanInvalidateDCache+0x5c>
      do {
 800c4f2:	e7e9      	b.n	800c4c8 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	1e5a      	subs	r2, r3, #1
 800c4f8:	60fa      	str	r2, [r7, #12]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	bf14      	ite	ne
 800c4fe:	2301      	movne	r3, #1
 800c500:	2300      	moveq	r3, #0
 800c502:	b2db      	uxtb	r3, r3
 800c504:	2b00      	cmp	r3, #0
 800c506:	d000      	beq.n	800c50a <SCB_CleanInvalidateDCache+0x72>
    do {
 800c508:	e7d9      	b.n	800c4be <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800c50a:	f3bf 8f4f 	dsb	sy
}
 800c50e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c510:	f3bf 8f6f 	isb	sy
}
 800c514:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800c516:	bf00      	nop
 800c518:	3714      	adds	r7, #20
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr
 800c522:	bf00      	nop
 800c524:	e000ed00 	.word	0xe000ed00

0800c528 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800c528:	b5b0      	push	{r4, r5, r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4618      	mov	r0, r3
 800c534:	f000 fcf5 	bl	800cf22 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800c538:	687d      	ldr	r5, [r7, #4]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	3360      	adds	r3, #96	; 0x60
 800c540:	681c      	ldr	r4, [r3, #0]
 800c542:	f003 fd6b 	bl	801001c <_ZN8touchgfx11Application11getInstanceEv>
 800c546:	4603      	mov	r3, r0
 800c548:	4619      	mov	r1, r3
 800c54a:	4628      	mov	r0, r5
 800c54c:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC003FC00, (void*)0);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	3384      	adds	r3, #132	; 0x84
 800c556:	681c      	ldr	r4, [r3, #0]
 800c558:	2300      	movs	r3, #0
 800c55a:	4a04      	ldr	r2, [pc, #16]	; (800c56c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800c55c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800c560:	47a0      	blx	r4
}
 800c562:	bf00      	nop
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bdb0      	pop	{r4, r5, r7, pc}
 800c56a:	bf00      	nop
 800c56c:	c003fc00 	.word	0xc003fc00

0800c570 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800c578:	2109      	movs	r1, #9
 800c57a:	205a      	movs	r0, #90	; 0x5a
 800c57c:	f7ff ff62 	bl	800c444 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800c580:	2109      	movs	r1, #9
 800c582:	2058      	movs	r0, #88	; 0x58
 800c584:	f7ff ff5e 	bl	800c444 <__NVIC_SetPriority>
}
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800c598:	205a      	movs	r0, #90	; 0x5a
 800c59a:	f7ff ff11 	bl	800c3c0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800c59e:	2058      	movs	r0, #88	; 0x58
 800c5a0:	f7ff ff0e 	bl	800c3c0 <__NVIC_EnableIRQ>
}
 800c5a4:	bf00      	nop
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800c5b4:	205a      	movs	r0, #90	; 0x5a
 800c5b6:	f7ff ff21 	bl	800c3fc <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800c5ba:	2058      	movs	r0, #88	; 0x58
 800c5bc:	f7ff ff1e 	bl	800c3fc <__NVIC_DisableIRQ>
}
 800c5c0:	bf00      	nop
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800c5d0:	4b11      	ldr	r3, [pc, #68]	; (800c618 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	4b0e      	ldr	r3, [pc, #56]	; (800c61c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800c5e2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800c5e4:	4b0c      	ldr	r3, [pc, #48]	; (800c618 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800c5e6:	691b      	ldr	r3, [r3, #16]
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	4b0a      	ldr	r3, [pc, #40]	; (800c620 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800c5f6:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800c5f8:	4b08      	ldr	r3, [pc, #32]	; (800c61c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800c5fa:	881a      	ldrh	r2, [r3, #0]
 800c5fc:	4b06      	ldr	r3, [pc, #24]	; (800c618 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800c5fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800c600:	4b05      	ldr	r3, [pc, #20]	; (800c618 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800c602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c604:	4a04      	ldr	r2, [pc, #16]	; (800c618 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800c606:	f043 0301 	orr.w	r3, r3, #1
 800c60a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800c60c:	bf00      	nop
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr
 800c618:	40016800 	.word	0x40016800
 800c61c:	20009f84 	.word	0x20009f84
 800c620:	20009f86 	.word	0x20009f86

0800c624 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4618      	mov	r0, r3
 800c630:	f000 fc5e 	bl	800cef0 <_ZN8touchgfx3HAL10beginFrameEv>
 800c634:	4603      	mov	r3, r0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b082      	sub	sp, #8
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4618      	mov	r0, r3
 800c64a:	f000 fc5d 	bl	800cf08 <_ZN8touchgfx3HAL8endFrameEv>
}
 800c64e:	bf00      	nop
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
	...

0800c658 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800c660:	4b03      	ldr	r3, [pc, #12]	; (800c670 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800c662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800c664:	4618      	mov	r0, r3
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr
 800c670:	40016884 	.word	0x40016884

0800c674 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800c67e:	4a06      	ldr	r2, [pc, #24]	; (800c698 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800c684:	4b05      	ldr	r3, [pc, #20]	; (800c69c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800c686:	2201      	movs	r2, #1
 800c688:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c68a:	bf00      	nop
 800c68c:	370c      	adds	r7, #12
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop
 800c698:	40016884 	.word	0x40016884
 800c69c:	40016800 	.word	0x40016800

0800c6a0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6839      	ldr	r1, [r7, #0]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f000 fbe8 	bl	800ce84 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800c6b4:	4b08      	ldr	r3, [pc, #32]	; (800c6d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 800c6b6:	695b      	ldr	r3, [r3, #20]
 800c6b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	bf14      	ite	ne
 800c6c0:	2301      	movne	r3, #1
 800c6c2:	2300      	moveq	r3, #0
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d001      	beq.n	800c6ce <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 800c6ca:	f7ff fee5 	bl	800c498 <SCB_CleanInvalidateDCache>
    }
}
 800c6ce:	bf00      	nop
 800c6d0:	3708      	adds	r7, #8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	e000ed00 	.word	0xe000ed00

0800c6dc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
 800c6e8:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	68b9      	ldr	r1, [r7, #8]
 800c6f2:	f000 fd32 	bl	800d15a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800c6f6:	4603      	mov	r3, r0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800c708:	4b08      	ldr	r3, [pc, #32]	; (800c72c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 800c70a:	695b      	ldr	r3, [r3, #20]
 800c70c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c710:	2b00      	cmp	r3, #0
 800c712:	bf14      	ite	ne
 800c714:	2301      	movne	r3, #1
 800c716:	2300      	moveq	r3, #0
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d001      	beq.n	800c722 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 800c71e:	f7ff febb 	bl	800c498 <SCB_CleanInvalidateDCache>
    }
}
 800c722:	bf00      	nop
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	e000ed00 	.word	0xe000ed00

0800c730 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800c738:	4b08      	ldr	r3, [pc, #32]	; (800c75c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 800c73a:	695b      	ldr	r3, [r3, #20]
 800c73c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c740:	2b00      	cmp	r3, #0
 800c742:	bf14      	ite	ne
 800c744:	2301      	movne	r3, #1
 800c746:	2300      	moveq	r3, #0
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d001      	beq.n	800c752 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 800c74e:	f7ff fea3 	bl	800c498 <SCB_CleanInvalidateDCache>
    }
}
 800c752:	bf00      	nop
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	e000ed00 	.word	0xe000ed00

0800c760 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 800c768:	4b1a      	ldr	r3, [pc, #104]	; (800c7d4 <HAL_LTDC_LineEventCallback+0x74>)
 800c76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76c:	4a1a      	ldr	r2, [pc, #104]	; (800c7d8 <HAL_LTDC_LineEventCallback+0x78>)
 800c76e:	8812      	ldrh	r2, [r2, #0]
 800c770:	4293      	cmp	r3, r2
 800c772:	bf0c      	ite	eq
 800c774:	2301      	moveq	r3, #1
 800c776:	2300      	movne	r3, #0
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d017      	beq.n	800c7ae <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800c77e:	4b17      	ldr	r3, [pc, #92]	; (800c7dc <HAL_LTDC_LineEventCallback+0x7c>)
 800c780:	881b      	ldrh	r3, [r3, #0]
 800c782:	4619      	mov	r1, r3
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7f6 f8df 	bl	8002948 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800c78a:	f7fc f8a9 	bl	80088e0 <_ZN8touchgfx3HAL11getInstanceEv>
 800c78e:	4603      	mov	r3, r0
 800c790:	4618      	mov	r0, r3
 800c792:	f7ff fe02 	bl	800c39a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800c796:	f7fe fc77 	bl	800b088 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800c79a:	f7fc f8a1 	bl	80088e0 <_ZN8touchgfx3HAL11getInstanceEv>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f001 f9b3 	bl	800db0c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	f7fe f9c8 	bl	800ab3c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 800c7ac:	e00e      	b.n	800c7cc <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800c7ae:	4b0a      	ldr	r3, [pc, #40]	; (800c7d8 <HAL_LTDC_LineEventCallback+0x78>)
 800c7b0:	881b      	ldrh	r3, [r3, #0]
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7f6 f8c7 	bl	8002948 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800c7ba:	2000      	movs	r0, #0
 800c7bc:	f7fe f9c9 	bl	800ab52 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 800c7c0:	f7fc f88e 	bl	80088e0 <_ZN8touchgfx3HAL11getInstanceEv>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7ff fdd9 	bl	800c37e <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 800c7cc:	bf00      	nop
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	40016800 	.word	0x40016800
 800c7d8:	20009f84 	.word	0x20009f84
 800c7dc:	20009f86 	.word	0x20009f86

0800c7e0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800c7e0:	8880      	ldrh	r0, [r0, #4]
 800c7e2:	4770      	bx	lr

0800c7e4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	8083      	strh	r3, [r0, #4]
 800c7e8:	4770      	bx	lr
	...

0800c7ec <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800c7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ee:	6803      	ldr	r3, [r0, #0]
 800c7f0:	460e      	mov	r6, r1
 800c7f2:	2100      	movs	r1, #0
 800c7f4:	4605      	mov	r5, r0
 800c7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f8:	4798      	blx	r3
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	682b      	ldr	r3, [r5, #0]
 800c7fe:	4628      	mov	r0, r5
 800c800:	1b34      	subs	r4, r6, r4
 800c802:	6a1b      	ldr	r3, [r3, #32]
 800c804:	b2a4      	uxth	r4, r4
 800c806:	4798      	blx	r3
 800c808:	88ab      	ldrh	r3, [r5, #4]
 800c80a:	fbb4 f4f0 	udiv	r4, r4, r0
 800c80e:	42a3      	cmp	r3, r4
 800c810:	d805      	bhi.n	800c81e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800c812:	4b0e      	ldr	r3, [pc, #56]	; (800c84c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800c814:	211e      	movs	r1, #30
 800c816:	4a0e      	ldr	r2, [pc, #56]	; (800c850 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800c818:	480e      	ldr	r0, [pc, #56]	; (800c854 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800c81a:	f012 fc3d 	bl	801f098 <__assert_func>
 800c81e:	682b      	ldr	r3, [r5, #0]
 800c820:	2100      	movs	r1, #0
 800c822:	4628      	mov	r0, r5
 800c824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c826:	4798      	blx	r3
 800c828:	682b      	ldr	r3, [r5, #0]
 800c82a:	4607      	mov	r7, r0
 800c82c:	4628      	mov	r0, r5
 800c82e:	6a1b      	ldr	r3, [r3, #32]
 800c830:	4798      	blx	r3
 800c832:	1bf3      	subs	r3, r6, r7
 800c834:	b29b      	uxth	r3, r3
 800c836:	fbb3 f2f0 	udiv	r2, r3, r0
 800c83a:	fb02 3010 	mls	r0, r2, r0, r3
 800c83e:	b118      	cbz	r0, 800c848 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800c840:	4b05      	ldr	r3, [pc, #20]	; (800c858 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800c842:	211f      	movs	r1, #31
 800c844:	4a02      	ldr	r2, [pc, #8]	; (800c850 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800c846:	e7e7      	b.n	800c818 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800c848:	4620      	mov	r0, r4
 800c84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c84c:	08021558 	.word	0x08021558
 800c850:	080216c6 	.word	0x080216c6
 800c854:	0802156d 	.word	0x0802156d
 800c858:	0802159b 	.word	0x0802159b

0800c85c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800c85c:	b538      	push	{r3, r4, r5, lr}
 800c85e:	6803      	ldr	r3, [r0, #0]
 800c860:	460d      	mov	r5, r1
 800c862:	4604      	mov	r4, r0
 800c864:	6a1b      	ldr	r3, [r3, #32]
 800c866:	4798      	blx	r3
 800c868:	4285      	cmp	r5, r0
 800c86a:	d905      	bls.n	800c878 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800c86c:	4b0c      	ldr	r3, [pc, #48]	; (800c8a0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800c86e:	2130      	movs	r1, #48	; 0x30
 800c870:	4a0c      	ldr	r2, [pc, #48]	; (800c8a4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800c872:	480d      	ldr	r0, [pc, #52]	; (800c8a8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800c874:	f012 fc10 	bl	801f098 <__assert_func>
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	4620      	mov	r0, r4
 800c87c:	88a5      	ldrh	r5, [r4, #4]
 800c87e:	69db      	ldr	r3, [r3, #28]
 800c880:	4798      	blx	r3
 800c882:	4285      	cmp	r5, r0
 800c884:	d303      	bcc.n	800c88e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800c886:	4b09      	ldr	r3, [pc, #36]	; (800c8ac <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800c888:	2131      	movs	r1, #49	; 0x31
 800c88a:	4a06      	ldr	r2, [pc, #24]	; (800c8a4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800c88c:	e7f1      	b.n	800c872 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	4620      	mov	r0, r4
 800c892:	88a1      	ldrh	r1, [r4, #4]
 800c894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c896:	4798      	blx	r3
 800c898:	88a3      	ldrh	r3, [r4, #4]
 800c89a:	3301      	adds	r3, #1
 800c89c:	80a3      	strh	r3, [r4, #4]
 800c89e:	bd38      	pop	{r3, r4, r5, pc}
 800c8a0:	08021615 	.word	0x08021615
 800c8a4:	08021709 	.word	0x08021709
 800c8a8:	0802156d 	.word	0x0802156d
 800c8ac:	0802162c 	.word	0x0802162c

0800c8b0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	6803      	ldr	r3, [r0, #0]
 800c8b4:	4616      	mov	r6, r2
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	460d      	mov	r5, r1
 800c8ba:	6a1b      	ldr	r3, [r3, #32]
 800c8bc:	4798      	blx	r3
 800c8be:	4286      	cmp	r6, r0
 800c8c0:	d905      	bls.n	800c8ce <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800c8c2:	4b06      	ldr	r3, [pc, #24]	; (800c8dc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800c8c4:	213a      	movs	r1, #58	; 0x3a
 800c8c6:	4a06      	ldr	r2, [pc, #24]	; (800c8e0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800c8c8:	4806      	ldr	r0, [pc, #24]	; (800c8e4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800c8ca:	f012 fbe5 	bl	801f098 <__assert_func>
 800c8ce:	6823      	ldr	r3, [r4, #0]
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8da:	4718      	bx	r3
 800c8dc:	08021615 	.word	0x08021615
 800c8e0:	0802167c 	.word	0x0802167c
 800c8e4:	0802156d 	.word	0x0802156d

0800c8e8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800c8e8:	4770      	bx	lr
	...

0800c8ec <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800c8ec:	4a02      	ldr	r2, [pc, #8]	; (800c8f8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800c8ee:	6002      	str	r2, [r0, #0]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	8082      	strh	r2, [r0, #4]
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop
 800c8f8:	08021650 	.word	0x08021650

0800c8fc <_ZN8touchgfx9Container13getFirstChildEv>:
 800c8fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800c8fe:	4770      	bx	lr

0800c900 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800c900:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c902:	2000      	movs	r0, #0
 800c904:	b12b      	cbz	r3, 800c912 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800c906:	b920      	cbnz	r0, 800c912 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800c908:	1a5a      	subs	r2, r3, r1
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	4250      	negs	r0, r2
 800c90e:	4150      	adcs	r0, r2
 800c910:	e7f8      	b.n	800c904 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800c912:	4770      	bx	lr

0800c914 <_ZN8touchgfx9Container9removeAllEv>:
 800c914:	2200      	movs	r2, #0
 800c916:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c918:	b123      	cbz	r3, 800c924 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800c91a:	6999      	ldr	r1, [r3, #24]
 800c91c:	6281      	str	r1, [r0, #40]	; 0x28
 800c91e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800c922:	e7f8      	b.n	800c916 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800c924:	4770      	bx	lr

0800c926 <_ZN8touchgfx9Container6unlinkEv>:
 800c926:	2300      	movs	r3, #0
 800c928:	6283      	str	r3, [r0, #40]	; 0x28
 800c92a:	4770      	bx	lr

0800c92c <_ZNK8touchgfx9Container12getSolidRectEv>:
 800c92c:	2200      	movs	r2, #0
 800c92e:	8002      	strh	r2, [r0, #0]
 800c930:	8042      	strh	r2, [r0, #2]
 800c932:	8082      	strh	r2, [r0, #4]
 800c934:	80c2      	strh	r2, [r0, #6]
 800c936:	4770      	bx	lr

0800c938 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800c938:	b570      	push	{r4, r5, r6, lr}
 800c93a:	460d      	mov	r5, r1
 800c93c:	4616      	mov	r6, r2
 800c93e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c940:	b13c      	cbz	r4, 800c952 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	4620      	mov	r0, r4
 800c946:	4632      	mov	r2, r6
 800c948:	4629      	mov	r1, r5
 800c94a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c94c:	4798      	blx	r3
 800c94e:	69a4      	ldr	r4, [r4, #24]
 800c950:	e7f6      	b.n	800c940 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800c952:	bd70      	pop	{r4, r5, r6, pc}

0800c954 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800c954:	b538      	push	{r3, r4, r5, lr}
 800c956:	460d      	mov	r5, r1
 800c958:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c95a:	b134      	cbz	r4, 800c96a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800c95c:	682b      	ldr	r3, [r5, #0]
 800c95e:	4621      	mov	r1, r4
 800c960:	4628      	mov	r0, r5
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	4798      	blx	r3
 800c966:	69a4      	ldr	r4, [r4, #24]
 800c968:	e7f7      	b.n	800c95a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800c96a:	bd38      	pop	{r3, r4, r5, pc}

0800c96c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800c96c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c96e:	b19b      	cbz	r3, 800c998 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800c970:	428b      	cmp	r3, r1
 800c972:	d109      	bne.n	800c988 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800c974:	699a      	ldr	r2, [r3, #24]
 800c976:	2100      	movs	r1, #0
 800c978:	6159      	str	r1, [r3, #20]
 800c97a:	6282      	str	r2, [r0, #40]	; 0x28
 800c97c:	b902      	cbnz	r2, 800c980 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800c97e:	4770      	bx	lr
 800c980:	6199      	str	r1, [r3, #24]
 800c982:	4770      	bx	lr
 800c984:	4613      	mov	r3, r2
 800c986:	b13a      	cbz	r2, 800c998 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800c988:	699a      	ldr	r2, [r3, #24]
 800c98a:	428a      	cmp	r2, r1
 800c98c:	d1fa      	bne.n	800c984 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800c98e:	698a      	ldr	r2, [r1, #24]
 800c990:	619a      	str	r2, [r3, #24]
 800c992:	2300      	movs	r3, #0
 800c994:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800c998:	4770      	bx	lr

0800c99a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800c99a:	b410      	push	{r4}
 800c99c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c99e:	4604      	mov	r4, r0
 800c9a0:	b92b      	cbnz	r3, 800c9ae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800c9a2:	6803      	ldr	r3, [r0, #0]
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9ac:	4718      	bx	r3
 800c9ae:	b941      	cbnz	r1, 800c9c2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800c9b0:	6193      	str	r3, [r2, #24]
 800c9b2:	6282      	str	r2, [r0, #40]	; 0x28
 800c9b4:	6154      	str	r4, [r2, #20]
 800c9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9ba:	4770      	bx	lr
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	d0f9      	beq.n	800c9b6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800c9c2:	4299      	cmp	r1, r3
 800c9c4:	6998      	ldr	r0, [r3, #24]
 800c9c6:	d1f9      	bne.n	800c9bc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800c9c8:	6190      	str	r0, [r2, #24]
 800c9ca:	618a      	str	r2, [r1, #24]
 800c9cc:	e7f2      	b.n	800c9b4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800c9d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800c9d0:	4288      	cmp	r0, r1
 800c9d2:	b508      	push	{r3, lr}
 800c9d4:	d105      	bne.n	800c9e2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800c9d6:	4b11      	ldr	r3, [pc, #68]	; (800ca1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800c9d8:	2123      	movs	r1, #35	; 0x23
 800c9da:	4a11      	ldr	r2, [pc, #68]	; (800ca20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c9dc:	4811      	ldr	r0, [pc, #68]	; (800ca24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800c9de:	f012 fb5b 	bl	801f098 <__assert_func>
 800c9e2:	694b      	ldr	r3, [r1, #20]
 800c9e4:	b11b      	cbz	r3, 800c9ee <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800c9e6:	4b10      	ldr	r3, [pc, #64]	; (800ca28 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800c9e8:	2124      	movs	r1, #36	; 0x24
 800c9ea:	4a0d      	ldr	r2, [pc, #52]	; (800ca20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800c9ec:	e7f6      	b.n	800c9dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800c9ee:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800c9f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c9f4:	b913      	cbnz	r3, 800c9fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800c9f6:	6281      	str	r1, [r0, #40]	; 0x28
 800c9f8:	bd08      	pop	{r3, pc}
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	699a      	ldr	r2, [r3, #24]
 800c9fe:	b12a      	cbz	r2, 800ca0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800ca00:	428b      	cmp	r3, r1
 800ca02:	d1fa      	bne.n	800c9fa <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800ca04:	4b09      	ldr	r3, [pc, #36]	; (800ca2c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800ca06:	2135      	movs	r1, #53	; 0x35
 800ca08:	4a05      	ldr	r2, [pc, #20]	; (800ca20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800ca0a:	e7e7      	b.n	800c9dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800ca0c:	428b      	cmp	r3, r1
 800ca0e:	d103      	bne.n	800ca18 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800ca10:	4b06      	ldr	r3, [pc, #24]	; (800ca2c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800ca12:	2138      	movs	r1, #56	; 0x38
 800ca14:	4a02      	ldr	r2, [pc, #8]	; (800ca20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800ca16:	e7e1      	b.n	800c9dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800ca18:	6199      	str	r1, [r3, #24]
 800ca1a:	e7ed      	b.n	800c9f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800ca1c:	08021747 	.word	0x08021747
 800ca20:	0802189c 	.word	0x0802189c
 800ca24:	08021773 	.word	0x08021773
 800ca28:	080217a6 	.word	0x080217a6
 800ca2c:	080217dc 	.word	0x080217dc

0800ca30 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800ca30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca34:	461f      	mov	r7, r3
 800ca36:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ca3a:	460d      	mov	r5, r1
 800ca3c:	4616      	mov	r6, r2
 800ca3e:	b103      	cbz	r3, 800ca42 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800ca40:	6038      	str	r0, [r7, #0]
 800ca42:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ca44:	b314      	cbz	r4, 800ca8c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ca46:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ca4a:	b1eb      	cbz	r3, 800ca88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ca4c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ca50:	428d      	cmp	r5, r1
 800ca52:	db19      	blt.n	800ca88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ca54:	b289      	uxth	r1, r1
 800ca56:	8923      	ldrh	r3, [r4, #8]
 800ca58:	440b      	add	r3, r1
 800ca5a:	b21b      	sxth	r3, r3
 800ca5c:	429d      	cmp	r5, r3
 800ca5e:	da13      	bge.n	800ca88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ca60:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ca64:	4296      	cmp	r6, r2
 800ca66:	db0f      	blt.n	800ca88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ca68:	b292      	uxth	r2, r2
 800ca6a:	8963      	ldrh	r3, [r4, #10]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	b21b      	sxth	r3, r3
 800ca70:	429e      	cmp	r6, r3
 800ca72:	da09      	bge.n	800ca88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ca74:	6823      	ldr	r3, [r4, #0]
 800ca76:	1ab2      	subs	r2, r6, r2
 800ca78:	1a69      	subs	r1, r5, r1
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800ca80:	b212      	sxth	r2, r2
 800ca82:	463b      	mov	r3, r7
 800ca84:	b209      	sxth	r1, r1
 800ca86:	47c0      	blx	r8
 800ca88:	69a4      	ldr	r4, [r4, #24]
 800ca8a:	e7db      	b.n	800ca44 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800ca8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ca90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800ca90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca94:	4c6d      	ldr	r4, [pc, #436]	; (800cc4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800ca96:	b0a1      	sub	sp, #132	; 0x84
 800ca98:	4606      	mov	r6, r0
 800ca9a:	6824      	ldr	r4, [r4, #0]
 800ca9c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800ca9e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800caa2:	2400      	movs	r4, #0
 800caa4:	9303      	str	r3, [sp, #12]
 800caa6:	802c      	strh	r4, [r5, #0]
 800caa8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800caaa:	802c      	strh	r4, [r5, #0]
 800caac:	601c      	str	r4, [r3, #0]
 800caae:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800cab2:	f7ff ffbd 	bl	800ca30 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800cab6:	f1b9 0f03 	cmp.w	r9, #3
 800caba:	f340 80c1 	ble.w	800cc40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800cabe:	4631      	mov	r1, r6
 800cac0:	a80c      	add	r0, sp, #48	; 0x30
 800cac2:	f004 fac5 	bl	8011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cac6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800caca:	9306      	str	r3, [sp, #24]
 800cacc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800cad0:	9307      	str	r3, [sp, #28]
 800cad2:	9b03      	ldr	r3, [sp, #12]
 800cad4:	f8d3 a000 	ldr.w	sl, [r3]
 800cad8:	f1ba 0f00 	cmp.w	sl, #0
 800cadc:	f000 80b3 	beq.w	800cc46 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800cae0:	4651      	mov	r1, sl
 800cae2:	a810      	add	r0, sp, #64	; 0x40
 800cae4:	f004 fab4 	bl	8011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cae8:	2002      	movs	r0, #2
 800caea:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800caee:	9b01      	ldr	r3, [sp, #4]
 800caf0:	9a06      	ldr	r2, [sp, #24]
 800caf2:	fb91 f1f0 	sdiv	r1, r1, r0
 800caf6:	189d      	adds	r5, r3, r2
 800caf8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800cafc:	9a07      	ldr	r2, [sp, #28]
 800cafe:	4419      	add	r1, r3
 800cb00:	9b02      	ldr	r3, [sp, #8]
 800cb02:	4413      	add	r3, r2
 800cb04:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800cb08:	1a6d      	subs	r5, r5, r1
 800cb0a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800cb0e:	fb92 f2f0 	sdiv	r2, r2, r0
 800cb12:	440a      	add	r2, r1
 800cb14:	1a9b      	subs	r3, r3, r2
 800cb16:	435b      	muls	r3, r3
 800cb18:	fb05 3505 	mla	r5, r5, r5, r3
 800cb1c:	4f4c      	ldr	r7, [pc, #304]	; (800cc50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800cb1e:	ac10      	add	r4, sp, #64	; 0x40
 800cb20:	f1b9 0f0c 	cmp.w	r9, #12
 800cb24:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cb26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cb2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb2c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cb2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb30:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800cb34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cb38:	f04f 0303 	mov.w	r3, #3
 800cb3c:	bfd8      	it	le
 800cb3e:	f109 32ff 	addle.w	r2, r9, #4294967295
 800cb42:	f04f 0400 	mov.w	r4, #0
 800cb46:	f8cd 9000 	str.w	r9, [sp]
 800cb4a:	bfcc      	ite	gt
 800cb4c:	4698      	movgt	r8, r3
 800cb4e:	fb92 f8f3 	sdivle	r8, r2, r3
 800cb52:	1c63      	adds	r3, r4, #1
 800cb54:	aa10      	add	r2, sp, #64	; 0x40
 800cb56:	f004 0401 	and.w	r4, r4, #1
 800cb5a:	f04f 0b00 	mov.w	fp, #0
 800cb5e:	9308      	str	r3, [sp, #32]
 800cb60:	9b00      	ldr	r3, [sp, #0]
 800cb62:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800cb66:	fb93 f3f8 	sdiv	r3, r3, r8
 800cb6a:	3404      	adds	r4, #4
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	9304      	str	r3, [sp, #16]
 800cb70:	9a04      	ldr	r2, [sp, #16]
 800cb72:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cb76:	fb13 f302 	smulbb	r3, r3, r2
 800cb7a:	9a01      	ldr	r2, [sp, #4]
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	1899      	adds	r1, r3, r2
 800cb80:	9305      	str	r3, [sp, #20]
 800cb82:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800cb86:	b209      	sxth	r1, r1
 800cb88:	4299      	cmp	r1, r3
 800cb8a:	db4d      	blt.n	800cc28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cb8c:	8932      	ldrh	r2, [r6, #8]
 800cb8e:	4413      	add	r3, r2
 800cb90:	b21b      	sxth	r3, r3
 800cb92:	4299      	cmp	r1, r3
 800cb94:	da48      	bge.n	800cc28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cb96:	9b04      	ldr	r3, [sp, #16]
 800cb98:	6827      	ldr	r7, [r4, #0]
 800cb9a:	fb17 f703 	smulbb	r7, r7, r3
 800cb9e:	9b02      	ldr	r3, [sp, #8]
 800cba0:	b2bf      	uxth	r7, r7
 800cba2:	18fa      	adds	r2, r7, r3
 800cba4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800cba8:	b212      	sxth	r2, r2
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	db3c      	blt.n	800cc28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cbae:	8970      	ldrh	r0, [r6, #10]
 800cbb0:	4403      	add	r3, r0
 800cbb2:	b21b      	sxth	r3, r3
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	da37      	bge.n	800cc28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cbb8:	2300      	movs	r3, #0
 800cbba:	4630      	mov	r0, r6
 800cbbc:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbbe:	ab0b      	add	r3, sp, #44	; 0x2c
 800cbc0:	f7ff ff36 	bl	800ca30 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800cbc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cbc6:	b37a      	cbz	r2, 800cc28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cbc8:	4552      	cmp	r2, sl
 800cbca:	d02d      	beq.n	800cc28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cbcc:	4611      	mov	r1, r2
 800cbce:	a80e      	add	r0, sp, #56	; 0x38
 800cbd0:	9209      	str	r2, [sp, #36]	; 0x24
 800cbd2:	f004 fa3d 	bl	8011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cbd6:	f04f 0e02 	mov.w	lr, #2
 800cbda:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800cbde:	9a06      	ldr	r2, [sp, #24]
 800cbe0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800cbe4:	9b01      	ldr	r3, [sp, #4]
 800cbe6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800cbea:	4413      	add	r3, r2
 800cbec:	9a07      	ldr	r2, [sp, #28]
 800cbee:	fb91 f1fe 	sdiv	r1, r1, lr
 800cbf2:	fb9c fcfe 	sdiv	ip, ip, lr
 800cbf6:	4401      	add	r1, r0
 800cbf8:	1a58      	subs	r0, r3, r1
 800cbfa:	9b02      	ldr	r3, [sp, #8]
 800cbfc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800cc00:	4413      	add	r3, r2
 800cc02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc04:	448c      	add	ip, r1
 800cc06:	eba3 030c 	sub.w	r3, r3, ip
 800cc0a:	435b      	muls	r3, r3
 800cc0c:	fb00 3300 	mla	r3, r0, r0, r3
 800cc10:	42ab      	cmp	r3, r5
 800cc12:	d208      	bcs.n	800cc26 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800cc14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc16:	461d      	mov	r5, r3
 800cc18:	9803      	ldr	r0, [sp, #12]
 800cc1a:	6001      	str	r1, [r0, #0]
 800cc1c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800cc1e:	9805      	ldr	r0, [sp, #20]
 800cc20:	8008      	strh	r0, [r1, #0]
 800cc22:	992b      	ldr	r1, [sp, #172]	; 0xac
 800cc24:	800f      	strh	r7, [r1, #0]
 800cc26:	4692      	mov	sl, r2
 800cc28:	f10b 0b01 	add.w	fp, fp, #1
 800cc2c:	3408      	adds	r4, #8
 800cc2e:	f1bb 0f04 	cmp.w	fp, #4
 800cc32:	d19d      	bne.n	800cb70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800cc34:	9b00      	ldr	r3, [sp, #0]
 800cc36:	9c08      	ldr	r4, [sp, #32]
 800cc38:	444b      	add	r3, r9
 800cc3a:	4544      	cmp	r4, r8
 800cc3c:	9300      	str	r3, [sp, #0]
 800cc3e:	d188      	bne.n	800cb52 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800cc40:	b021      	add	sp, #132	; 0x84
 800cc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc46:	f04f 35ff 	mov.w	r5, #4294967295
 800cc4a:	e767      	b.n	800cb1c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800cc4c:	20009f94 	.word	0x20009f94
 800cc50:	08020d20 	.word	0x08020d20

0800cc54 <_ZN8touchgfx4RectaNERKS0_>:
 800cc54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc58:	f9b1 7000 	ldrsh.w	r7, [r1]
 800cc5c:	888c      	ldrh	r4, [r1, #4]
 800cc5e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800cc62:	443c      	add	r4, r7
 800cc64:	b2a4      	uxth	r4, r4
 800cc66:	fa0f f884 	sxth.w	r8, r4
 800cc6a:	45c1      	cmp	r9, r8
 800cc6c:	da2f      	bge.n	800ccce <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800cc6e:	8882      	ldrh	r2, [r0, #4]
 800cc70:	444a      	add	r2, r9
 800cc72:	b292      	uxth	r2, r2
 800cc74:	fa0f fe82 	sxth.w	lr, r2
 800cc78:	4577      	cmp	r7, lr
 800cc7a:	da28      	bge.n	800ccce <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800cc7c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800cc80:	88cb      	ldrh	r3, [r1, #6]
 800cc82:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800cc86:	442b      	add	r3, r5
 800cc88:	b21b      	sxth	r3, r3
 800cc8a:	429e      	cmp	r6, r3
 800cc8c:	da1f      	bge.n	800ccce <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800cc8e:	88c3      	ldrh	r3, [r0, #6]
 800cc90:	4433      	add	r3, r6
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	fa0f fc83 	sxth.w	ip, r3
 800cc98:	4565      	cmp	r5, ip
 800cc9a:	da18      	bge.n	800ccce <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800cc9c:	454f      	cmp	r7, r9
 800cc9e:	bfb8      	it	lt
 800cca0:	464f      	movlt	r7, r9
 800cca2:	42b5      	cmp	r5, r6
 800cca4:	bfb8      	it	lt
 800cca6:	4635      	movlt	r5, r6
 800cca8:	45f0      	cmp	r8, lr
 800ccaa:	bfd8      	it	le
 800ccac:	4622      	movle	r2, r4
 800ccae:	1bd2      	subs	r2, r2, r7
 800ccb0:	8082      	strh	r2, [r0, #4]
 800ccb2:	884a      	ldrh	r2, [r1, #2]
 800ccb4:	88c9      	ldrh	r1, [r1, #6]
 800ccb6:	8007      	strh	r7, [r0, #0]
 800ccb8:	440a      	add	r2, r1
 800ccba:	8045      	strh	r5, [r0, #2]
 800ccbc:	b292      	uxth	r2, r2
 800ccbe:	b211      	sxth	r1, r2
 800ccc0:	458c      	cmp	ip, r1
 800ccc2:	bfa8      	it	ge
 800ccc4:	4613      	movge	r3, r2
 800ccc6:	1b5b      	subs	r3, r3, r5
 800ccc8:	80c3      	strh	r3, [r0, #6]
 800ccca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccce:	2300      	movs	r3, #0
 800ccd0:	8003      	strh	r3, [r0, #0]
 800ccd2:	8043      	strh	r3, [r0, #2]
 800ccd4:	8083      	strh	r3, [r0, #4]
 800ccd6:	80c3      	strh	r3, [r0, #6]
 800ccd8:	e7f7      	b.n	800ccca <_ZN8touchgfx4RectaNERKS0_+0x76>

0800ccda <_ZNK8touchgfx4Rect7isEmptyEv>:
 800ccda:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	dd06      	ble.n	800ccf0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800cce2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800cce6:	2800      	cmp	r0, #0
 800cce8:	bfcc      	ite	gt
 800ccea:	2000      	movgt	r0, #0
 800ccec:	2001      	movle	r0, #1
 800ccee:	4770      	bx	lr
 800ccf0:	2001      	movs	r0, #1
 800ccf2:	4770      	bx	lr

0800ccf4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800ccf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800ccfe:	8003      	strh	r3, [r0, #0]
 800cd00:	8043      	strh	r3, [r0, #2]
 800cd02:	8083      	strh	r3, [r0, #4]
 800cd04:	80c3      	strh	r3, [r0, #6]
 800cd06:	2d00      	cmp	r5, #0
 800cd08:	d040      	beq.n	800cd8c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800cd0a:	1d28      	adds	r0, r5, #4
 800cd0c:	f7ff ffe5 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 800cd10:	b988      	cbnz	r0, 800cd36 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800cd12:	4620      	mov	r0, r4
 800cd14:	f7ff ffe1 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 800cd18:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800cd1c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800cd20:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800cd24:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800cd28:	b138      	cbz	r0, 800cd3a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800cd2a:	8022      	strh	r2, [r4, #0]
 800cd2c:	8063      	strh	r3, [r4, #2]
 800cd2e:	f8a4 e004 	strh.w	lr, [r4, #4]
 800cd32:	f8a4 c006 	strh.w	ip, [r4, #6]
 800cd36:	69ad      	ldr	r5, [r5, #24]
 800cd38:	e7e5      	b.n	800cd06 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800cd3a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800cd3e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800cd42:	4290      	cmp	r0, r2
 800cd44:	4607      	mov	r7, r0
 800cd46:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800cd4a:	460e      	mov	r6, r1
 800cd4c:	bfa8      	it	ge
 800cd4e:	4617      	movge	r7, r2
 800cd50:	4299      	cmp	r1, r3
 800cd52:	4472      	add	r2, lr
 800cd54:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800cd58:	bfa8      	it	ge
 800cd5a:	461e      	movge	r6, r3
 800cd5c:	4440      	add	r0, r8
 800cd5e:	4471      	add	r1, lr
 800cd60:	4463      	add	r3, ip
 800cd62:	b200      	sxth	r0, r0
 800cd64:	8027      	strh	r7, [r4, #0]
 800cd66:	b212      	sxth	r2, r2
 800cd68:	8066      	strh	r6, [r4, #2]
 800cd6a:	b209      	sxth	r1, r1
 800cd6c:	b21b      	sxth	r3, r3
 800cd6e:	4290      	cmp	r0, r2
 800cd70:	bfac      	ite	ge
 800cd72:	ebc7 0200 	rsbge	r2, r7, r0
 800cd76:	ebc7 0202 	rsblt	r2, r7, r2
 800cd7a:	4299      	cmp	r1, r3
 800cd7c:	bfac      	ite	ge
 800cd7e:	ebc6 0301 	rsbge	r3, r6, r1
 800cd82:	ebc6 0303 	rsblt	r3, r6, r3
 800cd86:	80a2      	strh	r2, [r4, #4]
 800cd88:	80e3      	strh	r3, [r4, #6]
 800cd8a:	e7d4      	b.n	800cd36 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cd92 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800cd92:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cd96:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800cd9a:	b383      	cbz	r3, 800cdfe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800cd9c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800cd9e:	b374      	cbz	r4, 800cdfe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800cda0:	f9b1 5000 	ldrsh.w	r5, [r1]
 800cda4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800cda8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800cdac:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800cdb0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800cdb4:	b303      	cbz	r3, 800cdf8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800cdb6:	4668      	mov	r0, sp
 800cdb8:	1d21      	adds	r1, r4, #4
 800cdba:	f8ad 5000 	strh.w	r5, [sp]
 800cdbe:	f8ad 6002 	strh.w	r6, [sp, #2]
 800cdc2:	f8ad 7004 	strh.w	r7, [sp, #4]
 800cdc6:	f8ad 8006 	strh.w	r8, [sp, #6]
 800cdca:	f7ff ff43 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 800cdce:	4668      	mov	r0, sp
 800cdd0:	f7ff ff83 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 800cdd4:	b980      	cbnz	r0, 800cdf8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800cdd6:	f8bd 3000 	ldrh.w	r3, [sp]
 800cdda:	4669      	mov	r1, sp
 800cddc:	88a2      	ldrh	r2, [r4, #4]
 800cdde:	4620      	mov	r0, r4
 800cde0:	1a9b      	subs	r3, r3, r2
 800cde2:	88e2      	ldrh	r2, [r4, #6]
 800cde4:	f8ad 3000 	strh.w	r3, [sp]
 800cde8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800cdec:	1a9b      	subs	r3, r3, r2
 800cdee:	f8ad 3002 	strh.w	r3, [sp, #2]
 800cdf2:	6823      	ldr	r3, [r4, #0]
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	4798      	blx	r3
 800cdf8:	69a4      	ldr	r4, [r4, #24]
 800cdfa:	2c00      	cmp	r4, #0
 800cdfc:	d1d8      	bne.n	800cdb0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800cdfe:	b002      	add	sp, #8
 800ce00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ce04 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800ce04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce06:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800ce0a:	460d      	mov	r5, r1
 800ce0c:	4616      	mov	r6, r2
 800ce0e:	b323      	cbz	r3, 800ce5a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ce10:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ce12:	b314      	cbz	r4, 800ce5a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ce14:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ce18:	b1eb      	cbz	r3, 800ce56 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ce1a:	6828      	ldr	r0, [r5, #0]
 800ce1c:	466b      	mov	r3, sp
 800ce1e:	6869      	ldr	r1, [r5, #4]
 800ce20:	c303      	stmia	r3!, {r0, r1}
 800ce22:	4668      	mov	r0, sp
 800ce24:	1d21      	adds	r1, r4, #4
 800ce26:	f7ff ff15 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 800ce2a:	4668      	mov	r0, sp
 800ce2c:	f7ff ff55 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 800ce30:	b988      	cbnz	r0, 800ce56 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ce32:	f8bd 3000 	ldrh.w	r3, [sp]
 800ce36:	4669      	mov	r1, sp
 800ce38:	88a2      	ldrh	r2, [r4, #4]
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	1a9b      	subs	r3, r3, r2
 800ce3e:	88e2      	ldrh	r2, [r4, #6]
 800ce40:	f8ad 3000 	strh.w	r3, [sp]
 800ce44:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ce48:	1a9b      	subs	r3, r3, r2
 800ce4a:	4632      	mov	r2, r6
 800ce4c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce54:	4798      	blx	r3
 800ce56:	69a4      	ldr	r4, [r4, #24]
 800ce58:	e7db      	b.n	800ce12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800ce5a:	b002      	add	sp, #8
 800ce5c:	bd70      	pop	{r4, r5, r6, pc}

0800ce5e <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800ce5e:	4770      	bx	lr

0800ce60 <_ZN8touchgfx3HAL10FlushCacheEv>:
 800ce60:	4770      	bx	lr

0800ce62 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800ce62:	6803      	ldr	r3, [r0, #0]
 800ce64:	b513      	push	{r0, r1, r4, lr}
 800ce66:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	e9cd 3300 	strd	r3, r3, [sp]
 800ce70:	466b      	mov	r3, sp
 800ce72:	47a0      	blx	r4
 800ce74:	b002      	add	sp, #8
 800ce76:	bd10      	pop	{r4, pc}

0800ce78 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800ce78:	2301      	movs	r3, #1
 800ce7a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800ce7e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800ce82:	4770      	bx	lr

0800ce84 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800ce84:	2301      	movs	r3, #1
 800ce86:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800ce8a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800ce8e:	4770      	bx	lr

0800ce90 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800ce90:	6843      	ldr	r3, [r0, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	725a      	strb	r2, [r3, #9]
 800ce96:	6840      	ldr	r0, [r0, #4]
 800ce98:	6803      	ldr	r3, [r0, #0]
 800ce9a:	691b      	ldr	r3, [r3, #16]
 800ce9c:	4718      	bx	r3

0800ce9e <_ZN8touchgfx3HAL8flushDMAEv>:
 800ce9e:	6840      	ldr	r0, [r0, #4]
 800cea0:	6803      	ldr	r3, [r0, #0]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	4718      	bx	r3

0800cea6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800cea6:	b530      	push	{r4, r5, lr}
 800cea8:	b08b      	sub	sp, #44	; 0x2c
 800ceaa:	6804      	ldr	r4, [r0, #0]
 800ceac:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800ceb0:	9509      	str	r5, [sp, #36]	; 0x24
 800ceb2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800ceb6:	9508      	str	r5, [sp, #32]
 800ceb8:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800cebc:	9507      	str	r5, [sp, #28]
 800cebe:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800cec2:	9506      	str	r5, [sp, #24]
 800cec4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800cec8:	9505      	str	r5, [sp, #20]
 800ceca:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800cece:	9504      	str	r5, [sp, #16]
 800ced0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800ced4:	9503      	str	r5, [sp, #12]
 800ced6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800ceda:	9502      	str	r5, [sp, #8]
 800cedc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800cee0:	e9cd 3500 	strd	r3, r5, [sp]
 800cee4:	4613      	mov	r3, r2
 800cee6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800cee8:	2200      	movs	r2, #0
 800ceea:	47a0      	blx	r4
 800ceec:	b00b      	add	sp, #44	; 0x2c
 800ceee:	bd30      	pop	{r4, r5, pc}

0800cef0 <_ZN8touchgfx3HAL10beginFrameEv>:
 800cef0:	4b04      	ldr	r3, [pc, #16]	; (800cf04 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	b123      	cbz	r3, 800cf00 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800cef6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800cefa:	f080 0001 	eor.w	r0, r0, #1
 800cefe:	4770      	bx	lr
 800cf00:	2001      	movs	r0, #1
 800cf02:	4770      	bx	lr
 800cf04:	20009f92 	.word	0x20009f92

0800cf08 <_ZN8touchgfx3HAL8endFrameEv>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	6840      	ldr	r0, [r0, #4]
 800cf0e:	6803      	ldr	r3, [r0, #0]
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	4798      	blx	r3
 800cf14:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800cf18:	b113      	cbz	r3, 800cf20 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800cf20:	bd10      	pop	{r4, pc}

0800cf22 <_ZN8touchgfx3HAL10initializeEv>:
 800cf22:	b510      	push	{r4, lr}
 800cf24:	4604      	mov	r4, r0
 800cf26:	f7fe f849 	bl	800afbc <_ZN8touchgfx10OSWrappers10initializeEv>
 800cf2a:	6860      	ldr	r0, [r4, #4]
 800cf2c:	6803      	ldr	r3, [r0, #0]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	4798      	blx	r3
 800cf32:	68e0      	ldr	r0, [r4, #12]
 800cf34:	6803      	ldr	r3, [r0, #0]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	4798      	blx	r3
 800cf3a:	6823      	ldr	r3, [r4, #0]
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf44:	4718      	bx	r3

0800cf46 <_ZN8touchgfx3HAL9taskEntryEv>:
 800cf46:	b508      	push	{r3, lr}
 800cf48:	6803      	ldr	r3, [r0, #0]
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf4e:	4798      	blx	r3
 800cf50:	6823      	ldr	r3, [r4, #0]
 800cf52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf54:	4620      	mov	r0, r4
 800cf56:	4798      	blx	r3
 800cf58:	f7fe f8a6 	bl	800b0a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800cf5c:	6823      	ldr	r3, [r4, #0]
 800cf5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf60:	e7f8      	b.n	800cf54 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0800cf64 <_ZN8touchgfx3HAL4tickEv>:
 800cf64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cf66:	6803      	ldr	r3, [r0, #0]
 800cf68:	4604      	mov	r4, r0
 800cf6a:	4d5c      	ldr	r5, [pc, #368]	; (800d0dc <_ZN8touchgfx3HAL4tickEv+0x178>)
 800cf6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cf70:	4798      	blx	r3
 800cf72:	2800      	cmp	r0, #0
 800cf74:	f000 8097 	beq.w	800d0a6 <_ZN8touchgfx3HAL4tickEv+0x142>
 800cf78:	2001      	movs	r0, #1
 800cf7a:	2600      	movs	r6, #0
 800cf7c:	f7fd fdde 	bl	800ab3c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800cf80:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800cf84:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800cf88:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800cf8c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800cf90:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800cf94:	b133      	cbz	r3, 800cfa4 <_ZN8touchgfx3HAL4tickEv+0x40>
 800cf96:	6823      	ldr	r3, [r4, #0]
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cf9e:	4798      	blx	r3
 800cfa0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800cfa4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800cfa8:	2601      	movs	r6, #1
 800cfaa:	6862      	ldr	r2, [r4, #4]
 800cfac:	f083 0301 	eor.w	r3, r3, #1
 800cfb0:	702e      	strb	r6, [r5, #0]
 800cfb2:	7253      	strb	r3, [r2, #9]
 800cfb4:	f003 f832 	bl	801001c <_ZN8touchgfx11Application11getInstanceEv>
 800cfb8:	6803      	ldr	r3, [r0, #0]
 800cfba:	4631      	mov	r1, r6
 800cfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfbe:	4798      	blx	r3
 800cfc0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800cfc4:	b90b      	cbnz	r3, 800cfca <_ZN8touchgfx3HAL4tickEv+0x66>
 800cfc6:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800cfca:	f003 f827 	bl	801001c <_ZN8touchgfx11Application11getInstanceEv>
 800cfce:	6803      	ldr	r3, [r0, #0]
 800cfd0:	695b      	ldr	r3, [r3, #20]
 800cfd2:	4798      	blx	r3
 800cfd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfd6:	6803      	ldr	r3, [r0, #0]
 800cfd8:	691b      	ldr	r3, [r3, #16]
 800cfda:	4798      	blx	r3
 800cfdc:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800cfe0:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800cfe4:	3b01      	subs	r3, #1
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800cfec:	b10a      	cbz	r2, 800cff2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1eb      	bne.n	800cfca <_ZN8touchgfx3HAL4tickEv+0x66>
 800cff2:	4a3b      	ldr	r2, [pc, #236]	; (800d0e0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800cff4:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800cff8:	7813      	ldrb	r3, [r2, #0]
 800cffa:	3301      	adds	r3, #1
 800cffc:	b25b      	sxtb	r3, r3
 800cffe:	4299      	cmp	r1, r3
 800d000:	7013      	strb	r3, [r2, #0]
 800d002:	dc10      	bgt.n	800d026 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800d004:	2300      	movs	r3, #0
 800d006:	68e0      	ldr	r0, [r4, #12]
 800d008:	a902      	add	r1, sp, #8
 800d00a:	7013      	strb	r3, [r2, #0]
 800d00c:	aa03      	add	r2, sp, #12
 800d00e:	6803      	ldr	r3, [r0, #0]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	4798      	blx	r3
 800d014:	6823      	ldr	r3, [r4, #0]
 800d016:	2800      	cmp	r0, #0
 800d018:	d051      	beq.n	800d0be <_ZN8touchgfx3HAL4tickEv+0x15a>
 800d01a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d01e:	4620      	mov	r0, r4
 800d020:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d024:	4798      	blx	r3
 800d026:	2300      	movs	r3, #0
 800d028:	6960      	ldr	r0, [r4, #20]
 800d02a:	f88d 3007 	strb.w	r3, [sp, #7]
 800d02e:	b158      	cbz	r0, 800d048 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800d030:	6803      	ldr	r3, [r0, #0]
 800d032:	f10d 0107 	add.w	r1, sp, #7
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	4798      	blx	r3
 800d03a:	b128      	cbz	r0, 800d048 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800d03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d03e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d042:	6803      	ldr	r3, [r0, #0]
 800d044:	68db      	ldr	r3, [r3, #12]
 800d046:	4798      	blx	r3
 800d048:	f104 001c 	add.w	r0, r4, #28
 800d04c:	f011 ff3c 	bl	801eec8 <_ZN8touchgfx8Gestures4tickEv>
 800d050:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800d054:	b30b      	cbz	r3, 800d09a <_ZN8touchgfx3HAL4tickEv+0x136>
 800d056:	6920      	ldr	r0, [r4, #16]
 800d058:	6803      	ldr	r3, [r0, #0]
 800d05a:	691b      	ldr	r3, [r3, #16]
 800d05c:	4798      	blx	r3
 800d05e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d060:	4606      	mov	r6, r0
 800d062:	b903      	cbnz	r3, 800d066 <_ZN8touchgfx3HAL4tickEv+0x102>
 800d064:	6720      	str	r0, [r4, #112]	; 0x70
 800d066:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d068:	4a1e      	ldr	r2, [pc, #120]	; (800d0e4 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800d06a:	1af3      	subs	r3, r6, r3
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d914      	bls.n	800d09a <_ZN8touchgfx3HAL4tickEv+0x136>
 800d070:	6920      	ldr	r0, [r4, #16]
 800d072:	6803      	ldr	r3, [r0, #0]
 800d074:	699b      	ldr	r3, [r3, #24]
 800d076:	4798      	blx	r3
 800d078:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d07a:	2264      	movs	r2, #100	; 0x64
 800d07c:	1af3      	subs	r3, r6, r3
 800d07e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d082:	fbb0 f0f3 	udiv	r0, r0, r3
 800d086:	2800      	cmp	r0, #0
 800d088:	dc1e      	bgt.n	800d0c8 <_ZN8touchgfx3HAL4tickEv+0x164>
 800d08a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800d08e:	6920      	ldr	r0, [r4, #16]
 800d090:	2100      	movs	r1, #0
 800d092:	6803      	ldr	r3, [r0, #0]
 800d094:	69db      	ldr	r3, [r3, #28]
 800d096:	4798      	blx	r3
 800d098:	6726      	str	r6, [r4, #112]	; 0x70
 800d09a:	f002 ffbf 	bl	801001c <_ZN8touchgfx11Application11getInstanceEv>
 800d09e:	6803      	ldr	r3, [r0, #0]
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a4:	4798      	blx	r3
 800d0a6:	6823      	ldr	r3, [r4, #0]
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d0ae:	4798      	blx	r3
 800d0b0:	2001      	movs	r0, #1
 800d0b2:	f7fd fd4e 	bl	800ab52 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	702b      	strb	r3, [r5, #0]
 800d0ba:	b004      	add	sp, #16
 800d0bc:	bd70      	pop	{r4, r5, r6, pc}
 800d0be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	4798      	blx	r3
 800d0c6:	e7ae      	b.n	800d026 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800d0c8:	2863      	cmp	r0, #99	; 0x63
 800d0ca:	bfcb      	itete	gt
 800d0cc:	2300      	movgt	r3, #0
 800d0ce:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800d0d2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800d0d6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800d0da:	e7d8      	b.n	800d08e <_ZN8touchgfx3HAL4tickEv+0x12a>
 800d0dc:	20009f98 	.word	0x20009f98
 800d0e0:	20009f99 	.word	0x20009f99
 800d0e4:	05f5e100 	.word	0x05f5e100

0800d0e8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800d0e8:	f7fd bfaa 	b.w	800b040 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800d0ec <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800d0ec:	6581      	str	r1, [r0, #88]	; 0x58
 800d0ee:	301c      	adds	r0, #28
 800d0f0:	f011 bee8 	b.w	801eec4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800d0f4 <_ZN8touchgfx3HAL5touchEll>:
 800d0f4:	b530      	push	{r4, r5, lr}
 800d0f6:	b087      	sub	sp, #28
 800d0f8:	4604      	mov	r4, r0
 800d0fa:	a804      	add	r0, sp, #16
 800d0fc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d100:	f002 fd4c 	bl	800fb9c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800d104:	9b04      	ldr	r3, [sp, #16]
 800d106:	a906      	add	r1, sp, #24
 800d108:	a803      	add	r0, sp, #12
 800d10a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d10e:	9b05      	ldr	r3, [sp, #20]
 800d110:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800d114:	f002 fd94 	bl	800fc40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800d118:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800d11c:	f104 001c 	add.w	r0, r4, #28
 800d120:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800d124:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d128:	b189      	cbz	r1, 800d14e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800d12a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	4613      	mov	r3, r2
 800d132:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800d136:	462a      	mov	r2, r5
 800d138:	f011 fed4 	bl	801eee4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800d13c:	b128      	cbz	r0, 800d14a <_ZN8touchgfx3HAL5touchEll+0x56>
 800d13e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800d142:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d144:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800d148:	6623      	str	r3, [r4, #96]	; 0x60
 800d14a:	b007      	add	sp, #28
 800d14c:	bd30      	pop	{r4, r5, pc}
 800d14e:	f011 ff0d 	bl	801ef6c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800d152:	2301      	movs	r3, #1
 800d154:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800d158:	e7f1      	b.n	800d13e <_ZN8touchgfx3HAL5touchEll+0x4a>

0800d15a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800d15a:	b510      	push	{r4, lr}
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d046      	beq.n	800d1ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d160:	ea81 0002 	eor.w	r0, r1, r2
 800d164:	07c4      	lsls	r4, r0, #31
 800d166:	d508      	bpl.n	800d17a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800d168:	440b      	add	r3, r1
 800d16a:	3a01      	subs	r2, #1
 800d16c:	428b      	cmp	r3, r1
 800d16e:	d93e      	bls.n	800d1ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d170:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d174:	f801 0b01 	strb.w	r0, [r1], #1
 800d178:	e7f8      	b.n	800d16c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800d17a:	07d0      	lsls	r0, r2, #31
 800d17c:	bf42      	ittt	mi
 800d17e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800d182:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800d186:	f801 0b01 	strbmi.w	r0, [r1], #1
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d911      	bls.n	800d1b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d18e:	ea81 0402 	eor.w	r4, r1, r2
 800d192:	4610      	mov	r0, r2
 800d194:	07a4      	lsls	r4, r4, #30
 800d196:	d022      	beq.n	800d1de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800d198:	f023 0401 	bic.w	r4, r3, #1
 800d19c:	440c      	add	r4, r1
 800d19e:	428c      	cmp	r4, r1
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	d904      	bls.n	800d1ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800d1a4:	8812      	ldrh	r2, [r2, #0]
 800d1a6:	3002      	adds	r0, #2
 800d1a8:	f821 2b02 	strh.w	r2, [r1], #2
 800d1ac:	e7f7      	b.n	800d19e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800d1ae:	f003 0301 	and.w	r3, r3, #1
 800d1b2:	f023 0003 	bic.w	r0, r3, #3
 800d1b6:	4408      	add	r0, r1
 800d1b8:	4288      	cmp	r0, r1
 800d1ba:	4614      	mov	r4, r2
 800d1bc:	d904      	bls.n	800d1c8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800d1be:	6824      	ldr	r4, [r4, #0]
 800d1c0:	3204      	adds	r2, #4
 800d1c2:	f841 4b04 	str.w	r4, [r1], #4
 800d1c6:	e7f7      	b.n	800d1b8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800d1c8:	f003 0303 	and.w	r3, r3, #3
 800d1cc:	3a01      	subs	r2, #1
 800d1ce:	440b      	add	r3, r1
 800d1d0:	428b      	cmp	r3, r1
 800d1d2:	d90c      	bls.n	800d1ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d1d4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d1d8:	f801 0b01 	strb.w	r0, [r1], #1
 800d1dc:	e7f8      	b.n	800d1d0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800d1de:	0790      	lsls	r0, r2, #30
 800d1e0:	d0e7      	beq.n	800d1b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d1e2:	f832 0b02 	ldrh.w	r0, [r2], #2
 800d1e6:	3b02      	subs	r3, #2
 800d1e8:	f821 0b02 	strh.w	r0, [r1], #2
 800d1ec:	e7e1      	b.n	800d1b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d1ee:	2001      	movs	r0, #1
 800d1f0:	bd10      	pop	{r4, pc}

0800d1f2 <_ZN8touchgfx3HAL7noTouchEv>:
 800d1f2:	b510      	push	{r4, lr}
 800d1f4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800d1f8:	4604      	mov	r4, r0
 800d1fa:	b153      	cbz	r3, 800d212 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800d1fc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800d200:	2101      	movs	r1, #1
 800d202:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800d206:	301c      	adds	r0, #28
 800d208:	f011 feb0 	bl	801ef6c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800d20c:	2300      	movs	r3, #0
 800d20e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800d212:	bd10      	pop	{r4, pc}

0800d214 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800d214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d218:	4604      	mov	r4, r0
 800d21a:	6980      	ldr	r0, [r0, #24]
 800d21c:	b085      	sub	sp, #20
 800d21e:	460f      	mov	r7, r1
 800d220:	4690      	mov	r8, r2
 800d222:	4699      	mov	r9, r3
 800d224:	b930      	cbnz	r0, 800d234 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800d226:	4b1c      	ldr	r3, [pc, #112]	; (800d298 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800d228:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800d22c:	4a1b      	ldr	r2, [pc, #108]	; (800d29c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800d22e:	481c      	ldr	r0, [pc, #112]	; (800d2a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800d230:	f011 ff32 	bl	801f098 <__assert_func>
 800d234:	ad04      	add	r5, sp, #16
 800d236:	2600      	movs	r6, #0
 800d238:	f845 6d04 	str.w	r6, [r5, #-4]!
 800d23c:	6806      	ldr	r6, [r0, #0]
 800d23e:	9501      	str	r5, [sp, #4]
 800d240:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800d244:	9500      	str	r5, [sp, #0]
 800d246:	6835      	ldr	r5, [r6, #0]
 800d248:	47a8      	blx	r5
 800d24a:	4d16      	ldr	r5, [pc, #88]	; (800d2a4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800d24c:	4606      	mov	r6, r0
 800d24e:	f8a5 9000 	strh.w	r9, [r5]
 800d252:	f7fb fb51 	bl	80088f8 <_ZN8touchgfx3HAL3lcdEv>
 800d256:	6803      	ldr	r3, [r0, #0]
 800d258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25a:	4798      	blx	r3
 800d25c:	2801      	cmp	r0, #1
 800d25e:	d012      	beq.n	800d286 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800d260:	d306      	bcc.n	800d270 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800d262:	280d      	cmp	r0, #13
 800d264:	d80b      	bhi.n	800d27e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800d266:	4b10      	ldr	r3, [pc, #64]	; (800d2a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800d268:	f240 1167 	movw	r1, #359	; 0x167
 800d26c:	4a0b      	ldr	r2, [pc, #44]	; (800d29c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800d26e:	e7de      	b.n	800d22e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800d270:	882b      	ldrh	r3, [r5, #0]
 800d272:	fb08 7203 	mla	r2, r8, r3, r7
 800d276:	9b03      	ldr	r3, [sp, #12]
 800d278:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800d27c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d27e:	4630      	mov	r0, r6
 800d280:	b005      	add	sp, #20
 800d282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d286:	882a      	ldrh	r2, [r5, #0]
 800d288:	9b03      	ldr	r3, [sp, #12]
 800d28a:	fb08 7202 	mla	r2, r8, r2, r7
 800d28e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d292:	1a9a      	subs	r2, r3, r2
 800d294:	63e2      	str	r2, [r4, #60]	; 0x3c
 800d296:	e7f2      	b.n	800d27e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800d298:	08021a44 	.word	0x08021a44
 800d29c:	08021dd3 	.word	0x08021dd3
 800d2a0:	08021a89 	.word	0x08021a89
 800d2a4:	20009f8e 	.word	0x20009f8e
 800d2a8:	08021aaf 	.word	0x08021aaf

0800d2ac <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800d2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ae:	b08b      	sub	sp, #44	; 0x2c
 800d2b0:	4617      	mov	r7, r2
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	460e      	mov	r6, r1
 800d2b6:	461d      	mov	r5, r3
 800d2b8:	f7fb fb1e 	bl	80088f8 <_ZN8touchgfx3HAL3lcdEv>
 800d2bc:	6803      	ldr	r3, [r0, #0]
 800d2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c0:	4798      	blx	r3
 800d2c2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800d2c6:	9007      	str	r0, [sp, #28]
 800d2c8:	4631      	mov	r1, r6
 800d2ca:	6822      	ldr	r2, [r4, #0]
 800d2cc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d2d0:	4b0c      	ldr	r3, [pc, #48]	; (800d304 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	881b      	ldrh	r3, [r3, #0]
 800d2d6:	9306      	str	r3, [sp, #24]
 800d2d8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d2dc:	9305      	str	r3, [sp, #20]
 800d2de:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800d2e2:	9304      	str	r3, [sp, #16]
 800d2e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d2e8:	9303      	str	r3, [sp, #12]
 800d2ea:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d2ee:	9302      	str	r3, [sp, #8]
 800d2f0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d2f4:	e9cd 5300 	strd	r5, r3, [sp]
 800d2f8:	463b      	mov	r3, r7
 800d2fa:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	47a8      	blx	r5
 800d300:	b00b      	add	sp, #44	; 0x2c
 800d302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d304:	20009f8e 	.word	0x20009f8e

0800d308 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800d308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d30c:	4698      	mov	r8, r3
 800d30e:	6803      	ldr	r3, [r0, #0]
 800d310:	b08b      	sub	sp, #44	; 0x2c
 800d312:	4617      	mov	r7, r2
 800d314:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800d316:	460e      	mov	r6, r1
 800d318:	4b13      	ldr	r3, [pc, #76]	; (800d368 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800d31a:	4604      	mov	r4, r0
 800d31c:	f8b3 9000 	ldrh.w	r9, [r3]
 800d320:	f7fb faea 	bl	80088f8 <_ZN8touchgfx3HAL3lcdEv>
 800d324:	6803      	ldr	r3, [r0, #0]
 800d326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d328:	4798      	blx	r3
 800d32a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d32e:	2200      	movs	r2, #0
 800d330:	4631      	mov	r1, r6
 800d332:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d336:	2302      	movs	r3, #2
 800d338:	4620      	mov	r0, r4
 800d33a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800d33e:	2301      	movs	r3, #1
 800d340:	9305      	str	r3, [sp, #20]
 800d342:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800d346:	9304      	str	r3, [sp, #16]
 800d348:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d34c:	9303      	str	r3, [sp, #12]
 800d34e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800d352:	9302      	str	r3, [sp, #8]
 800d354:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d358:	e9cd 8300 	strd	r8, r3, [sp]
 800d35c:	463b      	mov	r3, r7
 800d35e:	47a8      	blx	r5
 800d360:	b00b      	add	sp, #44	; 0x2c
 800d362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d366:	bf00      	nop
 800d368:	20009f8e 	.word	0x20009f8e

0800d36c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800d36c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d370:	4698      	mov	r8, r3
 800d372:	6803      	ldr	r3, [r0, #0]
 800d374:	b087      	sub	sp, #28
 800d376:	460e      	mov	r6, r1
 800d378:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800d37a:	4617      	mov	r7, r2
 800d37c:	4b0f      	ldr	r3, [pc, #60]	; (800d3bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800d37e:	4604      	mov	r4, r0
 800d380:	f8b3 9000 	ldrh.w	r9, [r3]
 800d384:	f7fb fab8 	bl	80088f8 <_ZN8touchgfx3HAL3lcdEv>
 800d388:	6803      	ldr	r3, [r0, #0]
 800d38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38c:	4798      	blx	r3
 800d38e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800d392:	463a      	mov	r2, r7
 800d394:	4631      	mov	r1, r6
 800d396:	f8cd 900c 	str.w	r9, [sp, #12]
 800d39a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800d39e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	9302      	str	r3, [sp, #8]
 800d3a6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800d3aa:	9301      	str	r3, [sp, #4]
 800d3ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	4643      	mov	r3, r8
 800d3b4:	47a8      	blx	r5
 800d3b6:	b007      	add	sp, #28
 800d3b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3bc:	20009f8e 	.word	0x20009f8e

0800d3c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800d3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	b08f      	sub	sp, #60	; 0x3c
 800d3c8:	4610      	mov	r0, r2
 800d3ca:	460d      	mov	r5, r1
 800d3cc:	4691      	mov	r9, r2
 800d3ce:	461e      	mov	r6, r3
 800d3d0:	f005 fd36 	bl	8012e40 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	f000 809c 	beq.w	800d512 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	4620      	mov	r0, r4
 800d3de:	f8df b194 	ldr.w	fp, [pc, #404]	; 800d574 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800d3e2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e8:	4798      	blx	r3
 800d3ea:	6823      	ldr	r3, [r4, #0]
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f8df a188 	ldr.w	sl, [pc, #392]	; 800d578 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800d3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f4:	4798      	blx	r3
 800d3f6:	f8bb 3000 	ldrh.w	r3, [fp]
 800d3fa:	4f5b      	ldr	r7, [pc, #364]	; (800d568 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d3fc:	9301      	str	r3, [sp, #4]
 800d3fe:	f8ba 3000 	ldrh.w	r3, [sl]
 800d402:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800d406:	4640      	mov	r0, r8
 800d408:	9302      	str	r3, [sp, #8]
 800d40a:	883b      	ldrh	r3, [r7, #0]
 800d40c:	9303      	str	r3, [sp, #12]
 800d40e:	4b57      	ldr	r3, [pc, #348]	; (800d56c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d410:	881a      	ldrh	r2, [r3, #0]
 800d412:	9305      	str	r3, [sp, #20]
 800d414:	9204      	str	r2, [sp, #16]
 800d416:	f005 fdcd 	bl	8012fb4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d41a:	8038      	strh	r0, [r7, #0]
 800d41c:	4640      	mov	r0, r8
 800d41e:	f005 fe03 	bl	8013028 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d422:	9b05      	ldr	r3, [sp, #20]
 800d424:	8018      	strh	r0, [r3, #0]
 800d426:	4b52      	ldr	r3, [pc, #328]	; (800d570 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d174      	bne.n	800d518 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800d42e:	883b      	ldrh	r3, [r7, #0]
 800d430:	f8aa 0000 	strh.w	r0, [sl]
 800d434:	f8ab 3000 	strh.w	r3, [fp]
 800d438:	4648      	mov	r0, r9
 800d43a:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800d43e:	f005 fcff 	bl	8012e40 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800d442:	2200      	movs	r2, #0
 800d444:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800d448:	4611      	mov	r1, r2
 800d44a:	4628      	mov	r0, r5
 800d44c:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800d450:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800d454:	f7fb ffa4 	bl	80093a0 <_ZN8touchgfx8Drawable5setXYEss>
 800d458:	2301      	movs	r3, #1
 800d45a:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800d45e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800d462:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	dd5c      	ble.n	800d524 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800d46a:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	dd58      	ble.n	800d524 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800d472:	462a      	mov	r2, r5
 800d474:	ab0a      	add	r3, sp, #40	; 0x28
 800d476:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800d47a:	6851      	ldr	r1, [r2, #4]
 800d47c:	c303      	stmia	r3!, {r0, r1}
 800d47e:	4631      	mov	r1, r6
 800d480:	a80a      	add	r0, sp, #40	; 0x28
 800d482:	f7ff fbe7 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 800d486:	4b38      	ldr	r3, [pc, #224]	; (800d568 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d488:	2100      	movs	r1, #0
 800d48a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d48e:	4b37      	ldr	r3, [pc, #220]	; (800d56c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d490:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800d494:	aa0a      	add	r2, sp, #40	; 0x28
 800d496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d49a:	910c      	str	r1, [sp, #48]	; 0x30
 800d49c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800d4a0:	ab08      	add	r3, sp, #32
 800d4a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4a6:	e883 0003 	stmia.w	r3, {r0, r1}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	a90c      	add	r1, sp, #48	; 0x30
 800d4ae:	f7ff fbd1 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 800d4b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d13c      	bne.n	800d532 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800d4be:	2600      	movs	r6, #0
 800d4c0:	696b      	ldr	r3, [r5, #20]
 800d4c2:	a908      	add	r1, sp, #32
 800d4c4:	682a      	ldr	r2, [r5, #0]
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	9305      	str	r3, [sp, #20]
 800d4ca:	616e      	str	r6, [r5, #20]
 800d4cc:	6892      	ldr	r2, [r2, #8]
 800d4ce:	4790      	blx	r2
 800d4d0:	9b05      	ldr	r3, [sp, #20]
 800d4d2:	4652      	mov	r2, sl
 800d4d4:	4649      	mov	r1, r9
 800d4d6:	616b      	str	r3, [r5, #20]
 800d4d8:	4628      	mov	r0, r5
 800d4da:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800d4de:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800d4e2:	f7fb ff5d 	bl	80093a0 <_ZN8touchgfx8Drawable5setXYEss>
 800d4e6:	9a01      	ldr	r2, [sp, #4]
 800d4e8:	4b22      	ldr	r3, [pc, #136]	; (800d574 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	801a      	strh	r2, [r3, #0]
 800d4ee:	9a02      	ldr	r2, [sp, #8]
 800d4f0:	4b21      	ldr	r3, [pc, #132]	; (800d578 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800d4f2:	801a      	strh	r2, [r3, #0]
 800d4f4:	9a03      	ldr	r2, [sp, #12]
 800d4f6:	4b1c      	ldr	r3, [pc, #112]	; (800d568 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d4f8:	801a      	strh	r2, [r3, #0]
 800d4fa:	4b1c      	ldr	r3, [pc, #112]	; (800d56c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d4fc:	9a04      	ldr	r2, [sp, #16]
 800d4fe:	801a      	strh	r2, [r3, #0]
 800d500:	6823      	ldr	r3, [r4, #0]
 800d502:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800d506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d508:	4798      	blx	r3
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	4620      	mov	r0, r4
 800d50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d510:	4798      	blx	r3
 800d512:	b00f      	add	sp, #60	; 0x3c
 800d514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d518:	883b      	ldrh	r3, [r7, #0]
 800d51a:	f8ab 0000 	strh.w	r0, [fp]
 800d51e:	f8aa 3000 	strh.w	r3, [sl]
 800d522:	e789      	b.n	800d438 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800d524:	462a      	mov	r2, r5
 800d526:	ab0a      	add	r3, sp, #40	; 0x28
 800d528:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800d52c:	6851      	ldr	r1, [r2, #4]
 800d52e:	c303      	stmia	r3!, {r0, r1}
 800d530:	e7a9      	b.n	800d486 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800d532:	a807      	add	r0, sp, #28
 800d534:	f005 fed0 	bl	80132d8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800d538:	4606      	mov	r6, r0
 800d53a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d53c:	6803      	ldr	r3, [r0, #0]
 800d53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d540:	4798      	blx	r3
 800d542:	4286      	cmp	r6, r0
 800d544:	d1b8      	bne.n	800d4b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800d546:	f7fb f9d7 	bl	80088f8 <_ZN8touchgfx3HAL3lcdEv>
 800d54a:	6803      	ldr	r3, [r0, #0]
 800d54c:	4606      	mov	r6, r0
 800d54e:	a807      	add	r0, sp, #28
 800d550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d552:	9305      	str	r3, [sp, #20]
 800d554:	f005 fec0 	bl	80132d8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800d558:	9b05      	ldr	r3, [sp, #20]
 800d55a:	4601      	mov	r1, r0
 800d55c:	4630      	mov	r0, r6
 800d55e:	4798      	blx	r3
 800d560:	f080 0001 	eor.w	r0, r0, #1
 800d564:	b2c0      	uxtb	r0, r0
 800d566:	e7a8      	b.n	800d4ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800d568:	20009f88 	.word	0x20009f88
 800d56c:	20009f8a 	.word	0x20009f8a
 800d570:	20009f8c 	.word	0x20009f8c
 800d574:	20009f8e 	.word	0x20009f8e
 800d578:	20009f90 	.word	0x20009f90

0800d57c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800d57c:	4b07      	ldr	r3, [pc, #28]	; (800d59c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800d57e:	b510      	push	{r4, lr}
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	4604      	mov	r4, r0
 800d584:	b13b      	cbz	r3, 800d596 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800d586:	6803      	ldr	r3, [r0, #0]
 800d588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d58a:	4798      	blx	r3
 800d58c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d58e:	4283      	cmp	r3, r0
 800d590:	d101      	bne.n	800d596 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800d592:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d594:	bd10      	pop	{r4, pc}
 800d596:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d598:	e7fc      	b.n	800d594 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800d59a:	bf00      	nop
 800d59c:	20009f92 	.word	0x20009f92

0800d5a0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800d5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a4:	b088      	sub	sp, #32
 800d5a6:	4692      	mov	sl, r2
 800d5a8:	461d      	mov	r5, r3
 800d5aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5ae:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 800d5b2:	2400      	movs	r4, #0
 800d5b4:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 800d5b8:	4606      	mov	r6, r0
 800d5ba:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 800d5be:	fb09 a505 	mla	r5, r9, r5, sl
 800d5c2:	9403      	str	r4, [sp, #12]
 800d5c4:	f8ad 8014 	strh.w	r8, [sp, #20]
 800d5c8:	f8ad 7016 	strh.w	r7, [sp, #22]
 800d5cc:	f88d 401c 	strb.w	r4, [sp, #28]
 800d5d0:	e9cd 3100 	strd	r3, r1, [sp]
 800d5d4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d5d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d5dc:	f7ff ffce 	bl	800d57c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d5e0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800d5e4:	f8ad 901a 	strh.w	r9, [sp, #26]
 800d5e8:	f88d 401e 	strb.w	r4, [sp, #30]
 800d5ec:	9504      	str	r5, [sp, #16]
 800d5ee:	f88d 401d 	strb.w	r4, [sp, #29]
 800d5f2:	f88d 401f 	strb.w	r4, [sp, #31]
 800d5f6:	f1b8 0f00 	cmp.w	r8, #0
 800d5fa:	d000      	beq.n	800d5fe <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 800d5fc:	b937      	cbnz	r7, 800d60c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 800d5fe:	4b0d      	ldr	r3, [pc, #52]	; (800d634 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 800d600:	f240 210b 	movw	r1, #523	; 0x20b
 800d604:	4a0c      	ldr	r2, [pc, #48]	; (800d638 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800d606:	480d      	ldr	r0, [pc, #52]	; (800d63c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800d608:	f011 fd46 	bl	801f098 <__assert_func>
 800d60c:	6833      	ldr	r3, [r6, #0]
 800d60e:	4630      	mov	r0, r6
 800d610:	9c00      	ldr	r4, [sp, #0]
 800d612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d614:	4798      	blx	r3
 800d616:	4220      	tst	r0, r4
 800d618:	d104      	bne.n	800d624 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 800d61a:	4b09      	ldr	r3, [pc, #36]	; (800d640 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800d61c:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800d620:	4a05      	ldr	r2, [pc, #20]	; (800d638 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800d622:	e7f0      	b.n	800d606 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 800d624:	6870      	ldr	r0, [r6, #4]
 800d626:	4669      	mov	r1, sp
 800d628:	6803      	ldr	r3, [r0, #0]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	4798      	blx	r3
 800d62e:	b008      	add	sp, #32
 800d630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d634:	080218d7 	.word	0x080218d7
 800d638:	08021c08 	.word	0x08021c08
 800d63c:	08021a89 	.word	0x08021a89
 800d640:	0802190f 	.word	0x0802190f

0800d644 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800d644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d648:	b089      	sub	sp, #36	; 0x24
 800d64a:	4693      	mov	fp, r2
 800d64c:	461d      	mov	r5, r3
 800d64e:	2400      	movs	r4, #0
 800d650:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 800d654:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d658:	468a      	mov	sl, r1
 800d65a:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800d65e:	fb09 b505 	mla	r5, r9, r5, fp
 800d662:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800d666:	4606      	mov	r6, r0
 800d668:	9403      	str	r4, [sp, #12]
 800d66a:	e9cd 3400 	strd	r3, r4, [sp]
 800d66e:	f7ff ff85 	bl	800d57c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d672:	f8ad 8014 	strh.w	r8, [sp, #20]
 800d676:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800d67a:	f8ad 7016 	strh.w	r7, [sp, #22]
 800d67e:	f8ad 4018 	strh.w	r4, [sp, #24]
 800d682:	9504      	str	r5, [sp, #16]
 800d684:	f8ad 901a 	strh.w	r9, [sp, #26]
 800d688:	f8cd a00c 	str.w	sl, [sp, #12]
 800d68c:	f8ad 401c 	strh.w	r4, [sp, #28]
 800d690:	f88d 401e 	strb.w	r4, [sp, #30]
 800d694:	f88d 401f 	strb.w	r4, [sp, #31]
 800d698:	f1b8 0f00 	cmp.w	r8, #0
 800d69c:	d000      	beq.n	800d6a0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 800d69e:	b937      	cbnz	r7, 800d6ae <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 800d6a0:	4b0d      	ldr	r3, [pc, #52]	; (800d6d8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 800d6a2:	f240 2121 	movw	r1, #545	; 0x221
 800d6a6:	4a0d      	ldr	r2, [pc, #52]	; (800d6dc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800d6a8:	480d      	ldr	r0, [pc, #52]	; (800d6e0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800d6aa:	f011 fcf5 	bl	801f098 <__assert_func>
 800d6ae:	6833      	ldr	r3, [r6, #0]
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	9c00      	ldr	r4, [sp, #0]
 800d6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b6:	4798      	blx	r3
 800d6b8:	4220      	tst	r0, r4
 800d6ba:	d104      	bne.n	800d6c6 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 800d6bc:	4b09      	ldr	r3, [pc, #36]	; (800d6e4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800d6be:	f240 2122 	movw	r1, #546	; 0x222
 800d6c2:	4a06      	ldr	r2, [pc, #24]	; (800d6dc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800d6c4:	e7f0      	b.n	800d6a8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 800d6c6:	6870      	ldr	r0, [r6, #4]
 800d6c8:	4669      	mov	r1, sp
 800d6ca:	6803      	ldr	r3, [r0, #0]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	4798      	blx	r3
 800d6d0:	b009      	add	sp, #36	; 0x24
 800d6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6d6:	bf00      	nop
 800d6d8:	08021954 	.word	0x08021954
 800d6dc:	08021c7e 	.word	0x08021c7e
 800d6e0:	08021a89 	.word	0x08021a89
 800d6e4:	0802198c 	.word	0x0802198c

0800d6e8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800d6e8:	b508      	push	{r3, lr}
 800d6ea:	290d      	cmp	r1, #13
 800d6ec:	d817      	bhi.n	800d71e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800d6ee:	e8df f001 	tbb	[pc, r1]
 800d6f2:	090b      	.short	0x090b
 800d6f4:	0d0d0d07 	.word	0x0d0d0d07
 800d6f8:	1414140d 	.word	0x1414140d
 800d6fc:	0d0d1414 	.word	0x0d0d1414
 800d700:	2020      	movs	r0, #32
 800d702:	bd08      	pop	{r3, pc}
 800d704:	2018      	movs	r0, #24
 800d706:	e7fc      	b.n	800d702 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d708:	2010      	movs	r0, #16
 800d70a:	e7fa      	b.n	800d702 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d70c:	4b05      	ldr	r3, [pc, #20]	; (800d724 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800d70e:	f240 2182 	movw	r1, #642	; 0x282
 800d712:	4a05      	ldr	r2, [pc, #20]	; (800d728 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800d714:	4805      	ldr	r0, [pc, #20]	; (800d72c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800d716:	f011 fcbf 	bl	801f098 <__assert_func>
 800d71a:	2008      	movs	r0, #8
 800d71c:	e7f1      	b.n	800d702 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d71e:	2000      	movs	r0, #0
 800d720:	e7ef      	b.n	800d702 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800d722:	bf00      	nop
 800d724:	08021b05 	.word	0x08021b05
 800d728:	08021fa9 	.word	0x08021fa9
 800d72c:	08021a89 	.word	0x08021a89

0800d730 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800d730:	b570      	push	{r4, r5, r6, lr}
 800d732:	460d      	mov	r5, r1
 800d734:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800d738:	4616      	mov	r6, r2
 800d73a:	461c      	mov	r4, r3
 800d73c:	f7ff ffd4 	bl	800d6e8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800d740:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800d744:	10c0      	asrs	r0, r0, #3
 800d746:	fb06 5101 	mla	r1, r6, r1, r5
 800d74a:	fb00 4001 	mla	r0, r0, r1, r4
 800d74e:	bd70      	pop	{r4, r5, r6, pc}

0800d750 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800d750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d754:	b08a      	sub	sp, #40	; 0x28
 800d756:	f04f 0c00 	mov.w	ip, #0
 800d75a:	4604      	mov	r4, r0
 800d75c:	469a      	mov	sl, r3
 800d75e:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 800d762:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800d766:	2d0b      	cmp	r5, #11
 800d768:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800d76c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d770:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800d774:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800d778:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 800d77c:	f8cd c014 	str.w	ip, [sp, #20]
 800d780:	d12d      	bne.n	800d7de <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800d782:	2080      	movs	r0, #128	; 0x80
 800d784:	9204      	str	r2, [sp, #16]
 800d786:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800d78a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d78e:	f8ad 2020 	strh.w	r2, [sp, #32]
 800d792:	f8ad 701c 	strh.w	r7, [sp, #28]
 800d796:	f8ad 601e 	strh.w	r6, [sp, #30]
 800d79a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d79e:	4620      	mov	r0, r4
 800d7a0:	f7ff feec 	bl	800d57c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d7a4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	4651      	mov	r1, sl
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	e9cd 9800 	strd	r9, r8, [sp]
 800d7b2:	f7ff ffbd 	bl	800d730 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d7b6:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800d7ba:	9006      	str	r0, [sp, #24]
 800d7bc:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 800d7c0:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800d7c4:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800d7c8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800d7cc:	b107      	cbz	r7, 800d7d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 800d7ce:	b9d6      	cbnz	r6, 800d806 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 800d7d0:	4b17      	ldr	r3, [pc, #92]	; (800d830 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 800d7d2:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800d7d6:	4a17      	ldr	r2, [pc, #92]	; (800d834 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800d7d8:	4817      	ldr	r0, [pc, #92]	; (800d838 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800d7da:	f011 fc5d 	bl	801f098 <__assert_func>
 800d7de:	2d02      	cmp	r5, #2
 800d7e0:	d108      	bne.n	800d7f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 800d7e2:	2bff      	cmp	r3, #255	; 0xff
 800d7e4:	d104      	bne.n	800d7f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	bf14      	ite	ne
 800d7ea:	2040      	movne	r0, #64	; 0x40
 800d7ec:	2020      	moveq	r0, #32
 800d7ee:	e7c9      	b.n	800d784 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d7f0:	2040      	movs	r0, #64	; 0x40
 800d7f2:	e7c7      	b.n	800d784 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d7f4:	2bff      	cmp	r3, #255	; 0xff
 800d7f6:	d104      	bne.n	800d802 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	bf14      	ite	ne
 800d7fc:	2004      	movne	r0, #4
 800d7fe:	2001      	moveq	r0, #1
 800d800:	e7c0      	b.n	800d784 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d802:	2004      	movs	r0, #4
 800d804:	e7be      	b.n	800d784 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800d806:	6823      	ldr	r3, [r4, #0]
 800d808:	4620      	mov	r0, r4
 800d80a:	9d02      	ldr	r5, [sp, #8]
 800d80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80e:	4798      	blx	r3
 800d810:	4228      	tst	r0, r5
 800d812:	d104      	bne.n	800d81e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 800d814:	4b09      	ldr	r3, [pc, #36]	; (800d83c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800d816:	f240 11d5 	movw	r1, #469	; 0x1d5
 800d81a:	4a06      	ldr	r2, [pc, #24]	; (800d834 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800d81c:	e7dc      	b.n	800d7d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 800d81e:	6860      	ldr	r0, [r4, #4]
 800d820:	a902      	add	r1, sp, #8
 800d822:	6803      	ldr	r3, [r0, #0]
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	4798      	blx	r3
 800d828:	b00a      	add	sp, #40	; 0x28
 800d82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d82e:	bf00      	nop
 800d830:	080218d7 	.word	0x080218d7
 800d834:	08021e37 	.word	0x08021e37
 800d838:	08021a89 	.word	0x08021a89
 800d83c:	0802190f 	.word	0x0802190f

0800d840 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d844:	b08b      	sub	sp, #44	; 0x2c
 800d846:	469b      	mov	fp, r3
 800d848:	4604      	mov	r4, r0
 800d84a:	4692      	mov	sl, r2
 800d84c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800d850:	2600      	movs	r6, #0
 800d852:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800d856:	4689      	mov	r9, r1
 800d858:	2fff      	cmp	r7, #255	; 0xff
 800d85a:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800d85e:	9605      	str	r6, [sp, #20]
 800d860:	bf14      	ite	ne
 800d862:	2308      	movne	r3, #8
 800d864:	2302      	moveq	r3, #2
 800d866:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800d86a:	f7ff fe87 	bl	800d57c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d86e:	465a      	mov	r2, fp
 800d870:	4603      	mov	r3, r0
 800d872:	4651      	mov	r1, sl
 800d874:	4620      	mov	r0, r4
 800d876:	e9cd 8500 	strd	r8, r5, [sp]
 800d87a:	f7ff ff59 	bl	800d730 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d87e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d882:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800d886:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d88a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800d88e:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800d892:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d896:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800d89a:	9d02      	ldr	r5, [sp, #8]
 800d89c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800d8a0:	6823      	ldr	r3, [r4, #0]
 800d8a2:	9006      	str	r0, [sp, #24]
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f8ad 6020 	strh.w	r6, [sp, #32]
 800d8aa:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 800d8ae:	f8cd 9014 	str.w	r9, [sp, #20]
 800d8b2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800d8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b8:	4798      	blx	r3
 800d8ba:	4228      	tst	r0, r5
 800d8bc:	d106      	bne.n	800d8cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 800d8be:	4b07      	ldr	r3, [pc, #28]	; (800d8dc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 800d8c0:	f240 2137 	movw	r1, #567	; 0x237
 800d8c4:	4a06      	ldr	r2, [pc, #24]	; (800d8e0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800d8c6:	4807      	ldr	r0, [pc, #28]	; (800d8e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800d8c8:	f011 fbe6 	bl	801f098 <__assert_func>
 800d8cc:	6860      	ldr	r0, [r4, #4]
 800d8ce:	a902      	add	r1, sp, #8
 800d8d0:	6803      	ldr	r3, [r0, #0]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	4798      	blx	r3
 800d8d6:	b00b      	add	sp, #44	; 0x2c
 800d8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8dc:	0802190f 	.word	0x0802190f
 800d8e0:	08021f0e 	.word	0x08021f0e
 800d8e4:	08021a89 	.word	0x08021a89

0800d8e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800d8e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d8ec:	461f      	mov	r7, r3
 800d8ee:	4b0b      	ldr	r3, [pc, #44]	; (800d91c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800d8f0:	460d      	mov	r5, r1
 800d8f2:	4616      	mov	r6, r2
 800d8f4:	f8b3 8000 	ldrh.w	r8, [r3]
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	f7fa fffd 	bl	80088f8 <_ZN8touchgfx3HAL3lcdEv>
 800d8fe:	6803      	ldr	r3, [r0, #0]
 800d900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d902:	4798      	blx	r3
 800d904:	463b      	mov	r3, r7
 800d906:	4632      	mov	r2, r6
 800d908:	4629      	mov	r1, r5
 800d90a:	e9cd 8000 	strd	r8, r0, [sp]
 800d90e:	4620      	mov	r0, r4
 800d910:	f7ff ff0e 	bl	800d730 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800d914:	b002      	add	sp, #8
 800d916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d91a:	bf00      	nop
 800d91c:	20009f8e 	.word	0x20009f8e

0800d920 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800d920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d924:	4698      	mov	r8, r3
 800d926:	b088      	sub	sp, #32
 800d928:	2300      	movs	r3, #0
 800d92a:	4617      	mov	r7, r2
 800d92c:	4604      	mov	r4, r0
 800d92e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800d932:	9303      	str	r3, [sp, #12]
 800d934:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800d938:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800d93c:	f8ad 6014 	strh.w	r6, [sp, #20]
 800d940:	f8ad 5016 	strh.w	r5, [sp, #22]
 800d944:	e9cd 3100 	strd	r3, r1, [sp]
 800d948:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d94c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d950:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800d954:	f88d 301c 	strb.w	r3, [sp, #28]
 800d958:	f7ff fe10 	bl	800d57c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d95c:	4642      	mov	r2, r8
 800d95e:	4603      	mov	r3, r0
 800d960:	4639      	mov	r1, r7
 800d962:	4620      	mov	r0, r4
 800d964:	f7ff ffc0 	bl	800d8e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d968:	4b18      	ldr	r3, [pc, #96]	; (800d9cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 800d96a:	9004      	str	r0, [sp, #16]
 800d96c:	881b      	ldrh	r3, [r3, #0]
 800d96e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d972:	f7fa ffc1 	bl	80088f8 <_ZN8touchgfx3HAL3lcdEv>
 800d976:	6803      	ldr	r3, [r0, #0]
 800d978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d97a:	4798      	blx	r3
 800d97c:	f88d 001e 	strb.w	r0, [sp, #30]
 800d980:	f88d 001d 	strb.w	r0, [sp, #29]
 800d984:	b106      	cbz	r6, 800d988 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800d986:	b935      	cbnz	r5, 800d996 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800d988:	4b11      	ldr	r3, [pc, #68]	; (800d9d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800d98a:	f240 11f1 	movw	r1, #497	; 0x1f1
 800d98e:	4a11      	ldr	r2, [pc, #68]	; (800d9d4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800d990:	4811      	ldr	r0, [pc, #68]	; (800d9d8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800d992:	f011 fb81 	bl	801f098 <__assert_func>
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	4620      	mov	r0, r4
 800d99a:	9d00      	ldr	r5, [sp, #0]
 800d99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d99e:	4798      	blx	r3
 800d9a0:	4228      	tst	r0, r5
 800d9a2:	d104      	bne.n	800d9ae <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800d9a4:	4b0d      	ldr	r3, [pc, #52]	; (800d9dc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800d9a6:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800d9aa:	4a0a      	ldr	r2, [pc, #40]	; (800d9d4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800d9ac:	e7f0      	b.n	800d990 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800d9ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d9b0:	4669      	mov	r1, sp
 800d9b2:	6860      	ldr	r0, [r4, #4]
 800d9b4:	9303      	str	r3, [sp, #12]
 800d9b6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d9ba:	f88d 301f 	strb.w	r3, [sp, #31]
 800d9be:	6803      	ldr	r3, [r0, #0]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	4798      	blx	r3
 800d9c4:	b008      	add	sp, #32
 800d9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ca:	bf00      	nop
 800d9cc:	20009f8e 	.word	0x20009f8e
 800d9d0:	080218d7 	.word	0x080218d7
 800d9d4:	08021ce3 	.word	0x08021ce3
 800d9d8:	08021a89 	.word	0x08021a89
 800d9dc:	0802190f 	.word	0x0802190f

0800d9e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800d9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9e2:	b08b      	sub	sp, #44	; 0x2c
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	466b      	mov	r3, sp
 800d9e8:	e883 0006 	stmia.w	r3, {r1, r2}
 800d9ec:	4b20      	ldr	r3, [pc, #128]	; (800da70 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	b933      	cbnz	r3, 800da00 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800d9f2:	4b20      	ldr	r3, [pc, #128]	; (800da74 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800d9f4:	f44f 7112 	mov.w	r1, #584	; 0x248
 800d9f8:	4a1f      	ldr	r2, [pc, #124]	; (800da78 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800d9fa:	4820      	ldr	r0, [pc, #128]	; (800da7c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800d9fc:	f011 fb4c 	bl	801f098 <__assert_func>
 800da00:	2301      	movs	r3, #1
 800da02:	2500      	movs	r5, #0
 800da04:	f8bd 6000 	ldrh.w	r6, [sp]
 800da08:	9302      	str	r3, [sp, #8]
 800da0a:	6803      	ldr	r3, [r0, #0]
 800da0c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800da10:	9505      	str	r5, [sp, #20]
 800da12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da14:	4798      	blx	r3
 800da16:	463a      	mov	r2, r7
 800da18:	4631      	mov	r1, r6
 800da1a:	4603      	mov	r3, r0
 800da1c:	4620      	mov	r0, r4
 800da1e:	f7ff ff63 	bl	800d8e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800da22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800da24:	9003      	str	r0, [sp, #12]
 800da26:	9306      	str	r3, [sp, #24]
 800da28:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800da2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800da30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800da34:	f8ad 301e 	strh.w	r3, [sp, #30]
 800da38:	4b11      	ldr	r3, [pc, #68]	; (800da80 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800da3a:	881b      	ldrh	r3, [r3, #0]
 800da3c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800da40:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800da44:	f7fa ff58 	bl	80088f8 <_ZN8touchgfx3HAL3lcdEv>
 800da48:	6803      	ldr	r3, [r0, #0]
 800da4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4c:	4798      	blx	r3
 800da4e:	23ff      	movs	r3, #255	; 0xff
 800da50:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800da54:	a902      	add	r1, sp, #8
 800da56:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800da5a:	6860      	ldr	r0, [r4, #4]
 800da5c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800da60:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 800da64:	6803      	ldr	r3, [r0, #0]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	4798      	blx	r3
 800da6a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800da6c:	b00b      	add	sp, #44	; 0x2c
 800da6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da70:	20009f93 	.word	0x20009f93
 800da74:	080219d6 	.word	0x080219d6
 800da78:	08021d8d 	.word	0x08021d8d
 800da7c:	08021a89 	.word	0x08021a89
 800da80:	20009f8e 	.word	0x20009f8e

0800da84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800da84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da88:	b08a      	sub	sp, #40	; 0x28
 800da8a:	2600      	movs	r6, #0
 800da8c:	4604      	mov	r4, r0
 800da8e:	466d      	mov	r5, sp
 800da90:	9605      	str	r6, [sp, #20]
 800da92:	e885 0006 	stmia.w	r5, {r1, r2}
 800da96:	461d      	mov	r5, r3
 800da98:	2301      	movs	r3, #1
 800da9a:	f8bd 7000 	ldrh.w	r7, [sp]
 800da9e:	9302      	str	r3, [sp, #8]
 800daa0:	6803      	ldr	r3, [r0, #0]
 800daa2:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800daa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daa8:	4798      	blx	r3
 800daaa:	4642      	mov	r2, r8
 800daac:	4639      	mov	r1, r7
 800daae:	4603      	mov	r3, r0
 800dab0:	4620      	mov	r0, r4
 800dab2:	f7ff ff19 	bl	800d8e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800dab6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800daba:	9003      	str	r0, [sp, #12]
 800dabc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800dac0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800dac4:	9506      	str	r5, [sp, #24]
 800dac6:	f8ad 301e 	strh.w	r3, [sp, #30]
 800daca:	4b0f      	ldr	r3, [pc, #60]	; (800db08 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 800dacc:	881b      	ldrh	r3, [r3, #0]
 800dace:	f8ad 3020 	strh.w	r3, [sp, #32]
 800dad2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dad4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800dad8:	f7fa ff0e 	bl	80088f8 <_ZN8touchgfx3HAL3lcdEv>
 800dadc:	6803      	ldr	r3, [r0, #0]
 800dade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae0:	4798      	blx	r3
 800dae2:	23ff      	movs	r3, #255	; 0xff
 800dae4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800dae8:	a902      	add	r1, sp, #8
 800daea:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800daee:	6860      	ldr	r0, [r4, #4]
 800daf0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800daf4:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 800daf8:	6803      	ldr	r3, [r0, #0]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	4798      	blx	r3
 800dafe:	4628      	mov	r0, r5
 800db00:	b00a      	add	sp, #40	; 0x28
 800db02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db06:	bf00      	nop
 800db08:	20009f8e 	.word	0x20009f8e

0800db0c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800db0c:	b570      	push	{r4, r5, r6, lr}
 800db0e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800db12:	4604      	mov	r4, r0
 800db14:	b19b      	cbz	r3, 800db3e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800db16:	2002      	movs	r0, #2
 800db18:	f7fd f826 	bl	800ab68 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800db1c:	2300      	movs	r3, #0
 800db1e:	4620      	mov	r0, r4
 800db20:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800db24:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800db28:	6823      	ldr	r3, [r4, #0]
 800db2a:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800db2e:	f7ff fd25 	bl	800d57c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800db32:	4601      	mov	r1, r0
 800db34:	4620      	mov	r0, r4
 800db36:	462b      	mov	r3, r5
 800db38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db3c:	4718      	bx	r3
 800db3e:	bd70      	pop	{r4, r5, r6, pc}

0800db40 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800db40:	b538      	push	{r3, r4, r5, lr}
 800db42:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 800db46:	4604      	mov	r4, r0
 800db48:	460d      	mov	r5, r1
 800db4a:	428a      	cmp	r2, r1
 800db4c:	d008      	beq.n	800db60 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 800db4e:	2a01      	cmp	r2, #1
 800db50:	6803      	ldr	r3, [r0, #0]
 800db52:	d106      	bne.n	800db62 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800db54:	b929      	cbnz	r1, 800db62 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800db56:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800db5a:	4798      	blx	r3
 800db5c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800db60:	bd38      	pop	{r3, r4, r5, pc}
 800db62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800db66:	4620      	mov	r0, r4
 800db68:	e7f7      	b.n	800db5a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

0800db6c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800db6c:	4b0d      	ldr	r3, [pc, #52]	; (800dba4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800db6e:	b510      	push	{r4, lr}
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	4604      	mov	r4, r0
 800db74:	b95b      	cbnz	r3, 800db8e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800db76:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	d007      	beq.n	800db8e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800db7e:	6840      	ldr	r0, [r0, #4]
 800db80:	f000 f936 	bl	800ddf0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800db84:	b118      	cbz	r0, 800db8e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800db86:	6862      	ldr	r2, [r4, #4]
 800db88:	7a53      	ldrb	r3, [r2, #9]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d0fc      	beq.n	800db88 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800db8e:	f7fd fa49 	bl	800b024 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800db92:	4620      	mov	r0, r4
 800db94:	2100      	movs	r1, #0
 800db96:	f7ff ffd3 	bl	800db40 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800db9a:	4620      	mov	r0, r4
 800db9c:	f7ff fcee 	bl	800d57c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dba0:	bd10      	pop	{r4, pc}
 800dba2:	bf00      	nop
 800dba4:	20009f92 	.word	0x20009f92

0800dba8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800dba8:	4770      	bx	lr

0800dbaa <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 800dbaa:	2000      	movs	r0, #0
 800dbac:	4770      	bx	lr

0800dbae <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800dbae:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800dbb2:	1a13      	subs	r3, r2, r0
 800dbb4:	4258      	negs	r0, r3
 800dbb6:	4158      	adcs	r0, r3
 800dbb8:	4770      	bx	lr

0800dbba <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800dbba:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800dbbe:	1a9b      	subs	r3, r3, r2
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	bfdc      	itt	le
 800dbc4:	6882      	ldrle	r2, [r0, #8]
 800dbc6:	189b      	addle	r3, r3, r2
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	bfcc      	ite	gt
 800dbcc:	2000      	movgt	r0, #0
 800dbce:	2001      	movle	r0, #1
 800dbd0:	4770      	bx	lr

0800dbd2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800dbd2:	6902      	ldr	r2, [r0, #16]
 800dbd4:	6840      	ldr	r0, [r0, #4]
 800dbd6:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800dbda:	4770      	bx	lr

0800dbdc <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800dbdc:	6803      	ldr	r3, [r0, #0]
 800dbde:	691b      	ldr	r3, [r3, #16]
 800dbe0:	4718      	bx	r3

0800dbe2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800dbe2:	4770      	bx	lr

0800dbe4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800dbe4:	4770      	bx	lr
	...

0800dbe8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800dbe8:	2301      	movs	r3, #1
 800dbea:	b570      	push	{r4, r5, r6, lr}
 800dbec:	7203      	strb	r3, [r0, #8]
 800dbee:	4604      	mov	r4, r0
 800dbf0:	6840      	ldr	r0, [r0, #4]
 800dbf2:	6803      	ldr	r3, [r0, #0]
 800dbf4:	699b      	ldr	r3, [r3, #24]
 800dbf6:	4798      	blx	r3
 800dbf8:	6803      	ldr	r3, [r0, #0]
 800dbfa:	4605      	mov	r5, r0
 800dbfc:	2b40      	cmp	r3, #64	; 0x40
 800dbfe:	d039      	beq.n	800dc74 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800dc00:	d815      	bhi.n	800dc2e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800dc02:	2b04      	cmp	r3, #4
 800dc04:	d022      	beq.n	800dc4c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800dc06:	d808      	bhi.n	800dc1a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d033      	beq.n	800dc74 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800dc0c:	2b02      	cmp	r3, #2
 800dc0e:	d108      	bne.n	800dc22 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800dc10:	6823      	ldr	r3, [r4, #0]
 800dc12:	4620      	mov	r0, r4
 800dc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc16:	4798      	blx	r3
 800dc18:	e025      	b.n	800dc66 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800dc1a:	2b08      	cmp	r3, #8
 800dc1c:	d01e      	beq.n	800dc5c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800dc1e:	2b20      	cmp	r3, #32
 800dc20:	d028      	beq.n	800dc74 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800dc22:	4b17      	ldr	r3, [pc, #92]	; (800dc80 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800dc24:	218b      	movs	r1, #139	; 0x8b
 800dc26:	4a17      	ldr	r2, [pc, #92]	; (800dc84 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800dc28:	4817      	ldr	r0, [pc, #92]	; (800dc88 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800dc2a:	f011 fa35 	bl	801f098 <__assert_func>
 800dc2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc32:	d01f      	beq.n	800dc74 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800dc34:	d804      	bhi.n	800dc40 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800dc36:	2b80      	cmp	r3, #128	; 0x80
 800dc38:	d01c      	beq.n	800dc74 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800dc3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc3e:	e7ef      	b.n	800dc20 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800dc40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc44:	d016      	beq.n	800dc74 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800dc46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc4a:	e7e0      	b.n	800dc0e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800dc4c:	6823      	ldr	r3, [r4, #0]
 800dc4e:	7f01      	ldrb	r1, [r0, #28]
 800dc50:	4620      	mov	r0, r4
 800dc52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc54:	4798      	blx	r3
 800dc56:	6823      	ldr	r3, [r4, #0]
 800dc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc5a:	e006      	b.n	800dc6a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	7f01      	ldrb	r1, [r0, #28]
 800dc60:	4620      	mov	r0, r4
 800dc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc64:	4798      	blx	r3
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc6a:	4629      	mov	r1, r5
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc72:	4718      	bx	r3
 800dc74:	6823      	ldr	r3, [r4, #0]
 800dc76:	4620      	mov	r0, r4
 800dc78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc7a:	4798      	blx	r3
 800dc7c:	e7eb      	b.n	800dc56 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800dc7e:	bf00      	nop
 800dc80:	08021ff2 	.word	0x08021ff2
 800dc84:	08022104 	.word	0x08022104
 800dc88:	08022017 	.word	0x08022017

0800dc8c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800dc8c:	b570      	push	{r4, r5, r6, lr}
 800dc8e:	4604      	mov	r4, r0
 800dc90:	460e      	mov	r6, r1
 800dc92:	6860      	ldr	r0, [r4, #4]
 800dc94:	6803      	ldr	r3, [r0, #0]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	4798      	blx	r3
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d1f9      	bne.n	800dc92 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800dc9e:	4d0d      	ldr	r5, [pc, #52]	; (800dcd4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800dca0:	6828      	ldr	r0, [r5, #0]
 800dca2:	6803      	ldr	r3, [r0, #0]
 800dca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dca6:	4798      	blx	r3
 800dca8:	f7fd f9d6 	bl	800b058 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800dcac:	6828      	ldr	r0, [r5, #0]
 800dcae:	2101      	movs	r1, #1
 800dcb0:	f7ff ff46 	bl	800db40 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800dcb4:	6860      	ldr	r0, [r4, #4]
 800dcb6:	4631      	mov	r1, r6
 800dcb8:	6803      	ldr	r3, [r0, #0]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	4798      	blx	r3
 800dcbe:	6823      	ldr	r3, [r4, #0]
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc4:	4798      	blx	r3
 800dcc6:	6828      	ldr	r0, [r5, #0]
 800dcc8:	6803      	ldr	r3, [r0, #0]
 800dcca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcd0:	4718      	bx	r3
 800dcd2:	bf00      	nop
 800dcd4:	20009f94 	.word	0x20009f94

0800dcd8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800dcd8:	b508      	push	{r3, lr}
 800dcda:	f7fd f9a3 	bl	800b024 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800dcde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dce2:	f7fd b9ad 	b.w	800b040 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800dce6 <_ZN8touchgfx13DMA_Interface5startEv>:
 800dce6:	b510      	push	{r4, lr}
 800dce8:	4604      	mov	r4, r0
 800dcea:	6840      	ldr	r0, [r0, #4]
 800dcec:	6803      	ldr	r3, [r0, #0]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4798      	blx	r3
 800dcf2:	b948      	cbnz	r0, 800dd08 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800dcf4:	7a63      	ldrb	r3, [r4, #9]
 800dcf6:	b13b      	cbz	r3, 800dd08 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800dcf8:	7a23      	ldrb	r3, [r4, #8]
 800dcfa:	b92b      	cbnz	r3, 800dd08 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800dcfc:	6823      	ldr	r3, [r4, #0]
 800dcfe:	4620      	mov	r0, r4
 800dd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd06:	4718      	bx	r3
 800dd08:	bd10      	pop	{r4, pc}
	...

0800dd0c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800dd0c:	b570      	push	{r4, r5, r6, lr}
 800dd0e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800dd12:	4606      	mov	r6, r0
 800dd14:	1a9b      	subs	r3, r3, r2
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	bfdc      	itt	le
 800dd1a:	6880      	ldrle	r0, [r0, #8]
 800dd1c:	181b      	addle	r3, r3, r0
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	dd13      	ble.n	800dd4a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 800dd22:	6874      	ldr	r4, [r6, #4]
 800dd24:	460d      	mov	r5, r1
 800dd26:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 800dd2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800dd32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dd36:	68f3      	ldr	r3, [r6, #12]
 800dd38:	68b2      	ldr	r2, [r6, #8]
 800dd3a:	f3bf 8f5b 	dmb	ish
 800dd3e:	3301      	adds	r3, #1
 800dd40:	429a      	cmp	r2, r3
 800dd42:	bfd8      	it	le
 800dd44:	1a9b      	suble	r3, r3, r2
 800dd46:	60f3      	str	r3, [r6, #12]
 800dd48:	bd70      	pop	{r4, r5, r6, pc}
 800dd4a:	4b03      	ldr	r3, [pc, #12]	; (800dd58 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 800dd4c:	2139      	movs	r1, #57	; 0x39
 800dd4e:	4a03      	ldr	r2, [pc, #12]	; (800dd5c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800dd50:	4803      	ldr	r0, [pc, #12]	; (800dd60 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800dd52:	f011 f9a1 	bl	801f098 <__assert_func>
 800dd56:	bf00      	nop
 800dd58:	0802203d 	.word	0x0802203d
 800dd5c:	08022134 	.word	0x08022134
 800dd60:	08022017 	.word	0x08022017

0800dd64 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800dd64:	b510      	push	{r4, lr}
 800dd66:	6803      	ldr	r3, [r0, #0]
 800dd68:	4604      	mov	r4, r0
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4798      	blx	r3
 800dd6e:	b128      	cbz	r0, 800dd7c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800dd70:	4b07      	ldr	r3, [pc, #28]	; (800dd90 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800dd72:	213f      	movs	r1, #63	; 0x3f
 800dd74:	4a07      	ldr	r2, [pc, #28]	; (800dd94 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800dd76:	4808      	ldr	r0, [pc, #32]	; (800dd98 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800dd78:	f011 f98e 	bl	801f098 <__assert_func>
 800dd7c:	6923      	ldr	r3, [r4, #16]
 800dd7e:	68a2      	ldr	r2, [r4, #8]
 800dd80:	f3bf 8f5b 	dmb	ish
 800dd84:	3301      	adds	r3, #1
 800dd86:	429a      	cmp	r2, r3
 800dd88:	bfd8      	it	le
 800dd8a:	1a9b      	suble	r3, r3, r2
 800dd8c:	6123      	str	r3, [r4, #16]
 800dd8e:	bd10      	pop	{r4, pc}
 800dd90:	08022060 	.word	0x08022060
 800dd94:	08022182 	.word	0x08022182
 800dd98:	08022017 	.word	0x08022017

0800dd9c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800dd9c:	b570      	push	{r4, r5, r6, lr}
 800dd9e:	4604      	mov	r4, r0
 800dda0:	6840      	ldr	r0, [r0, #4]
 800dda2:	6803      	ldr	r3, [r0, #0]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4798      	blx	r3
 800dda8:	4605      	mov	r5, r0
 800ddaa:	b930      	cbnz	r0, 800ddba <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ddac:	7a23      	ldrb	r3, [r4, #8]
 800ddae:	b123      	cbz	r3, 800ddba <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ddb0:	6860      	ldr	r0, [r4, #4]
 800ddb2:	6803      	ldr	r3, [r0, #0]
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	4798      	blx	r3
 800ddb8:	7225      	strb	r5, [r4, #8]
 800ddba:	6860      	ldr	r0, [r4, #4]
 800ddbc:	6803      	ldr	r3, [r0, #0]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4798      	blx	r3
 800ddc2:	b928      	cbnz	r0, 800ddd0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800ddc4:	6823      	ldr	r3, [r4, #0]
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddce:	4718      	bx	r3
 800ddd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddd4:	f7fd b94c 	b.w	800b070 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800ddd8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800ddd8:	b510      	push	{r4, lr}
 800ddda:	6082      	str	r2, [r0, #8]
 800dddc:	2200      	movs	r2, #0
 800ddde:	4c03      	ldr	r4, [pc, #12]	; (800ddec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800dde0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800dde4:	e9c0 4100 	strd	r4, r1, [r0]
 800dde8:	bd10      	pop	{r4, pc}
 800ddea:	bf00      	nop
 800ddec:	080220e8 	.word	0x080220e8

0800ddf0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800ddf0:	6840      	ldr	r0, [r0, #4]
 800ddf2:	6803      	ldr	r3, [r0, #0]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4718      	bx	r3

0800ddf8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800ddf8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800ddfc:	4770      	bx	lr

0800ddfe <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800ddfe:	b510      	push	{r4, lr}
 800de00:	4604      	mov	r4, r0
 800de02:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800de04:	b150      	cbz	r0, 800de1c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800de06:	6803      	ldr	r3, [r0, #0]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	4798      	blx	r3
 800de0c:	b130      	cbz	r0, 800de1c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800de0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800de10:	4621      	mov	r1, r4
 800de12:	6803      	ldr	r3, [r0, #0]
 800de14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	4718      	bx	r3
 800de1c:	bd10      	pop	{r4, pc}

0800de1e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 800de1e:	790b      	ldrb	r3, [r1, #4]
 800de20:	2b00      	cmp	r3, #0
 800de22:	bf0c      	ite	eq
 800de24:	2301      	moveq	r3, #1
 800de26:	2300      	movne	r3, #0
 800de28:	b570      	push	{r4, r5, r6, lr}
 800de2a:	4604      	mov	r4, r0
 800de2c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800de30:	460e      	mov	r6, r1
 800de32:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 800de36:	d109      	bne.n	800de4c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 800de38:	b14d      	cbz	r5, 800de4e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 800de3a:	7933      	ldrb	r3, [r6, #4]
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d10c      	bne.n	800de5a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800de40:	6823      	ldr	r3, [r4, #0]
 800de42:	4620      	mov	r0, r4
 800de44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de4a:	4718      	bx	r3
 800de4c:	b12d      	cbz	r5, 800de5a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800de4e:	6823      	ldr	r3, [r4, #0]
 800de50:	4620      	mov	r0, r4
 800de52:	695b      	ldr	r3, [r3, #20]
 800de54:	4798      	blx	r3
 800de56:	2d00      	cmp	r5, #0
 800de58:	d1ef      	bne.n	800de3a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 800de5a:	bd70      	pop	{r4, r5, r6, pc}

0800de5c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800de5c:	2200      	movs	r2, #0
 800de5e:	8002      	strh	r2, [r0, #0]
 800de60:	8042      	strh	r2, [r0, #2]
 800de62:	8082      	strh	r2, [r0, #4]
 800de64:	80c2      	strh	r2, [r0, #6]
 800de66:	4770      	bx	lr

0800de68 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800de68:	b570      	push	{r4, r5, r6, lr}
 800de6a:	6803      	ldr	r3, [r0, #0]
 800de6c:	4604      	mov	r4, r0
 800de6e:	4615      	mov	r5, r2
 800de70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de72:	4798      	blx	r3
 800de74:	6823      	ldr	r3, [r4, #0]
 800de76:	4629      	mov	r1, r5
 800de78:	4620      	mov	r0, r4
 800de7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de80:	4718      	bx	r3
	...

0800de84 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800de84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de8a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800de8c:	4299      	cmp	r1, r3
 800de8e:	d029      	beq.n	800dee4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 800de90:	4b15      	ldr	r3, [pc, #84]	; (800dee8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	b92b      	cbnz	r3, 800dea2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 800de96:	4b15      	ldr	r3, [pc, #84]	; (800deec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800de98:	21ae      	movs	r1, #174	; 0xae
 800de9a:	4a15      	ldr	r2, [pc, #84]	; (800def0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800de9c:	4815      	ldr	r0, [pc, #84]	; (800def4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800de9e:	f011 f8fb 	bl	801f098 <__assert_func>
 800dea2:	4a15      	ldr	r2, [pc, #84]	; (800def8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 800dea4:	8812      	ldrh	r2, [r2, #0]
 800dea6:	428a      	cmp	r2, r1
 800dea8:	d803      	bhi.n	800deb2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 800deaa:	4b14      	ldr	r3, [pc, #80]	; (800defc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 800deac:	21af      	movs	r1, #175	; 0xaf
 800deae:	4a10      	ldr	r2, [pc, #64]	; (800def0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800deb0:	e7f4      	b.n	800de9c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 800deb2:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800deb6:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800deba:	4b11      	ldr	r3, [pc, #68]	; (800df00 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 800debc:	7854      	ldrb	r4, [r2, #1]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800dec4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800dec8:	682b      	ldr	r3, [r5, #0]
 800deca:	69de      	ldr	r6, [r3, #28]
 800decc:	4b0d      	ldr	r3, [pc, #52]	; (800df04 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 800dece:	6818      	ldr	r0, [r3, #0]
 800ded0:	f7fc fb34 	bl	800a53c <_ZNK8touchgfx5Texts7getTextEt>
 800ded4:	2300      	movs	r3, #0
 800ded6:	4602      	mov	r2, r0
 800ded8:	4621      	mov	r1, r4
 800deda:	9300      	str	r3, [sp, #0]
 800dedc:	4628      	mov	r0, r5
 800dede:	47b0      	blx	r6
 800dee0:	b002      	add	sp, #8
 800dee2:	bd70      	pop	{r4, r5, r6, pc}
 800dee4:	2000      	movs	r0, #0
 800dee6:	e7fb      	b.n	800dee0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 800dee8:	20009fe4 	.word	0x20009fe4
 800deec:	08022220 	.word	0x08022220
 800def0:	08022358 	.word	0x08022358
 800def4:	08022262 	.word	0x08022262
 800def8:	20009fe8 	.word	0x20009fe8
 800defc:	0802228b 	.word	0x0802228b
 800df00:	20009fec 	.word	0x20009fec
 800df04:	20009ff0 	.word	0x20009ff0

0800df08 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800df08:	b570      	push	{r4, r5, r6, lr}
 800df0a:	6803      	ldr	r3, [r0, #0]
 800df0c:	4604      	mov	r4, r0
 800df0e:	b28d      	uxth	r5, r1
 800df10:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800df12:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800df14:	4b10      	ldr	r3, [pc, #64]	; (800df58 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	b92b      	cbnz	r3, 800df26 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 800df1a:	4b10      	ldr	r3, [pc, #64]	; (800df5c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800df1c:	21ae      	movs	r1, #174	; 0xae
 800df1e:	4a10      	ldr	r2, [pc, #64]	; (800df60 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800df20:	4810      	ldr	r0, [pc, #64]	; (800df64 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800df22:	f011 f8b9 	bl	801f098 <__assert_func>
 800df26:	4910      	ldr	r1, [pc, #64]	; (800df68 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800df28:	8809      	ldrh	r1, [r1, #0]
 800df2a:	4291      	cmp	r1, r2
 800df2c:	d803      	bhi.n	800df36 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800df2e:	4b0f      	ldr	r3, [pc, #60]	; (800df6c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800df30:	21af      	movs	r1, #175	; 0xaf
 800df32:	4a0b      	ldr	r2, [pc, #44]	; (800df60 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800df34:	e7f4      	b.n	800df20 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 800df36:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800df3a:	4b0d      	ldr	r3, [pc, #52]	; (800df70 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800df42:	6803      	ldr	r3, [r0, #0]
 800df44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df46:	4798      	blx	r3
 800df48:	1a29      	subs	r1, r5, r0
 800df4a:	4633      	mov	r3, r6
 800df4c:	4620      	mov	r0, r4
 800df4e:	b209      	sxth	r1, r1
 800df50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df54:	4718      	bx	r3
 800df56:	bf00      	nop
 800df58:	20009fe4 	.word	0x20009fe4
 800df5c:	08022220 	.word	0x08022220
 800df60:	08022358 	.word	0x08022358
 800df64:	08022262 	.word	0x08022262
 800df68:	20009fe8 	.word	0x20009fe8
 800df6c:	0802228b 	.word	0x0802228b
 800df70:	20009fec 	.word	0x20009fec

0800df74 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800df74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df7c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800df7e:	b08c      	sub	sp, #48	; 0x30
 800df80:	4604      	mov	r4, r0
 800df82:	4293      	cmp	r3, r2
 800df84:	4688      	mov	r8, r1
 800df86:	d05f      	beq.n	800e048 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800df88:	4e31      	ldr	r6, [pc, #196]	; (800e050 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 800df8a:	6832      	ldr	r2, [r6, #0]
 800df8c:	b92a      	cbnz	r2, 800df9a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 800df8e:	4b31      	ldr	r3, [pc, #196]	; (800e054 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 800df90:	21ae      	movs	r1, #174	; 0xae
 800df92:	4a31      	ldr	r2, [pc, #196]	; (800e058 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800df94:	4831      	ldr	r0, [pc, #196]	; (800e05c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 800df96:	f011 f87f 	bl	801f098 <__assert_func>
 800df9a:	4d31      	ldr	r5, [pc, #196]	; (800e060 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 800df9c:	8829      	ldrh	r1, [r5, #0]
 800df9e:	4299      	cmp	r1, r3
 800dfa0:	d803      	bhi.n	800dfaa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 800dfa2:	4b30      	ldr	r3, [pc, #192]	; (800e064 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 800dfa4:	21af      	movs	r1, #175	; 0xaf
 800dfa6:	4a2c      	ldr	r2, [pc, #176]	; (800e058 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800dfa8:	e7f4      	b.n	800df94 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 800dfaa:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800dfae:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800dfb2:	4b2d      	ldr	r3, [pc, #180]	; (800e068 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dfba:	2a00      	cmp	r2, #0
 800dfbc:	d044      	beq.n	800e048 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800dfbe:	784b      	ldrb	r3, [r1, #1]
 800dfc0:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 800dfc4:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 800dfc8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dfcc:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 800dfd0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800dfd4:	4b25      	ldr	r3, [pc, #148]	; (800e06c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 800dfd6:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 800dfe0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800dfe4:	9207      	str	r2, [sp, #28]
 800dfe6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800dfe8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800dfec:	f88d a020 	strb.w	sl, [sp, #32]
 800dff0:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 800dff4:	9009      	str	r0, [sp, #36]	; 0x24
 800dff6:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800dffa:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800dffe:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800e002:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800e006:	b10a      	cbz	r2, 800e00c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 800e008:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 800e00a:	b907      	cbnz	r7, 800e00e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 800e00c:	689f      	ldr	r7, [r3, #8]
 800e00e:	f10d 0914 	add.w	r9, sp, #20
 800e012:	4621      	mov	r1, r4
 800e014:	4648      	mov	r0, r9
 800e016:	f003 f81b 	bl	8011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e01a:	6833      	ldr	r3, [r6, #0]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d0b6      	beq.n	800df8e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 800e020:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800e022:	882b      	ldrh	r3, [r5, #0]
 800e024:	428b      	cmp	r3, r1
 800e026:	d9bc      	bls.n	800dfa2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 800e028:	4b11      	ldr	r3, [pc, #68]	; (800e070 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 800e02a:	6818      	ldr	r0, [r3, #0]
 800e02c:	f7fc fa86 	bl	800a53c <_ZNK8touchgfx5Texts7getTextEt>
 800e030:	2300      	movs	r3, #0
 800e032:	9001      	str	r0, [sp, #4]
 800e034:	4638      	mov	r0, r7
 800e036:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e03a:	ab07      	add	r3, sp, #28
 800e03c:	9300      	str	r3, [sp, #0]
 800e03e:	4643      	mov	r3, r8
 800e040:	e899 0006 	ldmia.w	r9, {r1, r2}
 800e044:	f7fc fa0b 	bl	800a45e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800e048:	b00c      	add	sp, #48	; 0x30
 800e04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e04e:	bf00      	nop
 800e050:	20009fe4 	.word	0x20009fe4
 800e054:	08022220 	.word	0x08022220
 800e058:	08022358 	.word	0x08022358
 800e05c:	08022262 	.word	0x08022262
 800e060:	20009fe8 	.word	0x20009fe8
 800e064:	0802228b 	.word	0x0802228b
 800e068:	20009fec 	.word	0x20009fec
 800e06c:	20009f94 	.word	0x20009f94
 800e070:	20009ff0 	.word	0x20009ff0

0800e074 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800e074:	b40e      	push	{r1, r2, r3}
 800e076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e07a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e07e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800e080:	b09c      	sub	sp, #112	; 0x70
 800e082:	4604      	mov	r4, r0
 800e084:	4293      	cmp	r3, r2
 800e086:	d06b      	beq.n	800e160 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 800e088:	aa26      	add	r2, sp, #152	; 0x98
 800e08a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800e174 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 800e08e:	9202      	str	r2, [sp, #8]
 800e090:	f8da 2000 	ldr.w	r2, [sl]
 800e094:	b92a      	cbnz	r2, 800e0a2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 800e096:	4b33      	ldr	r3, [pc, #204]	; (800e164 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 800e098:	21ae      	movs	r1, #174	; 0xae
 800e09a:	4a33      	ldr	r2, [pc, #204]	; (800e168 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800e09c:	4833      	ldr	r0, [pc, #204]	; (800e16c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 800e09e:	f010 fffb 	bl	801f098 <__assert_func>
 800e0a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800e178 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 800e0a6:	f8b8 1000 	ldrh.w	r1, [r8]
 800e0aa:	4299      	cmp	r1, r3
 800e0ac:	d803      	bhi.n	800e0b6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 800e0ae:	4b30      	ldr	r3, [pc, #192]	; (800e170 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 800e0b0:	21af      	movs	r1, #175	; 0xaf
 800e0b2:	4a2d      	ldr	r2, [pc, #180]	; (800e168 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800e0b4:	e7f2      	b.n	800e09c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 800e0b6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800e17c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 800e0ba:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e0be:	f8d9 3000 	ldr.w	r3, [r9]
 800e0c2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e0c6:	682b      	ldr	r3, [r5, #0]
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0cc:	4798      	blx	r3
 800e0ce:	4606      	mov	r6, r0
 800e0d0:	b207      	sxth	r7, r0
 800e0d2:	a803      	add	r0, sp, #12
 800e0d4:	f003 fb6c 	bl	80117b0 <_ZN8touchgfx12TextProviderC1Ev>
 800e0d8:	682b      	ldr	r3, [r5, #0]
 800e0da:	4628      	mov	r0, r5
 800e0dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0de:	4798      	blx	r3
 800e0e0:	682b      	ldr	r3, [r5, #0]
 800e0e2:	4683      	mov	fp, r0
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0e8:	4798      	blx	r3
 800e0ea:	465b      	mov	r3, fp
 800e0ec:	9000      	str	r0, [sp, #0]
 800e0ee:	a803      	add	r0, sp, #12
 800e0f0:	9925      	ldr	r1, [sp, #148]	; 0x94
 800e0f2:	9a02      	ldr	r2, [sp, #8]
 800e0f4:	f003 fbaf 	bl	8011856 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e0f8:	f8da 3000 	ldr.w	r3, [sl]
 800e0fc:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800e100:	2b00      	cmp	r3, #0
 800e102:	d0c8      	beq.n	800e096 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 800e104:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800e106:	f8b8 0000 	ldrh.w	r0, [r8]
 800e10a:	4290      	cmp	r0, r2
 800e10c:	d9cf      	bls.n	800e0ae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 800e10e:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800e112:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800e116:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800e11a:	786a      	ldrb	r2, [r5, #1]
 800e11c:	8925      	ldrh	r5, [r4, #8]
 800e11e:	f8d9 3000 	ldr.w	r3, [r9]
 800e122:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800e126:	eba5 050c 	sub.w	r5, r5, ip
 800e12a:	b22d      	sxth	r5, r5
 800e12c:	9500      	str	r5, [sp, #0]
 800e12e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e132:	a803      	add	r0, sp, #12
 800e134:	f001 facd 	bl	800f6d2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800e138:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800e13c:	b203      	sxth	r3, r0
 800e13e:	18b9      	adds	r1, r7, r2
 800e140:	2900      	cmp	r1, #0
 800e142:	dd0b      	ble.n	800e15c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 800e144:	3b01      	subs	r3, #1
 800e146:	fb13 f302 	smulbb	r3, r3, r2
 800e14a:	fb16 3300 	smlabb	r3, r6, r0, r3
 800e14e:	b21f      	sxth	r7, r3
 800e150:	4638      	mov	r0, r7
 800e152:	b01c      	add	sp, #112	; 0x70
 800e154:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e158:	b003      	add	sp, #12
 800e15a:	4770      	bx	lr
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	dcf7      	bgt.n	800e150 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800e160:	2700      	movs	r7, #0
 800e162:	e7f5      	b.n	800e150 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800e164:	08022220 	.word	0x08022220
 800e168:	08022358 	.word	0x08022358
 800e16c:	08022262 	.word	0x08022262
 800e170:	0802228b 	.word	0x0802228b
 800e174:	20009fe4 	.word	0x20009fe4
 800e178:	20009fe8 	.word	0x20009fe8
 800e17c:	20009fec 	.word	0x20009fec

0800e180 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 800e180:	b570      	push	{r4, r5, r6, lr}
 800e182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e186:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e188:	4604      	mov	r4, r0
 800e18a:	4299      	cmp	r1, r3
 800e18c:	d01e      	beq.n	800e1cc <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 800e18e:	6803      	ldr	r3, [r0, #0]
 800e190:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800e192:	4b0f      	ldr	r3, [pc, #60]	; (800e1d0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	b92b      	cbnz	r3, 800e1a4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 800e198:	4b0e      	ldr	r3, [pc, #56]	; (800e1d4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 800e19a:	21ae      	movs	r1, #174	; 0xae
 800e19c:	4a0e      	ldr	r2, [pc, #56]	; (800e1d8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800e19e:	480f      	ldr	r0, [pc, #60]	; (800e1dc <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 800e1a0:	f010 ff7a 	bl	801f098 <__assert_func>
 800e1a4:	4b0e      	ldr	r3, [pc, #56]	; (800e1e0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	428b      	cmp	r3, r1
 800e1aa:	d803      	bhi.n	800e1b4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 800e1ac:	4b0d      	ldr	r3, [pc, #52]	; (800e1e4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 800e1ae:	21af      	movs	r1, #175	; 0xaf
 800e1b0:	4a09      	ldr	r2, [pc, #36]	; (800e1d8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800e1b2:	e7f4      	b.n	800e19e <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 800e1b4:	4b0c      	ldr	r3, [pc, #48]	; (800e1e8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 800e1b6:	6818      	ldr	r0, [r3, #0]
 800e1b8:	f7fc f9c0 	bl	800a53c <_ZNK8touchgfx5Texts7getTextEt>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	4601      	mov	r1, r0
 800e1c0:	46ac      	mov	ip, r5
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1ca:	4760      	bx	ip
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	bd70      	pop	{r4, r5, r6, pc}
 800e1d0:	20009fe4 	.word	0x20009fe4
 800e1d4:	08022220 	.word	0x08022220
 800e1d8:	08022358 	.word	0x08022358
 800e1dc:	08022262 	.word	0x08022262
 800e1e0:	20009fe8 	.word	0x20009fe8
 800e1e4:	0802228b 	.word	0x0802228b
 800e1e8:	20009ff0 	.word	0x20009ff0

0800e1ec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800e1ec:	b538      	push	{r3, r4, r5, lr}
 800e1ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1f2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800e1f4:	4604      	mov	r4, r0
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d014      	beq.n	800e224 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800e1fa:	6803      	ldr	r3, [r0, #0]
 800e1fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1fe:	4798      	blx	r3
 800e200:	6823      	ldr	r3, [r4, #0]
 800e202:	4605      	mov	r5, r0
 800e204:	4620      	mov	r0, r4
 800e206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e208:	4798      	blx	r3
 800e20a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e20e:	b22d      	sxth	r5, r5
 800e210:	4601      	mov	r1, r0
 800e212:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800e216:	bf06      	itte	eq
 800e218:	4602      	moveq	r2, r0
 800e21a:	4629      	moveq	r1, r5
 800e21c:	462a      	movne	r2, r5
 800e21e:	4620      	mov	r0, r4
 800e220:	f7fb f91a 	bl	8009458 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800e224:	bd38      	pop	{r3, r4, r5, pc}

0800e226 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800e226:	888a      	ldrh	r2, [r1, #4]
 800e228:	8582      	strh	r2, [r0, #44]	; 0x2c
 800e22a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800e22e:	b922      	cbnz	r2, 800e23a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800e230:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800e234:	b90b      	cbnz	r3, 800e23a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800e236:	f7ff bfd9 	b.w	800e1ec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800e23a:	4770      	bx	lr

0800e23c <_ZNK8touchgfx3Box12getSolidRectEv>:
 800e23c:	2300      	movs	r3, #0
 800e23e:	8083      	strh	r3, [r0, #4]
 800e240:	80c3      	strh	r3, [r0, #6]
 800e242:	8003      	strh	r3, [r0, #0]
 800e244:	8043      	strh	r3, [r0, #2]
 800e246:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800e24a:	2bff      	cmp	r3, #255	; 0xff
 800e24c:	bf01      	itttt	eq
 800e24e:	890b      	ldrheq	r3, [r1, #8]
 800e250:	8083      	strheq	r3, [r0, #4]
 800e252:	894b      	ldrheq	r3, [r1, #10]
 800e254:	80c3      	strheq	r3, [r0, #6]
 800e256:	4770      	bx	lr

0800e258 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800e258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e25a:	4604      	mov	r4, r0
 800e25c:	466b      	mov	r3, sp
 800e25e:	6808      	ldr	r0, [r1, #0]
 800e260:	6849      	ldr	r1, [r1, #4]
 800e262:	c303      	stmia	r3!, {r0, r1}
 800e264:	6823      	ldr	r3, [r4, #0]
 800e266:	4669      	mov	r1, sp
 800e268:	4620      	mov	r0, r4
 800e26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e26c:	4798      	blx	r3
 800e26e:	4b08      	ldr	r3, [pc, #32]	; (800e290 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800e276:	b10a      	cbz	r2, 800e27c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800e278:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e27a:	b900      	cbnz	r0, 800e27e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800e27c:	6898      	ldr	r0, [r3, #8]
 800e27e:	6803      	ldr	r3, [r0, #0]
 800e280:	4669      	mov	r1, sp
 800e282:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e284:	699d      	ldr	r5, [r3, #24]
 800e286:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800e28a:	47a8      	blx	r5
 800e28c:	b003      	add	sp, #12
 800e28e:	bd30      	pop	{r4, r5, pc}
 800e290:	20009f94 	.word	0x20009f94

0800e294 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800e294:	b570      	push	{r4, r5, r6, lr}
 800e296:	880b      	ldrh	r3, [r1, #0]
 800e298:	4605      	mov	r5, r0
 800e29a:	4604      	mov	r4, r0
 800e29c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800e29e:	8813      	ldrh	r3, [r2, #0]
 800e2a0:	f825 3f30 	strh.w	r3, [r5, #48]!
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	f004 fe85 	bl	8012fb4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e2aa:	4606      	mov	r6, r0
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	f004 febb 	bl	8013028 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e2b2:	6823      	ldr	r3, [r4, #0]
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	b231      	sxth	r1, r6
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2bc:	4798      	blx	r3
 800e2be:	6823      	ldr	r3, [r4, #0]
 800e2c0:	b229      	sxth	r1, r5
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e2ca:	4718      	bx	r3

0800e2cc <_ZNK8touchgfx6Button12getSolidRectEv>:
 800e2cc:	b510      	push	{r4, lr}
 800e2ce:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800e2d2:	4604      	mov	r4, r0
 800e2d4:	2bff      	cmp	r3, #255	; 0xff
 800e2d6:	d006      	beq.n	800e2e6 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800e2d8:	2300      	movs	r3, #0
 800e2da:	8003      	strh	r3, [r0, #0]
 800e2dc:	8043      	strh	r3, [r0, #2]
 800e2de:	8083      	strh	r3, [r0, #4]
 800e2e0:	80c3      	strh	r3, [r0, #6]
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	bd10      	pop	{r4, pc}
 800e2e6:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800e2ea:	b11b      	cbz	r3, 800e2f4 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800e2ec:	3130      	adds	r1, #48	; 0x30
 800e2ee:	f004 fed5 	bl	801309c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800e2f2:	e7f6      	b.n	800e2e2 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800e2f4:	312e      	adds	r1, #46	; 0x2e
 800e2f6:	e7fa      	b.n	800e2ee <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0800e2f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800e2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2fc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800e300:	b08a      	sub	sp, #40	; 0x28
 800e302:	4604      	mov	r4, r0
 800e304:	4688      	mov	r8, r1
 800e306:	2b00      	cmp	r3, #0
 800e308:	d044      	beq.n	800e394 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 800e30a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800e30c:	a805      	add	r0, sp, #20
 800e30e:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e312:	f004 fe4f 	bl	8012fb4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e316:	4605      	mov	r5, r0
 800e318:	b206      	sxth	r6, r0
 800e31a:	a805      	add	r0, sp, #20
 800e31c:	f004 fe84 	bl	8013028 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e320:	f9b8 2000 	ldrsh.w	r2, [r8]
 800e324:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 800e328:	2300      	movs	r3, #0
 800e32a:	fa0f fc80 	sxth.w	ip, r0
 800e32e:	4417      	add	r7, r2
 800e330:	9306      	str	r3, [sp, #24]
 800e332:	b2bf      	uxth	r7, r7
 800e334:	fa0f fe87 	sxth.w	lr, r7
 800e338:	459e      	cmp	lr, r3
 800e33a:	dd2d      	ble.n	800e398 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e33c:	4296      	cmp	r6, r2
 800e33e:	dd2b      	ble.n	800e398 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e340:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 800e344:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 800e348:	4419      	add	r1, r3
 800e34a:	b289      	uxth	r1, r1
 800e34c:	fa0f f881 	sxth.w	r8, r1
 800e350:	f1b8 0f00 	cmp.w	r8, #0
 800e354:	dd20      	ble.n	800e398 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e356:	459c      	cmp	ip, r3
 800e358:	dd1e      	ble.n	800e398 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 800e35a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800e35e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e362:	4576      	cmp	r6, lr
 800e364:	bfa8      	it	ge
 800e366:	463d      	movge	r5, r7
 800e368:	45c4      	cmp	ip, r8
 800e36a:	bfa8      	it	ge
 800e36c:	4608      	movge	r0, r1
 800e36e:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e372:	1aad      	subs	r5, r5, r2
 800e374:	1ac0      	subs	r0, r0, r3
 800e376:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e37a:	f8ad 501c 	strh.w	r5, [sp, #28]
 800e37e:	f8ad 001e 	strh.w	r0, [sp, #30]
 800e382:	4b1f      	ldr	r3, [pc, #124]	; (800e400 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	b953      	cbnz	r3, 800e39e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 800e388:	4b1e      	ldr	r3, [pc, #120]	; (800e404 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 800e38a:	2187      	movs	r1, #135	; 0x87
 800e38c:	4a1e      	ldr	r2, [pc, #120]	; (800e408 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 800e38e:	481f      	ldr	r0, [pc, #124]	; (800e40c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 800e390:	f010 fe82 	bl	801f098 <__assert_func>
 800e394:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800e396:	e7b9      	b.n	800e30c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800e398:	2300      	movs	r3, #0
 800e39a:	9307      	str	r3, [sp, #28]
 800e39c:	e7f1      	b.n	800e382 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800e39e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e3a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d026      	beq.n	800e3f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800e3aa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	dd22      	ble.n	800e3f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800e3b2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	dd1e      	ble.n	800e3f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	a908      	add	r1, sp, #32
 800e3be:	4620      	mov	r0, r4
 800e3c0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800e3c4:	6823      	ldr	r3, [r4, #0]
 800e3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c8:	4798      	blx	r3
 800e3ca:	4b11      	ldr	r3, [pc, #68]	; (800e410 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800e3d2:	b10a      	cbz	r2, 800e3d8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800e3d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e3d6:	b900      	cbnz	r0, 800e3da <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 800e3d8:	6898      	ldr	r0, [r3, #8]
 800e3da:	2501      	movs	r5, #1
 800e3dc:	6801      	ldr	r1, [r0, #0]
 800e3de:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800e3e2:	9502      	str	r5, [sp, #8]
 800e3e4:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800e3e8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800e3ec:	9401      	str	r4, [sp, #4]
 800e3ee:	ac06      	add	r4, sp, #24
 800e3f0:	9400      	str	r4, [sp, #0]
 800e3f2:	688c      	ldr	r4, [r1, #8]
 800e3f4:	a905      	add	r1, sp, #20
 800e3f6:	47a0      	blx	r4
 800e3f8:	b00a      	add	sp, #40	; 0x28
 800e3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3fe:	bf00      	nop
 800e400:	2000a01c 	.word	0x2000a01c
 800e404:	080223ec 	.word	0x080223ec
 800e408:	080224c0 	.word	0x080224c0
 800e40c:	08022428 	.word	0x08022428
 800e410:	20009f94 	.word	0x20009f94

0800e414 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 800e414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e41a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e41c:	4606      	mov	r6, r0
 800e41e:	4299      	cmp	r1, r3
 800e420:	d02a      	beq.n	800e478 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 800e422:	4b16      	ldr	r3, [pc, #88]	; (800e47c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	b92b      	cbnz	r3, 800e434 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 800e428:	4b15      	ldr	r3, [pc, #84]	; (800e480 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 800e42a:	21ae      	movs	r1, #174	; 0xae
 800e42c:	4a15      	ldr	r2, [pc, #84]	; (800e484 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800e42e:	4816      	ldr	r0, [pc, #88]	; (800e488 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 800e430:	f010 fe32 	bl	801f098 <__assert_func>
 800e434:	4a15      	ldr	r2, [pc, #84]	; (800e48c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 800e436:	8812      	ldrh	r2, [r2, #0]
 800e438:	428a      	cmp	r2, r1
 800e43a:	d803      	bhi.n	800e444 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 800e43c:	4b14      	ldr	r3, [pc, #80]	; (800e490 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 800e43e:	21af      	movs	r1, #175	; 0xaf
 800e440:	4a10      	ldr	r2, [pc, #64]	; (800e484 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 800e442:	e7f4      	b.n	800e42e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 800e444:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800e448:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800e44c:	4b11      	ldr	r3, [pc, #68]	; (800e494 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 800e44e:	7854      	ldrb	r4, [r2, #1]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800e456:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800e45a:	682b      	ldr	r3, [r5, #0]
 800e45c:	69df      	ldr	r7, [r3, #28]
 800e45e:	4b0e      	ldr	r3, [pc, #56]	; (800e498 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 800e460:	6818      	ldr	r0, [r3, #0]
 800e462:	f7fc f86b 	bl	800a53c <_ZNK8touchgfx5Texts7getTextEt>
 800e466:	2300      	movs	r3, #0
 800e468:	4602      	mov	r2, r0
 800e46a:	4621      	mov	r1, r4
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	4628      	mov	r0, r5
 800e470:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800e472:	47b8      	blx	r7
 800e474:	b003      	add	sp, #12
 800e476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e478:	2000      	movs	r0, #0
 800e47a:	e7fb      	b.n	800e474 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 800e47c:	20009fe4 	.word	0x20009fe4
 800e480:	08022220 	.word	0x08022220
 800e484:	0802256c 	.word	0x0802256c
 800e488:	08022262 	.word	0x08022262
 800e48c:	20009fe8 	.word	0x20009fe8
 800e490:	0802228b 	.word	0x0802228b
 800e494:	20009fec 	.word	0x20009fec
 800e498:	20009ff0 	.word	0x20009ff0

0800e49c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 800e49c:	b570      	push	{r4, r5, r6, lr}
 800e49e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e4a2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	4299      	cmp	r1, r3
 800e4a8:	d01e      	beq.n	800e4e8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 800e4aa:	6803      	ldr	r3, [r0, #0]
 800e4ac:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800e4ae:	4b0f      	ldr	r3, [pc, #60]	; (800e4ec <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	b92b      	cbnz	r3, 800e4c0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 800e4b4:	4b0e      	ldr	r3, [pc, #56]	; (800e4f0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 800e4b6:	21ae      	movs	r1, #174	; 0xae
 800e4b8:	4a0e      	ldr	r2, [pc, #56]	; (800e4f4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800e4ba:	480f      	ldr	r0, [pc, #60]	; (800e4f8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 800e4bc:	f010 fdec 	bl	801f098 <__assert_func>
 800e4c0:	4b0e      	ldr	r3, [pc, #56]	; (800e4fc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 800e4c2:	881b      	ldrh	r3, [r3, #0]
 800e4c4:	428b      	cmp	r3, r1
 800e4c6:	d803      	bhi.n	800e4d0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 800e4c8:	4b0d      	ldr	r3, [pc, #52]	; (800e500 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 800e4ca:	21af      	movs	r1, #175	; 0xaf
 800e4cc:	4a09      	ldr	r2, [pc, #36]	; (800e4f4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800e4ce:	e7f4      	b.n	800e4ba <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 800e4d0:	4b0c      	ldr	r3, [pc, #48]	; (800e504 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 800e4d2:	6818      	ldr	r0, [r3, #0]
 800e4d4:	f7fc f832 	bl	800a53c <_ZNK8touchgfx5Texts7getTextEt>
 800e4d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e4da:	4601      	mov	r1, r0
 800e4dc:	46ac      	mov	ip, r5
 800e4de:	4620      	mov	r0, r4
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4e6:	4760      	bx	ip
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	bd70      	pop	{r4, r5, r6, pc}
 800e4ec:	20009fe4 	.word	0x20009fe4
 800e4f0:	08022220 	.word	0x08022220
 800e4f4:	0802256c 	.word	0x0802256c
 800e4f8:	08022262 	.word	0x08022262
 800e4fc:	20009fe8 	.word	0x20009fe8
 800e500:	0802228b 	.word	0x0802228b
 800e504:	20009ff0 	.word	0x20009ff0

0800e508 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 800e508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e50c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e510:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800e512:	b08c      	sub	sp, #48	; 0x30
 800e514:	4604      	mov	r4, r0
 800e516:	4293      	cmp	r3, r2
 800e518:	460e      	mov	r6, r1
 800e51a:	d05d      	beq.n	800e5d8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 800e51c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800e5fc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 800e520:	f8d8 2000 	ldr.w	r2, [r8]
 800e524:	b92a      	cbnz	r2, 800e532 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 800e526:	4b2e      	ldr	r3, [pc, #184]	; (800e5e0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 800e528:	21ae      	movs	r1, #174	; 0xae
 800e52a:	4a2e      	ldr	r2, [pc, #184]	; (800e5e4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 800e52c:	482e      	ldr	r0, [pc, #184]	; (800e5e8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 800e52e:	f010 fdb3 	bl	801f098 <__assert_func>
 800e532:	4f2e      	ldr	r7, [pc, #184]	; (800e5ec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 800e534:	8839      	ldrh	r1, [r7, #0]
 800e536:	4299      	cmp	r1, r3
 800e538:	d803      	bhi.n	800e542 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 800e53a:	4b2d      	ldr	r3, [pc, #180]	; (800e5f0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 800e53c:	21af      	movs	r1, #175	; 0xaf
 800e53e:	4a29      	ldr	r2, [pc, #164]	; (800e5e4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 800e540:	e7f4      	b.n	800e52c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 800e542:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800e546:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e54a:	4b2a      	ldr	r3, [pc, #168]	; (800e5f4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e552:	2a00      	cmp	r2, #0
 800e554:	d040      	beq.n	800e5d8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 800e556:	784b      	ldrb	r3, [r1, #1]
 800e558:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 800e55c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800e560:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 800e564:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 800e568:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e56c:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 800e570:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 800e574:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e578:	ad05      	add	r5, sp, #20
 800e57a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e57c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800e580:	9207      	str	r2, [sp, #28]
 800e582:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 800e586:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800e58a:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800e58e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800e592:	f88d a020 	strb.w	sl, [sp, #32]
 800e596:	9009      	str	r0, [sp, #36]	; 0x24
 800e598:	f7fa f9ae 	bl	80088f8 <_ZN8touchgfx3HAL3lcdEv>
 800e59c:	4621      	mov	r1, r4
 800e59e:	4681      	mov	r9, r0
 800e5a0:	4628      	mov	r0, r5
 800e5a2:	f002 fd55 	bl	8011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e5a6:	f8d8 3000 	ldr.w	r3, [r8]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d0bb      	beq.n	800e526 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 800e5ae:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800e5b0:	883b      	ldrh	r3, [r7, #0]
 800e5b2:	428b      	cmp	r3, r1
 800e5b4:	d9c1      	bls.n	800e53a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 800e5b6:	4b10      	ldr	r3, [pc, #64]	; (800e5f8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 800e5b8:	6818      	ldr	r0, [r3, #0]
 800e5ba:	f7fb ffbf 	bl	800a53c <_ZNK8touchgfx5Texts7getTextEt>
 800e5be:	2300      	movs	r3, #0
 800e5c0:	9303      	str	r3, [sp, #12]
 800e5c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e5c4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800e5c8:	ab07      	add	r3, sp, #28
 800e5ca:	4648      	mov	r0, r9
 800e5cc:	9300      	str	r3, [sp, #0]
 800e5ce:	4633      	mov	r3, r6
 800e5d0:	e895 0006 	ldmia.w	r5, {r1, r2}
 800e5d4:	f7fb ff43 	bl	800a45e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800e5d8:	b00c      	add	sp, #48	; 0x30
 800e5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5de:	bf00      	nop
 800e5e0:	08022220 	.word	0x08022220
 800e5e4:	0802256c 	.word	0x0802256c
 800e5e8:	08022262 	.word	0x08022262
 800e5ec:	20009fe8 	.word	0x20009fe8
 800e5f0:	0802228b 	.word	0x0802228b
 800e5f4:	20009fec 	.word	0x20009fec
 800e5f8:	20009ff0 	.word	0x20009ff0
 800e5fc:	20009fe4 	.word	0x20009fe4

0800e600 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800e600:	b570      	push	{r4, r5, r6, lr}
 800e602:	880b      	ldrh	r3, [r1, #0]
 800e604:	460d      	mov	r5, r1
 800e606:	4604      	mov	r4, r0
 800e608:	84c3      	strh	r3, [r0, #38]	; 0x26
 800e60a:	4608      	mov	r0, r1
 800e60c:	f004 fcd2 	bl	8012fb4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e610:	4606      	mov	r6, r0
 800e612:	4628      	mov	r0, r5
 800e614:	f004 fd08 	bl	8013028 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e618:	6823      	ldr	r3, [r4, #0]
 800e61a:	4605      	mov	r5, r0
 800e61c:	b231      	sxth	r1, r6
 800e61e:	4620      	mov	r0, r4
 800e620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e622:	4798      	blx	r3
 800e624:	6823      	ldr	r3, [r4, #0]
 800e626:	b229      	sxth	r1, r5
 800e628:	4620      	mov	r0, r4
 800e62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e62c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e630:	4718      	bx	r3

0800e632 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800e632:	b510      	push	{r4, lr}
 800e634:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800e638:	4604      	mov	r4, r0
 800e63a:	2bff      	cmp	r3, #255	; 0xff
 800e63c:	d006      	beq.n	800e64c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800e63e:	2300      	movs	r3, #0
 800e640:	8003      	strh	r3, [r0, #0]
 800e642:	8043      	strh	r3, [r0, #2]
 800e644:	8083      	strh	r3, [r0, #4]
 800e646:	80c3      	strh	r3, [r0, #6]
 800e648:	4620      	mov	r0, r4
 800e64a:	bd10      	pop	{r4, pc}
 800e64c:	3126      	adds	r1, #38	; 0x26
 800e64e:	f004 fd25 	bl	801309c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800e652:	e7f9      	b.n	800e648 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800e654 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800e654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e658:	4604      	mov	r4, r0
 800e65a:	b088      	sub	sp, #32
 800e65c:	2500      	movs	r5, #0
 800e65e:	460f      	mov	r7, r1
 800e660:	f854 3b26 	ldr.w	r3, [r4], #38
 800e664:	a904      	add	r1, sp, #16
 800e666:	4606      	mov	r6, r0
 800e668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e66a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e66e:	4798      	blx	r3
 800e670:	4620      	mov	r0, r4
 800e672:	f004 fc9f 	bl	8012fb4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e676:	4680      	mov	r8, r0
 800e678:	4620      	mov	r0, r4
 800e67a:	f004 fcd5 	bl	8013028 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e67e:	9506      	str	r5, [sp, #24]
 800e680:	ad06      	add	r5, sp, #24
 800e682:	f8ad 001e 	strh.w	r0, [sp, #30]
 800e686:	4639      	mov	r1, r7
 800e688:	f8ad 801c 	strh.w	r8, [sp, #28]
 800e68c:	4628      	mov	r0, r5
 800e68e:	f7fe fae1 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 800e692:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800e696:	2b00      	cmp	r3, #0
 800e698:	dd19      	ble.n	800e6ce <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800e69a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	dd15      	ble.n	800e6ce <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800e6a2:	4b0c      	ldr	r3, [pc, #48]	; (800e6d4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800e6aa:	b10a      	cbz	r2, 800e6b0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800e6ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e6ae:	b900      	cbnz	r0, 800e6b2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800e6b0:	6898      	ldr	r0, [r3, #8]
 800e6b2:	2701      	movs	r7, #1
 800e6b4:	6801      	ldr	r1, [r0, #0]
 800e6b6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800e6ba:	9702      	str	r7, [sp, #8]
 800e6bc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800e6c0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800e6c4:	e9cd 5600 	strd	r5, r6, [sp]
 800e6c8:	688d      	ldr	r5, [r1, #8]
 800e6ca:	4621      	mov	r1, r4
 800e6cc:	47a8      	blx	r5
 800e6ce:	b008      	add	sp, #32
 800e6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d4:	20009f94 	.word	0x20009f94

0800e6d8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800e6d8:	b510      	push	{r4, lr}
 800e6da:	6803      	ldr	r3, [r0, #0]
 800e6dc:	460c      	mov	r4, r1
 800e6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e0:	4798      	blx	r3
 800e6e2:	1b03      	subs	r3, r0, r4
 800e6e4:	4258      	negs	r0, r3
 800e6e6:	4158      	adcs	r0, r3
 800e6e8:	bd10      	pop	{r4, pc}
	...

0800e6ec <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800e6ec:	4b01      	ldr	r3, [pc, #4]	; (800e6f4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800e6ee:	6019      	str	r1, [r3, #0]
 800e6f0:	4770      	bx	lr
 800e6f2:	bf00      	nop
 800e6f4:	20009f9c 	.word	0x20009f9c

0800e6f8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	4696      	mov	lr, r2
 800e6fe:	b097      	sub	sp, #92	; 0x5c
 800e700:	4605      	mov	r5, r0
 800e702:	4614      	mov	r4, r2
 800e704:	460e      	mov	r6, r1
 800e706:	461f      	mov	r7, r3
 800e708:	f10d 0c1c 	add.w	ip, sp, #28
 800e70c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800e710:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800e714:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800e718:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e71c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e720:	f8de 3000 	ldr.w	r3, [lr]
 800e724:	f104 0e14 	add.w	lr, r4, #20
 800e728:	f8cc 3000 	str.w	r3, [ip]
 800e72c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800e730:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e734:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e738:	f8de 3000 	ldr.w	r3, [lr]
 800e73c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800e740:	f8cc 3000 	str.w	r3, [ip]
 800e744:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800e748:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e74c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e750:	f8de 3000 	ldr.w	r3, [lr]
 800e754:	4631      	mov	r1, r6
 800e756:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e758:	4628      	mov	r0, r5
 800e75a:	f8cc 3000 	str.w	r3, [ip]
 800e75e:	682b      	ldr	r3, [r5, #0]
 800e760:	9201      	str	r2, [sp, #4]
 800e762:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e764:	f8cd 8008 	str.w	r8, [sp, #8]
 800e768:	9200      	str	r2, [sp, #0]
 800e76a:	aa07      	add	r2, sp, #28
 800e76c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800e770:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 800e774:	463b      	mov	r3, r7
 800e776:	47d8      	blx	fp
 800e778:	46a6      	mov	lr, r4
 800e77a:	f10d 0c1c 	add.w	ip, sp, #28
 800e77e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e782:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e786:	f8de 3000 	ldr.w	r3, [lr]
 800e78a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800e78e:	343c      	adds	r4, #60	; 0x3c
 800e790:	f8cc 3000 	str.w	r3, [ip]
 800e794:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800e798:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e79c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7a0:	f8de 3000 	ldr.w	r3, [lr]
 800e7a4:	f8cc 3000 	str.w	r3, [ip]
 800e7a8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800e7ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7b2:	6823      	ldr	r3, [r4, #0]
 800e7b4:	4631      	mov	r1, r6
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	f8cc 3000 	str.w	r3, [ip]
 800e7bc:	682b      	ldr	r3, [r5, #0]
 800e7be:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800e7c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7c4:	f8cd 8008 	str.w	r8, [sp, #8]
 800e7c8:	9201      	str	r2, [sp, #4]
 800e7ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e7cc:	9200      	str	r2, [sp, #0]
 800e7ce:	aa07      	add	r2, sp, #28
 800e7d0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800e7d2:	463b      	mov	r3, r7
 800e7d4:	47a0      	blx	r4
 800e7d6:	b017      	add	sp, #92	; 0x5c
 800e7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7dc <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800e7dc:	2000      	movs	r0, #0
 800e7de:	4770      	bx	lr

0800e7e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800e7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e4:	b08d      	sub	sp, #52	; 0x34
 800e7e6:	4688      	mov	r8, r1
 800e7e8:	f8d3 c000 	ldr.w	ip, [r3]
 800e7ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e7ee:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800e7f2:	680f      	ldr	r7, [r1, #0]
 800e7f4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800e7f8:	eba7 070c 	sub.w	r7, r7, ip
 800e7fc:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800e800:	edd3 6a07 	vldr	s13, [r3, #28]
 800e804:	42bc      	cmp	r4, r7
 800e806:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e808:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800e80c:	bfa8      	it	ge
 800e80e:	463c      	movge	r4, r7
 800e810:	f9b1 9000 	ldrsh.w	r9, [r1]
 800e814:	f9ba 1000 	ldrsh.w	r1, [sl]
 800e818:	ee07 4a90 	vmov	s15, r4
 800e81c:	eb09 0e0c 	add.w	lr, r9, ip
 800e820:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800e824:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800e828:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800e82c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800e830:	4571      	cmp	r1, lr
 800e832:	ee25 4a04 	vmul.f32	s8, s10, s8
 800e836:	ee65 4a24 	vmul.f32	s9, s10, s9
 800e83a:	ee25 5a27 	vmul.f32	s10, s10, s15
 800e83e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e842:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800e846:	ee32 1a05 	vadd.f32	s2, s4, s10
 800e84a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e84e:	ee36 0a84 	vadd.f32	s0, s13, s8
 800e852:	ee61 1a87 	vmul.f32	s3, s3, s14
 800e856:	ee22 2a07 	vmul.f32	s4, s4, s14
 800e85a:	f340 808c 	ble.w	800e976 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800e85e:	eba1 060e 	sub.w	r6, r1, lr
 800e862:	fb96 f5f4 	sdiv	r5, r6, r4
 800e866:	ee07 5a10 	vmov	s14, r5
 800e86a:	2d00      	cmp	r5, #0
 800e86c:	fb04 6615 	mls	r6, r4, r5, r6
 800e870:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e874:	eea7 0a04 	vfma.f32	s0, s14, s8
 800e878:	eee7 0a24 	vfma.f32	s1, s14, s9
 800e87c:	eea7 1a05 	vfma.f32	s2, s14, s10
 800e880:	dd12      	ble.n	800e8a8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800e882:	ee70 6a44 	vsub.f32	s13, s0, s8
 800e886:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800e88a:	ee31 2a45 	vsub.f32	s4, s2, s10
 800e88e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e896:	bf14      	ite	ne
 800e898:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800e89c:	eeb0 7a67 	vmoveq.f32	s14, s15
 800e8a0:	ee61 1a87 	vmul.f32	s3, s3, s14
 800e8a4:	ee22 2a07 	vmul.f32	s4, s4, s14
 800e8a8:	fb05 f204 	mul.w	r2, r5, r4
 800e8ac:	1abf      	subs	r7, r7, r2
 800e8ae:	4494      	add	ip, r2
 800e8b0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800e8b4:	4411      	add	r1, r2
 800e8b6:	eb09 020c 	add.w	r2, r9, ip
 800e8ba:	b209      	sxth	r1, r1
 800e8bc:	443a      	add	r2, r7
 800e8be:	428a      	cmp	r2, r1
 800e8c0:	bfc4      	itt	gt
 800e8c2:	eba1 0209 	subgt.w	r2, r1, r9
 800e8c6:	eba2 070c 	subgt.w	r7, r2, ip
 800e8ca:	2f00      	cmp	r7, #0
 800e8cc:	dd50      	ble.n	800e970 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800e8ce:	fb97 f1f4 	sdiv	r1, r7, r4
 800e8d2:	fb04 7211 	mls	r2, r4, r1, r7
 800e8d6:	b90a      	cbnz	r2, 800e8dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800e8d8:	3901      	subs	r1, #1
 800e8da:	4622      	mov	r2, r4
 800e8dc:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800e8e0:	6840      	ldr	r0, [r0, #4]
 800e8e2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800e8e6:	44b6      	add	lr, r6
 800e8e8:	f8d0 a000 	ldr.w	sl, [r0]
 800e8ec:	2900      	cmp	r1, #0
 800e8ee:	bfcc      	ite	gt
 800e8f0:	46a1      	movgt	r9, r4
 800e8f2:	4691      	movle	r9, r2
 800e8f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800e8f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e8f8:	fb04 e505 	mla	r5, r4, r5, lr
 800e8fc:	eef0 6a42 	vmov.f32	s13, s4
 800e900:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800e904:	9008      	str	r0, [sp, #32]
 800e906:	eeb0 7a61 	vmov.f32	s14, s3
 800e90a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e90c:	695b      	ldr	r3, [r3, #20]
 800e90e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800e912:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800e916:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800e91a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e91c:	445b      	add	r3, fp
 800e91e:	9307      	str	r3, [sp, #28]
 800e920:	ee16 3a90 	vmov	r3, s13
 800e924:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800e928:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800e92c:	ee21 3a23 	vmul.f32	s6, s2, s7
 800e930:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800e934:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800e938:	ee17 7a90 	vmov	r7, s15
 800e93c:	ee73 7a42 	vsub.f32	s15, s6, s4
 800e940:	fb97 f7f4 	sdiv	r7, r7, r4
 800e944:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800e948:	ee17 ca90 	vmov	ip, s15
 800e94c:	fb9c fcf4 	sdiv	ip, ip, r4
 800e950:	fb0c 3306 	mla	r3, ip, r6, r3
 800e954:	9302      	str	r3, [sp, #8]
 800e956:	ee17 3a10 	vmov	r3, s14
 800e95a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800e95e:	fb07 3706 	mla	r7, r7, r6, r3
 800e962:	eba9 0306 	sub.w	r3, r9, r6
 800e966:	e9cd 4700 	strd	r4, r7, [sp]
 800e96a:	f8da 4008 	ldr.w	r4, [sl, #8]
 800e96e:	47a0      	blx	r4
 800e970:	b00d      	add	sp, #52	; 0x34
 800e972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e976:	2500      	movs	r5, #0
 800e978:	462e      	mov	r6, r5
 800e97a:	e799      	b.n	800e8b0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800e97c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800e97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e980:	b0db      	sub	sp, #364	; 0x16c
 800e982:	461d      	mov	r5, r3
 800e984:	4614      	mov	r4, r2
 800e986:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800e98a:	910f      	str	r1, [sp, #60]	; 0x3c
 800e98c:	4629      	mov	r1, r5
 800e98e:	930a      	str	r3, [sp, #40]	; 0x28
 800e990:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800e994:	9009      	str	r0, [sp, #36]	; 0x24
 800e996:	930b      	str	r3, [sp, #44]	; 0x2c
 800e998:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800e99c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800e9a0:	9310      	str	r3, [sp, #64]	; 0x40
 800e9a2:	6803      	ldr	r3, [r0, #0]
 800e9a4:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800e9a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e9aa:	47b8      	blx	r7
 800e9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9ae:	6058      	str	r0, [r3, #4]
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	f000 83a1 	beq.w	800f0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e9b6:	682b      	ldr	r3, [r5, #0]
 800e9b8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800e9bc:	ed94 7a02 	vldr	s14, [r4, #8]
 800e9c0:	9314      	str	r3, [sp, #80]	; 0x50
 800e9c2:	686b      	ldr	r3, [r5, #4]
 800e9c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e9c8:	9315      	str	r3, [sp, #84]	; 0x54
 800e9ca:	4bc1      	ldr	r3, [pc, #772]	; (800ecd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800e9cc:	7819      	ldrb	r1, [r3, #0]
 800e9ce:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800e9d2:	2900      	cmp	r1, #0
 800e9d4:	bf16      	itet	ne
 800e9d6:	4619      	movne	r1, r3
 800e9d8:	4611      	moveq	r1, r2
 800e9da:	4613      	movne	r3, r2
 800e9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9e0:	9116      	str	r1, [sp, #88]	; 0x58
 800e9e2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800e9e6:	f240 8387 	bls.w	800f0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e9ea:	ed94 7a07 	vldr	s14, [r4, #28]
 800e9ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f6:	f240 837f 	bls.w	800f0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800e9fa:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800e9fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ea02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea06:	f240 8377 	bls.w	800f0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ea0a:	6822      	ldr	r2, [r4, #0]
 800ea0c:	4bb1      	ldr	r3, [pc, #708]	; (800ecd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	f2c0 8372 	blt.w	800f0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ea14:	49b0      	ldr	r1, [pc, #704]	; (800ecd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800ea16:	6963      	ldr	r3, [r4, #20]
 800ea18:	428a      	cmp	r2, r1
 800ea1a:	f300 836d 	bgt.w	800f0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ea1e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800ea22:	48ae      	ldr	r0, [pc, #696]	; (800ecdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800ea24:	33ff      	adds	r3, #255	; 0xff
 800ea26:	4283      	cmp	r3, r0
 800ea28:	f200 8366 	bhi.w	800f0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ea2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ea2e:	4dac      	ldr	r5, [pc, #688]	; (800ece0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800ea30:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800ea34:	33ff      	adds	r3, #255	; 0xff
 800ea36:	42ab      	cmp	r3, r5
 800ea38:	f200 835e 	bhi.w	800f0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ea3c:	6862      	ldr	r2, [r4, #4]
 800ea3e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800ea42:	33ff      	adds	r3, #255	; 0xff
 800ea44:	4283      	cmp	r3, r0
 800ea46:	f200 8357 	bhi.w	800f0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ea4a:	69a1      	ldr	r1, [r4, #24]
 800ea4c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800ea50:	33ff      	adds	r3, #255	; 0xff
 800ea52:	4283      	cmp	r3, r0
 800ea54:	f200 8350 	bhi.w	800f0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ea58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ea5a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800ea5e:	30ff      	adds	r0, #255	; 0xff
 800ea60:	42a8      	cmp	r0, r5
 800ea62:	f200 8349 	bhi.w	800f0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ea66:	428a      	cmp	r2, r1
 800ea68:	f280 8110 	bge.w	800ec8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	f300 8119 	bgt.w	800eca4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800ea72:	4299      	cmp	r1, r3
 800ea74:	f280 811d 	bge.w	800ecb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800ea78:	2502      	movs	r5, #2
 800ea7a:	2701      	movs	r7, #1
 800ea7c:	46a9      	mov	r9, r5
 800ea7e:	46b8      	mov	r8, r7
 800ea80:	f04f 0a00 	mov.w	sl, #0
 800ea84:	4621      	mov	r1, r4
 800ea86:	a849      	add	r0, sp, #292	; 0x124
 800ea88:	f003 fc62 	bl	8012350 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800ea8c:	4622      	mov	r2, r4
 800ea8e:	4653      	mov	r3, sl
 800ea90:	a949      	add	r1, sp, #292	; 0x124
 800ea92:	f8cd 9000 	str.w	r9, [sp]
 800ea96:	a819      	add	r0, sp, #100	; 0x64
 800ea98:	f003 fd8a 	bl	80125b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800ea9c:	4622      	mov	r2, r4
 800ea9e:	4653      	mov	r3, sl
 800eaa0:	a949      	add	r1, sp, #292	; 0x124
 800eaa2:	f8cd 8000 	str.w	r8, [sp]
 800eaa6:	a829      	add	r0, sp, #164	; 0xa4
 800eaa8:	f003 fd82 	bl	80125b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800eaac:	4643      	mov	r3, r8
 800eaae:	4622      	mov	r2, r4
 800eab0:	a949      	add	r1, sp, #292	; 0x124
 800eab2:	f8cd 9000 	str.w	r9, [sp]
 800eab6:	a839      	add	r0, sp, #228	; 0xe4
 800eab8:	f003 fd7a 	bl	80125b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800eabc:	42af      	cmp	r7, r5
 800eabe:	af12      	add	r7, sp, #72	; 0x48
 800eac0:	bfb7      	itett	lt
 800eac2:	2300      	movlt	r3, #0
 800eac4:	2301      	movge	r3, #1
 800eac6:	ad29      	addlt	r5, sp, #164	; 0xa4
 800eac8:	ac19      	addlt	r4, sp, #100	; 0x64
 800eaca:	bfb1      	iteee	lt
 800eacc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800eace:	ad19      	addge	r5, sp, #100	; 0x64
 800ead0:	930e      	strge	r3, [sp, #56]	; 0x38
 800ead2:	ac29      	addge	r4, sp, #164	; 0xa4
 800ead4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ead6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eada:	e887 0003 	stmia.w	r7, {r0, r1}
 800eade:	b928      	cbnz	r0, 800eaec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800eae0:	4b80      	ldr	r3, [pc, #512]	; (800ece4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800eae2:	6818      	ldr	r0, [r3, #0]
 800eae4:	6803      	ldr	r3, [r0, #0]
 800eae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae8:	4798      	blx	r3
 800eaea:	6038      	str	r0, [r7, #0]
 800eaec:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800eaee:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800eaf2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eaf6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800eaf8:	930c      	str	r3, [sp, #48]	; 0x30
 800eafa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eafc:	6963      	ldr	r3, [r4, #20]
 800eafe:	440b      	add	r3, r1
 800eb00:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800eb04:	4408      	add	r0, r1
 800eb06:	b200      	sxth	r0, r0
 800eb08:	4283      	cmp	r3, r0
 800eb0a:	900d      	str	r0, [sp, #52]	; 0x34
 800eb0c:	f280 80dd 	bge.w	800ecca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800eb10:	428b      	cmp	r3, r1
 800eb12:	da08      	bge.n	800eb26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800eb14:	2a00      	cmp	r2, #0
 800eb16:	dd06      	ble.n	800eb26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800eb18:	1acb      	subs	r3, r1, r3
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	f2c0 80e4 	blt.w	800ece8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f300 80e2 	bgt.w	800ecea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800eb26:	6967      	ldr	r7, [r4, #20]
 800eb28:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800eb2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb2e:	443b      	add	r3, r7
 800eb30:	461f      	mov	r7, r3
 800eb32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb34:	1bdf      	subs	r7, r3, r7
 800eb36:	4297      	cmp	r7, r2
 800eb38:	bfa8      	it	ge
 800eb3a:	4617      	movge	r7, r2
 800eb3c:	2f00      	cmp	r7, #0
 800eb3e:	f340 8166 	ble.w	800ee0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800eb42:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800eb44:	6829      	ldr	r1, [r5, #0]
 800eb46:	f9b3 2000 	ldrsh.w	r2, [r3]
 800eb4a:	f9bb 3000 	ldrsh.w	r3, [fp]
 800eb4e:	4411      	add	r1, r2
 800eb50:	6820      	ldr	r0, [r4, #0]
 800eb52:	4299      	cmp	r1, r3
 800eb54:	dd1a      	ble.n	800eb8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800eb56:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800eb5a:	4402      	add	r2, r0
 800eb5c:	440b      	add	r3, r1
 800eb5e:	b21b      	sxth	r3, r3
 800eb60:	429a      	cmp	r2, r3
 800eb62:	dc13      	bgt.n	800eb8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800eb64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eb66:	a912      	add	r1, sp, #72	; 0x48
 800eb68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	9206      	str	r2, [sp, #24]
 800eb70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb72:	9500      	str	r5, [sp, #0]
 800eb74:	9205      	str	r2, [sp, #20]
 800eb76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb78:	e9cd b203 	strd	fp, r2, [sp, #12]
 800eb7c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800eb7e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800eb82:	aa49      	add	r2, sp, #292	; 0x124
 800eb84:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800eb88:	4623      	mov	r3, r4
 800eb8a:	47c8      	blx	r9
 800eb8c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800eb90:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800eb94:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800eb98:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eb9c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800eba0:	68a1      	ldr	r1, [r4, #8]
 800eba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eba6:	ed94 6a08 	vldr	s12, [r4, #32]
 800ebaa:	edd4 6a07 	vldr	s13, [r4, #28]
 800ebae:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800ebb2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ebb6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800ebba:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ebbe:	edc4 6a07 	vstr	s13, [r4, #28]
 800ebc2:	441a      	add	r2, r3
 800ebc4:	6963      	ldr	r3, [r4, #20]
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	6022      	str	r2, [r4, #0]
 800ebca:	6163      	str	r3, [r4, #20]
 800ebcc:	69a3      	ldr	r3, [r4, #24]
 800ebce:	3b01      	subs	r3, #1
 800ebd0:	61a3      	str	r3, [r4, #24]
 800ebd2:	6923      	ldr	r3, [r4, #16]
 800ebd4:	440b      	add	r3, r1
 800ebd6:	68e1      	ldr	r1, [r4, #12]
 800ebd8:	428b      	cmp	r3, r1
 800ebda:	6123      	str	r3, [r4, #16]
 800ebdc:	db15      	blt.n	800ec0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800ebde:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800ebe2:	3201      	adds	r2, #1
 800ebe4:	1a5b      	subs	r3, r3, r1
 800ebe6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ebea:	6022      	str	r2, [r4, #0]
 800ebec:	6123      	str	r3, [r4, #16]
 800ebee:	edc4 6a07 	vstr	s13, [r4, #28]
 800ebf2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800ebf6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ebfa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800ebfe:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800ec02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec06:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800ec0a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800ec0e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800ec12:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800ec16:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec1a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800ec1e:	68a9      	ldr	r1, [r5, #8]
 800ec20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec24:	ed95 6a08 	vldr	s12, [r5, #32]
 800ec28:	edd5 6a07 	vldr	s13, [r5, #28]
 800ec2c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800ec30:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ec34:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800ec38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ec3c:	edc5 6a07 	vstr	s13, [r5, #28]
 800ec40:	441a      	add	r2, r3
 800ec42:	696b      	ldr	r3, [r5, #20]
 800ec44:	3301      	adds	r3, #1
 800ec46:	602a      	str	r2, [r5, #0]
 800ec48:	616b      	str	r3, [r5, #20]
 800ec4a:	69ab      	ldr	r3, [r5, #24]
 800ec4c:	3b01      	subs	r3, #1
 800ec4e:	61ab      	str	r3, [r5, #24]
 800ec50:	692b      	ldr	r3, [r5, #16]
 800ec52:	440b      	add	r3, r1
 800ec54:	68e9      	ldr	r1, [r5, #12]
 800ec56:	428b      	cmp	r3, r1
 800ec58:	612b      	str	r3, [r5, #16]
 800ec5a:	db15      	blt.n	800ec88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800ec5c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800ec60:	3201      	adds	r2, #1
 800ec62:	1a5b      	subs	r3, r3, r1
 800ec64:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ec68:	602a      	str	r2, [r5, #0]
 800ec6a:	612b      	str	r3, [r5, #16]
 800ec6c:	edc5 6a07 	vstr	s13, [r5, #28]
 800ec70:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800ec74:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ec78:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800ec7c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800ec80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec84:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800ec88:	3f01      	subs	r7, #1
 800ec8a:	e757      	b.n	800eb3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800ec8c:	4299      	cmp	r1, r3
 800ec8e:	dc13      	bgt.n	800ecb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800ec90:	429a      	cmp	r2, r3
 800ec92:	da14      	bge.n	800ecbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800ec94:	2502      	movs	r5, #2
 800ec96:	2703      	movs	r7, #3
 800ec98:	f04f 0800 	mov.w	r8, #0
 800ec9c:	46a9      	mov	r9, r5
 800ec9e:	f04f 0a01 	mov.w	sl, #1
 800eca2:	e6ef      	b.n	800ea84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800eca4:	2501      	movs	r5, #1
 800eca6:	2700      	movs	r7, #0
 800eca8:	46a9      	mov	r9, r5
 800ecaa:	46b8      	mov	r8, r7
 800ecac:	f04f 0a02 	mov.w	sl, #2
 800ecb0:	e6e8      	b.n	800ea84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800ecb2:	2501      	movs	r5, #1
 800ecb4:	2702      	movs	r7, #2
 800ecb6:	e6e1      	b.n	800ea7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800ecb8:	2500      	movs	r5, #0
 800ecba:	2701      	movs	r7, #1
 800ecbc:	e7f4      	b.n	800eca8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800ecbe:	2702      	movs	r7, #2
 800ecc0:	2503      	movs	r5, #3
 800ecc2:	f04f 0900 	mov.w	r9, #0
 800ecc6:	46b8      	mov	r8, r7
 800ecc8:	e7e9      	b.n	800ec9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800ecca:	4613      	mov	r3, r2
 800eccc:	e728      	b.n	800eb20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800ecce:	bf00      	nop
 800ecd0:	20009f8c 	.word	0x20009f8c
 800ecd4:	fffd8f01 	.word	0xfffd8f01
 800ecd8:	00027100 	.word	0x00027100
 800ecdc:	0004e1ff 	.word	0x0004e1ff
 800ece0:	0004e1fe 	.word	0x0004e1fe
 800ece4:	20009f94 	.word	0x20009f94
 800ece8:	4613      	mov	r3, r2
 800ecea:	992b      	ldr	r1, [sp, #172]	; 0xac
 800ecec:	469e      	mov	lr, r3
 800ecee:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800ecf0:	469c      	mov	ip, r3
 800ecf2:	9111      	str	r1, [sp, #68]	; 0x44
 800ecf4:	f04f 0900 	mov.w	r9, #0
 800ecf8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800ecfc:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800ed00:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800ed04:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800ed08:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800ed0c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800ed10:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800ed14:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800ed18:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800ed1c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800ed20:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800ed24:	f1bc 0f00 	cmp.w	ip, #0
 800ed28:	d147      	bne.n	800edba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800ed2a:	eb03 0c07 	add.w	ip, r3, r7
 800ed2e:	1ad7      	subs	r7, r2, r3
 800ed30:	f1b9 0f00 	cmp.w	r9, #0
 800ed34:	d009      	beq.n	800ed4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800ed36:	9029      	str	r0, [sp, #164]	; 0xa4
 800ed38:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800ed3c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800ed40:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800ed44:	912d      	str	r1, [sp, #180]	; 0xb4
 800ed46:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800ed4a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ed4c:	f04f 0800 	mov.w	r8, #0
 800ed50:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800ed54:	9111      	str	r1, [sp, #68]	; 0x44
 800ed56:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800ed5a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800ed5e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800ed62:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800ed66:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800ed6a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800ed6e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800ed72:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800ed76:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800ed7a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800ed7e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800ed82:	f1be 0f00 	cmp.w	lr, #0
 800ed86:	d031      	beq.n	800edec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800ed88:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ed8a:	4450      	add	r0, sl
 800ed8c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ed90:	4431      	add	r1, r6
 800ed92:	ee37 7a04 	vadd.f32	s14, s14, s8
 800ed96:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ed9a:	4549      	cmp	r1, r9
 800ed9c:	db08      	blt.n	800edb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800ed9e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800eda2:	3001      	adds	r0, #1
 800eda4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800eda8:	eba1 0109 	sub.w	r1, r1, r9
 800edac:	ee37 7a06 	vadd.f32	s14, s14, s12
 800edb0:	f10e 3eff 	add.w	lr, lr, #4294967295
 800edb4:	f04f 0801 	mov.w	r8, #1
 800edb8:	e7e3      	b.n	800ed82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800edba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800edbc:	4450      	add	r0, sl
 800edbe:	ee37 7a24 	vadd.f32	s14, s14, s9
 800edc2:	4431      	add	r1, r6
 800edc4:	ee77 7a84 	vadd.f32	s15, s15, s8
 800edc8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800edcc:	4541      	cmp	r1, r8
 800edce:	db08      	blt.n	800ede2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800edd0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800edd4:	3001      	adds	r0, #1
 800edd6:	ee37 7a25 	vadd.f32	s14, s14, s11
 800edda:	eba1 0108 	sub.w	r1, r1, r8
 800edde:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ede2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ede6:	f04f 0901 	mov.w	r9, #1
 800edea:	e79b      	b.n	800ed24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800edec:	449c      	add	ip, r3
 800edee:	1aff      	subs	r7, r7, r3
 800edf0:	f1b8 0f00 	cmp.w	r8, #0
 800edf4:	d009      	beq.n	800ee0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800edf6:	9019      	str	r0, [sp, #100]	; 0x64
 800edf8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800edfc:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800ee00:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800ee04:	911d      	str	r1, [sp, #116]	; 0x74
 800ee06:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800ee0a:	1ad2      	subs	r2, r2, r3
 800ee0c:	e68b      	b.n	800eb26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800ee0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee10:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f000 80d1 	beq.w	800efba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800ee18:	ad19      	add	r5, sp, #100	; 0x64
 800ee1a:	ac39      	add	r4, sp, #228	; 0xe4
 800ee1c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800ee1e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800ee22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ee26:	930c      	str	r3, [sp, #48]	; 0x30
 800ee28:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ee2a:	6963      	ldr	r3, [r4, #20]
 800ee2c:	440b      	add	r3, r1
 800ee2e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800ee32:	4408      	add	r0, r1
 800ee34:	b200      	sxth	r0, r0
 800ee36:	4283      	cmp	r3, r0
 800ee38:	900d      	str	r0, [sp, #52]	; 0x34
 800ee3a:	f280 80c1 	bge.w	800efc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800ee3e:	428b      	cmp	r3, r1
 800ee40:	da08      	bge.n	800ee54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800ee42:	2a00      	cmp	r2, #0
 800ee44:	dd06      	ble.n	800ee54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800ee46:	1acb      	subs	r3, r1, r3
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	f2c0 80bb 	blt.w	800efc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	f300 80b9 	bgt.w	800efc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800ee54:	6967      	ldr	r7, [r4, #20]
 800ee56:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800ee5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee5c:	443b      	add	r3, r7
 800ee5e:	461f      	mov	r7, r3
 800ee60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee62:	1bdf      	subs	r7, r3, r7
 800ee64:	4297      	cmp	r7, r2
 800ee66:	bfa8      	it	ge
 800ee68:	4617      	movge	r7, r2
 800ee6a:	2f00      	cmp	r7, #0
 800ee6c:	f340 813c 	ble.w	800f0e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800ee70:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800ee72:	6829      	ldr	r1, [r5, #0]
 800ee74:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ee78:	f9bb 3000 	ldrsh.w	r3, [fp]
 800ee7c:	4411      	add	r1, r2
 800ee7e:	6820      	ldr	r0, [r4, #0]
 800ee80:	4299      	cmp	r1, r3
 800ee82:	dd1a      	ble.n	800eeba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800ee84:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800ee88:	4402      	add	r2, r0
 800ee8a:	440b      	add	r3, r1
 800ee8c:	b21b      	sxth	r3, r3
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	dc13      	bgt.n	800eeba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800ee92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee94:	a912      	add	r1, sp, #72	; 0x48
 800ee96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	9206      	str	r2, [sp, #24]
 800ee9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eea0:	9500      	str	r5, [sp, #0]
 800eea2:	9205      	str	r2, [sp, #20]
 800eea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eea6:	e9cd b203 	strd	fp, r2, [sp, #12]
 800eeaa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800eeac:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800eeb0:	aa49      	add	r2, sp, #292	; 0x124
 800eeb2:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800eeb6:	4623      	mov	r3, r4
 800eeb8:	47c8      	blx	r9
 800eeba:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800eebe:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800eec2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800eec6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eeca:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800eece:	68a1      	ldr	r1, [r4, #8]
 800eed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eed4:	ed94 6a08 	vldr	s12, [r4, #32]
 800eed8:	edd4 6a07 	vldr	s13, [r4, #28]
 800eedc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800eee0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800eee4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800eee8:	e9d4 2300 	ldrd	r2, r3, [r4]
 800eeec:	edc4 6a07 	vstr	s13, [r4, #28]
 800eef0:	441a      	add	r2, r3
 800eef2:	6963      	ldr	r3, [r4, #20]
 800eef4:	3301      	adds	r3, #1
 800eef6:	6022      	str	r2, [r4, #0]
 800eef8:	6163      	str	r3, [r4, #20]
 800eefa:	69a3      	ldr	r3, [r4, #24]
 800eefc:	3b01      	subs	r3, #1
 800eefe:	61a3      	str	r3, [r4, #24]
 800ef00:	6923      	ldr	r3, [r4, #16]
 800ef02:	440b      	add	r3, r1
 800ef04:	68e1      	ldr	r1, [r4, #12]
 800ef06:	428b      	cmp	r3, r1
 800ef08:	6123      	str	r3, [r4, #16]
 800ef0a:	db15      	blt.n	800ef38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800ef0c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800ef10:	3201      	adds	r2, #1
 800ef12:	1a5b      	subs	r3, r3, r1
 800ef14:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ef18:	6022      	str	r2, [r4, #0]
 800ef1a:	6123      	str	r3, [r4, #16]
 800ef1c:	edc4 6a07 	vstr	s13, [r4, #28]
 800ef20:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800ef24:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ef28:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800ef2c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800ef30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef34:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800ef38:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800ef3c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800ef40:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800ef44:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef48:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800ef4c:	68a9      	ldr	r1, [r5, #8]
 800ef4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef52:	ed95 6a08 	vldr	s12, [r5, #32]
 800ef56:	edd5 6a07 	vldr	s13, [r5, #28]
 800ef5a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800ef5e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ef62:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800ef66:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ef6a:	edc5 6a07 	vstr	s13, [r5, #28]
 800ef6e:	441a      	add	r2, r3
 800ef70:	696b      	ldr	r3, [r5, #20]
 800ef72:	3301      	adds	r3, #1
 800ef74:	602a      	str	r2, [r5, #0]
 800ef76:	616b      	str	r3, [r5, #20]
 800ef78:	69ab      	ldr	r3, [r5, #24]
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	61ab      	str	r3, [r5, #24]
 800ef7e:	692b      	ldr	r3, [r5, #16]
 800ef80:	440b      	add	r3, r1
 800ef82:	68e9      	ldr	r1, [r5, #12]
 800ef84:	428b      	cmp	r3, r1
 800ef86:	612b      	str	r3, [r5, #16]
 800ef88:	db15      	blt.n	800efb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800ef8a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800ef8e:	3201      	adds	r2, #1
 800ef90:	1a5b      	subs	r3, r3, r1
 800ef92:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ef96:	602a      	str	r2, [r5, #0]
 800ef98:	612b      	str	r3, [r5, #16]
 800ef9a:	edc5 6a07 	vstr	s13, [r5, #28]
 800ef9e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800efa2:	ee36 7a87 	vadd.f32	s14, s13, s14
 800efa6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800efaa:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800efae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efb2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800efb6:	3f01      	subs	r7, #1
 800efb8:	e757      	b.n	800ee6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800efba:	ad39      	add	r5, sp, #228	; 0xe4
 800efbc:	ac19      	add	r4, sp, #100	; 0x64
 800efbe:	e72d      	b.n	800ee1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800efc0:	4613      	mov	r3, r2
 800efc2:	e744      	b.n	800ee4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800efc4:	4613      	mov	r3, r2
 800efc6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800efc8:	469e      	mov	lr, r3
 800efca:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800efce:	461f      	mov	r7, r3
 800efd0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800efd4:	f04f 0900 	mov.w	r9, #0
 800efd8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800efdc:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800efe0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800efe4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800efe8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800efec:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800efee:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800eff2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800eff6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800effa:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800effe:	960e      	str	r6, [sp, #56]	; 0x38
 800f000:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800f004:	2f00      	cmp	r7, #0
 800f006:	d146      	bne.n	800f096 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800f008:	449c      	add	ip, r3
 800f00a:	1ad7      	subs	r7, r2, r3
 800f00c:	f1b9 0f00 	cmp.w	r9, #0
 800f010:	d009      	beq.n	800f026 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800f012:	9039      	str	r0, [sp, #228]	; 0xe4
 800f014:	913d      	str	r1, [sp, #244]	; 0xf4
 800f016:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800f01a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800f01e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800f022:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800f026:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f028:	f04f 0800 	mov.w	r8, #0
 800f02c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800f030:	910e      	str	r1, [sp, #56]	; 0x38
 800f032:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800f036:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800f03a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800f03e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800f042:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800f046:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800f04a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800f04e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800f052:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800f056:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800f05a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800f05e:	f1be 0f00 	cmp.w	lr, #0
 800f062:	d030      	beq.n	800f0c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800f064:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f066:	4450      	add	r0, sl
 800f068:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f06c:	4431      	add	r1, r6
 800f06e:	ee37 7a04 	vadd.f32	s14, s14, s8
 800f072:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f076:	4549      	cmp	r1, r9
 800f078:	db08      	blt.n	800f08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800f07a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800f07e:	3001      	adds	r0, #1
 800f080:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f084:	eba1 0109 	sub.w	r1, r1, r9
 800f088:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f08c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800f090:	f04f 0801 	mov.w	r8, #1
 800f094:	e7e3      	b.n	800f05e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800f096:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f098:	4450      	add	r0, sl
 800f09a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f09e:	4431      	add	r1, r6
 800f0a0:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f0a4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800f0a8:	4541      	cmp	r1, r8
 800f0aa:	db08      	blt.n	800f0be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800f0ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f0b0:	3001      	adds	r0, #1
 800f0b2:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f0b6:	eba1 0108 	sub.w	r1, r1, r8
 800f0ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f0be:	3f01      	subs	r7, #1
 800f0c0:	f04f 0901 	mov.w	r9, #1
 800f0c4:	e79e      	b.n	800f004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800f0c6:	449c      	add	ip, r3
 800f0c8:	1aff      	subs	r7, r7, r3
 800f0ca:	f1b8 0f00 	cmp.w	r8, #0
 800f0ce:	d009      	beq.n	800f0e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800f0d0:	9019      	str	r0, [sp, #100]	; 0x64
 800f0d2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800f0d6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800f0da:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800f0de:	911d      	str	r1, [sp, #116]	; 0x74
 800f0e0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800f0e4:	1ad2      	subs	r2, r2, r3
 800f0e6:	e6b5      	b.n	800ee54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f0e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	b923      	cbnz	r3, 800f0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0ee:	4b04      	ldr	r3, [pc, #16]	; (800f100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800f0f0:	6818      	ldr	r0, [r3, #0]
 800f0f2:	6803      	ldr	r3, [r0, #0]
 800f0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f6:	4798      	blx	r3
 800f0f8:	b05b      	add	sp, #364	; 0x16c
 800f0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0fe:	bf00      	nop
 800f100:	20009f94 	.word	0x20009f94

0800f104 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800f104:	b570      	push	{r4, r5, r6, lr}
 800f106:	4604      	mov	r4, r0
 800f108:	2500      	movs	r5, #0
 800f10a:	9804      	ldr	r0, [sp, #16]
 800f10c:	7223      	strb	r3, [r4, #8]
 800f10e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800f112:	8025      	strh	r5, [r4, #0]
 800f114:	6061      	str	r1, [r4, #4]
 800f116:	7263      	strb	r3, [r4, #9]
 800f118:	60e0      	str	r0, [r4, #12]
 800f11a:	8222      	strh	r2, [r4, #16]
 800f11c:	8265      	strh	r5, [r4, #18]
 800f11e:	82a5      	strh	r5, [r4, #20]
 800f120:	82e5      	strh	r5, [r4, #22]
 800f122:	8325      	strh	r5, [r4, #24]
 800f124:	8365      	strh	r5, [r4, #26]
 800f126:	83a5      	strh	r5, [r4, #28]
 800f128:	77a5      	strb	r5, [r4, #30]
 800f12a:	6803      	ldr	r3, [r0, #0]
 800f12c:	695b      	ldr	r3, [r3, #20]
 800f12e:	4798      	blx	r3
 800f130:	4606      	mov	r6, r0
 800f132:	b1f8      	cbz	r0, 800f174 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800f134:	68e0      	ldr	r0, [r4, #12]
 800f136:	4631      	mov	r1, r6
 800f138:	6803      	ldr	r3, [r0, #0]
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	4798      	blx	r3
 800f13e:	7b43      	ldrb	r3, [r0, #13]
 800f140:	7a82      	ldrb	r2, [r0, #10]
 800f142:	4605      	mov	r5, r0
 800f144:	005b      	lsls	r3, r3, #1
 800f146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f14a:	4313      	orrs	r3, r2
 800f14c:	83a3      	strh	r3, [r4, #28]
 800f14e:	7a63      	ldrb	r3, [r4, #9]
 800f150:	2b04      	cmp	r3, #4
 800f152:	d10f      	bne.n	800f174 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800f154:	68e0      	ldr	r0, [r4, #12]
 800f156:	462a      	mov	r2, r5
 800f158:	4631      	mov	r1, r6
 800f15a:	6803      	ldr	r3, [r0, #0]
 800f15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f15e:	4798      	blx	r3
 800f160:	7b6b      	ldrb	r3, [r5, #13]
 800f162:	005b      	lsls	r3, r3, #1
 800f164:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f168:	7aab      	ldrb	r3, [r5, #10]
 800f16a:	4313      	orrs	r3, r2
 800f16c:	4418      	add	r0, r3
 800f16e:	8ba3      	ldrh	r3, [r4, #28]
 800f170:	4418      	add	r0, r3
 800f172:	83a0      	strh	r0, [r4, #28]
 800f174:	4620      	mov	r0, r4
 800f176:	bd70      	pop	{r4, r5, r6, pc}

0800f178 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800f178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f17c:	2400      	movs	r4, #0
 800f17e:	b085      	sub	sp, #20
 800f180:	4681      	mov	r9, r0
 800f182:	4688      	mov	r8, r1
 800f184:	4692      	mov	sl, r2
 800f186:	469b      	mov	fp, r3
 800f188:	4627      	mov	r7, r4
 800f18a:	4625      	mov	r5, r4
 800f18c:	4626      	mov	r6, r4
 800f18e:	4554      	cmp	r4, sl
 800f190:	da2a      	bge.n	800f1e8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f192:	2300      	movs	r3, #0
 800f194:	9303      	str	r3, [sp, #12]
 800f196:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f19a:	429d      	cmp	r5, r3
 800f19c:	d004      	beq.n	800f1a8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800f19e:	f242 030b 	movw	r3, #8203	; 0x200b
 800f1a2:	429d      	cmp	r5, r3
 800f1a4:	bf18      	it	ne
 800f1a6:	462f      	movne	r7, r5
 800f1a8:	ab03      	add	r3, sp, #12
 800f1aa:	4642      	mov	r2, r8
 800f1ac:	4659      	mov	r1, fp
 800f1ae:	4648      	mov	r0, r9
 800f1b0:	f002 fe52 	bl	8011e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f1b4:	4605      	mov	r5, r0
 800f1b6:	b1b8      	cbz	r0, 800f1e8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f1b8:	280a      	cmp	r0, #10
 800f1ba:	d015      	beq.n	800f1e8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800f1bc:	9a03      	ldr	r2, [sp, #12]
 800f1be:	b18a      	cbz	r2, 800f1e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800f1c0:	7b50      	ldrb	r0, [r2, #13]
 800f1c2:	4639      	mov	r1, r7
 800f1c4:	7a93      	ldrb	r3, [r2, #10]
 800f1c6:	0040      	lsls	r0, r0, #1
 800f1c8:	8895      	ldrh	r5, [r2, #4]
 800f1ca:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800f1ce:	4303      	orrs	r3, r0
 800f1d0:	4640      	mov	r0, r8
 800f1d2:	9301      	str	r3, [sp, #4]
 800f1d4:	f8d8 3000 	ldr.w	r3, [r8]
 800f1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1da:	4798      	blx	r3
 800f1dc:	9b01      	ldr	r3, [sp, #4]
 800f1de:	4418      	add	r0, r3
 800f1e0:	4406      	add	r6, r0
 800f1e2:	b2b6      	uxth	r6, r6
 800f1e4:	3401      	adds	r4, #1
 800f1e6:	e7d2      	b.n	800f18e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800f1e8:	4630      	mov	r0, r6
 800f1ea:	b005      	add	sp, #20
 800f1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f1f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800f1f0:	2a02      	cmp	r2, #2
 800f1f2:	b530      	push	{r4, r5, lr}
 800f1f4:	d011      	beq.n	800f21a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800f1f6:	2a03      	cmp	r2, #3
 800f1f8:	d01c      	beq.n	800f234 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800f1fa:	2a01      	cmp	r2, #1
 800f1fc:	d10c      	bne.n	800f218 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800f1fe:	888b      	ldrh	r3, [r1, #4]
 800f200:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800f204:	8801      	ldrh	r1, [r0, #0]
 800f206:	1a9b      	subs	r3, r3, r2
 800f208:	8844      	ldrh	r4, [r0, #2]
 800f20a:	1a5b      	subs	r3, r3, r1
 800f20c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800f210:	8004      	strh	r4, [r0, #0]
 800f212:	8043      	strh	r3, [r0, #2]
 800f214:	8081      	strh	r1, [r0, #4]
 800f216:	80c2      	strh	r2, [r0, #6]
 800f218:	bd30      	pop	{r4, r5, pc}
 800f21a:	88cb      	ldrh	r3, [r1, #6]
 800f21c:	88c2      	ldrh	r2, [r0, #6]
 800f21e:	1a9b      	subs	r3, r3, r2
 800f220:	8842      	ldrh	r2, [r0, #2]
 800f222:	1a9b      	subs	r3, r3, r2
 800f224:	888a      	ldrh	r2, [r1, #4]
 800f226:	8881      	ldrh	r1, [r0, #4]
 800f228:	8043      	strh	r3, [r0, #2]
 800f22a:	1a52      	subs	r2, r2, r1
 800f22c:	8801      	ldrh	r1, [r0, #0]
 800f22e:	1a52      	subs	r2, r2, r1
 800f230:	8002      	strh	r2, [r0, #0]
 800f232:	e7f1      	b.n	800f218 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800f234:	88cb      	ldrh	r3, [r1, #6]
 800f236:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800f23a:	8841      	ldrh	r1, [r0, #2]
 800f23c:	1a9b      	subs	r3, r3, r2
 800f23e:	f9b0 5000 	ldrsh.w	r5, [r0]
 800f242:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800f246:	1a5b      	subs	r3, r3, r1
 800f248:	8045      	strh	r5, [r0, #2]
 800f24a:	8082      	strh	r2, [r0, #4]
 800f24c:	8003      	strh	r3, [r0, #0]
 800f24e:	80c4      	strh	r4, [r0, #6]
 800f250:	e7e2      	b.n	800f218 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800f252 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800f252:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f256:	b09f      	sub	sp, #124	; 0x7c
 800f258:	9116      	str	r1, [sp, #88]	; 0x58
 800f25a:	9317      	str	r3, [sp, #92]	; 0x5c
 800f25c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800f25e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f260:	8809      	ldrh	r1, [r1, #0]
 800f262:	889b      	ldrh	r3, [r3, #4]
 800f264:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800f268:	440b      	add	r3, r1
 800f26a:	9212      	str	r2, [sp, #72]	; 0x48
 800f26c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800f270:	b21b      	sxth	r3, r3
 800f272:	9011      	str	r0, [sp, #68]	; 0x44
 800f274:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 800f278:	9310      	str	r3, [sp, #64]	; 0x40
 800f27a:	f8d8 3000 	ldr.w	r3, [r8]
 800f27e:	7a59      	ldrb	r1, [r3, #9]
 800f280:	7a1b      	ldrb	r3, [r3, #8]
 800f282:	9114      	str	r1, [sp, #80]	; 0x50
 800f284:	9315      	str	r3, [sp, #84]	; 0x54
 800f286:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f288:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f28c:	2a00      	cmp	r2, #0
 800f28e:	d067      	beq.n	800f360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 800f290:	f898 3010 	ldrb.w	r3, [r8, #16]
 800f294:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f296:	2b04      	cmp	r3, #4
 800f298:	bf14      	ite	ne
 800f29a:	2301      	movne	r3, #1
 800f29c:	2302      	moveq	r3, #2
 800f29e:	4413      	add	r3, r2
 800f2a0:	f04f 0900 	mov.w	r9, #0
 800f2a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f2a6:	464c      	mov	r4, r9
 800f2a8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f2ac:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800f2b0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	f280 808c 	bge.w	800f3d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	931c      	str	r3, [sp, #112]	; 0x70
 800f2be:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f2c2:	429c      	cmp	r4, r3
 800f2c4:	d006      	beq.n	800f2d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 800f2c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2c8:	f242 020b 	movw	r2, #8203	; 0x200b
 800f2cc:	4294      	cmp	r4, r2
 800f2ce:	bf18      	it	ne
 800f2d0:	4623      	movne	r3, r4
 800f2d2:	930d      	str	r3, [sp, #52]	; 0x34
 800f2d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f2d6:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800f2d8:	f8d8 2000 	ldr.w	r2, [r8]
 800f2dc:	428b      	cmp	r3, r1
 800f2de:	db41      	blt.n	800f364 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800f2e0:	6813      	ldr	r3, [r2, #0]
 800f2e2:	4610      	mov	r0, r2
 800f2e4:	695b      	ldr	r3, [r3, #20]
 800f2e6:	4798      	blx	r3
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	f8d8 0000 	ldr.w	r0, [r8]
 800f2ee:	aa1d      	add	r2, sp, #116	; 0x74
 800f2f0:	4621      	mov	r1, r4
 800f2f2:	6803      	ldr	r3, [r0, #0]
 800f2f4:	689e      	ldr	r6, [r3, #8]
 800f2f6:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800f2fa:	47b0      	blx	r6
 800f2fc:	901c      	str	r0, [sp, #112]	; 0x70
 800f2fe:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f302:	429c      	cmp	r4, r3
 800f304:	f000 80ea 	beq.w	800f4dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800f308:	f242 030b 	movw	r3, #8203	; 0x200b
 800f30c:	429c      	cmp	r4, r3
 800f30e:	f000 80e5 	beq.w	800f4dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800f312:	2c00      	cmp	r4, #0
 800f314:	f000 80f7 	beq.w	800f506 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800f318:	2c0a      	cmp	r4, #10
 800f31a:	d060      	beq.n	800f3de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800f31c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f31e:	b36a      	cbz	r2, 800f37c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 800f320:	8894      	ldrh	r4, [r2, #4]
 800f322:	f1bb 0f00 	cmp.w	fp, #0
 800f326:	d03b      	beq.n	800f3a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 800f328:	f892 900d 	ldrb.w	r9, [r2, #13]
 800f32c:	f1bb 0f01 	cmp.w	fp, #1
 800f330:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800f334:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800f338:	f892 900a 	ldrb.w	r9, [r2, #10]
 800f33c:	ea49 0903 	orr.w	r9, r9, r3
 800f340:	d134      	bne.n	800f3ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 800f342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f344:	eba5 0509 	sub.w	r5, r5, r9
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d14f      	bne.n	800f3ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800f34c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f34e:	eb09 0305 	add.w	r3, r9, r5
 800f352:	4413      	add	r3, r2
 800f354:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800f356:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f35a:	4293      	cmp	r3, r2
 800f35c:	da51      	bge.n	800f402 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800f35e:	e038      	b.n	800f3d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800f360:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f362:	e79d      	b.n	800f2a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 800f364:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800f368:	4659      	mov	r1, fp
 800f36a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800f36c:	9301      	str	r3, [sp, #4]
 800f36e:	ab1d      	add	r3, sp, #116	; 0x74
 800f370:	9300      	str	r3, [sp, #0]
 800f372:	ab1c      	add	r3, sp, #112	; 0x70
 800f374:	f002 fdc8 	bl	8011f08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800f378:	4604      	mov	r4, r0
 800f37a:	e7c0      	b.n	800f2fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 800f37c:	f8d8 0000 	ldr.w	r0, [r8]
 800f380:	6803      	ldr	r3, [r0, #0]
 800f382:	691b      	ldr	r3, [r3, #16]
 800f384:	4798      	blx	r3
 800f386:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f38a:	4298      	cmp	r0, r3
 800f38c:	f000 80a6 	beq.w	800f4dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800f390:	f242 030b 	movw	r3, #8203	; 0x200b
 800f394:	4298      	cmp	r0, r3
 800f396:	f000 80a1 	beq.w	800f4dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800f39a:	f1bb 0f00 	cmp.w	fp, #0
 800f39e:	d100      	bne.n	800f3a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800f3a0:	444d      	add	r5, r9
 800f3a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f3a4:	2a00      	cmp	r2, #0
 800f3a6:	d1bf      	bne.n	800f328 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 800f3a8:	4691      	mov	r9, r2
 800f3aa:	e097      	b.n	800f4dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800f3ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	f000 80ab 	beq.w	800f50a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 800f3b4:	f1bb 0f00 	cmp.w	fp, #0
 800f3b8:	d118      	bne.n	800f3ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800f3ba:	f8d8 0000 	ldr.w	r0, [r8]
 800f3be:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f3c0:	6803      	ldr	r3, [r0, #0]
 800f3c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3c4:	4798      	blx	r3
 800f3c6:	4405      	add	r5, r0
 800f3c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f3cc:	1aeb      	subs	r3, r5, r3
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	dd17      	ble.n	800f402 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800f3d2:	2c00      	cmp	r4, #0
 800f3d4:	f000 8097 	beq.w	800f506 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800f3d8:	2c0a      	cmp	r4, #10
 800f3da:	f040 8085 	bne.w	800f4e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800f3de:	240a      	movs	r4, #10
 800f3e0:	fab4 f084 	clz	r0, r4
 800f3e4:	0940      	lsrs	r0, r0, #5
 800f3e6:	b01f      	add	sp, #124	; 0x7c
 800f3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ec:	f8d8 0000 	ldr.w	r0, [r8]
 800f3f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f3f2:	6803      	ldr	r3, [r0, #0]
 800f3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3f6:	4798      	blx	r3
 800f3f8:	f1bb 0f01 	cmp.w	fp, #1
 800f3fc:	eba5 0500 	sub.w	r5, r5, r0
 800f400:	d0a4      	beq.n	800f34c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 800f402:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f404:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f406:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800f40a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f40e:	7b43      	ldrb	r3, [r0, #13]
 800f410:	4429      	add	r1, r5
 800f412:	015b      	lsls	r3, r3, #5
 800f414:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f418:	7983      	ldrb	r3, [r0, #6]
 800f41a:	4313      	orrs	r3, r2
 800f41c:	440b      	add	r3, r1
 800f41e:	42b3      	cmp	r3, r6
 800f420:	db5c      	blt.n	800f4dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800f422:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f424:	4299      	cmp	r1, r3
 800f426:	da59      	bge.n	800f4dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800f428:	f8d8 0000 	ldr.w	r0, [r8]
 800f42c:	42ae      	cmp	r6, r5
 800f42e:	6803      	ldr	r3, [r0, #0]
 800f430:	bfcc      	ite	gt
 800f432:	1b76      	subgt	r6, r6, r5
 800f434:	2600      	movle	r6, #0
 800f436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f438:	bfc8      	it	gt
 800f43a:	b2b6      	uxthgt	r6, r6
 800f43c:	4798      	blx	r3
 800f43e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f440:	7b5a      	ldrb	r2, [r3, #13]
 800f442:	00d1      	lsls	r1, r2, #3
 800f444:	f401 7780 	and.w	r7, r1, #256	; 0x100
 800f448:	7a19      	ldrb	r1, [r3, #8]
 800f44a:	4339      	orrs	r1, r7
 800f44c:	0657      	lsls	r7, r2, #25
 800f44e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800f450:	bf48      	it	mi
 800f452:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 800f456:	4407      	add	r7, r0
 800f458:	bf48      	it	mi
 800f45a:	b209      	sxthmi	r1, r1
 800f45c:	1a7f      	subs	r7, r7, r1
 800f45e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800f460:	b2bf      	uxth	r7, r7
 800f462:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800f466:	fa0f fa87 	sxth.w	sl, r7
 800f46a:	4551      	cmp	r1, sl
 800f46c:	dd3a      	ble.n	800f4e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 800f46e:	0112      	lsls	r2, r2, #4
 800f470:	79d8      	ldrb	r0, [r3, #7]
 800f472:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800f476:	4302      	orrs	r2, r0
 800f478:	4492      	add	sl, r2
 800f47a:	4551      	cmp	r1, sl
 800f47c:	dc2e      	bgt.n	800f4dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800f47e:	1bcf      	subs	r7, r1, r7
 800f480:	468a      	mov	sl, r1
 800f482:	b2bf      	uxth	r7, r7
 800f484:	9319      	str	r3, [sp, #100]	; 0x64
 800f486:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f488:	f8d8 0000 	ldr.w	r0, [r8]
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	6801      	ldr	r1, [r0, #0]
 800f490:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800f492:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f494:	9313      	str	r3, [sp, #76]	; 0x4c
 800f496:	9218      	str	r2, [sp, #96]	; 0x60
 800f498:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800f49a:	4788      	blx	r1
 800f49c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800f4a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f4a2:	910b      	str	r1, [sp, #44]	; 0x2c
 800f4a4:	f898 100e 	ldrb.w	r1, [r8, #14]
 800f4a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f4aa:	910a      	str	r1, [sp, #40]	; 0x28
 800f4ac:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 800f4b0:	9109      	str	r1, [sp, #36]	; 0x24
 800f4b2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f4b6:	9305      	str	r3, [sp, #20]
 800f4b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f4ba:	9206      	str	r2, [sp, #24]
 800f4bc:	e9cd a601 	strd	sl, r6, [sp, #4]
 800f4c0:	442e      	add	r6, r5
 800f4c2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800f4c6:	b236      	sxth	r6, r6
 800f4c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f4ca:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800f4ce:	9600      	str	r6, [sp, #0]
 800f4d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f4d6:	685b      	ldr	r3, [r3, #4]
 800f4d8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800f4da:	47b0      	blx	r6
 800f4dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4de:	3301      	adds	r3, #1
 800f4e0:	930e      	str	r3, [sp, #56]	; 0x38
 800f4e2:	e6e5      	b.n	800f2b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 800f4e4:	2700      	movs	r7, #0
 800f4e6:	e7cd      	b.n	800f484 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800f4e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800f4ea:	3501      	adds	r5, #1
 800f4ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f4ee:	429d      	cmp	r5, r3
 800f4f0:	f6bf af76 	bge.w	800f3e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800f4f4:	4659      	mov	r1, fp
 800f4f6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800f4f8:	f7fa ff00 	bl	800a2fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f4fc:	4604      	mov	r4, r0
 800f4fe:	b110      	cbz	r0, 800f506 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800f500:	280a      	cmp	r0, #10
 800f502:	d1f2      	bne.n	800f4ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 800f504:	e76b      	b.n	800f3de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800f506:	2400      	movs	r4, #0
 800f508:	e76a      	b.n	800f3e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800f50a:	f1bb 0f00 	cmp.w	fp, #0
 800f50e:	f43f af5b 	beq.w	800f3c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800f512:	e776      	b.n	800f402 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0800f514 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800f514:	b530      	push	{r4, r5, lr}
 800f516:	8a44      	ldrh	r4, [r0, #18]
 800f518:	8ac5      	ldrh	r5, [r0, #22]
 800f51a:	82c3      	strh	r3, [r0, #22]
 800f51c:	442c      	add	r4, r5
 800f51e:	1ae4      	subs	r4, r4, r3
 800f520:	8b03      	ldrh	r3, [r0, #24]
 800f522:	8244      	strh	r4, [r0, #18]
 800f524:	8a84      	ldrh	r4, [r0, #20]
 800f526:	4422      	add	r2, r4
 800f528:	440c      	add	r4, r1
 800f52a:	1a59      	subs	r1, r3, r1
 800f52c:	8342      	strh	r2, [r0, #26]
 800f52e:	8284      	strh	r4, [r0, #20]
 800f530:	8301      	strh	r1, [r0, #24]
 800f532:	bd30      	pop	{r4, r5, pc}

0800f534 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800f534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f538:	7a43      	ldrb	r3, [r0, #9]
 800f53a:	b087      	sub	sp, #28
 800f53c:	4604      	mov	r4, r0
 800f53e:	460f      	mov	r7, r1
 800f540:	1eda      	subs	r2, r3, #3
 800f542:	b2d2      	uxtb	r2, r2
 800f544:	2900      	cmp	r1, #0
 800f546:	d036      	beq.n	800f5b6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 800f548:	2a01      	cmp	r2, #1
 800f54a:	d932      	bls.n	800f5b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 800f54c:	1e58      	subs	r0, r3, #1
 800f54e:	f1d0 0b00 	rsbs	fp, r0, #0
 800f552:	eb4b 0b00 	adc.w	fp, fp, r0
 800f556:	1e99      	subs	r1, r3, #2
 800f558:	424b      	negs	r3, r1
 800f55a:	414b      	adcs	r3, r1
 800f55c:	9303      	str	r3, [sp, #12]
 800f55e:	2300      	movs	r3, #0
 800f560:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800f564:	2500      	movs	r5, #0
 800f566:	f242 0a0b 	movw	sl, #8203	; 0x200b
 800f56a:	46a9      	mov	r9, r5
 800f56c:	8265      	strh	r5, [r4, #18]
 800f56e:	82a5      	strh	r5, [r4, #20]
 800f570:	2300      	movs	r3, #0
 800f572:	9305      	str	r3, [sp, #20]
 800f574:	8823      	ldrh	r3, [r4, #0]
 800f576:	2b20      	cmp	r3, #32
 800f578:	d02b      	beq.n	800f5d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 800f57a:	eba3 020a 	sub.w	r2, r3, sl
 800f57e:	4256      	negs	r6, r2
 800f580:	4156      	adcs	r6, r2
 800f582:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800f586:	4293      	cmp	r3, r2
 800f588:	d004      	beq.n	800f594 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800f58a:	4553      	cmp	r3, sl
 800f58c:	bf16      	itet	ne
 800f58e:	4699      	movne	r9, r3
 800f590:	2601      	moveq	r6, #1
 800f592:	2600      	movne	r6, #0
 800f594:	ab05      	add	r3, sp, #20
 800f596:	68e2      	ldr	r2, [r4, #12]
 800f598:	7a21      	ldrb	r1, [r4, #8]
 800f59a:	6860      	ldr	r0, [r4, #4]
 800f59c:	f002 fc5c 	bl	8011e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f5a0:	8020      	strh	r0, [r4, #0]
 800f5a2:	b9c8      	cbnz	r0, 800f5d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800f5a4:	8b22      	ldrh	r2, [r4, #24]
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	4611      	mov	r1, r2
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f7ff ffb2 	bl	800f514 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800f5b0:	e066      	b.n	800f680 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800f5b2:	468b      	mov	fp, r1
 800f5b4:	e7cf      	b.n	800f556 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 800f5b6:	3b01      	subs	r3, #1
 800f5b8:	2a01      	cmp	r2, #1
 800f5ba:	9103      	str	r1, [sp, #12]
 800f5bc:	468b      	mov	fp, r1
 800f5be:	bf8c      	ite	hi
 800f5c0:	2200      	movhi	r2, #0
 800f5c2:	2201      	movls	r2, #1
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	9202      	str	r2, [sp, #8]
 800f5c8:	bf8c      	ite	hi
 800f5ca:	2300      	movhi	r3, #0
 800f5cc:	2301      	movls	r3, #1
 800f5ce:	9301      	str	r3, [sp, #4]
 800f5d0:	e7c8      	b.n	800f564 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 800f5d2:	4699      	mov	r9, r3
 800f5d4:	2601      	movs	r6, #1
 800f5d6:	e7dd      	b.n	800f594 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800f5d8:	8ae3      	ldrh	r3, [r4, #22]
 800f5da:	280a      	cmp	r0, #10
 800f5dc:	f103 0301 	add.w	r3, r3, #1
 800f5e0:	82e3      	strh	r3, [r4, #22]
 800f5e2:	d0df      	beq.n	800f5a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 800f5e4:	9a05      	ldr	r2, [sp, #20]
 800f5e6:	bb42      	cbnz	r2, 800f63a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 800f5e8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f5ec:	4298      	cmp	r0, r3
 800f5ee:	d001      	beq.n	800f5f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800f5f0:	4550      	cmp	r0, sl
 800f5f2:	d1bd      	bne.n	800f570 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800f5f4:	8823      	ldrh	r3, [r4, #0]
 800f5f6:	8b21      	ldrh	r1, [r4, #24]
 800f5f8:	2b20      	cmp	r3, #32
 800f5fa:	d001      	beq.n	800f600 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 800f5fc:	4553      	cmp	r3, sl
 800f5fe:	d131      	bne.n	800f664 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 800f600:	2e00      	cmp	r6, #0
 800f602:	bf0a      	itet	eq
 800f604:	460d      	moveq	r5, r1
 800f606:	4630      	movne	r0, r6
 800f608:	2001      	moveq	r0, #1
 800f60a:	440a      	add	r2, r1
 800f60c:	8aa3      	ldrh	r3, [r4, #20]
 800f60e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800f612:	b292      	uxth	r2, r2
 800f614:	8322      	strh	r2, [r4, #24]
 800f616:	4413      	add	r3, r2
 800f618:	2f00      	cmp	r7, #0
 800f61a:	d03a      	beq.n	800f692 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 800f61c:	f1bb 0f00 	cmp.w	fp, #0
 800f620:	d102      	bne.n	800f628 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 800f622:	9903      	ldr	r1, [sp, #12]
 800f624:	b301      	cbz	r1, 800f668 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800f626:	b1f8      	cbz	r0, 800f668 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800f628:	8ba1      	ldrh	r1, [r4, #28]
 800f62a:	4419      	add	r1, r3
 800f62c:	458c      	cmp	ip, r1
 800f62e:	da2a      	bge.n	800f686 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800f630:	8a61      	ldrh	r1, [r4, #18]
 800f632:	b341      	cbz	r1, 800f686 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800f634:	4563      	cmp	r3, ip
 800f636:	dd9b      	ble.n	800f570 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800f638:	e01c      	b.n	800f674 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 800f63a:	8893      	ldrh	r3, [r2, #4]
 800f63c:	4649      	mov	r1, r9
 800f63e:	8023      	strh	r3, [r4, #0]
 800f640:	f892 800d 	ldrb.w	r8, [r2, #13]
 800f644:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800f648:	f408 7080 	and.w	r0, r8, #256	; 0x100
 800f64c:	f892 800a 	ldrb.w	r8, [r2, #10]
 800f650:	ea48 0800 	orr.w	r8, r8, r0
 800f654:	68e0      	ldr	r0, [r4, #12]
 800f656:	6803      	ldr	r3, [r0, #0]
 800f658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f65a:	4798      	blx	r3
 800f65c:	eb08 0200 	add.w	r2, r8, r0
 800f660:	b292      	uxth	r2, r2
 800f662:	e7c7      	b.n	800f5f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800f664:	2000      	movs	r0, #0
 800f666:	e7d0      	b.n	800f60a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800f668:	4563      	cmp	r3, ip
 800f66a:	dd81      	ble.n	800f570 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800f66c:	8a63      	ldrh	r3, [r4, #18]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	f43f af7e 	beq.w	800f570 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800f674:	2301      	movs	r3, #1
 800f676:	8ba2      	ldrh	r2, [r4, #28]
 800f678:	77a3      	strb	r3, [r4, #30]
 800f67a:	8b63      	ldrh	r3, [r4, #26]
 800f67c:	4413      	add	r3, r2
 800f67e:	8363      	strh	r3, [r4, #26]
 800f680:	b007      	add	sp, #28
 800f682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f686:	2300      	movs	r3, #0
 800f688:	4611      	mov	r1, r2
 800f68a:	4620      	mov	r0, r4
 800f68c:	f7ff ff42 	bl	800f514 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800f690:	e76e      	b.n	800f570 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800f692:	4563      	cmp	r3, ip
 800f694:	dd14      	ble.n	800f6c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 800f696:	9b02      	ldr	r3, [sp, #8]
 800f698:	b113      	cbz	r3, 800f6a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 800f69a:	2301      	movs	r3, #1
 800f69c:	460a      	mov	r2, r1
 800f69e:	e783      	b.n	800f5a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 800f6a0:	9b01      	ldr	r3, [sp, #4]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f43f af64 	beq.w	800f570 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	f47f af61 	bne.w	800f570 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800f6ae:	b116      	cbz	r6, 800f6b6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	462a      	mov	r2, r5
 800f6b4:	e779      	b.n	800f5aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 800f6b6:	8a63      	ldrh	r3, [r4, #18]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f43f af59 	beq.w	800f570 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800f6be:	e7df      	b.n	800f680 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	f47f af55 	bne.w	800f570 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800f6c6:	2e00      	cmp	r6, #0
 800f6c8:	f43f af52 	beq.w	800f570 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	462a      	mov	r2, r5
 800f6d0:	e7db      	b.n	800f68a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0800f6d2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800f6d2:	b530      	push	{r4, r5, lr}
 800f6d4:	4605      	mov	r5, r0
 800f6d6:	b08b      	sub	sp, #44	; 0x2c
 800f6d8:	b191      	cbz	r1, 800f700 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 800f6da:	2401      	movs	r4, #1
 800f6dc:	e9cd 3100 	strd	r3, r1, [sp]
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	4601      	mov	r1, r0
 800f6e4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800f6e8:	a802      	add	r0, sp, #8
 800f6ea:	f7ff fd0b 	bl	800f104 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800f6ee:	2100      	movs	r1, #0
 800f6f0:	a802      	add	r0, sp, #8
 800f6f2:	f7ff ff1f 	bl	800f534 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800f6f6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f6fa:	b163      	cbz	r3, 800f716 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800f6fc:	3401      	adds	r4, #1
 800f6fe:	e7f6      	b.n	800f6ee <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 800f700:	2401      	movs	r4, #1
 800f702:	f002 fca3 	bl	801204c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f706:	280a      	cmp	r0, #10
 800f708:	4628      	mov	r0, r5
 800f70a:	bf08      	it	eq
 800f70c:	3401      	addeq	r4, #1
 800f70e:	f002 fc9d 	bl	801204c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f712:	2800      	cmp	r0, #0
 800f714:	d1f7      	bne.n	800f706 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800f716:	b2a0      	uxth	r0, r4
 800f718:	b00b      	add	sp, #44	; 0x2c
 800f71a:	bd30      	pop	{r4, r5, pc}

0800f71c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800f71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f720:	b0e5      	sub	sp, #404	; 0x194
 800f722:	4689      	mov	r9, r1
 800f724:	461c      	mov	r4, r3
 800f726:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800f72a:	900a      	str	r0, [sp, #40]	; 0x28
 800f72c:	f1ba 0f00 	cmp.w	sl, #0
 800f730:	f000 80b4 	beq.w	800f89c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	2b00      	cmp	r3, #0
 800f738:	f000 80b0 	beq.w	800f89c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800f73c:	7ba3      	ldrb	r3, [r4, #14]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	f000 80ac 	beq.w	800f89c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800f744:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 800f748:	6810      	ldr	r0, [r2, #0]
 800f74a:	6851      	ldr	r1, [r2, #4]
 800f74c:	2500      	movs	r5, #0
 800f74e:	4643      	mov	r3, r8
 800f750:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800f754:	950f      	str	r5, [sp, #60]	; 0x3c
 800f756:	af19      	add	r7, sp, #100	; 0x64
 800f758:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800f75c:	79a2      	ldrb	r2, [r4, #6]
 800f75e:	c303      	stmia	r3!, {r0, r1}
 800f760:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800f764:	a90f      	add	r1, sp, #60	; 0x3c
 800f766:	4640      	mov	r0, r8
 800f768:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800f76c:	f7ff fd40 	bl	800f1f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800f770:	a90f      	add	r1, sp, #60	; 0x3c
 800f772:	79a2      	ldrb	r2, [r4, #6]
 800f774:	4608      	mov	r0, r1
 800f776:	f7ff fd3b 	bl	800f1f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800f77a:	4638      	mov	r0, r7
 800f77c:	f002 f818 	bl	80117b0 <_ZN8touchgfx12TextProviderC1Ev>
 800f780:	6820      	ldr	r0, [r4, #0]
 800f782:	6803      	ldr	r3, [r0, #0]
 800f784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f786:	4798      	blx	r3
 800f788:	4606      	mov	r6, r0
 800f78a:	6820      	ldr	r0, [r4, #0]
 800f78c:	6803      	ldr	r3, [r0, #0]
 800f78e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f790:	4798      	blx	r3
 800f792:	4633      	mov	r3, r6
 800f794:	9000      	str	r0, [sp, #0]
 800f796:	4651      	mov	r1, sl
 800f798:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800f79a:	4638      	mov	r0, r7
 800f79c:	f002 f85b 	bl	8011856 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f7a0:	7923      	ldrb	r3, [r4, #4]
 800f7a2:	6820      	ldr	r0, [r4, #0]
 800f7a4:	9308      	str	r3, [sp, #32]
 800f7a6:	6803      	ldr	r3, [r0, #0]
 800f7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7aa:	4798      	blx	r3
 800f7ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7b0:	181e      	adds	r6, r3, r0
 800f7b2:	42ae      	cmp	r6, r5
 800f7b4:	dd06      	ble.n	800f7c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 800f7b6:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800f7ba:	4282      	cmp	r2, r0
 800f7bc:	bfa4      	itt	ge
 800f7be:	189d      	addge	r5, r3, r2
 800f7c0:	fb95 f5f6 	sdivge	r5, r5, r6
 800f7c4:	a832      	add	r0, sp, #200	; 0xc8
 800f7c6:	f001 fff3 	bl	80117b0 <_ZN8touchgfx12TextProviderC1Ev>
 800f7ca:	7c23      	ldrb	r3, [r4, #16]
 800f7cc:	b17b      	cbz	r3, 800f7ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 800f7ce:	6820      	ldr	r0, [r4, #0]
 800f7d0:	6803      	ldr	r3, [r0, #0]
 800f7d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7d4:	4798      	blx	r3
 800f7d6:	4683      	mov	fp, r0
 800f7d8:	6820      	ldr	r0, [r4, #0]
 800f7da:	6803      	ldr	r3, [r0, #0]
 800f7dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7de:	4798      	blx	r3
 800f7e0:	465b      	mov	r3, fp
 800f7e2:	9000      	str	r0, [sp, #0]
 800f7e4:	4651      	mov	r1, sl
 800f7e6:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800f7e8:	a832      	add	r0, sp, #200	; 0xc8
 800f7ea:	f002 f834 	bl	8011856 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f7ee:	7be1      	ldrb	r1, [r4, #15]
 800f7f0:	a811      	add	r0, sp, #68	; 0x44
 800f7f2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800f7f6:	7963      	ldrb	r3, [r4, #5]
 800f7f8:	1a52      	subs	r2, r2, r1
 800f7fa:	7c21      	ldrb	r1, [r4, #16]
 800f7fc:	9101      	str	r1, [sp, #4]
 800f7fe:	b292      	uxth	r2, r2
 800f800:	6821      	ldr	r1, [r4, #0]
 800f802:	9100      	str	r1, [sp, #0]
 800f804:	a932      	add	r1, sp, #200	; 0xc8
 800f806:	f7ff fc7d 	bl	800f104 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800f80a:	7c23      	ldrb	r3, [r4, #16]
 800f80c:	b9bb      	cbnz	r3, 800f83e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 800f80e:	fa1f fa86 	uxth.w	sl, r6
 800f812:	2d00      	cmp	r5, #0
 800f814:	dd45      	ble.n	800f8a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800f816:	4638      	mov	r0, r7
 800f818:	f002 fc18 	bl	801204c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f81c:	2800      	cmp	r0, #0
 800f81e:	d03d      	beq.n	800f89c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800f820:	280a      	cmp	r0, #10
 800f822:	d1f6      	bne.n	800f812 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800f824:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800f828:	3d01      	subs	r5, #1
 800f82a:	4453      	add	r3, sl
 800f82c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800f830:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800f834:	eba3 030a 	sub.w	r3, r3, sl
 800f838:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800f83c:	e7e9      	b.n	800f812 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800f83e:	0073      	lsls	r3, r6, #1
 800f840:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800f844:	fa1f fa86 	uxth.w	sl, r6
 800f848:	9309      	str	r3, [sp, #36]	; 0x24
 800f84a:	2d00      	cmp	r5, #0
 800f84c:	dd29      	ble.n	800f8a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800f84e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800f852:	a811      	add	r0, sp, #68	; 0x44
 800f854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f856:	428b      	cmp	r3, r1
 800f858:	bfd4      	ite	le
 800f85a:	2100      	movle	r1, #0
 800f85c:	2101      	movgt	r1, #1
 800f85e:	f7ff fe69 	bl	800f534 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800f862:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 800f866:	3b01      	subs	r3, #1
 800f868:	b29b      	uxth	r3, r3
 800f86a:	455b      	cmp	r3, fp
 800f86c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f86e:	d005      	beq.n	800f87c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 800f870:	7961      	ldrb	r1, [r4, #5]
 800f872:	4638      	mov	r0, r7
 800f874:	f7fa fd42 	bl	800a2fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f87a:	e7f4      	b.n	800f866 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 800f87c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800f880:	3d01      	subs	r5, #1
 800f882:	4453      	add	r3, sl
 800f884:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800f888:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800f88c:	eba3 030a 	sub.w	r3, r3, sl
 800f890:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800f894:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d1d6      	bne.n	800f84a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 800f89c:	b065      	add	sp, #404	; 0x194
 800f89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8a2:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 800f8a6:	ad4b      	add	r5, sp, #300	; 0x12c
 800f8a8:	f04f 0b00 	mov.w	fp, #0
 800f8ac:	7c23      	ldrb	r3, [r4, #16]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d067      	beq.n	800f982 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 800f8b2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800f8b6:	a811      	add	r0, sp, #68	; 0x44
 800f8b8:	458a      	cmp	sl, r1
 800f8ba:	bfd4      	ite	le
 800f8bc:	2100      	movle	r1, #0
 800f8be:	2101      	movgt	r1, #1
 800f8c0:	f7ff fe38 	bl	800f534 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800f8c4:	9b08      	ldr	r3, [sp, #32]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d056      	beq.n	800f978 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800f8ca:	7c23      	ldrb	r3, [r4, #16]
 800f8cc:	2264      	movs	r2, #100	; 0x64
 800f8ce:	4639      	mov	r1, r7
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f8d4:	f00f fd58 	bl	801f388 <memcpy>
 800f8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d059      	beq.n	800f992 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 800f8de:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800f8e2:	7922      	ldrb	r2, [r4, #4]
 800f8e4:	2a01      	cmp	r2, #1
 800f8e6:	d13d      	bne.n	800f964 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 800f8e8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 800f8ec:	1ac0      	subs	r0, r0, r3
 800f8ee:	2302      	movs	r3, #2
 800f8f0:	fb90 f0f3 	sdiv	r0, r0, r3
 800f8f4:	b200      	sxth	r0, r0
 800f8f6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800f8fa:	4418      	add	r0, r3
 800f8fc:	7c23      	ldrb	r3, [r4, #16]
 800f8fe:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 800f902:	2b00      	cmp	r3, #0
 800f904:	d03a      	beq.n	800f97c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 800f906:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800f90a:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 800f90e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800f912:	9500      	str	r5, [sp, #0]
 800f914:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f916:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800f91a:	e9cd b703 	strd	fp, r7, [sp, #12]
 800f91e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 800f922:	464a      	mov	r2, r9
 800f924:	2100      	movs	r1, #0
 800f926:	f7ff fc94 	bl	800f252 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800f92a:	2800      	cmp	r0, #0
 800f92c:	d1b6      	bne.n	800f89c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800f92e:	b2b2      	uxth	r2, r6
 800f930:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800f934:	4611      	mov	r1, r2
 800f936:	4413      	add	r3, r2
 800f938:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800f93c:	b21b      	sxth	r3, r3
 800f93e:	1a52      	subs	r2, r2, r1
 800f940:	7c21      	ldrb	r1, [r4, #16]
 800f942:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800f946:	b212      	sxth	r2, r2
 800f948:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 800f94c:	b109      	cbz	r1, 800f952 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 800f94e:	42b2      	cmp	r2, r6
 800f950:	dba4      	blt.n	800f89c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800f952:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 800f956:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800f95a:	440a      	add	r2, r1
 800f95c:	b212      	sxth	r2, r2
 800f95e:	4293      	cmp	r3, r2
 800f960:	dda4      	ble.n	800f8ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 800f962:	e79b      	b.n	800f89c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800f964:	2a02      	cmp	r2, #2
 800f966:	d105      	bne.n	800f974 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 800f968:	7be2      	ldrb	r2, [r4, #15]
 800f96a:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 800f96e:	1a80      	subs	r0, r0, r2
 800f970:	1ac0      	subs	r0, r0, r3
 800f972:	e7bf      	b.n	800f8f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 800f974:	2000      	movs	r0, #0
 800f976:	e7be      	b.n	800f8f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 800f978:	7be0      	ldrb	r0, [r4, #15]
 800f97a:	e7bc      	b.n	800f8f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 800f97c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f980:	e7c3      	b.n	800f90a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 800f982:	9b08      	ldr	r3, [sp, #32]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d0f7      	beq.n	800f978 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800f988:	2264      	movs	r2, #100	; 0x64
 800f98a:	4639      	mov	r1, r7
 800f98c:	4628      	mov	r0, r5
 800f98e:	f00f fcfb 	bl	801f388 <memcpy>
 800f992:	2300      	movs	r3, #0
 800f994:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f998:	6821      	ldr	r1, [r4, #0]
 800f99a:	4628      	mov	r0, r5
 800f99c:	f7ff fbec 	bl	800f178 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800f9a0:	b203      	sxth	r3, r0
 800f9a2:	e79e      	b.n	800f8e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0800f9a4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800f9a4:	2b02      	cmp	r3, #2
 800f9a6:	b510      	push	{r4, lr}
 800f9a8:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f9ac:	d00b      	beq.n	800f9c6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 800f9ae:	2b03      	cmp	r3, #3
 800f9b0:	d00e      	beq.n	800f9d0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 800f9b2:	2b01      	cmp	r3, #1
 800f9b4:	d001      	beq.n	800f9ba <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 800f9b6:	1860      	adds	r0, r4, r1
 800f9b8:	bd10      	pop	{r4, pc}
 800f9ba:	8880      	ldrh	r0, [r0, #4]
 800f9bc:	4420      	add	r0, r4
 800f9be:	b200      	sxth	r0, r0
 800f9c0:	1a80      	subs	r0, r0, r2
 800f9c2:	3801      	subs	r0, #1
 800f9c4:	e7f8      	b.n	800f9b8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 800f9c6:	8880      	ldrh	r0, [r0, #4]
 800f9c8:	4420      	add	r0, r4
 800f9ca:	b200      	sxth	r0, r0
 800f9cc:	1a40      	subs	r0, r0, r1
 800f9ce:	e7f8      	b.n	800f9c2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800f9d0:	18a0      	adds	r0, r4, r2
 800f9d2:	e7f1      	b.n	800f9b8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0800f9d4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800f9d4:	2b02      	cmp	r3, #2
 800f9d6:	b510      	push	{r4, lr}
 800f9d8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800f9dc:	d006      	beq.n	800f9ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 800f9de:	2b03      	cmp	r3, #3
 800f9e0:	d00a      	beq.n	800f9f8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	bf14      	ite	ne
 800f9e6:	18a0      	addne	r0, r4, r2
 800f9e8:	1860      	addeq	r0, r4, r1
 800f9ea:	bd10      	pop	{r4, pc}
 800f9ec:	88c0      	ldrh	r0, [r0, #6]
 800f9ee:	4420      	add	r0, r4
 800f9f0:	b200      	sxth	r0, r0
 800f9f2:	1a80      	subs	r0, r0, r2
 800f9f4:	3801      	subs	r0, #1
 800f9f6:	e7f8      	b.n	800f9ea <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800f9f8:	88c0      	ldrh	r0, [r0, #6]
 800f9fa:	4420      	add	r0, r4
 800f9fc:	b200      	sxth	r0, r0
 800f9fe:	1a40      	subs	r0, r0, r1
 800fa00:	e7f8      	b.n	800f9f4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0800fa04 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800fa04:	4b01      	ldr	r3, [pc, #4]	; (800fa0c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800fa06:	2200      	movs	r2, #0
 800fa08:	601a      	str	r2, [r3, #0]
 800fa0a:	4770      	bx	lr
 800fa0c:	20009f9c 	.word	0x20009f9c

0800fa10 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800fa10:	4603      	mov	r3, r0
 800fa12:	b1c8      	cbz	r0, 800fa48 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800fa14:	0c02      	lsrs	r2, r0, #16
 800fa16:	0412      	lsls	r2, r2, #16
 800fa18:	b9a2      	cbnz	r2, 800fa44 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800fa1a:	0403      	lsls	r3, r0, #16
 800fa1c:	2010      	movs	r0, #16
 800fa1e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fa22:	bf04      	itt	eq
 800fa24:	021b      	lsleq	r3, r3, #8
 800fa26:	3008      	addeq	r0, #8
 800fa28:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fa2c:	bf04      	itt	eq
 800fa2e:	011b      	lsleq	r3, r3, #4
 800fa30:	3004      	addeq	r0, #4
 800fa32:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fa36:	bf04      	itt	eq
 800fa38:	009b      	lsleq	r3, r3, #2
 800fa3a:	3002      	addeq	r0, #2
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	db04      	blt.n	800fa4a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800fa40:	3001      	adds	r0, #1
 800fa42:	4770      	bx	lr
 800fa44:	2000      	movs	r0, #0
 800fa46:	e7ea      	b.n	800fa1e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800fa48:	2020      	movs	r0, #32
 800fa4a:	4770      	bx	lr

0800fa4c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800fa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa50:	b087      	sub	sp, #28
 800fa52:	4681      	mov	r9, r0
 800fa54:	4698      	mov	r8, r3
 800fa56:	4610      	mov	r0, r2
 800fa58:	460d      	mov	r5, r1
 800fa5a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800fa5e:	b981      	cbnz	r1, 800fa82 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800fa60:	b14b      	cbz	r3, 800fa76 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800fa62:	460b      	mov	r3, r1
 800fa64:	464a      	mov	r2, r9
 800fa66:	4641      	mov	r1, r8
 800fa68:	e9cd 4700 	strd	r4, r7, [sp]
 800fa6c:	f7ff ffee 	bl	800fa4c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800fa70:	b007      	add	sp, #28
 800fa72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa76:	f04f 33ff 	mov.w	r3, #4294967295
 800fa7a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800fa7e:	603b      	str	r3, [r7, #0]
 800fa80:	e7f6      	b.n	800fa70 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800fa82:	fa32 fa01 	lsrs.w	sl, r2, r1
 800fa86:	d107      	bne.n	800fa98 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800fa88:	fb09 f602 	mul.w	r6, r9, r2
 800fa8c:	fbb6 f0f4 	udiv	r0, r6, r4
 800fa90:	fb04 6610 	mls	r6, r4, r0, r6
 800fa94:	603e      	str	r6, [r7, #0]
 800fa96:	e7eb      	b.n	800fa70 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800fa98:	2601      	movs	r6, #1
 800fa9a:	fa09 fb01 	lsl.w	fp, r9, r1
 800fa9e:	408e      	lsls	r6, r1
 800faa0:	fbbb f3f4 	udiv	r3, fp, r4
 800faa4:	3e01      	subs	r6, #1
 800faa6:	9302      	str	r3, [sp, #8]
 800faa8:	fb0a f303 	mul.w	r3, sl, r3
 800faac:	4016      	ands	r6, r2
 800faae:	9303      	str	r3, [sp, #12]
 800fab0:	4630      	mov	r0, r6
 800fab2:	f7ff ffad 	bl	800fa10 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800fab6:	464a      	mov	r2, r9
 800fab8:	460b      	mov	r3, r1
 800faba:	4601      	mov	r1, r0
 800fabc:	4630      	mov	r0, r6
 800fabe:	e9cd 4700 	strd	r4, r7, [sp]
 800fac2:	f7ff ffc3 	bl	800fa4c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800fac6:	9b02      	ldr	r3, [sp, #8]
 800fac8:	4606      	mov	r6, r0
 800faca:	eb05 0108 	add.w	r1, r5, r8
 800face:	fb04 bb13 	mls	fp, r4, r3, fp
 800fad2:	4658      	mov	r0, fp
 800fad4:	f7ff ff9c 	bl	800fa10 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800fad8:	ab05      	add	r3, sp, #20
 800fada:	465a      	mov	r2, fp
 800fadc:	e9cd 4300 	strd	r4, r3, [sp]
 800fae0:	4603      	mov	r3, r0
 800fae2:	4650      	mov	r0, sl
 800fae4:	f7ff ffb2 	bl	800fa4c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800fae8:	6839      	ldr	r1, [r7, #0]
 800faea:	9a05      	ldr	r2, [sp, #20]
 800faec:	9b03      	ldr	r3, [sp, #12]
 800faee:	4411      	add	r1, r2
 800faf0:	fbb1 f2f4 	udiv	r2, r1, r4
 800faf4:	18d3      	adds	r3, r2, r3
 800faf6:	fb04 1412 	mls	r4, r4, r2, r1
 800fafa:	441e      	add	r6, r3
 800fafc:	603c      	str	r4, [r7, #0]
 800fafe:	4430      	add	r0, r6
 800fb00:	e7b6      	b.n	800fa70 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800fb02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800fb02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb06:	b085      	sub	sp, #20
 800fb08:	f1b0 0900 	subs.w	r9, r0, #0
 800fb0c:	461d      	mov	r5, r3
 800fb0e:	4617      	mov	r7, r2
 800fb10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800fb12:	bfbb      	ittet	lt
 800fb14:	f1c9 0900 	rsblt	r9, r9, #0
 800fb18:	f04f 36ff 	movlt.w	r6, #4294967295
 800fb1c:	2601      	movge	r6, #1
 800fb1e:	6823      	ldrlt	r3, [r4, #0]
 800fb20:	bfbc      	itt	lt
 800fb22:	425b      	neglt	r3, r3
 800fb24:	6023      	strlt	r3, [r4, #0]
 800fb26:	2a00      	cmp	r2, #0
 800fb28:	da04      	bge.n	800fb34 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800fb2a:	6823      	ldr	r3, [r4, #0]
 800fb2c:	4257      	negs	r7, r2
 800fb2e:	4276      	negs	r6, r6
 800fb30:	425b      	negs	r3, r3
 800fb32:	6023      	str	r3, [r4, #0]
 800fb34:	2d00      	cmp	r5, #0
 800fb36:	4638      	mov	r0, r7
 800fb38:	bfba      	itte	lt
 800fb3a:	426d      	neglt	r5, r5
 800fb3c:	f04f 38ff 	movlt.w	r8, #4294967295
 800fb40:	f04f 0801 	movge.w	r8, #1
 800fb44:	f7ff ff64 	bl	800fa10 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800fb48:	ab03      	add	r3, sp, #12
 800fb4a:	463a      	mov	r2, r7
 800fb4c:	e9cd 5300 	strd	r5, r3, [sp]
 800fb50:	4603      	mov	r3, r0
 800fb52:	4648      	mov	r0, r9
 800fb54:	f7ff ff7a 	bl	800fa4c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800fb58:	6823      	ldr	r3, [r4, #0]
 800fb5a:	9a03      	ldr	r2, [sp, #12]
 800fb5c:	4546      	cmp	r6, r8
 800fb5e:	441a      	add	r2, r3
 800fb60:	fb92 f3f5 	sdiv	r3, r2, r5
 800fb64:	4418      	add	r0, r3
 800fb66:	fb05 2313 	mls	r3, r5, r3, r2
 800fb6a:	bf18      	it	ne
 800fb6c:	4240      	negne	r0, r0
 800fb6e:	1c72      	adds	r2, r6, #1
 800fb70:	6023      	str	r3, [r4, #0]
 800fb72:	d105      	bne.n	800fb80 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	f1c3 0200 	rsb	r2, r3, #0
 800fb7a:	db0b      	blt.n	800fb94 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800fb7c:	6022      	str	r2, [r4, #0]
 800fb7e:	e006      	b.n	800fb8e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800fb80:	2e01      	cmp	r6, #1
 800fb82:	d104      	bne.n	800fb8e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	da02      	bge.n	800fb8e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800fb88:	442b      	add	r3, r5
 800fb8a:	3801      	subs	r0, #1
 800fb8c:	6023      	str	r3, [r4, #0]
 800fb8e:	b005      	add	sp, #20
 800fb90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb94:	3801      	subs	r0, #1
 800fb96:	1b52      	subs	r2, r2, r5
 800fb98:	e7f0      	b.n	800fb7c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800fb9c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800fb9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800fba0:	4c1c      	ldr	r4, [pc, #112]	; (800fc14 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800fba2:	4605      	mov	r5, r0
 800fba4:	6807      	ldr	r7, [r0, #0]
 800fba6:	69a3      	ldr	r3, [r4, #24]
 800fba8:	b92b      	cbnz	r3, 800fbb6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800fbaa:	6840      	ldr	r0, [r0, #4]
 800fbac:	e9c5 7000 	strd	r7, r0, [r5]
 800fbb0:	b004      	add	sp, #16
 800fbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbb6:	f04f 0802 	mov.w	r8, #2
 800fbba:	68a2      	ldr	r2, [r4, #8]
 800fbbc:	ae04      	add	r6, sp, #16
 800fbbe:	6820      	ldr	r0, [r4, #0]
 800fbc0:	fb93 f1f8 	sdiv	r1, r3, r8
 800fbc4:	440a      	add	r2, r1
 800fbc6:	69e1      	ldr	r1, [r4, #28]
 800fbc8:	f846 2d04 	str.w	r2, [r6, #-4]!
 800fbcc:	463a      	mov	r2, r7
 800fbce:	9600      	str	r6, [sp, #0]
 800fbd0:	f7ff ff97 	bl	800fb02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800fbd4:	69a3      	ldr	r3, [r4, #24]
 800fbd6:	4607      	mov	r7, r0
 800fbd8:	686a      	ldr	r2, [r5, #4]
 800fbda:	6a21      	ldr	r1, [r4, #32]
 800fbdc:	9600      	str	r6, [sp, #0]
 800fbde:	6860      	ldr	r0, [r4, #4]
 800fbe0:	f7ff ff8f 	bl	800fb02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800fbe4:	69a3      	ldr	r3, [r4, #24]
 800fbe6:	6962      	ldr	r2, [r4, #20]
 800fbe8:	4407      	add	r7, r0
 800fbea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fbec:	9600      	str	r6, [sp, #0]
 800fbee:	68e0      	ldr	r0, [r4, #12]
 800fbf0:	fb93 f8f8 	sdiv	r8, r3, r8
 800fbf4:	4442      	add	r2, r8
 800fbf6:	9203      	str	r2, [sp, #12]
 800fbf8:	682a      	ldr	r2, [r5, #0]
 800fbfa:	f7ff ff82 	bl	800fb02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800fbfe:	4680      	mov	r8, r0
 800fc00:	9600      	str	r6, [sp, #0]
 800fc02:	69a3      	ldr	r3, [r4, #24]
 800fc04:	686a      	ldr	r2, [r5, #4]
 800fc06:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800fc08:	6920      	ldr	r0, [r4, #16]
 800fc0a:	f7ff ff7a 	bl	800fb02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800fc0e:	4440      	add	r0, r8
 800fc10:	e7cc      	b.n	800fbac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800fc12:	bf00      	nop
 800fc14:	20009fa0 	.word	0x20009fa0

0800fc18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800fc18:	4b07      	ldr	r3, [pc, #28]	; (800fc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d109      	bne.n	800fc34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800fc20:	f9b1 3000 	ldrsh.w	r3, [r1]
 800fc24:	f9b0 2000 	ldrsh.w	r2, [r0]
 800fc28:	8003      	strh	r3, [r0, #0]
 800fc2a:	4b04      	ldr	r3, [pc, #16]	; (800fc3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800fc2c:	881b      	ldrh	r3, [r3, #0]
 800fc2e:	3b01      	subs	r3, #1
 800fc30:	1a9b      	subs	r3, r3, r2
 800fc32:	800b      	strh	r3, [r1, #0]
 800fc34:	4770      	bx	lr
 800fc36:	bf00      	nop
 800fc38:	20009f8c 	.word	0x20009f8c
 800fc3c:	20009f90 	.word	0x20009f90

0800fc40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800fc40:	4b07      	ldr	r3, [pc, #28]	; (800fc60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800fc42:	b510      	push	{r4, lr}
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	d108      	bne.n	800fc5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800fc4a:	4b06      	ldr	r3, [pc, #24]	; (800fc64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800fc4c:	880c      	ldrh	r4, [r1, #0]
 800fc4e:	881b      	ldrh	r3, [r3, #0]
 800fc50:	f9b0 2000 	ldrsh.w	r2, [r0]
 800fc54:	3b01      	subs	r3, #1
 800fc56:	1b1b      	subs	r3, r3, r4
 800fc58:	8003      	strh	r3, [r0, #0]
 800fc5a:	800a      	strh	r2, [r1, #0]
 800fc5c:	bd10      	pop	{r4, pc}
 800fc5e:	bf00      	nop
 800fc60:	20009f8c 	.word	0x20009f8c
 800fc64:	20009f90 	.word	0x20009f90

0800fc68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800fc68:	4b0a      	ldr	r3, [pc, #40]	; (800fc94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800fc6a:	b510      	push	{r4, lr}
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d10e      	bne.n	800fc90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800fc72:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800fc76:	8843      	ldrh	r3, [r0, #2]
 800fc78:	f9b0 4000 	ldrsh.w	r4, [r0]
 800fc7c:	18ca      	adds	r2, r1, r3
 800fc7e:	4b06      	ldr	r3, [pc, #24]	; (800fc98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800fc80:	8044      	strh	r4, [r0, #2]
 800fc82:	881b      	ldrh	r3, [r3, #0]
 800fc84:	1a9b      	subs	r3, r3, r2
 800fc86:	8003      	strh	r3, [r0, #0]
 800fc88:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800fc8c:	8081      	strh	r1, [r0, #4]
 800fc8e:	80c3      	strh	r3, [r0, #6]
 800fc90:	bd10      	pop	{r4, pc}
 800fc92:	bf00      	nop
 800fc94:	20009f8c 	.word	0x20009f8c
 800fc98:	20009f90 	.word	0x20009f90

0800fc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800fc9c:	4b08      	ldr	r3, [pc, #32]	; (800fcc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	d10c      	bne.n	800fcbe <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800fca4:	8803      	ldrh	r3, [r0, #0]
 800fca6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800fcaa:	8842      	ldrh	r2, [r0, #2]
 800fcac:	8002      	strh	r2, [r0, #0]
 800fcae:	185a      	adds	r2, r3, r1
 800fcb0:	4b04      	ldr	r3, [pc, #16]	; (800fcc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800fcb2:	881b      	ldrh	r3, [r3, #0]
 800fcb4:	1a9b      	subs	r3, r3, r2
 800fcb6:	8043      	strh	r3, [r0, #2]
 800fcb8:	88c3      	ldrh	r3, [r0, #6]
 800fcba:	80c1      	strh	r1, [r0, #6]
 800fcbc:	8083      	strh	r3, [r0, #4]
 800fcbe:	4770      	bx	lr
 800fcc0:	20009f8c 	.word	0x20009f8c
 800fcc4:	20009f90 	.word	0x20009f90

0800fcc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800fcc8:	4b07      	ldr	r3, [pc, #28]	; (800fce8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800fcca:	b510      	push	{r4, lr}
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	d108      	bne.n	800fce4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800fcd2:	f9b1 3000 	ldrsh.w	r3, [r1]
 800fcd6:	f9b0 4000 	ldrsh.w	r4, [r0]
 800fcda:	8003      	strh	r3, [r0, #0]
 800fcdc:	8893      	ldrh	r3, [r2, #4]
 800fcde:	3b01      	subs	r3, #1
 800fce0:	1b1b      	subs	r3, r3, r4
 800fce2:	800b      	strh	r3, [r1, #0]
 800fce4:	bd10      	pop	{r4, pc}
 800fce6:	bf00      	nop
 800fce8:	20009f8c 	.word	0x20009f8c

0800fcec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800fcec:	4b0a      	ldr	r3, [pc, #40]	; (800fd18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800fcee:	460a      	mov	r2, r1
 800fcf0:	b510      	push	{r4, lr}
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d10d      	bne.n	800fd14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800fcf8:	8881      	ldrh	r1, [r0, #4]
 800fcfa:	8803      	ldrh	r3, [r0, #0]
 800fcfc:	440b      	add	r3, r1
 800fcfe:	4601      	mov	r1, r0
 800fd00:	3b01      	subs	r3, #1
 800fd02:	f821 3b02 	strh.w	r3, [r1], #2
 800fd06:	f7ff ffdf 	bl	800fcc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800fd0a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800fd0e:	88c2      	ldrh	r2, [r0, #6]
 800fd10:	80c3      	strh	r3, [r0, #6]
 800fd12:	8082      	strh	r2, [r0, #4]
 800fd14:	bd10      	pop	{r4, pc}
 800fd16:	bf00      	nop
 800fd18:	20009f8c 	.word	0x20009f8c

0800fd1c <_ZN8touchgfx11Application13requestRedrawEv>:
 800fd1c:	4b06      	ldr	r3, [pc, #24]	; (800fd38 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800fd1e:	2100      	movs	r1, #0
 800fd20:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fd24:	4b05      	ldr	r3, [pc, #20]	; (800fd3c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800fd26:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800fd2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd2e:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 800fd32:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 800fd36:	4770      	bx	lr
 800fd38:	20009f88 	.word	0x20009f88
 800fd3c:	20009f8a 	.word	0x20009f8a

0800fd40 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800fd40:	4b03      	ldr	r3, [pc, #12]	; (800fd50 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800fd42:	6818      	ldr	r0, [r3, #0]
 800fd44:	b110      	cbz	r0, 800fd4c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800fd46:	6803      	ldr	r3, [r0, #0]
 800fd48:	699b      	ldr	r3, [r3, #24]
 800fd4a:	4718      	bx	r3
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	20009fd0 	.word	0x20009fd0

0800fd54 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800fd54:	4770      	bx	lr
	...

0800fd58 <_ZN8touchgfx11Application4drawEv>:
 800fd58:	4b09      	ldr	r3, [pc, #36]	; (800fd80 <_ZN8touchgfx11Application4drawEv+0x28>)
 800fd5a:	b507      	push	{r0, r1, r2, lr}
 800fd5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fd60:	2100      	movs	r1, #0
 800fd62:	4b08      	ldr	r3, [pc, #32]	; (800fd84 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800fd64:	9100      	str	r1, [sp, #0]
 800fd66:	4669      	mov	r1, sp
 800fd68:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd6c:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fd70:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fd74:	6803      	ldr	r3, [r0, #0]
 800fd76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd78:	4798      	blx	r3
 800fd7a:	b003      	add	sp, #12
 800fd7c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd80:	20009f88 	.word	0x20009f88
 800fd84:	20009f8a 	.word	0x20009f8a

0800fd88 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800fd88:	4b03      	ldr	r3, [pc, #12]	; (800fd98 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800fd8a:	6818      	ldr	r0, [r3, #0]
 800fd8c:	b110      	cbz	r0, 800fd94 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800fd8e:	6803      	ldr	r3, [r0, #0]
 800fd90:	69db      	ldr	r3, [r3, #28]
 800fd92:	4718      	bx	r3
 800fd94:	4770      	bx	lr
 800fd96:	bf00      	nop
 800fd98:	20009fd0 	.word	0x20009fd0

0800fd9c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800fd9c:	4b03      	ldr	r3, [pc, #12]	; (800fdac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800fd9e:	6818      	ldr	r0, [r3, #0]
 800fda0:	b110      	cbz	r0, 800fda8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800fda2:	6803      	ldr	r3, [r0, #0]
 800fda4:	6a1b      	ldr	r3, [r3, #32]
 800fda6:	4718      	bx	r3
 800fda8:	4770      	bx	lr
 800fdaa:	bf00      	nop
 800fdac:	20009fd0 	.word	0x20009fd0

0800fdb0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800fdb0:	4b03      	ldr	r3, [pc, #12]	; (800fdc0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800fdb2:	6818      	ldr	r0, [r3, #0]
 800fdb4:	b110      	cbz	r0, 800fdbc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800fdb6:	6803      	ldr	r3, [r0, #0]
 800fdb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdba:	4718      	bx	r3
 800fdbc:	4770      	bx	lr
 800fdbe:	bf00      	nop
 800fdc0:	20009fd0 	.word	0x20009fd0

0800fdc4 <_ZN8touchgfx11Application15handleTickEventEv>:
 800fdc4:	b570      	push	{r4, r5, r6, lr}
 800fdc6:	4d38      	ldr	r5, [pc, #224]	; (800fea8 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 800fdc8:	4604      	mov	r4, r0
 800fdca:	6828      	ldr	r0, [r5, #0]
 800fdcc:	b140      	cbz	r0, 800fde0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800fdce:	7a03      	ldrb	r3, [r0, #8]
 800fdd0:	b933      	cbnz	r3, 800fde0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800fdd2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 800fdd6:	6803      	ldr	r3, [r0, #0]
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdde:	4718      	bx	r3
 800fde0:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 800fde4:	b97b      	cbnz	r3, 800fe06 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800fde6:	b170      	cbz	r0, 800fe06 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800fde8:	7a03      	ldrb	r3, [r0, #8]
 800fdea:	b163      	cbz	r3, 800fe06 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800fdec:	4b2f      	ldr	r3, [pc, #188]	; (800feac <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800fdee:	6818      	ldr	r0, [r3, #0]
 800fdf0:	b110      	cbz	r0, 800fdf8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800fdf2:	6803      	ldr	r3, [r0, #0]
 800fdf4:	691b      	ldr	r3, [r3, #16]
 800fdf6:	4798      	blx	r3
 800fdf8:	6828      	ldr	r0, [r5, #0]
 800fdfa:	6803      	ldr	r3, [r0, #0]
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	4798      	blx	r3
 800fe00:	2301      	movs	r3, #1
 800fe02:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 800fe06:	2500      	movs	r5, #0
 800fe08:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800fe0c:	42a8      	cmp	r0, r5
 800fe0e:	dd0c      	ble.n	800fe2a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 800fe10:	1963      	adds	r3, r4, r5
 800fe12:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800fe16:	b132      	cbz	r2, 800fe26 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 800fe18:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800fe1c:	4413      	add	r3, r2
 800fe1e:	6858      	ldr	r0, [r3, #4]
 800fe20:	6803      	ldr	r3, [r0, #0]
 800fe22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe24:	4798      	blx	r3
 800fe26:	3501      	adds	r5, #1
 800fe28:	e7ee      	b.n	800fe08 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	4298      	cmp	r0, r3
 800fe30:	d10f      	bne.n	800fe52 <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 800fe32:	1d25      	adds	r5, r4, #4
 800fe34:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 800fe38:	4291      	cmp	r1, r2
 800fe3a:	dd2d      	ble.n	800fe98 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 800fe3c:	1e48      	subs	r0, r1, #1
 800fe3e:	b280      	uxth	r0, r0
 800fe40:	4288      	cmp	r0, r1
 800fe42:	d31a      	bcc.n	800fe7a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 800fe44:	4b1a      	ldr	r3, [pc, #104]	; (800feb0 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 800fe46:	f240 11a9 	movw	r1, #425	; 0x1a9
 800fe4a:	4a1a      	ldr	r2, [pc, #104]	; (800feb4 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 800fe4c:	481a      	ldr	r0, [pc, #104]	; (800feb8 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 800fe4e:	f00f f923 	bl	801f098 <__assert_func>
 800fe52:	18e1      	adds	r1, r4, r3
 800fe54:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 800fe58:	b16d      	cbz	r5, 800fe76 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d00a      	beq.n	800fe74 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 800fe5e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800fe62:	4431      	add	r1, r6
 800fe64:	684e      	ldr	r6, [r1, #4]
 800fe66:	b291      	uxth	r1, r2
 800fe68:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800fe6c:	604e      	str	r6, [r1, #4]
 800fe6e:	18a1      	adds	r1, r4, r2
 800fe70:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 800fe74:	3201      	adds	r2, #1
 800fe76:	3301      	adds	r3, #1
 800fe78:	e7d9      	b.n	800fe2e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 800fe7a:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 800fe7e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800fe82:	3304      	adds	r3, #4
 800fe84:	428b      	cmp	r3, r1
 800fe86:	d004      	beq.n	800fe92 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 800fe88:	f853 6f04 	ldr.w	r6, [r3, #4]!
 800fe8c:	f843 6c04 	str.w	r6, [r3, #-4]
 800fe90:	e7f8      	b.n	800fe84 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 800fe92:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 800fe96:	e7cd      	b.n	800fe34 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 800fe98:	4b04      	ldr	r3, [pc, #16]	; (800feac <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800fe9a:	6818      	ldr	r0, [r3, #0]
 800fe9c:	b110      	cbz	r0, 800fea4 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 800fe9e:	6803      	ldr	r3, [r0, #0]
 800fea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea2:	e79a      	b.n	800fdda <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800fea4:	bd70      	pop	{r4, r5, r6, pc}
 800fea6:	bf00      	nop
 800fea8:	20009fd4 	.word	0x20009fd4
 800feac:	20009fd0 	.word	0x20009fd0
 800feb0:	08022688 	.word	0x08022688
 800feb4:	08022874 	.word	0x08022874
 800feb8:	08022696 	.word	0x08022696

0800febc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800febc:	b570      	push	{r4, r5, r6, lr}
 800febe:	4606      	mov	r6, r0
 800fec0:	460c      	mov	r4, r1
 800fec2:	b929      	cbnz	r1, 800fed0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 800fec4:	4b0c      	ldr	r3, [pc, #48]	; (800fef8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 800fec6:	2167      	movs	r1, #103	; 0x67
 800fec8:	4a0c      	ldr	r2, [pc, #48]	; (800fefc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 800feca:	480d      	ldr	r0, [pc, #52]	; (800ff00 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 800fecc:	f00f f8e4 	bl	801f098 <__assert_func>
 800fed0:	2300      	movs	r3, #0
 800fed2:	4d0c      	ldr	r5, [pc, #48]	; (800ff04 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 800fed4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800fed8:	6828      	ldr	r0, [r5, #0]
 800feda:	b110      	cbz	r0, 800fee2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 800fedc:	6803      	ldr	r3, [r0, #0]
 800fede:	695b      	ldr	r3, [r3, #20]
 800fee0:	4798      	blx	r3
 800fee2:	602c      	str	r4, [r5, #0]
 800fee4:	4620      	mov	r0, r4
 800fee6:	6823      	ldr	r3, [r4, #0]
 800fee8:	68db      	ldr	r3, [r3, #12]
 800feea:	4798      	blx	r3
 800feec:	6833      	ldr	r3, [r6, #0]
 800feee:	4630      	mov	r0, r6
 800fef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fef6:	4718      	bx	r3
 800fef8:	08022654 	.word	0x08022654
 800fefc:	08022734 	.word	0x08022734
 800ff00:	0802265e 	.word	0x0802265e
 800ff04:	20009fd0 	.word	0x20009fd0

0800ff08 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800ff08:	b510      	push	{r4, lr}
 800ff0a:	f9b1 4000 	ldrsh.w	r4, [r1]
 800ff0e:	888a      	ldrh	r2, [r1, #4]
 800ff10:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ff14:	4422      	add	r2, r4
 800ff16:	b212      	sxth	r2, r2
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	da15      	bge.n	800ff48 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800ff1c:	8882      	ldrh	r2, [r0, #4]
 800ff1e:	4413      	add	r3, r2
 800ff20:	b21b      	sxth	r3, r3
 800ff22:	429c      	cmp	r4, r3
 800ff24:	da10      	bge.n	800ff48 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800ff26:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800ff2a:	88c9      	ldrh	r1, [r1, #6]
 800ff2c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ff30:	4419      	add	r1, r3
 800ff32:	b209      	sxth	r1, r1
 800ff34:	428a      	cmp	r2, r1
 800ff36:	da07      	bge.n	800ff48 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800ff38:	88c0      	ldrh	r0, [r0, #6]
 800ff3a:	4410      	add	r0, r2
 800ff3c:	b200      	sxth	r0, r0
 800ff3e:	4283      	cmp	r3, r0
 800ff40:	bfac      	ite	ge
 800ff42:	2000      	movge	r0, #0
 800ff44:	2001      	movlt	r0, #1
 800ff46:	bd10      	pop	{r4, pc}
 800ff48:	2000      	movs	r0, #0
 800ff4a:	e7fc      	b.n	800ff46 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800ff4c <_ZNK8touchgfx4Rect8includesERKS0_>:
 800ff4c:	b570      	push	{r4, r5, r6, lr}
 800ff4e:	f9b1 4000 	ldrsh.w	r4, [r1]
 800ff52:	f9b0 5000 	ldrsh.w	r5, [r0]
 800ff56:	42ac      	cmp	r4, r5
 800ff58:	db18      	blt.n	800ff8c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800ff5a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800ff5e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	db12      	blt.n	800ff8c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800ff66:	8886      	ldrh	r6, [r0, #4]
 800ff68:	4435      	add	r5, r6
 800ff6a:	888e      	ldrh	r6, [r1, #4]
 800ff6c:	4434      	add	r4, r6
 800ff6e:	b22d      	sxth	r5, r5
 800ff70:	b224      	sxth	r4, r4
 800ff72:	42a5      	cmp	r5, r4
 800ff74:	db0a      	blt.n	800ff8c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800ff76:	88c0      	ldrh	r0, [r0, #6]
 800ff78:	4418      	add	r0, r3
 800ff7a:	88cb      	ldrh	r3, [r1, #6]
 800ff7c:	441a      	add	r2, r3
 800ff7e:	b200      	sxth	r0, r0
 800ff80:	b212      	sxth	r2, r2
 800ff82:	4290      	cmp	r0, r2
 800ff84:	bfb4      	ite	lt
 800ff86:	2000      	movlt	r0, #0
 800ff88:	2001      	movge	r0, #1
 800ff8a:	bd70      	pop	{r4, r5, r6, pc}
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	e7fc      	b.n	800ff8a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0800ff90 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800ff90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff92:	4604      	mov	r4, r0
 800ff94:	4608      	mov	r0, r1
 800ff96:	460d      	mov	r5, r1
 800ff98:	f7fc fe9f 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 800ff9c:	b978      	cbnz	r0, 800ffbe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	f7fc fe9b 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 800ffa4:	f9b5 6000 	ldrsh.w	r6, [r5]
 800ffa8:	b150      	cbz	r0, 800ffc0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800ffaa:	8026      	strh	r6, [r4, #0]
 800ffac:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800ffb0:	8063      	strh	r3, [r4, #2]
 800ffb2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ffb6:	80a3      	strh	r3, [r4, #4]
 800ffb8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ffbc:	80e3      	strh	r3, [r4, #6]
 800ffbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffc0:	f9b4 1000 	ldrsh.w	r1, [r4]
 800ffc4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800ffc8:	42b1      	cmp	r1, r6
 800ffca:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800ffce:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800ffd2:	460f      	mov	r7, r1
 800ffd4:	88ed      	ldrh	r5, [r5, #6]
 800ffd6:	bfa8      	it	ge
 800ffd8:	4637      	movge	r7, r6
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	4618      	mov	r0, r3
 800ffde:	4466      	add	r6, ip
 800ffe0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800ffe4:	bfa8      	it	ge
 800ffe6:	4610      	movge	r0, r2
 800ffe8:	442a      	add	r2, r5
 800ffea:	88e5      	ldrh	r5, [r4, #6]
 800ffec:	4461      	add	r1, ip
 800ffee:	b236      	sxth	r6, r6
 800fff0:	8027      	strh	r7, [r4, #0]
 800fff2:	442b      	add	r3, r5
 800fff4:	b209      	sxth	r1, r1
 800fff6:	b212      	sxth	r2, r2
 800fff8:	8060      	strh	r0, [r4, #2]
 800fffa:	b21b      	sxth	r3, r3
 800fffc:	428e      	cmp	r6, r1
 800fffe:	bfac      	ite	ge
 8010000:	ebc7 0106 	rsbge	r1, r7, r6
 8010004:	ebc7 0101 	rsblt	r1, r7, r1
 8010008:	429a      	cmp	r2, r3
 801000a:	bfac      	ite	ge
 801000c:	ebc0 0202 	rsbge	r2, r0, r2
 8010010:	ebc0 0203 	rsblt	r2, r0, r3
 8010014:	80a1      	strh	r1, [r4, #4]
 8010016:	80e2      	strh	r2, [r4, #6]
 8010018:	e7d1      	b.n	800ffbe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801001c <_ZN8touchgfx11Application11getInstanceEv>:
 801001c:	4b01      	ldr	r3, [pc, #4]	; (8010024 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801001e:	6818      	ldr	r0, [r3, #0]
 8010020:	4770      	bx	lr
 8010022:	bf00      	nop
 8010024:	20009fe0 	.word	0x20009fe0

08010028 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8010028:	2300      	movs	r3, #0
 801002a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801002e:	30a8      	adds	r0, #168	; 0xa8
 8010030:	f820 3c24 	strh.w	r3, [r0, #-36]
 8010034:	f802 3b01 	strb.w	r3, [r2], #1
 8010038:	4282      	cmp	r2, r0
 801003a:	d1fb      	bne.n	8010034 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801003c:	4770      	bx	lr

0801003e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801003e:	4603      	mov	r3, r0
 8010040:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8010044:	2200      	movs	r2, #0
 8010046:	801a      	strh	r2, [r3, #0]
 8010048:	3308      	adds	r3, #8
 801004a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801004e:	f823 2c04 	strh.w	r2, [r3, #-4]
 8010052:	f823 2c02 	strh.w	r2, [r3, #-2]
 8010056:	428b      	cmp	r3, r1
 8010058:	d1f5      	bne.n	8010046 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801005a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801005e:	4770      	bx	lr

08010060 <_ZN8touchgfx11ApplicationC1Ev>:
 8010060:	b570      	push	{r4, r5, r6, lr}
 8010062:	4b1a      	ldr	r3, [pc, #104]	; (80100cc <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8010064:	2500      	movs	r5, #0
 8010066:	4604      	mov	r4, r0
 8010068:	30a8      	adds	r0, #168	; 0xa8
 801006a:	f840 3ca8 	str.w	r3, [r0, #-168]
 801006e:	f820 5c24 	strh.w	r5, [r0, #-36]
 8010072:	f7ff ffe4 	bl	801003e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8010076:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801007a:	f7ff ffe0 	bl	801003e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801007e:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8010082:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8010086:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801008a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801008e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8010092:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8010096:	490e      	ldr	r1, [pc, #56]	; (80100d0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8010098:	480e      	ldr	r0, [pc, #56]	; (80100d4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801009a:	f00e fec1 	bl	801ee20 <CRC_Lock>
 801009e:	4e0e      	ldr	r6, [pc, #56]	; (80100d8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80100a0:	4b0e      	ldr	r3, [pc, #56]	; (80100dc <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80100a2:	b158      	cbz	r0, 80100bc <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 80100a4:	801d      	strh	r5, [r3, #0]
 80100a6:	2300      	movs	r3, #0
 80100a8:	4a0d      	ldr	r2, [pc, #52]	; (80100e0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80100aa:	4620      	mov	r0, r4
 80100ac:	6013      	str	r3, [r2, #0]
 80100ae:	4a0d      	ldr	r2, [pc, #52]	; (80100e4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80100b0:	6033      	str	r3, [r6, #0]
 80100b2:	6013      	str	r3, [r2, #0]
 80100b4:	f7ff ffb8 	bl	8010028 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80100b8:	4620      	mov	r0, r4
 80100ba:	bd70      	pop	{r4, r5, r6, pc}
 80100bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80100c0:	2002      	movs	r0, #2
 80100c2:	801a      	strh	r2, [r3, #0]
 80100c4:	6030      	str	r0, [r6, #0]
 80100c6:	f001 f9f9 	bl	80114bc <_ZN8touchgfx6Screen4drawEv>
 80100ca:	e7ec      	b.n	80100a6 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 80100cc:	080226f8 	.word	0x080226f8
 80100d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80100d4:	f407a5c2 	.word	0xf407a5c2
 80100d8:	20009fd0 	.word	0x20009fd0
 80100dc:	2000001c 	.word	0x2000001c
 80100e0:	20009fe0 	.word	0x20009fe0
 80100e4:	20009fd4 	.word	0x20009fd4

080100e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80100e8:	b510      	push	{r4, lr}
 80100ea:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80100ee:	428b      	cmp	r3, r1
 80100f0:	d806      	bhi.n	8010100 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 80100f2:	4b0b      	ldr	r3, [pc, #44]	; (8010120 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 80100f4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80100f8:	4a0a      	ldr	r2, [pc, #40]	; (8010124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 80100fa:	480b      	ldr	r0, [pc, #44]	; (8010128 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 80100fc:	f00e ffcc 	bl	801f098 <__assert_func>
 8010100:	3b01      	subs	r3, #1
 8010102:	b29b      	uxth	r3, r3
 8010104:	428b      	cmp	r3, r1
 8010106:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801010a:	d908      	bls.n	801011e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801010c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8010110:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801011a:	685a      	ldr	r2, [r3, #4]
 801011c:	6062      	str	r2, [r4, #4]
 801011e:	bd10      	pop	{r4, pc}
 8010120:	08022688 	.word	0x08022688
 8010124:	08022778 	.word	0x08022778
 8010128:	08022696 	.word	0x08022696

0801012c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801012c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801012e:	466b      	mov	r3, sp
 8010130:	4604      	mov	r4, r0
 8010132:	e883 0006 	stmia.w	r3, {r1, r2}
 8010136:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801013a:	2a07      	cmp	r2, #7
 801013c:	d906      	bls.n	801014c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801013e:	4b09      	ldr	r3, [pc, #36]	; (8010164 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8010140:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8010144:	4a08      	ldr	r2, [pc, #32]	; (8010168 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8010146:	4809      	ldr	r0, [pc, #36]	; (801016c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8010148:	f00e ffa6 	bl	801f098 <__assert_func>
 801014c:	1c51      	adds	r1, r2, #1
 801014e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8010152:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8010156:	cb03      	ldmia	r3!, {r0, r1}
 8010158:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801015c:	6069      	str	r1, [r5, #4]
 801015e:	b003      	add	sp, #12
 8010160:	bd30      	pop	{r4, r5, pc}
 8010162:	bf00      	nop
 8010164:	080226bf 	.word	0x080226bf
 8010168:	0802280e 	.word	0x0802280e
 801016c:	08022696 	.word	0x08022696

08010170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8010170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010174:	b08d      	sub	sp, #52	; 0x34
 8010176:	4683      	mov	fp, r0
 8010178:	ac08      	add	r4, sp, #32
 801017a:	4620      	mov	r0, r4
 801017c:	e884 0006 	stmia.w	r4, {r1, r2}
 8010180:	f7fc fdab 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 8010184:	2800      	cmp	r0, #0
 8010186:	d16a      	bne.n	801025e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8010188:	9402      	str	r4, [sp, #8]
 801018a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801018e:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8010192:	2400      	movs	r4, #0
 8010194:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8010198:	9301      	str	r3, [sp, #4]
 801019a:	36a0      	adds	r6, #160	; 0xa0
 801019c:	42a5      	cmp	r5, r4
 801019e:	d00d      	beq.n	80101bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 80101a0:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 80101a4:	9802      	ldr	r0, [sp, #8]
 80101a6:	f7ff fed1 	bl	800ff4c <_ZNK8touchgfx4Rect8includesERKS0_>
 80101aa:	b128      	cbz	r0, 80101b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 80101ac:	1e69      	subs	r1, r5, #1
 80101ae:	9801      	ldr	r0, [sp, #4]
 80101b0:	1b09      	subs	r1, r1, r4
 80101b2:	b289      	uxth	r1, r1
 80101b4:	f7ff ff98 	bl	80100e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80101b8:	3401      	adds	r4, #1
 80101ba:	e7ef      	b.n	801019c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80101bc:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80101c0:	1e7b      	subs	r3, r7, #1
 80101c2:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 80101c6:	9703      	str	r7, [sp, #12]
 80101c8:	9300      	str	r3, [sp, #0]
 80101ca:	2400      	movs	r4, #0
 80101cc:	4655      	mov	r5, sl
 80101ce:	9704      	str	r7, [sp, #16]
 80101d0:	4626      	mov	r6, r4
 80101d2:	9b04      	ldr	r3, [sp, #16]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d078      	beq.n	80102ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 80101d8:	9902      	ldr	r1, [sp, #8]
 80101da:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80101de:	f7ff fe93 	bl	800ff08 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80101e2:	b360      	cbz	r0, 801023e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 80101e4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80101e8:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 80101ec:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 80101f0:	45e6      	cmp	lr, ip
 80101f2:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 80101f6:	db35      	blt.n	8010264 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 80101f8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80101fc:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8010200:	4472      	add	r2, lr
 8010202:	4463      	add	r3, ip
 8010204:	b212      	sxth	r2, r2
 8010206:	b21b      	sxth	r3, r3
 8010208:	429a      	cmp	r2, r3
 801020a:	dc2b      	bgt.n	8010264 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801020c:	fa1f f288 	uxth.w	r2, r8
 8010210:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8010214:	45c1      	cmp	r9, r8
 8010216:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801021a:	4413      	add	r3, r2
 801021c:	fa1f fc89 	uxth.w	ip, r9
 8010220:	b29b      	uxth	r3, r3
 8010222:	fa0f fe83 	sxth.w	lr, r3
 8010226:	db0f      	blt.n	8010248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8010228:	eba3 030c 	sub.w	r3, r3, ip
 801022c:	1ac9      	subs	r1, r1, r3
 801022e:	b209      	sxth	r1, r1
 8010230:	2900      	cmp	r1, #0
 8010232:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8010236:	dd12      	ble.n	801025e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8010238:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801023c:	4604      	mov	r4, r0
 801023e:	9b04      	ldr	r3, [sp, #16]
 8010240:	3d08      	subs	r5, #8
 8010242:	3b01      	subs	r3, #1
 8010244:	9304      	str	r3, [sp, #16]
 8010246:	e7c4      	b.n	80101d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8010248:	4461      	add	r1, ip
 801024a:	b209      	sxth	r1, r1
 801024c:	4571      	cmp	r1, lr
 801024e:	dc3a      	bgt.n	80102c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8010250:	eba2 020c 	sub.w	r2, r2, ip
 8010254:	b212      	sxth	r2, r2
 8010256:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801025a:	2a00      	cmp	r2, #0
 801025c:	dcee      	bgt.n	801023c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801025e:	b00d      	add	sp, #52	; 0x34
 8010260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010264:	45c1      	cmp	r9, r8
 8010266:	db2e      	blt.n	80102c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8010268:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801026c:	4499      	add	r9, r3
 801026e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8010272:	4498      	add	r8, r3
 8010274:	fa0f f989 	sxth.w	r9, r9
 8010278:	fa0f f888 	sxth.w	r8, r8
 801027c:	45c1      	cmp	r9, r8
 801027e:	dc22      	bgt.n	80102c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8010280:	fa1f f28c 	uxth.w	r2, ip
 8010284:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8010288:	45e6      	cmp	lr, ip
 801028a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801028e:	4413      	add	r3, r2
 8010290:	fa1f f88e 	uxth.w	r8, lr
 8010294:	b29b      	uxth	r3, r3
 8010296:	fa0f f983 	sxth.w	r9, r3
 801029a:	db0a      	blt.n	80102b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801029c:	eba3 0308 	sub.w	r3, r3, r8
 80102a0:	1ac9      	subs	r1, r1, r3
 80102a2:	b209      	sxth	r1, r1
 80102a4:	2900      	cmp	r1, #0
 80102a6:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80102aa:	ddd8      	ble.n	801025e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80102ac:	f8ad 9020 	strh.w	r9, [sp, #32]
 80102b0:	e7c4      	b.n	801023c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 80102b2:	4441      	add	r1, r8
 80102b4:	b209      	sxth	r1, r1
 80102b6:	4549      	cmp	r1, r9
 80102b8:	dc05      	bgt.n	80102c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80102ba:	eba2 0208 	sub.w	r2, r2, r8
 80102be:	b212      	sxth	r2, r2
 80102c0:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80102c4:	e7c9      	b.n	801025a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80102c6:	4606      	mov	r6, r0
 80102c8:	e7b9      	b.n	801023e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 80102ca:	2c00      	cmp	r4, #0
 80102cc:	f47f af7d 	bne.w	80101ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 80102d0:	2e00      	cmp	r6, #0
 80102d2:	f000 81dc 	beq.w	801068e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 80102d6:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 80102da:	4655      	mov	r5, sl
 80102dc:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 80102e0:	b2b9      	uxth	r1, r7
 80102e2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80102e6:	b2b3      	uxth	r3, r6
 80102e8:	9104      	str	r1, [sp, #16]
 80102ea:	9804      	ldr	r0, [sp, #16]
 80102ec:	441a      	add	r2, r3
 80102ee:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80102f2:	b292      	uxth	r2, r2
 80102f4:	4401      	add	r1, r0
 80102f6:	fa0f f882 	sxth.w	r8, r2
 80102fa:	b289      	uxth	r1, r1
 80102fc:	9105      	str	r1, [sp, #20]
 80102fe:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8010302:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010306:	9b03      	ldr	r3, [sp, #12]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d054      	beq.n	80103b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801030c:	9902      	ldr	r1, [sp, #8]
 801030e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8010312:	f7ff fdf9 	bl	800ff08 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010316:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801031a:	b1d8      	cbz	r0, 8010354 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801031c:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8010320:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8010324:	4576      	cmp	r6, lr
 8010326:	dc26      	bgt.n	8010376 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8010328:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801032c:	44f4      	add	ip, lr
 801032e:	fa0f fc8c 	sxth.w	ip, ip
 8010332:	45e0      	cmp	r8, ip
 8010334:	db1f      	blt.n	8010376 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8010336:	428f      	cmp	r7, r1
 8010338:	fa1f fc81 	uxth.w	ip, r1
 801033c:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8010340:	dc0f      	bgt.n	8010362 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8010342:	9805      	ldr	r0, [sp, #20]
 8010344:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8010348:	eba0 0c0c 	sub.w	ip, r0, ip
 801034c:	eba1 010c 	sub.w	r1, r1, ip
 8010350:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8010354:	4620      	mov	r0, r4
 8010356:	9903      	ldr	r1, [sp, #12]
 8010358:	3d08      	subs	r5, #8
 801035a:	4604      	mov	r4, r0
 801035c:	3901      	subs	r1, #1
 801035e:	9103      	str	r1, [sp, #12]
 8010360:	e7cf      	b.n	8010302 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8010362:	4461      	add	r1, ip
 8010364:	b209      	sxth	r1, r1
 8010366:	4549      	cmp	r1, r9
 8010368:	dcf5      	bgt.n	8010356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801036a:	9904      	ldr	r1, [sp, #16]
 801036c:	eba1 0c0c 	sub.w	ip, r1, ip
 8010370:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8010374:	e7ee      	b.n	8010354 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8010376:	428f      	cmp	r7, r1
 8010378:	dced      	bgt.n	8010356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801037a:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801037e:	4461      	add	r1, ip
 8010380:	b209      	sxth	r1, r1
 8010382:	4589      	cmp	r9, r1
 8010384:	dbe7      	blt.n	8010356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010386:	4576      	cmp	r6, lr
 8010388:	fa1f fc8e 	uxth.w	ip, lr
 801038c:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8010390:	dc08      	bgt.n	80103a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8010392:	eba2 0c0c 	sub.w	ip, r2, ip
 8010396:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801039a:	eba1 010c 	sub.w	r1, r1, ip
 801039e:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 80103a2:	e7d7      	b.n	8010354 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80103a4:	4461      	add	r1, ip
 80103a6:	b209      	sxth	r1, r1
 80103a8:	4588      	cmp	r8, r1
 80103aa:	dbd4      	blt.n	8010356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80103ac:	eba3 0c0c 	sub.w	ip, r3, ip
 80103b0:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 80103b4:	e7ce      	b.n	8010354 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80103b6:	2c00      	cmp	r4, #0
 80103b8:	f000 8169 	beq.w	801068e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 80103bc:	9b00      	ldr	r3, [sp, #0]
 80103be:	3301      	adds	r3, #1
 80103c0:	f000 8165 	beq.w	801068e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 80103c4:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 80103c8:	9802      	ldr	r0, [sp, #8]
 80103ca:	4621      	mov	r1, r4
 80103cc:	f7ff fdbe 	bl	800ff4c <_ZNK8touchgfx4Rect8includesERKS0_>
 80103d0:	b120      	cbz	r0, 80103dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 80103d2:	f8bd 1000 	ldrh.w	r1, [sp]
 80103d6:	9801      	ldr	r0, [sp, #4]
 80103d8:	f7ff fe86 	bl	80100e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80103dc:	9902      	ldr	r1, [sp, #8]
 80103de:	4620      	mov	r0, r4
 80103e0:	f7ff fd92 	bl	800ff08 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80103e4:	2800      	cmp	r0, #0
 80103e6:	f000 809b 	beq.w	8010520 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 80103ea:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80103ee:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 80103f2:	fa1f f288 	uxth.w	r2, r8
 80103f6:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 80103fa:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 80103fe:	19d5      	adds	r5, r2, r7
 8010400:	b2a1      	uxth	r1, r4
 8010402:	45a0      	cmp	r8, r4
 8010404:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8010408:	fa1f f985 	uxth.w	r9, r5
 801040c:	440b      	add	r3, r1
 801040e:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8010412:	fa0f f589 	sxth.w	r5, r9
 8010416:	b29b      	uxth	r3, r3
 8010418:	9503      	str	r5, [sp, #12]
 801041a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801041e:	9507      	str	r5, [sp, #28]
 8010420:	f340 809d 	ble.w	801055e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8010424:	1a52      	subs	r2, r2, r1
 8010426:	4584      	cmp	ip, r0
 8010428:	fa0f fe83 	sxth.w	lr, r3
 801042c:	b292      	uxth	r2, r2
 801042e:	b215      	sxth	r5, r2
 8010430:	dd2f      	ble.n	8010492 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8010432:	9e00      	ldr	r6, [sp, #0]
 8010434:	fa1f fc8c 	uxth.w	ip, ip
 8010438:	b280      	uxth	r0, r0
 801043a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801043e:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8010442:	9e03      	ldr	r6, [sp, #12]
 8010444:	ebac 0300 	sub.w	r3, ip, r0
 8010448:	448c      	add	ip, r1
 801044a:	eba6 060e 	sub.w	r6, r6, lr
 801044e:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8010452:	b29b      	uxth	r3, r3
 8010454:	4470      	add	r0, lr
 8010456:	fa0f fc8c 	sxth.w	ip, ip
 801045a:	b21c      	sxth	r4, r3
 801045c:	b200      	sxth	r0, r0
 801045e:	4366      	muls	r6, r4
 8010460:	ebac 0000 	sub.w	r0, ip, r0
 8010464:	4368      	muls	r0, r5
 8010466:	4286      	cmp	r6, r0
 8010468:	db09      	blt.n	801047e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801046a:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801046e:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8010472:	4417      	add	r7, r2
 8010474:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010478:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801047c:	e685      	b.n	801018a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801047e:	440b      	add	r3, r1
 8010480:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8010484:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010488:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801048c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010490:	e67b      	b.n	801018a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010492:	9e03      	ldr	r6, [sp, #12]
 8010494:	45b6      	cmp	lr, r6
 8010496:	da28      	bge.n	80104ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8010498:	9b00      	ldr	r3, [sp, #0]
 801049a:	eba6 060e 	sub.w	r6, r6, lr
 801049e:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 80104a2:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 80104a6:	eb04 030c 	add.w	r3, r4, ip
 80104aa:	fa1f f883 	uxth.w	r8, r3
 80104ae:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 80104b2:	4403      	add	r3, r0
 80104b4:	fa0f f988 	sxth.w	r9, r8
 80104b8:	eba0 000c 	sub.w	r0, r0, ip
 80104bc:	eba3 0308 	sub.w	r3, r3, r8
 80104c0:	4368      	muls	r0, r5
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	fa0f f883 	sxth.w	r8, r3
 80104c8:	fb08 f606 	mul.w	r6, r8, r6
 80104cc:	42b0      	cmp	r0, r6
 80104ce:	dc06      	bgt.n	80104de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 80104d0:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 80104d4:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 80104d8:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 80104dc:	e7c9      	b.n	8010472 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 80104de:	4423      	add	r3, r4
 80104e0:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 80104e4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80104e8:	e64f      	b.n	801018a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80104ea:	eba3 0309 	sub.w	r3, r3, r9
 80104ee:	9807      	ldr	r0, [sp, #28]
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	2806      	cmp	r0, #6
 80104f4:	fa0f fc83 	sxth.w	ip, r3
 80104f8:	d818      	bhi.n	801052c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 80104fa:	4652      	mov	r2, sl
 80104fc:	ab0a      	add	r3, sp, #40	; 0x28
 80104fe:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8010502:	6851      	ldr	r1, [r2, #4]
 8010504:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8010508:	c303      	stmia	r3!, {r0, r1}
 801050a:	9b03      	ldr	r3, [sp, #12]
 801050c:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8010510:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8010514:	ab0a      	add	r3, sp, #40	; 0x28
 8010516:	9801      	ldr	r0, [sp, #4]
 8010518:	e893 0006 	ldmia.w	r3, {r1, r2}
 801051c:	f7ff fe06 	bl	801012c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010520:	9b00      	ldr	r3, [sp, #0]
 8010522:	f1aa 0a08 	sub.w	sl, sl, #8
 8010526:	3b01      	subs	r3, #1
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	e747      	b.n	80103bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801052c:	9800      	ldr	r0, [sp, #0]
 801052e:	45ac      	cmp	ip, r5
 8010530:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8010534:	db0c      	blt.n	8010550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 8010536:	4417      	add	r7, r2
 8010538:	4458      	add	r0, fp
 801053a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801053e:	b2bf      	uxth	r7, r7
 8010540:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8010544:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8010548:	440f      	add	r7, r1
 801054a:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801054e:	e61c      	b.n	801018a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010550:	4458      	add	r0, fp
 8010552:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8010556:	443b      	add	r3, r7
 8010558:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801055c:	e615      	b.n	801018a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801055e:	fa1f f18c 	uxth.w	r1, ip
 8010562:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 8010566:	b282      	uxth	r2, r0
 8010568:	4584      	cmp	ip, r0
 801056a:	eb01 0e05 	add.w	lr, r1, r5
 801056e:	9204      	str	r2, [sp, #16]
 8010570:	fa1f fe8e 	uxth.w	lr, lr
 8010574:	9e04      	ldr	r6, [sp, #16]
 8010576:	fa0f f28e 	sxth.w	r2, lr
 801057a:	9205      	str	r2, [sp, #20]
 801057c:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8010580:	4432      	add	r2, r6
 8010582:	b292      	uxth	r2, r2
 8010584:	9206      	str	r2, [sp, #24]
 8010586:	da26      	bge.n	80105d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8010588:	eba3 0309 	sub.w	r3, r3, r9
 801058c:	eba2 020e 	sub.w	r2, r2, lr
 8010590:	eba0 000c 	sub.w	r0, r0, ip
 8010594:	eba4 0408 	sub.w	r4, r4, r8
 8010598:	b29b      	uxth	r3, r3
 801059a:	b292      	uxth	r2, r2
 801059c:	fa0f fa83 	sxth.w	sl, r3
 80105a0:	b211      	sxth	r1, r2
 80105a2:	fb0a f000 	mul.w	r0, sl, r0
 80105a6:	434c      	muls	r4, r1
 80105a8:	42a0      	cmp	r0, r4
 80105aa:	9800      	ldr	r0, [sp, #0]
 80105ac:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80105b0:	dc06      	bgt.n	80105c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 80105b2:	4458      	add	r0, fp
 80105b4:	9a05      	ldr	r2, [sp, #20]
 80105b6:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 80105ba:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80105be:	e7ca      	b.n	8010556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 80105c0:	eb0b 0300 	add.w	r3, fp, r0
 80105c4:	9903      	ldr	r1, [sp, #12]
 80105c6:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 80105ca:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 80105ce:	442a      	add	r2, r5
 80105d0:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80105d4:	e5d9      	b.n	801018a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80105d6:	9e04      	ldr	r6, [sp, #16]
 80105d8:	9a03      	ldr	r2, [sp, #12]
 80105da:	1b89      	subs	r1, r1, r6
 80105dc:	b21e      	sxth	r6, r3
 80105de:	b289      	uxth	r1, r1
 80105e0:	4296      	cmp	r6, r2
 80105e2:	fa0f fc81 	sxth.w	ip, r1
 80105e6:	dd25      	ble.n	8010634 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 80105e8:	eba3 0309 	sub.w	r3, r3, r9
 80105ec:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80105f0:	9e05      	ldr	r6, [sp, #20]
 80105f2:	eba4 0408 	sub.w	r4, r4, r8
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	eba6 0902 	sub.w	r9, r6, r2
 80105fc:	fb0c f404 	mul.w	r4, ip, r4
 8010600:	b218      	sxth	r0, r3
 8010602:	9a00      	ldr	r2, [sp, #0]
 8010604:	fb00 f909 	mul.w	r9, r0, r9
 8010608:	00d2      	lsls	r2, r2, #3
 801060a:	454c      	cmp	r4, r9
 801060c:	db03      	blt.n	8010616 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801060e:	445a      	add	r2, fp
 8010610:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8010614:	e79f      	b.n	8010556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8010616:	eb0b 0302 	add.w	r3, fp, r2
 801061a:	9a03      	ldr	r2, [sp, #12]
 801061c:	4429      	add	r1, r5
 801061e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8010622:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 8010626:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801062a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801062e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010632:	e5aa      	b.n	801018a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010634:	9b06      	ldr	r3, [sp, #24]
 8010636:	9c07      	ldr	r4, [sp, #28]
 8010638:	eba3 020e 	sub.w	r2, r3, lr
 801063c:	2c06      	cmp	r4, #6
 801063e:	b292      	uxth	r2, r2
 8010640:	b213      	sxth	r3, r2
 8010642:	d80d      	bhi.n	8010660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8010644:	4651      	mov	r1, sl
 8010646:	aa0a      	add	r2, sp, #40	; 0x28
 8010648:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801064c:	6849      	ldr	r1, [r1, #4]
 801064e:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8010652:	9b05      	ldr	r3, [sp, #20]
 8010654:	c203      	stmia	r2!, {r0, r1}
 8010656:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801065a:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801065e:	e759      	b.n	8010514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8010660:	9c00      	ldr	r4, [sp, #0]
 8010662:	4563      	cmp	r3, ip
 8010664:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8010668:	db0d      	blt.n	8010686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801066a:	4429      	add	r1, r5
 801066c:	9a04      	ldr	r2, [sp, #16]
 801066e:	445c      	add	r4, fp
 8010670:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010674:	b289      	uxth	r1, r1
 8010676:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801067a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801067e:	4411      	add	r1, r2
 8010680:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8010684:	e581      	b.n	801018a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8010686:	445c      	add	r4, fp
 8010688:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801068c:	e79f      	b.n	80105ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801068e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8010692:	2f07      	cmp	r7, #7
 8010694:	d806      	bhi.n	80106a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8010696:	ab08      	add	r3, sp, #32
 8010698:	9801      	ldr	r0, [sp, #4]
 801069a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801069e:	f7ff fd45 	bl	801012c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80106a2:	e5dc      	b.n	801025e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80106a4:	f107 39ff 	add.w	r9, r7, #4294967295
 80106a8:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80106ac:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 80106b0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80106b4:	f04f 35ff 	mov.w	r5, #4294967295
 80106b8:	2400      	movs	r4, #0
 80106ba:	9304      	str	r3, [sp, #16]
 80106bc:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 80106c0:	f109 32ff 	add.w	r2, r9, #4294967295
 80106c4:	9300      	str	r3, [sp, #0]
 80106c6:	4690      	mov	r8, r2
 80106c8:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80106cc:	9303      	str	r3, [sp, #12]
 80106ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80106d2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80106d6:	6818      	ldr	r0, [r3, #0]
 80106d8:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80106dc:	9206      	str	r2, [sp, #24]
 80106de:	bf16      	itet	ne
 80106e0:	9904      	ldrne	r1, [sp, #16]
 80106e2:	f8dd e008 	ldreq.w	lr, [sp, #8]
 80106e6:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 80106ea:	9305      	str	r3, [sp, #20]
 80106ec:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80106f0:	f8be 6004 	ldrh.w	r6, [lr, #4]
 80106f4:	fb16 f601 	smulbb	r6, r6, r1
 80106f8:	6859      	ldr	r1, [r3, #4]
 80106fa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80106fe:	4671      	mov	r1, lr
 8010700:	a80a      	add	r0, sp, #40	; 0x28
 8010702:	f7ff fc45 	bl	800ff90 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010706:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801070a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801070e:	9b03      	ldr	r3, [sp, #12]
 8010710:	9a00      	ldr	r2, [sp, #0]
 8010712:	fb11 f100 	smulbb	r1, r1, r0
 8010716:	2008      	movs	r0, #8
 8010718:	fb02 6603 	mla	r6, r2, r3, r6
 801071c:	1b8e      	subs	r6, r1, r6
 801071e:	fb91 f1f0 	sdiv	r1, r1, r0
 8010722:	42b1      	cmp	r1, r6
 8010724:	dc21      	bgt.n	801076a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8010726:	4556      	cmp	r6, sl
 8010728:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801072c:	da03      	bge.n	8010736 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801072e:	b1e6      	cbz	r6, 801076a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8010730:	46b2      	mov	sl, r6
 8010732:	4645      	mov	r5, r8
 8010734:	464c      	mov	r4, r9
 8010736:	f108 38ff 	add.w	r8, r8, #4294967295
 801073a:	f118 0f02 	cmn.w	r8, #2
 801073e:	d1c8      	bne.n	80106d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 8010740:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010744:	f1a7 0708 	sub.w	r7, r7, #8
 8010748:	4691      	mov	r9, r2
 801074a:	d1b7      	bne.n	80106bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801074c:	9b01      	ldr	r3, [sp, #4]
 801074e:	b2a6      	uxth	r6, r4
 8010750:	00e4      	lsls	r4, r4, #3
 8010752:	1918      	adds	r0, r3, r4
 8010754:	1c6b      	adds	r3, r5, #1
 8010756:	d10b      	bne.n	8010770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 8010758:	4601      	mov	r1, r0
 801075a:	9802      	ldr	r0, [sp, #8]
 801075c:	f7ff fc18 	bl	800ff90 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010760:	4631      	mov	r1, r6
 8010762:	9801      	ldr	r0, [sp, #4]
 8010764:	f7ff fcc0 	bl	80100e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010768:	e50f      	b.n	801018a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801076a:	4645      	mov	r5, r8
 801076c:	464c      	mov	r4, r9
 801076e:	e7ed      	b.n	801074c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8010770:	9b01      	ldr	r3, [sp, #4]
 8010772:	00ed      	lsls	r5, r5, #3
 8010774:	445c      	add	r4, fp
 8010776:	1959      	adds	r1, r3, r5
 8010778:	445d      	add	r5, fp
 801077a:	f7ff fc09 	bl	800ff90 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801077e:	9b02      	ldr	r3, [sp, #8]
 8010780:	cb03      	ldmia	r3!, {r0, r1}
 8010782:	9b02      	ldr	r3, [sp, #8]
 8010784:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8010788:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801078c:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8010790:	6861      	ldr	r1, [r4, #4]
 8010792:	c303      	stmia	r3!, {r0, r1}
 8010794:	e7e4      	b.n	8010760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08010798 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8010798:	4b1d      	ldr	r3, [pc, #116]	; (8010810 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801079a:	b530      	push	{r4, r5, lr}
 801079c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80107a0:	b085      	sub	sp, #20
 80107a2:	4b1c      	ldr	r3, [pc, #112]	; (8010814 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80107a4:	460c      	mov	r4, r1
 80107a6:	2100      	movs	r1, #0
 80107a8:	4605      	mov	r5, r0
 80107aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80107ae:	6820      	ldr	r0, [r4, #0]
 80107b0:	9100      	str	r1, [sp, #0]
 80107b2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80107b6:	ab02      	add	r3, sp, #8
 80107b8:	6861      	ldr	r1, [r4, #4]
 80107ba:	f8ad 2004 	strh.w	r2, [sp, #4]
 80107be:	c303      	stmia	r3!, {r0, r1}
 80107c0:	4669      	mov	r1, sp
 80107c2:	a802      	add	r0, sp, #8
 80107c4:	f7fc fa46 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 80107c8:	ab02      	add	r3, sp, #8
 80107ca:	cb03      	ldmia	r3!, {r0, r1}
 80107cc:	4b12      	ldr	r3, [pc, #72]	; (8010818 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80107ce:	6020      	str	r0, [r4, #0]
 80107d0:	6818      	ldr	r0, [r3, #0]
 80107d2:	6061      	str	r1, [r4, #4]
 80107d4:	b138      	cbz	r0, 80107e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80107d6:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 80107da:	b133      	cbz	r3, 80107ea <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 80107dc:	6821      	ldr	r1, [r4, #0]
 80107de:	4628      	mov	r0, r5
 80107e0:	6862      	ldr	r2, [r4, #4]
 80107e2:	f7ff fcc5 	bl	8010170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80107e6:	b005      	add	sp, #20
 80107e8:	bd30      	pop	{r4, r5, pc}
 80107ea:	6803      	ldr	r3, [r0, #0]
 80107ec:	4621      	mov	r1, r4
 80107ee:	689b      	ldr	r3, [r3, #8]
 80107f0:	4798      	blx	r3
 80107f2:	4b0a      	ldr	r3, [pc, #40]	; (801081c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80107f4:	6818      	ldr	r0, [r3, #0]
 80107f6:	b118      	cbz	r0, 8010800 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80107f8:	6803      	ldr	r3, [r0, #0]
 80107fa:	4621      	mov	r1, r4
 80107fc:	689b      	ldr	r3, [r3, #8]
 80107fe:	4798      	blx	r3
 8010800:	4b07      	ldr	r3, [pc, #28]	; (8010820 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8010802:	4621      	mov	r1, r4
 8010804:	6818      	ldr	r0, [r3, #0]
 8010806:	6803      	ldr	r3, [r0, #0]
 8010808:	69db      	ldr	r3, [r3, #28]
 801080a:	4798      	blx	r3
 801080c:	e7eb      	b.n	80107e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801080e:	bf00      	nop
 8010810:	20009f88 	.word	0x20009f88
 8010814:	20009f8a 	.word	0x20009f8a
 8010818:	20009fd0 	.word	0x20009fd0
 801081c:	20009fcc 	.word	0x20009fcc
 8010820:	20009f94 	.word	0x20009f94

08010824 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8010824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010828:	4604      	mov	r4, r0
 801082a:	b09b      	sub	sp, #108	; 0x6c
 801082c:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8010830:	b129      	cbz	r1, 801083e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8010832:	2300      	movs	r3, #0
 8010834:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8010838:	b01b      	add	sp, #108	; 0x6c
 801083a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801083e:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8010842:	4630      	mov	r0, r6
 8010844:	f7fc fa49 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 8010848:	4605      	mov	r5, r0
 801084a:	b940      	cbnz	r0, 801085e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801084c:	4620      	mov	r0, r4
 801084e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8010852:	f7ff fc8d 	bl	8010170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010856:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801085a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801085e:	4ba6      	ldr	r3, [pc, #664]	; (8010af8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	b33b      	cbz	r3, 80108b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8010864:	4da5      	ldr	r5, [pc, #660]	; (8010afc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8010866:	4628      	mov	r0, r5
 8010868:	f7fc fa37 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 801086c:	4606      	mov	r6, r0
 801086e:	bb08      	cbnz	r0, 80108b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8010870:	4628      	mov	r0, r5
 8010872:	f7ff f9f9 	bl	800fc68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8010876:	6829      	ldr	r1, [r5, #0]
 8010878:	686a      	ldr	r2, [r5, #4]
 801087a:	4620      	mov	r0, r4
 801087c:	f7ff fc78 	bl	8010170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010880:	802e      	strh	r6, [r5, #0]
 8010882:	806e      	strh	r6, [r5, #2]
 8010884:	80ae      	strh	r6, [r5, #4]
 8010886:	80ee      	strh	r6, [r5, #6]
 8010888:	4f9d      	ldr	r7, [pc, #628]	; (8010b00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801088a:	a809      	add	r0, sp, #36	; 0x24
 801088c:	f7ff fbd7 	bl	801003e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8010890:	883d      	ldrh	r5, [r7, #0]
 8010892:	462e      	mov	r6, r5
 8010894:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010898:	42b3      	cmp	r3, r6
 801089a:	d910      	bls.n	80108be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801089c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80108a0:	3601      	adds	r6, #1
 80108a2:	a809      	add	r0, sp, #36	; 0x24
 80108a4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80108a8:	b2b6      	uxth	r6, r6
 80108aa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80108ae:	f7ff fc3d 	bl	801012c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80108b2:	e7ef      	b.n	8010894 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80108b4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d1e5      	bne.n	8010888 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 80108bc:	e7bc      	b.n	8010838 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80108be:	462e      	mov	r6, r5
 80108c0:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80108c4:	42b3      	cmp	r3, r6
 80108c6:	d90b      	bls.n	80108e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 80108c8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80108cc:	3601      	adds	r6, #1
 80108ce:	4620      	mov	r0, r4
 80108d0:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80108d4:	b2b6      	uxth	r6, r6
 80108d6:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80108da:	f7ff fc49 	bl	8010170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80108de:	e7ef      	b.n	80108c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 80108e0:	4a88      	ldr	r2, [pc, #544]	; (8010b04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 80108e2:	6813      	ldr	r3, [r2, #0]
 80108e4:	4690      	mov	r8, r2
 80108e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80108ea:	2b01      	cmp	r3, #1
 80108ec:	f040 8094 	bne.w	8010a18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 80108f0:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80108f4:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80108f8:	f04f 0900 	mov.w	r9, #0
 80108fc:	33aa      	adds	r3, #170	; 0xaa
 80108fe:	42a8      	cmp	r0, r5
 8010900:	f103 0308 	add.w	r3, r3, #8
 8010904:	dd0a      	ble.n	801091c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 8010906:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801090a:	3501      	adds	r5, #1
 801090c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8010910:	440a      	add	r2, r1
 8010912:	b212      	sxth	r2, r2
 8010914:	4591      	cmp	r9, r2
 8010916:	bfb8      	it	lt
 8010918:	4691      	movlt	r9, r2
 801091a:	e7f0      	b.n	80108fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801091c:	4b7a      	ldr	r3, [pc, #488]	; (8010b08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801091e:	4e7b      	ldr	r6, [pc, #492]	; (8010b0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8010920:	881d      	ldrh	r5, [r3, #0]
 8010922:	2300      	movs	r3, #0
 8010924:	2d0f      	cmp	r5, #15
 8010926:	bf8c      	ite	hi
 8010928:	08ed      	lsrhi	r5, r5, #3
 801092a:	2501      	movls	r5, #1
 801092c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8010930:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8010934:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8010938:	f8d8 0000 	ldr.w	r0, [r8]
 801093c:	440b      	add	r3, r1
 801093e:	6802      	ldr	r2, [r0, #0]
 8010940:	b21b      	sxth	r3, r3
 8010942:	4599      	cmp	r9, r3
 8010944:	dd4b      	ble.n	80109de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 8010946:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801094a:	4798      	blx	r3
 801094c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8010950:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8010954:	4413      	add	r3, r2
 8010956:	b21b      	sxth	r3, r3
 8010958:	195a      	adds	r2, r3, r5
 801095a:	4290      	cmp	r0, r2
 801095c:	da07      	bge.n	801096e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801095e:	4581      	cmp	r9, r0
 8010960:	dd05      	ble.n	801096e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8010962:	4298      	cmp	r0, r3
 8010964:	da33      	bge.n	80109ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8010966:	2b00      	cmp	r3, #0
 8010968:	dd31      	ble.n	80109ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801096a:	4648      	mov	r0, r9
 801096c:	e004      	b.n	8010978 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801096e:	4298      	cmp	r0, r3
 8010970:	dbfb      	blt.n	801096a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 8010972:	4548      	cmp	r0, r9
 8010974:	bfa8      	it	ge
 8010976:	4648      	movge	r0, r9
 8010978:	f9b6 2000 	ldrsh.w	r2, [r6]
 801097c:	2100      	movs	r1, #0
 801097e:	1ac0      	subs	r0, r0, r3
 8010980:	f8b7 a000 	ldrh.w	sl, [r7]
 8010984:	f8ad 1014 	strh.w	r1, [sp, #20]
 8010988:	f8ad 3016 	strh.w	r3, [sp, #22]
 801098c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8010990:	f8ad 001a 	strh.w	r0, [sp, #26]
 8010994:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010998:	4553      	cmp	r3, sl
 801099a:	d9c9      	bls.n	8010930 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801099c:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80109a0:	ab07      	add	r3, sp, #28
 80109a2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80109a6:	6851      	ldr	r1, [r2, #4]
 80109a8:	c303      	stmia	r3!, {r0, r1}
 80109aa:	a807      	add	r0, sp, #28
 80109ac:	a905      	add	r1, sp, #20
 80109ae:	f7fc f951 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 80109b2:	a807      	add	r0, sp, #28
 80109b4:	f7fc f991 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 80109b8:	b920      	cbnz	r0, 80109c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 80109ba:	6823      	ldr	r3, [r4, #0]
 80109bc:	a907      	add	r1, sp, #28
 80109be:	4620      	mov	r0, r4
 80109c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109c2:	4798      	blx	r3
 80109c4:	f10a 0a01 	add.w	sl, sl, #1
 80109c8:	fa1f fa8a 	uxth.w	sl, sl
 80109cc:	e7e2      	b.n	8010994 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 80109ce:	f8d8 0000 	ldr.w	r0, [r8]
 80109d2:	2101      	movs	r1, #1
 80109d4:	6803      	ldr	r3, [r0, #0]
 80109d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109da:	4798      	blx	r3
 80109dc:	e7a8      	b.n	8010930 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80109de:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80109e0:	4798      	blx	r3
 80109e2:	4b4b      	ldr	r3, [pc, #300]	; (8010b10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	f43f af26 	beq.w	8010838 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80109ec:	2300      	movs	r3, #0
 80109ee:	883d      	ldrh	r5, [r7, #0]
 80109f0:	34ea      	adds	r4, #234	; 0xea
 80109f2:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80109f6:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80109fa:	42ab      	cmp	r3, r5
 80109fc:	f67f af1c 	bls.w	8010838 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8010a00:	ab1a      	add	r3, sp, #104	; 0x68
 8010a02:	4620      	mov	r0, r4
 8010a04:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010a08:	3501      	adds	r5, #1
 8010a0a:	3b44      	subs	r3, #68	; 0x44
 8010a0c:	b2ad      	uxth	r5, r5
 8010a0e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010a12:	f7ff fb8b 	bl	801012c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010a16:	e7ee      	b.n	80109f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8010a18:	2b02      	cmp	r3, #2
 8010a1a:	f040 813d 	bne.w	8010c98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 8010a1e:	4b3d      	ldr	r3, [pc, #244]	; (8010b14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	2b01      	cmp	r3, #1
 8010a24:	d02c      	beq.n	8010a80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 8010a26:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 8010a2a:	883a      	ldrh	r2, [r7, #0]
 8010a2c:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8010a30:	3201      	adds	r2, #1
 8010a32:	b292      	uxth	r2, r2
 8010a34:	2900      	cmp	r1, #0
 8010a36:	d0d4      	beq.n	80109e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8010a38:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8010a3c:	4610      	mov	r0, r2
 8010a3e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8010a42:	f04f 0a00 	mov.w	sl, #0
 8010a46:	441d      	add	r5, r3
 8010a48:	b22d      	sxth	r5, r5
 8010a4a:	b283      	uxth	r3, r0
 8010a4c:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8010a50:	4299      	cmp	r1, r3
 8010a52:	f240 80c3 	bls.w	8010bdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 8010a56:	4426      	add	r6, r4
 8010a58:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8010a5c:	4684      	mov	ip, r0
 8010a5e:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 8010a62:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 8010a66:	4573      	cmp	r3, lr
 8010a68:	f340 80a5 	ble.w	8010bb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8010a6c:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 8010a70:	4475      	add	r5, lr
 8010a72:	b22d      	sxth	r5, r5
 8010a74:	429d      	cmp	r5, r3
 8010a76:	bfa8      	it	ge
 8010a78:	461d      	movge	r5, r3
 8010a7a:	3001      	adds	r0, #1
 8010a7c:	46e2      	mov	sl, ip
 8010a7e:	e7e4      	b.n	8010a4a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 8010a80:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8010a84:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8010a88:	f1bb 0f00 	cmp.w	fp, #0
 8010a8c:	d0a9      	beq.n	80109e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8010a8e:	883b      	ldrh	r3, [r7, #0]
 8010a90:	2600      	movs	r6, #0
 8010a92:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8010a96:	3301      	adds	r3, #1
 8010a98:	b29b      	uxth	r3, r3
 8010a9a:	b299      	uxth	r1, r3
 8010a9c:	00f5      	lsls	r5, r6, #3
 8010a9e:	458b      	cmp	fp, r1
 8010aa0:	d93a      	bls.n	8010b18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8010aa2:	4425      	add	r5, r4
 8010aa4:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8010aa8:	469c      	mov	ip, r3
 8010aaa:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8010aae:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8010ab2:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8010ab6:	4408      	add	r0, r1
 8010ab8:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8010abc:	4471      	add	r1, lr
 8010abe:	b200      	sxth	r0, r0
 8010ac0:	b209      	sxth	r1, r1
 8010ac2:	4288      	cmp	r0, r1
 8010ac4:	da06      	bge.n	8010ad4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 8010ac6:	4586      	cmp	lr, r0
 8010ac8:	4672      	mov	r2, lr
 8010aca:	bfb8      	it	lt
 8010acc:	4602      	movlt	r2, r0
 8010ace:	3301      	adds	r3, #1
 8010ad0:	4666      	mov	r6, ip
 8010ad2:	e7e2      	b.n	8010a9a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8010ad4:	d10b      	bne.n	8010aee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 8010ad6:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8010ada:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8010ade:	458c      	cmp	ip, r1
 8010ae0:	bfb4      	ite	lt
 8010ae2:	469c      	movlt	ip, r3
 8010ae4:	46b4      	movge	ip, r6
 8010ae6:	4572      	cmp	r2, lr
 8010ae8:	bfb8      	it	lt
 8010aea:	4672      	movlt	r2, lr
 8010aec:	e7ef      	b.n	8010ace <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8010aee:	428a      	cmp	r2, r1
 8010af0:	46b4      	mov	ip, r6
 8010af2:	bfb8      	it	lt
 8010af4:	460a      	movlt	r2, r1
 8010af6:	e7ea      	b.n	8010ace <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8010af8:	20009fcc 	.word	0x20009fcc
 8010afc:	20009fd8 	.word	0x20009fd8
 8010b00:	2000001c 	.word	0x2000001c
 8010b04:	20009f94 	.word	0x20009f94
 8010b08:	20009f8a 	.word	0x20009f8a
 8010b0c:	20009f88 	.word	0x20009f88
 8010b10:	20009f92 	.word	0x20009f92
 8010b14:	20009f8c 	.word	0x20009f8c
 8010b18:	1961      	adds	r1, r4, r5
 8010b1a:	ab07      	add	r3, sp, #28
 8010b1c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8010b20:	6849      	ldr	r1, [r1, #4]
 8010b22:	c303      	stmia	r3!, {r0, r1}
 8010b24:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8010b28:	a807      	add	r0, sp, #28
 8010b2a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8010b2e:	2b13      	cmp	r3, #19
 8010b30:	440b      	add	r3, r1
 8010b32:	bfd8      	it	le
 8010b34:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8010b38:	1a9b      	subs	r3, r3, r2
 8010b3a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010b3e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010b42:	f7ff f8ab 	bl	800fc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010b46:	a807      	add	r0, sp, #28
 8010b48:	f7fc f8c7 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	d199      	bne.n	8010a84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8010b50:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8010b54:	4425      	add	r5, r4
 8010b56:	f8d8 0000 	ldr.w	r0, [r8]
 8010b5a:	f1bc 0f14 	cmp.w	ip, #20
 8010b5e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010b62:	f8d0 e000 	ldr.w	lr, [r0]
 8010b66:	bfa8      	it	ge
 8010b68:	f04f 0c14 	movge.w	ip, #20
 8010b6c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8010b70:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8010b74:	fa1f fc8c 	uxth.w	ip, ip
 8010b78:	f8cd c000 	str.w	ip, [sp]
 8010b7c:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 8010b80:	47d0      	blx	sl
 8010b82:	4682      	mov	sl, r0
 8010b84:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010b88:	a807      	add	r0, sp, #28
 8010b8a:	f7ff f86d 	bl	800fc68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8010b8e:	6823      	ldr	r3, [r4, #0]
 8010b90:	4620      	mov	r0, r4
 8010b92:	a907      	add	r1, sp, #28
 8010b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b96:	4798      	blx	r3
 8010b98:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8010b9c:	eba0 000a 	sub.w	r0, r0, sl
 8010ba0:	b200      	sxth	r0, r0
 8010ba2:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8010ba6:	2800      	cmp	r0, #0
 8010ba8:	f47f af6c 	bne.w	8010a84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8010bac:	b2b1      	uxth	r1, r6
 8010bae:	4648      	mov	r0, r9
 8010bb0:	f7ff fa9a 	bl	80100e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010bb4:	e766      	b.n	8010a84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8010bb6:	d10c      	bne.n	8010bd2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8010bb8:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8010bbc:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8010bc0:	45b4      	cmp	ip, r6
 8010bc2:	bfb4      	ite	lt
 8010bc4:	4684      	movlt	ip, r0
 8010bc6:	46d4      	movge	ip, sl
 8010bc8:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8010bcc:	4433      	add	r3, r6
 8010bce:	b21b      	sxth	r3, r3
 8010bd0:	e750      	b.n	8010a74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 8010bd2:	4575      	cmp	r5, lr
 8010bd4:	46d4      	mov	ip, sl
 8010bd6:	bfa8      	it	ge
 8010bd8:	4675      	movge	r5, lr
 8010bda:	e74e      	b.n	8010a7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8010bdc:	eb0b 0006 	add.w	r0, fp, r6
 8010be0:	4426      	add	r6, r4
 8010be2:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8010be6:	f1b9 0f13 	cmp.w	r9, #19
 8010bea:	bfdc      	itt	le
 8010bec:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8010bf0:	444d      	addle	r5, r9
 8010bf2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010bf6:	bfd8      	it	le
 8010bf8:	b22d      	sxthle	r5, r5
 8010bfa:	f7fc f86e 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 8010bfe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010c02:	2800      	cmp	r0, #0
 8010c04:	f47f af16 	bne.w	8010a34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 8010c08:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8010c0c:	fa1f f989 	uxth.w	r9, r9
 8010c10:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010c14:	eba5 050c 	sub.w	r5, r5, ip
 8010c18:	fa1f f28c 	uxth.w	r2, ip
 8010c1c:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8010c20:	eb02 0009 	add.w	r0, r2, r9
 8010c24:	2d14      	cmp	r5, #20
 8010c26:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8010c2a:	bfa8      	it	ge
 8010c2c:	2514      	movge	r5, #20
 8010c2e:	b200      	sxth	r0, r0
 8010c30:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010c34:	b289      	uxth	r1, r1
 8010c36:	fa1f fe85 	uxth.w	lr, r5
 8010c3a:	eba0 000c 	sub.w	r0, r0, ip
 8010c3e:	f8ad c01e 	strh.w	ip, [sp, #30]
 8010c42:	4586      	cmp	lr, r0
 8010c44:	f8d8 0000 	ldr.w	r0, [r8]
 8010c48:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	bfb8      	it	lt
 8010c50:	46f1      	movlt	r9, lr
 8010c52:	6805      	ldr	r5, [r0, #0]
 8010c54:	f8cd 9000 	str.w	r9, [sp]
 8010c58:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 8010c5c:	47a8      	blx	r5
 8010c5e:	6823      	ldr	r3, [r4, #0]
 8010c60:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010c64:	a907      	add	r1, sp, #28
 8010c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c68:	4620      	mov	r0, r4
 8010c6a:	4798      	blx	r3
 8010c6c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8010c70:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8010c74:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8010c78:	1a5b      	subs	r3, r3, r1
 8010c7a:	440a      	add	r2, r1
 8010c7c:	b21b      	sxth	r3, r3
 8010c7e:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8010c82:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	f47f aecf 	bne.w	8010a2a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8010c8c:	fa1f f18a 	uxth.w	r1, sl
 8010c90:	4658      	mov	r0, fp
 8010c92:	f7ff fa29 	bl	80100e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010c96:	e6c8      	b.n	8010a2a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 8010c98:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010c9c:	42ab      	cmp	r3, r5
 8010c9e:	f67f aea0 	bls.w	80109e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8010ca2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8010ca6:	ab07      	add	r3, sp, #28
 8010ca8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8010cac:	6851      	ldr	r1, [r2, #4]
 8010cae:	c303      	stmia	r3!, {r0, r1}
 8010cb0:	a807      	add	r0, sp, #28
 8010cb2:	f7fc f812 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 8010cb6:	b920      	cbnz	r0, 8010cc2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 8010cb8:	6823      	ldr	r3, [r4, #0]
 8010cba:	a907      	add	r1, sp, #28
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cc0:	4798      	blx	r3
 8010cc2:	3501      	adds	r5, #1
 8010cc4:	b2ad      	uxth	r5, r5
 8010cc6:	e7e7      	b.n	8010c98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08010cc8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8010cc8:	4b03      	ldr	r3, [pc, #12]	; (8010cd8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8010cca:	2200      	movs	r2, #0
 8010ccc:	801a      	strh	r2, [r3, #0]
 8010cce:	805a      	strh	r2, [r3, #2]
 8010cd0:	809a      	strh	r2, [r3, #4]
 8010cd2:	80da      	strh	r2, [r3, #6]
 8010cd4:	4770      	bx	lr
 8010cd6:	bf00      	nop
 8010cd8:	20009fd8 	.word	0x20009fd8

08010cdc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8010cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce0:	b09d      	sub	sp, #116	; 0x74
 8010ce2:	4606      	mov	r6, r0
 8010ce4:	4614      	mov	r4, r2
 8010ce6:	468a      	mov	sl, r1
 8010ce8:	a803      	add	r0, sp, #12
 8010cea:	461d      	mov	r5, r3
 8010cec:	f000 fd60 	bl	80117b0 <_ZN8touchgfx12TextProviderC1Ev>
 8010cf0:	6833      	ldr	r3, [r6, #0]
 8010cf2:	4630      	mov	r0, r6
 8010cf4:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8010cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cfa:	4798      	blx	r3
 8010cfc:	6833      	ldr	r3, [r6, #0]
 8010cfe:	4607      	mov	r7, r0
 8010d00:	4630      	mov	r0, r6
 8010d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d04:	4798      	blx	r3
 8010d06:	462a      	mov	r2, r5
 8010d08:	2500      	movs	r5, #0
 8010d0a:	4621      	mov	r1, r4
 8010d0c:	9000      	str	r0, [sp, #0]
 8010d0e:	463b      	mov	r3, r7
 8010d10:	462c      	mov	r4, r5
 8010d12:	46a9      	mov	r9, r5
 8010d14:	46a8      	mov	r8, r5
 8010d16:	a803      	add	r0, sp, #12
 8010d18:	f000 fd9d 	bl	8011856 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	9302      	str	r3, [sp, #8]
 8010d20:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010d24:	429c      	cmp	r4, r3
 8010d26:	d002      	beq.n	8010d2e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8010d28:	455c      	cmp	r4, fp
 8010d2a:	bf18      	it	ne
 8010d2c:	4625      	movne	r5, r4
 8010d2e:	ab02      	add	r3, sp, #8
 8010d30:	4632      	mov	r2, r6
 8010d32:	4651      	mov	r1, sl
 8010d34:	a803      	add	r0, sp, #12
 8010d36:	f001 f88f 	bl	8011e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010d3a:	4604      	mov	r4, r0
 8010d3c:	b108      	cbz	r0, 8010d42 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8010d3e:	280a      	cmp	r0, #10
 8010d40:	d10a      	bne.n	8010d58 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8010d42:	45c1      	cmp	r9, r8
 8010d44:	bf38      	it	cc
 8010d46:	46c1      	movcc	r9, r8
 8010d48:	f04f 0800 	mov.w	r8, #0
 8010d4c:	2c00      	cmp	r4, #0
 8010d4e:	d1e5      	bne.n	8010d1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8010d50:	4648      	mov	r0, r9
 8010d52:	b01d      	add	sp, #116	; 0x74
 8010d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d58:	9a02      	ldr	r2, [sp, #8]
 8010d5a:	2a00      	cmp	r2, #0
 8010d5c:	d0de      	beq.n	8010d1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8010d5e:	7b57      	ldrb	r7, [r2, #13]
 8010d60:	4629      	mov	r1, r5
 8010d62:	6833      	ldr	r3, [r6, #0]
 8010d64:	007f      	lsls	r7, r7, #1
 8010d66:	8894      	ldrh	r4, [r2, #4]
 8010d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d6a:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8010d6e:	7a97      	ldrb	r7, [r2, #10]
 8010d70:	4307      	orrs	r7, r0
 8010d72:	4630      	mov	r0, r6
 8010d74:	4798      	blx	r3
 8010d76:	4438      	add	r0, r7
 8010d78:	4480      	add	r8, r0
 8010d7a:	fa1f f888 	uxth.w	r8, r8
 8010d7e:	e7e5      	b.n	8010d4c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08010d80 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8010d80:	b508      	push	{r3, lr}
 8010d82:	6803      	ldr	r3, [r0, #0]
 8010d84:	68db      	ldr	r3, [r3, #12]
 8010d86:	4798      	blx	r3
 8010d88:	b128      	cbz	r0, 8010d96 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8010d8a:	7b43      	ldrb	r3, [r0, #13]
 8010d8c:	7a80      	ldrb	r0, [r0, #10]
 8010d8e:	005b      	lsls	r3, r3, #1
 8010d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d94:	4318      	orrs	r0, r3
 8010d96:	bd08      	pop	{r3, pc}

08010d98 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8010d98:	b40e      	push	{r1, r2, r3}
 8010d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d9c:	b09e      	sub	sp, #120	; 0x78
 8010d9e:	4605      	mov	r5, r0
 8010da0:	ab23      	add	r3, sp, #140	; 0x8c
 8010da2:	a805      	add	r0, sp, #20
 8010da4:	f853 4b04 	ldr.w	r4, [r3], #4
 8010da8:	9303      	str	r3, [sp, #12]
 8010daa:	f000 fd01 	bl	80117b0 <_ZN8touchgfx12TextProviderC1Ev>
 8010dae:	682b      	ldr	r3, [r5, #0]
 8010db0:	4628      	mov	r0, r5
 8010db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010db4:	4798      	blx	r3
 8010db6:	682b      	ldr	r3, [r5, #0]
 8010db8:	4606      	mov	r6, r0
 8010dba:	4628      	mov	r0, r5
 8010dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010dbe:	4798      	blx	r3
 8010dc0:	4633      	mov	r3, r6
 8010dc2:	4621      	mov	r1, r4
 8010dc4:	ae1e      	add	r6, sp, #120	; 0x78
 8010dc6:	2400      	movs	r4, #0
 8010dc8:	9000      	str	r0, [sp, #0]
 8010dca:	9a03      	ldr	r2, [sp, #12]
 8010dcc:	a805      	add	r0, sp, #20
 8010dce:	f000 fd42 	bl	8011856 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010dd2:	f846 4d68 	str.w	r4, [r6, #-104]!
 8010dd6:	462a      	mov	r2, r5
 8010dd8:	4633      	mov	r3, r6
 8010dda:	4621      	mov	r1, r4
 8010ddc:	a805      	add	r0, sp, #20
 8010dde:	f001 f83b 	bl	8011e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010de2:	b300      	cbz	r0, 8010e26 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8010de4:	280a      	cmp	r0, #10
 8010de6:	d01a      	beq.n	8010e1e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8010de8:	9f04      	ldr	r7, [sp, #16]
 8010dea:	b1c7      	cbz	r7, 8010e1e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8010dec:	7b78      	ldrb	r0, [r7, #13]
 8010dee:	7a3b      	ldrb	r3, [r7, #8]
 8010df0:	00c1      	lsls	r1, r0, #3
 8010df2:	88aa      	ldrh	r2, [r5, #4]
 8010df4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8010df8:	4319      	orrs	r1, r3
 8010dfa:	0643      	lsls	r3, r0, #25
 8010dfc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8010e00:	bf48      	it	mi
 8010e02:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8010e06:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8010e0a:	bf48      	it	mi
 8010e0c:	b219      	sxthmi	r1, r3
 8010e0e:	79fb      	ldrb	r3, [r7, #7]
 8010e10:	4303      	orrs	r3, r0
 8010e12:	4413      	add	r3, r2
 8010e14:	1a5b      	subs	r3, r3, r1
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	42a3      	cmp	r3, r4
 8010e1a:	bfc8      	it	gt
 8010e1c:	b21c      	sxthgt	r4, r3
 8010e1e:	4633      	mov	r3, r6
 8010e20:	462a      	mov	r2, r5
 8010e22:	2100      	movs	r1, #0
 8010e24:	e7da      	b.n	8010ddc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8010e26:	b2a0      	uxth	r0, r4
 8010e28:	b01e      	add	sp, #120	; 0x78
 8010e2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010e2e:	b003      	add	sp, #12
 8010e30:	4770      	bx	lr

08010e32 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8010e32:	b40e      	push	{r1, r2, r3}
 8010e34:	b570      	push	{r4, r5, r6, lr}
 8010e36:	b09d      	sub	sp, #116	; 0x74
 8010e38:	4604      	mov	r4, r0
 8010e3a:	ab21      	add	r3, sp, #132	; 0x84
 8010e3c:	a803      	add	r0, sp, #12
 8010e3e:	f853 5b04 	ldr.w	r5, [r3], #4
 8010e42:	9302      	str	r3, [sp, #8]
 8010e44:	f000 fcb4 	bl	80117b0 <_ZN8touchgfx12TextProviderC1Ev>
 8010e48:	6823      	ldr	r3, [r4, #0]
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e4e:	4798      	blx	r3
 8010e50:	6823      	ldr	r3, [r4, #0]
 8010e52:	4606      	mov	r6, r0
 8010e54:	4620      	mov	r0, r4
 8010e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e58:	2401      	movs	r4, #1
 8010e5a:	4798      	blx	r3
 8010e5c:	4633      	mov	r3, r6
 8010e5e:	9000      	str	r0, [sp, #0]
 8010e60:	4629      	mov	r1, r5
 8010e62:	9a02      	ldr	r2, [sp, #8]
 8010e64:	a803      	add	r0, sp, #12
 8010e66:	f000 fcf6 	bl	8011856 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010e6a:	a803      	add	r0, sp, #12
 8010e6c:	f001 f8ee 	bl	801204c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010e70:	b2a3      	uxth	r3, r4
 8010e72:	b138      	cbz	r0, 8010e84 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8010e74:	280a      	cmp	r0, #10
 8010e76:	a803      	add	r0, sp, #12
 8010e78:	bf04      	itt	eq
 8010e7a:	3301      	addeq	r3, #1
 8010e7c:	b21c      	sxtheq	r4, r3
 8010e7e:	f001 f8e5 	bl	801204c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010e82:	e7f5      	b.n	8010e70 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8010e84:	4618      	mov	r0, r3
 8010e86:	b01d      	add	sp, #116	; 0x74
 8010e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e8c:	b003      	add	sp, #12
 8010e8e:	4770      	bx	lr

08010e90 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8010e90:	b40e      	push	{r1, r2, r3}
 8010e92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e94:	b09e      	sub	sp, #120	; 0x78
 8010e96:	4604      	mov	r4, r0
 8010e98:	ab23      	add	r3, sp, #140	; 0x8c
 8010e9a:	a805      	add	r0, sp, #20
 8010e9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010ea0:	9303      	str	r3, [sp, #12]
 8010ea2:	f000 fc85 	bl	80117b0 <_ZN8touchgfx12TextProviderC1Ev>
 8010ea6:	6823      	ldr	r3, [r4, #0]
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010eac:	4798      	blx	r3
 8010eae:	6823      	ldr	r3, [r4, #0]
 8010eb0:	4606      	mov	r6, r0
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010eb6:	4798      	blx	r3
 8010eb8:	4633      	mov	r3, r6
 8010eba:	4629      	mov	r1, r5
 8010ebc:	9000      	str	r0, [sp, #0]
 8010ebe:	9a03      	ldr	r2, [sp, #12]
 8010ec0:	a805      	add	r0, sp, #20
 8010ec2:	f000 fcc8 	bl	8011856 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010ec6:	ad1e      	add	r5, sp, #120	; 0x78
 8010ec8:	2100      	movs	r1, #0
 8010eca:	26ff      	movs	r6, #255	; 0xff
 8010ecc:	4622      	mov	r2, r4
 8010ece:	a805      	add	r0, sp, #20
 8010ed0:	f845 1d68 	str.w	r1, [r5, #-104]!
 8010ed4:	462b      	mov	r3, r5
 8010ed6:	f000 ffbf 	bl	8011e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010eda:	b1d8      	cbz	r0, 8010f14 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8010edc:	280a      	cmp	r0, #10
 8010ede:	d012      	beq.n	8010f06 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8010ee0:	9804      	ldr	r0, [sp, #16]
 8010ee2:	b180      	cbz	r0, 8010f06 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8010ee4:	7b47      	ldrb	r7, [r0, #13]
 8010ee6:	7922      	ldrb	r2, [r4, #4]
 8010ee8:	00fb      	lsls	r3, r7, #3
 8010eea:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8010eee:	7a03      	ldrb	r3, [r0, #8]
 8010ef0:	430b      	orrs	r3, r1
 8010ef2:	0679      	lsls	r1, r7, #25
 8010ef4:	bf44      	itt	mi
 8010ef6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010efa:	b21b      	sxthmi	r3, r3
 8010efc:	1ad3      	subs	r3, r2, r3
 8010efe:	b2db      	uxtb	r3, r3
 8010f00:	429e      	cmp	r6, r3
 8010f02:	bf28      	it	cs
 8010f04:	461e      	movcs	r6, r3
 8010f06:	462b      	mov	r3, r5
 8010f08:	4622      	mov	r2, r4
 8010f0a:	2100      	movs	r1, #0
 8010f0c:	a805      	add	r0, sp, #20
 8010f0e:	f000 ffa3 	bl	8011e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010f12:	e7e2      	b.n	8010eda <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8010f14:	4630      	mov	r0, r6
 8010f16:	b01e      	add	sp, #120	; 0x78
 8010f18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010f1c:	b003      	add	sp, #12
 8010f1e:	4770      	bx	lr

08010f20 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8010f20:	b513      	push	{r0, r1, r4, lr}
 8010f22:	6803      	ldr	r3, [r0, #0]
 8010f24:	2400      	movs	r4, #0
 8010f26:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8010f2a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010f2e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8010f32:	4669      	mov	r1, sp
 8010f34:	691b      	ldr	r3, [r3, #16]
 8010f36:	9400      	str	r4, [sp, #0]
 8010f38:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010f3c:	4798      	blx	r3
 8010f3e:	b002      	add	sp, #8
 8010f40:	bd10      	pop	{r4, pc}

08010f42 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8010f42:	b538      	push	{r3, r4, r5, lr}
 8010f44:	680b      	ldr	r3, [r1, #0]
 8010f46:	460c      	mov	r4, r1
 8010f48:	4605      	mov	r5, r0
 8010f4a:	68db      	ldr	r3, [r3, #12]
 8010f4c:	4798      	blx	r3
 8010f4e:	6823      	ldr	r3, [r4, #0]
 8010f50:	4620      	mov	r0, r4
 8010f52:	4629      	mov	r1, r5
 8010f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f56:	4798      	blx	r3
 8010f58:	4628      	mov	r0, r5
 8010f5a:	bd38      	pop	{r3, r4, r5, pc}

08010f5c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8010f5c:	b410      	push	{r4}
 8010f5e:	880a      	ldrh	r2, [r1, #0]
 8010f60:	8884      	ldrh	r4, [r0, #4]
 8010f62:	4422      	add	r2, r4
 8010f64:	800a      	strh	r2, [r1, #0]
 8010f66:	884a      	ldrh	r2, [r1, #2]
 8010f68:	88c4      	ldrh	r4, [r0, #6]
 8010f6a:	4422      	add	r2, r4
 8010f6c:	804a      	strh	r2, [r1, #2]
 8010f6e:	6940      	ldr	r0, [r0, #20]
 8010f70:	b120      	cbz	r0, 8010f7c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8010f72:	6803      	ldr	r3, [r0, #0]
 8010f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f7a:	4718      	bx	r3
 8010f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f80:	4770      	bx	lr

08010f82 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8010f82:	b570      	push	{r4, r5, r6, lr}
 8010f84:	8882      	ldrh	r2, [r0, #4]
 8010f86:	460c      	mov	r4, r1
 8010f88:	880b      	ldrh	r3, [r1, #0]
 8010f8a:	4605      	mov	r5, r0
 8010f8c:	4413      	add	r3, r2
 8010f8e:	800b      	strh	r3, [r1, #0]
 8010f90:	884b      	ldrh	r3, [r1, #2]
 8010f92:	88c2      	ldrh	r2, [r0, #6]
 8010f94:	4413      	add	r3, r2
 8010f96:	804b      	strh	r3, [r1, #2]
 8010f98:	1d01      	adds	r1, r0, #4
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f7fb fe5a 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 8010fa0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	dd0b      	ble.n	8010fc0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8010fa8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	dd07      	ble.n	8010fc0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8010fb0:	6968      	ldr	r0, [r5, #20]
 8010fb2:	b128      	cbz	r0, 8010fc0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8010fb4:	6803      	ldr	r3, [r0, #0]
 8010fb6:	4621      	mov	r1, r4
 8010fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fbe:	4718      	bx	r3
 8010fc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08010fc4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8010fc4:	b570      	push	{r4, r5, r6, lr}
 8010fc6:	8882      	ldrh	r2, [r0, #4]
 8010fc8:	460c      	mov	r4, r1
 8010fca:	880b      	ldrh	r3, [r1, #0]
 8010fcc:	4605      	mov	r5, r0
 8010fce:	4413      	add	r3, r2
 8010fd0:	800b      	strh	r3, [r1, #0]
 8010fd2:	884b      	ldrh	r3, [r1, #2]
 8010fd4:	88c2      	ldrh	r2, [r0, #6]
 8010fd6:	4413      	add	r3, r2
 8010fd8:	804b      	strh	r3, [r1, #2]
 8010fda:	1d01      	adds	r1, r0, #4
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f7fb fe39 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 8010fe2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	dd15      	ble.n	8011016 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8010fea:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	dd11      	ble.n	8011016 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8010ff2:	6968      	ldr	r0, [r5, #20]
 8010ff4:	b128      	cbz	r0, 8011002 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8010ff6:	6803      	ldr	r3, [r0, #0]
 8010ff8:	691b      	ldr	r3, [r3, #16]
 8010ffa:	4621      	mov	r1, r4
 8010ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011000:	4718      	bx	r3
 8011002:	4b05      	ldr	r3, [pc, #20]	; (8011018 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	3304      	adds	r3, #4
 8011008:	429d      	cmp	r5, r3
 801100a:	d104      	bne.n	8011016 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801100c:	f7ff f806 	bl	801001c <_ZN8touchgfx11Application11getInstanceEv>
 8011010:	6803      	ldr	r3, [r0, #0]
 8011012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011014:	e7f1      	b.n	8010ffa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 8011016:	bd70      	pop	{r4, r5, r6, pc}
 8011018:	20009fd0 	.word	0x20009fd0

0801101c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	4604      	mov	r4, r0
 8011020:	4616      	mov	r6, r2
 8011022:	460d      	mov	r5, r1
 8011024:	b901      	cbnz	r1, 8011028 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8011026:	b192      	cbz	r2, 801104e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8011028:	6823      	ldr	r3, [r4, #0]
 801102a:	4620      	mov	r0, r4
 801102c:	695b      	ldr	r3, [r3, #20]
 801102e:	4798      	blx	r3
 8011030:	88e2      	ldrh	r2, [r4, #6]
 8011032:	88a1      	ldrh	r1, [r4, #4]
 8011034:	4620      	mov	r0, r4
 8011036:	4432      	add	r2, r6
 8011038:	4429      	add	r1, r5
 801103a:	b212      	sxth	r2, r2
 801103c:	b209      	sxth	r1, r1
 801103e:	f7f8 f9af 	bl	80093a0 <_ZN8touchgfx8Drawable5setXYEss>
 8011042:	6823      	ldr	r3, [r4, #0]
 8011044:	4620      	mov	r0, r4
 8011046:	695b      	ldr	r3, [r3, #20]
 8011048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801104c:	4718      	bx	r3
 801104e:	bd70      	pop	{r4, r5, r6, pc}

08011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8011050:	b510      	push	{r4, lr}
 8011052:	2300      	movs	r3, #0
 8011054:	4604      	mov	r4, r0
 8011056:	4608      	mov	r0, r1
 8011058:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801105c:	8023      	strh	r3, [r4, #0]
 801105e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011062:	8063      	strh	r3, [r4, #2]
 8011064:	6803      	ldr	r3, [r0, #0]
 8011066:	80a1      	strh	r1, [r4, #4]
 8011068:	4621      	mov	r1, r4
 801106a:	80e2      	strh	r2, [r4, #6]
 801106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801106e:	4798      	blx	r3
 8011070:	4620      	mov	r0, r4
 8011072:	bd10      	pop	{r4, pc}

08011074 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8011074:	b530      	push	{r4, r5, lr}
 8011076:	8083      	strh	r3, [r0, #4]
 8011078:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801107c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8011080:	7183      	strb	r3, [r0, #6]
 8011082:	79c3      	ldrb	r3, [r0, #7]
 8011084:	6101      	str	r1, [r0, #16]
 8011086:	f365 0306 	bfi	r3, r5, #0, #7
 801108a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801108e:	8282      	strh	r2, [r0, #20]
 8011090:	f365 13c7 	bfi	r3, r5, #7, #1
 8011094:	71c3      	strb	r3, [r0, #7]
 8011096:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801109a:	7203      	strb	r3, [r0, #8]
 801109c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80110a0:	7243      	strb	r3, [r0, #9]
 80110a2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80110a6:	8143      	strh	r3, [r0, #10]
 80110a8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80110ac:	8183      	strh	r3, [r0, #12]
 80110ae:	4b01      	ldr	r3, [pc, #4]	; (80110b4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80110b0:	6003      	str	r3, [r0, #0]
 80110b2:	bd30      	pop	{r4, r5, pc}
 80110b4:	08022974 	.word	0x08022974

080110b8 <_ZNK8touchgfx9ConstFont4findEt>:
 80110b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ba:	6904      	ldr	r4, [r0, #16]
 80110bc:	b3bc      	cbz	r4, 801112e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80110be:	88a3      	ldrh	r3, [r4, #4]
 80110c0:	8a82      	ldrh	r2, [r0, #20]
 80110c2:	1acb      	subs	r3, r1, r3
 80110c4:	f102 32ff 	add.w	r2, r2, #4294967295
 80110c8:	d431      	bmi.n	801112e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80110ca:	4293      	cmp	r3, r2
 80110cc:	dd0c      	ble.n	80110e8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80110ce:	230e      	movs	r3, #14
 80110d0:	fb03 4302 	mla	r3, r3, r2, r4
 80110d4:	889b      	ldrh	r3, [r3, #4]
 80110d6:	1a5b      	subs	r3, r3, r1
 80110d8:	1ad3      	subs	r3, r2, r3
 80110da:	429a      	cmp	r2, r3
 80110dc:	db27      	blt.n	801112e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80110de:	2b00      	cmp	r3, #0
 80110e0:	bfbc      	itt	lt
 80110e2:	2302      	movlt	r3, #2
 80110e4:	fb92 f3f3 	sdivlt	r3, r2, r3
 80110e8:	2500      	movs	r5, #0
 80110ea:	260e      	movs	r6, #14
 80110ec:	4295      	cmp	r5, r2
 80110ee:	dc1e      	bgt.n	801112e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80110f0:	fb06 4003 	mla	r0, r6, r3, r4
 80110f4:	8887      	ldrh	r7, [r0, #4]
 80110f6:	42b9      	cmp	r1, r7
 80110f8:	d01a      	beq.n	8011130 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80110fa:	d20d      	bcs.n	8011118 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80110fc:	1e5a      	subs	r2, r3, #1
 80110fe:	4295      	cmp	r5, r2
 8011100:	dc15      	bgt.n	801112e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011102:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8011106:	1a5b      	subs	r3, r3, r1
 8011108:	1ad3      	subs	r3, r2, r3
 801110a:	429a      	cmp	r2, r3
 801110c:	db0f      	blt.n	801112e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801110e:	429d      	cmp	r5, r3
 8011110:	ddec      	ble.n	80110ec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011112:	1953      	adds	r3, r2, r5
 8011114:	105b      	asrs	r3, r3, #1
 8011116:	e7e9      	b.n	80110ec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011118:	1c5d      	adds	r5, r3, #1
 801111a:	42aa      	cmp	r2, r5
 801111c:	db07      	blt.n	801112e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801111e:	8a43      	ldrh	r3, [r0, #18]
 8011120:	1acb      	subs	r3, r1, r3
 8011122:	442b      	add	r3, r5
 8011124:	429d      	cmp	r5, r3
 8011126:	dc02      	bgt.n	801112e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011128:	429a      	cmp	r2, r3
 801112a:	dadf      	bge.n	80110ec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801112c:	e7f1      	b.n	8011112 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801112e:	2000      	movs	r0, #0
 8011130:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011132 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8011132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011134:	4604      	mov	r4, r0
 8011136:	4617      	mov	r7, r2
 8011138:	461e      	mov	r6, r3
 801113a:	b911      	cbnz	r1, 8011142 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801113c:	2500      	movs	r5, #0
 801113e:	4628      	mov	r0, r5
 8011140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011142:	290a      	cmp	r1, #10
 8011144:	d0fa      	beq.n	801113c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011146:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801114a:	4291      	cmp	r1, r2
 801114c:	d0f6      	beq.n	801113c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801114e:	f242 020b 	movw	r2, #8203	; 0x200b
 8011152:	4291      	cmp	r1, r2
 8011154:	d0f2      	beq.n	801113c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011156:	f7ff ffaf 	bl	80110b8 <_ZNK8touchgfx9ConstFont4findEt>
 801115a:	4605      	mov	r5, r0
 801115c:	b950      	cbnz	r0, 8011174 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801115e:	6823      	ldr	r3, [r4, #0]
 8011160:	4620      	mov	r0, r4
 8011162:	691b      	ldr	r3, [r3, #16]
 8011164:	4798      	blx	r3
 8011166:	4601      	mov	r1, r0
 8011168:	4620      	mov	r0, r4
 801116a:	f7ff ffa5 	bl	80110b8 <_ZNK8touchgfx9ConstFont4findEt>
 801116e:	4605      	mov	r5, r0
 8011170:	2800      	cmp	r0, #0
 8011172:	d0e3      	beq.n	801113c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8011174:	6823      	ldr	r3, [r4, #0]
 8011176:	4629      	mov	r1, r5
 8011178:	4620      	mov	r0, r4
 801117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801117c:	4798      	blx	r3
 801117e:	6038      	str	r0, [r7, #0]
 8011180:	6823      	ldr	r3, [r4, #0]
 8011182:	4620      	mov	r0, r4
 8011184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011186:	4798      	blx	r3
 8011188:	7030      	strb	r0, [r6, #0]
 801118a:	e7d8      	b.n	801113e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801118c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801118c:	2000      	movs	r0, #0
 801118e:	4770      	bx	lr

08011190 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8011190:	2001      	movs	r0, #1
 8011192:	4770      	bx	lr

08011194 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8011194:	2002      	movs	r0, #2
 8011196:	4770      	bx	lr

08011198 <_ZN8touchgfx12GestureEventD1Ev>:
 8011198:	4770      	bx	lr

0801119a <_ZN8touchgfx9DragEventD1Ev>:
 801119a:	4770      	bx	lr

0801119c <_ZN8touchgfx10ClickEventD1Ev>:
 801119c:	4770      	bx	lr

0801119e <_ZN8touchgfx10ClickEventD0Ev>:
 801119e:	b510      	push	{r4, lr}
 80111a0:	4604      	mov	r4, r0
 80111a2:	210c      	movs	r1, #12
 80111a4:	f00d ff49 	bl	801f03a <_ZdlPvj>
 80111a8:	4620      	mov	r0, r4
 80111aa:	bd10      	pop	{r4, pc}

080111ac <_ZN8touchgfx9DragEventD0Ev>:
 80111ac:	b510      	push	{r4, lr}
 80111ae:	4604      	mov	r4, r0
 80111b0:	2110      	movs	r1, #16
 80111b2:	f00d ff42 	bl	801f03a <_ZdlPvj>
 80111b6:	4620      	mov	r0, r4
 80111b8:	bd10      	pop	{r4, pc}

080111ba <_ZN8touchgfx12GestureEventD0Ev>:
 80111ba:	b510      	push	{r4, lr}
 80111bc:	4604      	mov	r4, r0
 80111be:	210c      	movs	r1, #12
 80111c0:	f00d ff3b 	bl	801f03a <_ZdlPvj>
 80111c4:	4620      	mov	r0, r4
 80111c6:	bd10      	pop	{r4, pc}

080111c8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80111c8:	b530      	push	{r4, r5, lr}
 80111ca:	460d      	mov	r5, r1
 80111cc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80111ce:	b087      	sub	sp, #28
 80111d0:	4604      	mov	r4, r0
 80111d2:	b301      	cbz	r1, 8011216 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80111d4:	a801      	add	r0, sp, #4
 80111d6:	f7ff ff3b 	bl	8011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80111da:	892a      	ldrh	r2, [r5, #8]
 80111dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80111e0:	7928      	ldrb	r0, [r5, #4]
 80111e2:	1ad2      	subs	r2, r2, r3
 80111e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80111e6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80111ea:	441a      	add	r2, r3
 80111ec:	896b      	ldrh	r3, [r5, #10]
 80111ee:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80111f2:	f88d 0010 	strb.w	r0, [sp, #16]
 80111f6:	1b5b      	subs	r3, r3, r5
 80111f8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80111fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80111fc:	442b      	add	r3, r5
 80111fe:	4d07      	ldr	r5, [pc, #28]	; (801121c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8011200:	f8ad 1012 	strh.w	r1, [sp, #18]
 8011204:	a903      	add	r1, sp, #12
 8011206:	9503      	str	r5, [sp, #12]
 8011208:	f8ad 2014 	strh.w	r2, [sp, #20]
 801120c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011210:	6803      	ldr	r3, [r0, #0]
 8011212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011214:	4798      	blx	r3
 8011216:	b007      	add	sp, #28
 8011218:	bd30      	pop	{r4, r5, pc}
 801121a:	bf00      	nop
 801121c:	080229f4 	.word	0x080229f4

08011220 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8011220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011224:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011226:	b08a      	sub	sp, #40	; 0x28
 8011228:	4604      	mov	r4, r0
 801122a:	460d      	mov	r5, r1
 801122c:	b113      	cbz	r3, 8011234 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801122e:	790b      	ldrb	r3, [r1, #4]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d044      	beq.n	80112be <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011234:	f104 0804 	add.w	r8, r4, #4
 8011238:	a803      	add	r0, sp, #12
 801123a:	4641      	mov	r1, r8
 801123c:	f7ff ff08 	bl	8011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011240:	792b      	ldrb	r3, [r5, #4]
 8011242:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8011246:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801124a:	b983      	cbnz	r3, 801126e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801124c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8011250:	892a      	ldrh	r2, [r5, #8]
 8011252:	88e9      	ldrh	r1, [r5, #6]
 8011254:	4640      	mov	r0, r8
 8011256:	1b92      	subs	r2, r2, r6
 8011258:	9301      	str	r3, [sp, #4]
 801125a:	1bc9      	subs	r1, r1, r7
 801125c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8011260:	b212      	sxth	r2, r2
 8011262:	9300      	str	r3, [sp, #0]
 8011264:	b209      	sxth	r1, r1
 8011266:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801126a:	f7fb fc11 	bl	800ca90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801126e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011270:	b329      	cbz	r1, 80112be <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011272:	a805      	add	r0, sp, #20
 8011274:	f7ff feec 	bl	8011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011278:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801127c:	792b      	ldrb	r3, [r5, #4]
 801127e:	a907      	add	r1, sp, #28
 8011280:	1abf      	subs	r7, r7, r2
 8011282:	88ea      	ldrh	r2, [r5, #6]
 8011284:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011286:	4417      	add	r7, r2
 8011288:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801128a:	f88d 3020 	strb.w	r3, [sp, #32]
 801128e:	4417      	add	r7, r2
 8011290:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8011294:	1ab6      	subs	r6, r6, r2
 8011296:	892a      	ldrh	r2, [r5, #8]
 8011298:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801129c:	4416      	add	r6, r2
 801129e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80112a0:	4416      	add	r6, r2
 80112a2:	4a08      	ldr	r2, [pc, #32]	; (80112c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80112a4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80112a8:	2600      	movs	r6, #0
 80112aa:	9207      	str	r2, [sp, #28]
 80112ac:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80112b0:	6803      	ldr	r3, [r0, #0]
 80112b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112b4:	4798      	blx	r3
 80112b6:	792b      	ldrb	r3, [r5, #4]
 80112b8:	b10b      	cbz	r3, 80112be <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80112ba:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80112be:	b00a      	add	sp, #40	; 0x28
 80112c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112c4:	080229cc 	.word	0x080229cc

080112c8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80112c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112cc:	460c      	mov	r4, r1
 80112ce:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80112d0:	b088      	sub	sp, #32
 80112d2:	4605      	mov	r5, r0
 80112d4:	2900      	cmp	r1, #0
 80112d6:	d06d      	beq.n	80113b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80112d8:	4668      	mov	r0, sp
 80112da:	f7ff feb9 	bl	8011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80112de:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80112e0:	88e3      	ldrh	r3, [r4, #6]
 80112e2:	f9bd 8000 	ldrsh.w	r8, [sp]
 80112e6:	440b      	add	r3, r1
 80112e8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80112ec:	b21b      	sxth	r3, r3
 80112ee:	4543      	cmp	r3, r8
 80112f0:	db31      	blt.n	8011356 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80112f2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80112f6:	44c4      	add	ip, r8
 80112f8:	fa0f fc8c 	sxth.w	ip, ip
 80112fc:	4563      	cmp	r3, ip
 80112fe:	da2a      	bge.n	8011356 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011300:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8011302:	8926      	ldrh	r6, [r4, #8]
 8011304:	4416      	add	r6, r2
 8011306:	b236      	sxth	r6, r6
 8011308:	42be      	cmp	r6, r7
 801130a:	db24      	blt.n	8011356 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801130c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8011310:	4438      	add	r0, r7
 8011312:	b200      	sxth	r0, r0
 8011314:	4286      	cmp	r6, r0
 8011316:	da1e      	bge.n	8011356 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011318:	8963      	ldrh	r3, [r4, #10]
 801131a:	4419      	add	r1, r3
 801131c:	b209      	sxth	r1, r1
 801131e:	4541      	cmp	r1, r8
 8011320:	db08      	blt.n	8011334 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011322:	4561      	cmp	r1, ip
 8011324:	da06      	bge.n	8011334 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011326:	89a3      	ldrh	r3, [r4, #12]
 8011328:	441a      	add	r2, r3
 801132a:	b212      	sxth	r2, r2
 801132c:	42ba      	cmp	r2, r7
 801132e:	db01      	blt.n	8011334 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8011330:	4282      	cmp	r2, r0
 8011332:	db10      	blt.n	8011356 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011334:	4b21      	ldr	r3, [pc, #132]	; (80113bc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8011336:	a904      	add	r1, sp, #16
 8011338:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801133a:	9304      	str	r3, [sp, #16]
 801133c:	2302      	movs	r3, #2
 801133e:	f88d 3014 	strb.w	r3, [sp, #20]
 8011342:	2300      	movs	r3, #0
 8011344:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011348:	f8ad 3018 	strh.w	r3, [sp, #24]
 801134c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011350:	6803      	ldr	r3, [r0, #0]
 8011352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011354:	4798      	blx	r3
 8011356:	1d29      	adds	r1, r5, #4
 8011358:	a802      	add	r0, sp, #8
 801135a:	f7ff fe79 	bl	8011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801135e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011362:	88e0      	ldrh	r0, [r4, #6]
 8011364:	eba3 0808 	sub.w	r8, r3, r8
 8011368:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801136c:	7921      	ldrb	r1, [r4, #4]
 801136e:	fa1f f888 	uxth.w	r8, r8
 8011372:	1bdf      	subs	r7, r3, r7
 8011374:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8011378:	b2bb      	uxth	r3, r7
 801137a:	4440      	add	r0, r8
 801137c:	8922      	ldrh	r2, [r4, #8]
 801137e:	8967      	ldrh	r7, [r4, #10]
 8011380:	4460      	add	r0, ip
 8011382:	89a4      	ldrh	r4, [r4, #12]
 8011384:	441a      	add	r2, r3
 8011386:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8011388:	44b8      	add	r8, r7
 801138a:	4423      	add	r3, r4
 801138c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8011390:	4432      	add	r2, r6
 8011392:	44e0      	add	r8, ip
 8011394:	4433      	add	r3, r6
 8011396:	4c0a      	ldr	r4, [pc, #40]	; (80113c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8011398:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801139a:	f88d 1014 	strb.w	r1, [sp, #20]
 801139e:	a904      	add	r1, sp, #16
 80113a0:	9404      	str	r4, [sp, #16]
 80113a2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80113a6:	f8ad 801a 	strh.w	r8, [sp, #26]
 80113aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80113ae:	6803      	ldr	r3, [r0, #0]
 80113b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80113b2:	4798      	blx	r3
 80113b4:	b008      	add	sp, #32
 80113b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113ba:	bf00      	nop
 80113bc:	080229cc 	.word	0x080229cc
 80113c0:	080229e0 	.word	0x080229e0

080113c4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80113c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80113c6:	4604      	mov	r4, r0
 80113c8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80113cc:	3201      	adds	r2, #1
 80113ce:	d112      	bne.n	80113f6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80113d0:	2500      	movs	r5, #0
 80113d2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80113d6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80113da:	6803      	ldr	r3, [r0, #0]
 80113dc:	9500      	str	r5, [sp, #0]
 80113de:	466d      	mov	r5, sp
 80113e0:	f8ad 1004 	strh.w	r1, [sp, #4]
 80113e4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80113e8:	4629      	mov	r1, r5
 80113ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ec:	4798      	blx	r3
 80113ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80113f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80113f6:	4620      	mov	r0, r4
 80113f8:	b003      	add	sp, #12
 80113fa:	bd30      	pop	{r4, r5, pc}

080113fc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80113fc:	b513      	push	{r0, r1, r4, lr}
 80113fe:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8011402:	4604      	mov	r4, r0
 8011404:	3301      	adds	r3, #1
 8011406:	d109      	bne.n	801141c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8011408:	4601      	mov	r1, r0
 801140a:	4668      	mov	r0, sp
 801140c:	f7ff fe20 	bl	8011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011410:	f8bd 3000 	ldrh.w	r3, [sp]
 8011414:	8423      	strh	r3, [r4, #32]
 8011416:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801141a:	8463      	strh	r3, [r4, #34]	; 0x22
 801141c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8011420:	b002      	add	sp, #8
 8011422:	bd10      	pop	{r4, pc}

08011424 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8011424:	b513      	push	{r0, r1, r4, lr}
 8011426:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801142a:	4604      	mov	r4, r0
 801142c:	3301      	adds	r3, #1
 801142e:	d109      	bne.n	8011444 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8011430:	4601      	mov	r1, r0
 8011432:	4668      	mov	r0, sp
 8011434:	f7ff fe0c 	bl	8011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011438:	f8bd 3000 	ldrh.w	r3, [sp]
 801143c:	8423      	strh	r3, [r4, #32]
 801143e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011442:	8463      	strh	r3, [r4, #34]	; 0x22
 8011444:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8011448:	b002      	add	sp, #8
 801144a:	bd10      	pop	{r4, pc}

0801144c <_ZN8touchgfx6ScreenC1Ev>:
 801144c:	b570      	push	{r4, r5, r6, lr}
 801144e:	4b17      	ldr	r3, [pc, #92]	; (80114ac <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8011450:	4605      	mov	r5, r0
 8011452:	4a17      	ldr	r2, [pc, #92]	; (80114b0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8011454:	2101      	movs	r1, #1
 8011456:	f845 3b04 	str.w	r3, [r5], #4
 801145a:	2300      	movs	r3, #0
 801145c:	6042      	str	r2, [r0, #4]
 801145e:	4604      	mov	r4, r0
 8011460:	8103      	strh	r3, [r0, #8]
 8011462:	8143      	strh	r3, [r0, #10]
 8011464:	8183      	strh	r3, [r0, #12]
 8011466:	81c3      	strh	r3, [r0, #14]
 8011468:	8203      	strh	r3, [r0, #16]
 801146a:	8243      	strh	r3, [r0, #18]
 801146c:	8283      	strh	r3, [r0, #20]
 801146e:	82c3      	strh	r3, [r0, #22]
 8011470:	6203      	str	r3, [r0, #32]
 8011472:	8483      	strh	r3, [r0, #36]	; 0x24
 8011474:	84c3      	strh	r3, [r0, #38]	; 0x26
 8011476:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801147a:	6343      	str	r3, [r0, #52]	; 0x34
 801147c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8011480:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8011484:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8011488:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801148c:	4b09      	ldr	r3, [pc, #36]	; (80114b4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801148e:	4628      	mov	r0, r5
 8011490:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011494:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011496:	4a08      	ldr	r2, [pc, #32]	; (80114b8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8011498:	f9b2 1000 	ldrsh.w	r1, [r2]
 801149c:	4798      	blx	r3
 801149e:	6863      	ldr	r3, [r4, #4]
 80114a0:	4628      	mov	r0, r5
 80114a2:	4631      	mov	r1, r6
 80114a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114a6:	4798      	blx	r3
 80114a8:	4620      	mov	r0, r4
 80114aa:	bd70      	pop	{r4, r5, r6, pc}
 80114ac:	08022a08 	.word	0x08022a08
 80114b0:	08021818 	.word	0x08021818
 80114b4:	20009f8a 	.word	0x20009f8a
 80114b8:	20009f88 	.word	0x20009f88

080114bc <_ZN8touchgfx6Screen4drawEv>:
 80114bc:	4b09      	ldr	r3, [pc, #36]	; (80114e4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80114be:	b507      	push	{r0, r1, r2, lr}
 80114c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80114c4:	2100      	movs	r1, #0
 80114c6:	4b08      	ldr	r3, [pc, #32]	; (80114e8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80114c8:	9100      	str	r1, [sp, #0]
 80114ca:	4669      	mov	r1, sp
 80114cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80114d0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80114d4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80114d8:	6803      	ldr	r3, [r0, #0]
 80114da:	689b      	ldr	r3, [r3, #8]
 80114dc:	4798      	blx	r3
 80114de:	b003      	add	sp, #12
 80114e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80114e4:	20009f88 	.word	0x20009f88
 80114e8:	20009f8a 	.word	0x20009f8a

080114ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80114ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80114f4:	b089      	sub	sp, #36	; 0x24
 80114f6:	4680      	mov	r8, r0
 80114f8:	460c      	mov	r4, r1
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	4615      	mov	r5, r2
 80114fe:	dd0e      	ble.n	801151e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011500:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011504:	2b00      	cmp	r3, #0
 8011506:	dd0a      	ble.n	801151e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011508:	4628      	mov	r0, r5
 801150a:	f7ff ff5b 	bl	80113c4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801150e:	4621      	mov	r1, r4
 8011510:	f7fe fcfa 	bl	800ff08 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011514:	69eb      	ldr	r3, [r5, #28]
 8011516:	b928      	cbnz	r0, 8011524 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8011518:	461d      	mov	r5, r3
 801151a:	2b00      	cmp	r3, #0
 801151c:	d1f4      	bne.n	8011508 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801151e:	b009      	add	sp, #36	; 0x24
 8011520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011524:	ae04      	add	r6, sp, #16
 8011526:	2b00      	cmp	r3, #0
 8011528:	f000 80b5 	beq.w	8011696 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801152c:	682b      	ldr	r3, [r5, #0]
 801152e:	4629      	mov	r1, r5
 8011530:	a802      	add	r0, sp, #8
 8011532:	68db      	ldr	r3, [r3, #12]
 8011534:	4798      	blx	r3
 8011536:	4628      	mov	r0, r5
 8011538:	f7ff ff60 	bl	80113fc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801153c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8011540:	4407      	add	r7, r0
 8011542:	4628      	mov	r0, r5
 8011544:	f7ff ff6e 	bl	8011424 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011548:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801154c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8011550:	b23f      	sxth	r7, r7
 8011552:	4418      	add	r0, r3
 8011554:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011558:	4621      	mov	r1, r4
 801155a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801155e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011562:	4630      	mov	r0, r6
 8011564:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011568:	f8ad 7010 	strh.w	r7, [sp, #16]
 801156c:	f7fb fb72 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 8011570:	4628      	mov	r0, r5
 8011572:	f7ff ff27 	bl	80113c4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011576:	ab06      	add	r3, sp, #24
 8011578:	4602      	mov	r2, r0
 801157a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801157e:	e883 0003 	stmia.w	r3, {r0, r1}
 8011582:	4611      	mov	r1, r2
 8011584:	4618      	mov	r0, r3
 8011586:	f7fb fb65 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 801158a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801158e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011592:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8011596:	4299      	cmp	r1, r3
 8011598:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801159c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80115a0:	d10b      	bne.n	80115ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80115a2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80115a6:	4552      	cmp	r2, sl
 80115a8:	d107      	bne.n	80115ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80115aa:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80115ae:	455a      	cmp	r2, fp
 80115b0:	d103      	bne.n	80115ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80115b2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80115b6:	454a      	cmp	r2, r9
 80115b8:	d06d      	beq.n	8011696 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80115ba:	f1bb 0f00 	cmp.w	fp, #0
 80115be:	dd65      	ble.n	801168c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80115c0:	f1b9 0f00 	cmp.w	r9, #0
 80115c4:	dd62      	ble.n	801168c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80115c6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80115ca:	fa1f f08a 	uxth.w	r0, sl
 80115ce:	4552      	cmp	r2, sl
 80115d0:	9000      	str	r0, [sp, #0]
 80115d2:	da12      	bge.n	80115fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80115d4:	9301      	str	r3, [sp, #4]
 80115d6:	9b00      	ldr	r3, [sp, #0]
 80115d8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80115dc:	f8ad 2012 	strh.w	r2, [sp, #18]
 80115e0:	1a9a      	subs	r2, r3, r2
 80115e2:	f8ad 1010 	strh.w	r1, [sp, #16]
 80115e6:	4631      	mov	r1, r6
 80115e8:	f8ad 0014 	strh.w	r0, [sp, #20]
 80115ec:	4640      	mov	r0, r8
 80115ee:	f8ad 2016 	strh.w	r2, [sp, #22]
 80115f2:	69ea      	ldr	r2, [r5, #28]
 80115f4:	f7ff ff7a 	bl	80114ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80115f8:	9b01      	ldr	r3, [sp, #4]
 80115fa:	f9b4 2000 	ldrsh.w	r2, [r4]
 80115fe:	b29f      	uxth	r7, r3
 8011600:	429a      	cmp	r2, r3
 8011602:	da0d      	bge.n	8011620 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8011604:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011608:	1aba      	subs	r2, r7, r2
 801160a:	f8ad a012 	strh.w	sl, [sp, #18]
 801160e:	4631      	mov	r1, r6
 8011610:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011614:	4640      	mov	r0, r8
 8011616:	f8ad 9016 	strh.w	r9, [sp, #22]
 801161a:	69ea      	ldr	r2, [r5, #28]
 801161c:	f7ff ff66 	bl	80114ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011620:	8822      	ldrh	r2, [r4, #0]
 8011622:	445f      	add	r7, fp
 8011624:	88a3      	ldrh	r3, [r4, #4]
 8011626:	b2bf      	uxth	r7, r7
 8011628:	4413      	add	r3, r2
 801162a:	b23a      	sxth	r2, r7
 801162c:	b29b      	uxth	r3, r3
 801162e:	b219      	sxth	r1, r3
 8011630:	4291      	cmp	r1, r2
 8011632:	dd0d      	ble.n	8011650 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8011634:	1bdb      	subs	r3, r3, r7
 8011636:	f8ad 2010 	strh.w	r2, [sp, #16]
 801163a:	f8ad a012 	strh.w	sl, [sp, #18]
 801163e:	4631      	mov	r1, r6
 8011640:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011644:	4640      	mov	r0, r8
 8011646:	f8ad 9016 	strh.w	r9, [sp, #22]
 801164a:	69ea      	ldr	r2, [r5, #28]
 801164c:	f7ff ff4e 	bl	80114ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011650:	88e2      	ldrh	r2, [r4, #6]
 8011652:	8863      	ldrh	r3, [r4, #2]
 8011654:	4413      	add	r3, r2
 8011656:	9a00      	ldr	r2, [sp, #0]
 8011658:	444a      	add	r2, r9
 801165a:	b29b      	uxth	r3, r3
 801165c:	fa1f f982 	uxth.w	r9, r2
 8011660:	b219      	sxth	r1, r3
 8011662:	fa0f f289 	sxth.w	r2, r9
 8011666:	428a      	cmp	r2, r1
 8011668:	da15      	bge.n	8011696 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801166a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801166e:	eba3 0309 	sub.w	r3, r3, r9
 8011672:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011676:	f8ad 1014 	strh.w	r1, [sp, #20]
 801167a:	4631      	mov	r1, r6
 801167c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011680:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011684:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011688:	69ea      	ldr	r2, [r5, #28]
 801168a:	e001      	b.n	8011690 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801168c:	69ea      	ldr	r2, [r5, #28]
 801168e:	4621      	mov	r1, r4
 8011690:	4640      	mov	r0, r8
 8011692:	f7ff ff2b 	bl	80114ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011696:	4628      	mov	r0, r5
 8011698:	f7ff fe94 	bl	80113c4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801169c:	6861      	ldr	r1, [r4, #4]
 801169e:	4602      	mov	r2, r0
 80116a0:	4633      	mov	r3, r6
 80116a2:	6820      	ldr	r0, [r4, #0]
 80116a4:	c303      	stmia	r3!, {r0, r1}
 80116a6:	4611      	mov	r1, r2
 80116a8:	4630      	mov	r0, r6
 80116aa:	f7fb fad3 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 80116ae:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	f77f af33 	ble.w	801151e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80116b8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	f77f af2e 	ble.w	801151e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80116c2:	4628      	mov	r0, r5
 80116c4:	f7ff fe9a 	bl	80113fc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80116c8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80116cc:	1a18      	subs	r0, r3, r0
 80116ce:	f8ad 0010 	strh.w	r0, [sp, #16]
 80116d2:	4628      	mov	r0, r5
 80116d4:	f7ff fea6 	bl	8011424 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80116d8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80116dc:	4631      	mov	r1, r6
 80116de:	1a18      	subs	r0, r3, r0
 80116e0:	f8ad 0012 	strh.w	r0, [sp, #18]
 80116e4:	4628      	mov	r0, r5
 80116e6:	682b      	ldr	r3, [r5, #0]
 80116e8:	689b      	ldr	r3, [r3, #8]
 80116ea:	4798      	blx	r3
 80116ec:	e717      	b.n	801151e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080116ee <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80116ee:	b570      	push	{r4, r5, r6, lr}
 80116f0:	1d06      	adds	r6, r0, #4
 80116f2:	b086      	sub	sp, #24
 80116f4:	460c      	mov	r4, r1
 80116f6:	2300      	movs	r3, #0
 80116f8:	4631      	mov	r1, r6
 80116fa:	4605      	mov	r5, r0
 80116fc:	a802      	add	r0, sp, #8
 80116fe:	9301      	str	r3, [sp, #4]
 8011700:	f7ff fca6 	bl	8011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011704:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011708:	8822      	ldrh	r2, [r4, #0]
 801170a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801170e:	1ad2      	subs	r2, r2, r3
 8011710:	8863      	ldrh	r3, [r4, #2]
 8011712:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011716:	1a5b      	subs	r3, r3, r1
 8011718:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801171c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011720:	aa01      	add	r2, sp, #4
 8011722:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011726:	4630      	mov	r0, r6
 8011728:	f8ad 1016 	strh.w	r1, [sp, #22]
 801172c:	a904      	add	r1, sp, #16
 801172e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011732:	f7fb fb67 	bl	800ce04 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8011736:	9a01      	ldr	r2, [sp, #4]
 8011738:	b11a      	cbz	r2, 8011742 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801173a:	4621      	mov	r1, r4
 801173c:	4628      	mov	r0, r5
 801173e:	f7ff fed5 	bl	80114ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011742:	b006      	add	sp, #24
 8011744:	bd70      	pop	{r4, r5, r6, pc}

08011746 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8011746:	4602      	mov	r2, r0
 8011748:	b530      	push	{r4, r5, lr}
 801174a:	4604      	mov	r4, r0
 801174c:	b085      	sub	sp, #20
 801174e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8011752:	460d      	mov	r5, r1
 8011754:	466b      	mov	r3, sp
 8011756:	6851      	ldr	r1, [r2, #4]
 8011758:	c303      	stmia	r3!, {r0, r1}
 801175a:	4629      	mov	r1, r5
 801175c:	4668      	mov	r0, sp
 801175e:	f7fb fa79 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 8011762:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011766:	b12b      	cbz	r3, 8011774 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8011768:	4669      	mov	r1, sp
 801176a:	4620      	mov	r0, r4
 801176c:	f7ff ffbf 	bl	80116ee <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8011770:	b005      	add	sp, #20
 8011772:	bd30      	pop	{r4, r5, pc}
 8011774:	3404      	adds	r4, #4
 8011776:	a802      	add	r0, sp, #8
 8011778:	4621      	mov	r1, r4
 801177a:	f7ff fc69 	bl	8011050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801177e:	f8bd 3000 	ldrh.w	r3, [sp]
 8011782:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8011786:	4669      	mov	r1, sp
 8011788:	4620      	mov	r0, r4
 801178a:	1a9b      	subs	r3, r3, r2
 801178c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011790:	f8ad 3000 	strh.w	r3, [sp]
 8011794:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011798:	1a9b      	subs	r3, r3, r2
 801179a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801179e:	f7fb faf8 	bl	800cd92 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80117a2:	e7e5      	b.n	8011770 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080117a4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80117a4:	460b      	mov	r3, r1
 80117a6:	680a      	ldr	r2, [r1, #0]
 80117a8:	1d01      	adds	r1, r0, #4
 80117aa:	6992      	ldr	r2, [r2, #24]
 80117ac:	4618      	mov	r0, r3
 80117ae:	4710      	bx	r2

080117b0 <_ZN8touchgfx12TextProviderC1Ev>:
 80117b0:	b538      	push	{r3, r4, r5, lr}
 80117b2:	2500      	movs	r5, #0
 80117b4:	2302      	movs	r3, #2
 80117b6:	4604      	mov	r4, r0
 80117b8:	220e      	movs	r2, #14
 80117ba:	7403      	strb	r3, [r0, #16]
 80117bc:	4629      	mov	r1, r5
 80117be:	6145      	str	r5, [r0, #20]
 80117c0:	7605      	strb	r5, [r0, #24]
 80117c2:	83c5      	strh	r5, [r0, #30]
 80117c4:	8405      	strh	r5, [r0, #32]
 80117c6:	86c5      	strh	r5, [r0, #54]	; 0x36
 80117c8:	8705      	strh	r5, [r0, #56]	; 0x38
 80117ca:	87c5      	strh	r5, [r0, #62]	; 0x3e
 80117cc:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80117d0:	e9c0 5500 	strd	r5, r5, [r0]
 80117d4:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80117d8:	304c      	adds	r0, #76	; 0x4c
 80117da:	f00d fde3 	bl	801f3a4 <memset>
 80117de:	2301      	movs	r3, #1
 80117e0:	4620      	mov	r0, r4
 80117e2:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80117e6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80117ea:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80117ee:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80117f2:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80117f6:	f7f8 fe27 	bl	800a448 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80117fa:	4620      	mov	r0, r4
 80117fc:	bd38      	pop	{r3, r4, r5, pc}

080117fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80117fe:	b530      	push	{r4, r5, lr}
 8011800:	2500      	movs	r5, #0
 8011802:	2401      	movs	r4, #1
 8011804:	6843      	ldr	r3, [r0, #4]
 8011806:	b913      	cbnz	r3, 801180e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8011808:	6803      	ldr	r3, [r0, #0]
 801180a:	b313      	cbz	r3, 8011852 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801180c:	6043      	str	r3, [r0, #4]
 801180e:	7e03      	ldrb	r3, [r0, #24]
 8011810:	b143      	cbz	r3, 8011824 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8011812:	6943      	ldr	r3, [r0, #20]
 8011814:	b12b      	cbz	r3, 8011822 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8011816:	881a      	ldrh	r2, [r3, #0]
 8011818:	b11a      	cbz	r2, 8011822 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801181a:	1c9a      	adds	r2, r3, #2
 801181c:	6142      	str	r2, [r0, #20]
 801181e:	8818      	ldrh	r0, [r3, #0]
 8011820:	bd30      	pop	{r4, r5, pc}
 8011822:	7605      	strb	r5, [r0, #24]
 8011824:	6843      	ldr	r3, [r0, #4]
 8011826:	8819      	ldrh	r1, [r3, #0]
 8011828:	b199      	cbz	r1, 8011852 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801182a:	1c9a      	adds	r2, r3, #2
 801182c:	2902      	cmp	r1, #2
 801182e:	6042      	str	r2, [r0, #4]
 8011830:	d1f5      	bne.n	801181e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8011832:	7c03      	ldrb	r3, [r0, #16]
 8011834:	2b01      	cmp	r3, #1
 8011836:	d8e5      	bhi.n	8011804 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011838:	1c5a      	adds	r2, r3, #1
 801183a:	3302      	adds	r3, #2
 801183c:	7402      	strb	r2, [r0, #16]
 801183e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8011842:	6143      	str	r3, [r0, #20]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d0dd      	beq.n	8011804 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011848:	881b      	ldrh	r3, [r3, #0]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d0da      	beq.n	8011804 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801184e:	7604      	strb	r4, [r0, #24]
 8011850:	e7d8      	b.n	8011804 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011852:	2000      	movs	r0, #0
 8011854:	e7e4      	b.n	8011820 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08011856 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8011856:	b430      	push	{r4, r5}
 8011858:	6815      	ldr	r5, [r2, #0]
 801185a:	6085      	str	r5, [r0, #8]
 801185c:	6852      	ldr	r2, [r2, #4]
 801185e:	6443      	str	r3, [r0, #68]	; 0x44
 8011860:	60c2      	str	r2, [r0, #12]
 8011862:	2200      	movs	r2, #0
 8011864:	9b02      	ldr	r3, [sp, #8]
 8011866:	7402      	strb	r2, [r0, #16]
 8011868:	6001      	str	r1, [r0, #0]
 801186a:	6483      	str	r3, [r0, #72]	; 0x48
 801186c:	6042      	str	r2, [r0, #4]
 801186e:	6142      	str	r2, [r0, #20]
 8011870:	7602      	strb	r2, [r0, #24]
 8011872:	8702      	strh	r2, [r0, #56]	; 0x38
 8011874:	8402      	strh	r2, [r0, #32]
 8011876:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801187a:	bc30      	pop	{r4, r5}
 801187c:	f7f8 bde4 	b.w	800a448 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08011880 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8011880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011882:	4605      	mov	r5, r0
 8011884:	4608      	mov	r0, r1
 8011886:	b1f1      	cbz	r1, 80118c6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8011888:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801188c:	460b      	mov	r3, r1
 801188e:	f101 0708 	add.w	r7, r1, #8
 8011892:	4622      	mov	r2, r4
 8011894:	6818      	ldr	r0, [r3, #0]
 8011896:	3308      	adds	r3, #8
 8011898:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801189c:	4626      	mov	r6, r4
 801189e:	42bb      	cmp	r3, r7
 80118a0:	c603      	stmia	r6!, {r0, r1}
 80118a2:	4634      	mov	r4, r6
 80118a4:	d1f6      	bne.n	8011894 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80118a6:	6818      	ldr	r0, [r3, #0]
 80118a8:	6030      	str	r0, [r6, #0]
 80118aa:	4610      	mov	r0, r2
 80118ac:	889b      	ldrh	r3, [r3, #4]
 80118ae:	80b3      	strh	r3, [r6, #4]
 80118b0:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80118b4:	015b      	lsls	r3, r3, #5
 80118b6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80118ba:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80118be:	430b      	orrs	r3, r1
 80118c0:	425b      	negs	r3, r3
 80118c2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80118c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080118c8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80118c8:	b538      	push	{r3, r4, r5, lr}
 80118ca:	460c      	mov	r4, r1
 80118cc:	6811      	ldr	r1, [r2, #0]
 80118ce:	4610      	mov	r0, r2
 80118d0:	68cd      	ldr	r5, [r1, #12]
 80118d2:	4619      	mov	r1, r3
 80118d4:	47a8      	blx	r5
 80118d6:	2800      	cmp	r0, #0
 80118d8:	bf08      	it	eq
 80118da:	4620      	moveq	r0, r4
 80118dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080118e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80118e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118e2:	4604      	mov	r4, r0
 80118e4:	4615      	mov	r5, r2
 80118e6:	4608      	mov	r0, r1
 80118e8:	b93a      	cbnz	r2, 80118fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80118ea:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80118ee:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80118f2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80118f6:	4628      	mov	r0, r5
 80118f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118fa:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80118fe:	8893      	ldrh	r3, [r2, #4]
 8011900:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8011904:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8011908:	79ee      	ldrb	r6, [r5, #7]
 801190a:	4316      	orrs	r6, r2
 801190c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8011910:	189a      	adds	r2, r3, r2
 8011912:	b2b7      	uxth	r7, r6
 8011914:	b291      	uxth	r1, r2
 8011916:	291d      	cmp	r1, #29
 8011918:	f200 8084 	bhi.w	8011a24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801191c:	2201      	movs	r2, #1
 801191e:	10f6      	asrs	r6, r6, #3
 8011920:	408a      	lsls	r2, r1
 8011922:	4978      	ldr	r1, [pc, #480]	; (8011b04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8011924:	420a      	tst	r2, r1
 8011926:	d12e      	bne.n	8011986 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8011928:	f412 7f60 	tst.w	r2, #896	; 0x380
 801192c:	d07a      	beq.n	8011a24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801192e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8011932:	462b      	mov	r3, r5
 8011934:	f105 0e08 	add.w	lr, r5, #8
 8011938:	4615      	mov	r5, r2
 801193a:	6818      	ldr	r0, [r3, #0]
 801193c:	3308      	adds	r3, #8
 801193e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8011942:	4694      	mov	ip, r2
 8011944:	4573      	cmp	r3, lr
 8011946:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801194a:	4662      	mov	r2, ip
 801194c:	d1f5      	bne.n	801193a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801194e:	6818      	ldr	r0, [r3, #0]
 8011950:	f8cc 0000 	str.w	r0, [ip]
 8011954:	889b      	ldrh	r3, [r3, #4]
 8011956:	f8ac 3004 	strh.w	r3, [ip, #4]
 801195a:	b2b3      	uxth	r3, r6
 801195c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8011960:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8011964:	1aca      	subs	r2, r1, r3
 8011966:	1bcf      	subs	r7, r1, r7
 8011968:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801196c:	b292      	uxth	r2, r2
 801196e:	1afb      	subs	r3, r7, r3
 8011970:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8011974:	10d2      	asrs	r2, r2, #3
 8011976:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801197a:	4302      	orrs	r2, r0
 801197c:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8011980:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8011984:	e7b7      	b.n	80118f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8011986:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8011988:	b92b      	cbnz	r3, 8011996 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801198a:	4b5f      	ldr	r3, [pc, #380]	; (8011b08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801198c:	21c0      	movs	r1, #192	; 0xc0
 801198e:	4a5f      	ldr	r2, [pc, #380]	; (8011b0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8011990:	485f      	ldr	r0, [pc, #380]	; (8011b10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8011992:	f00d fb81 	bl	801f098 <__assert_func>
 8011996:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8011998:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801199c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801199e:	f640 6333 	movw	r3, #3635	; 0xe33
 80119a2:	4299      	cmp	r1, r3
 80119a4:	d110      	bne.n	80119c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 80119a6:	6803      	ldr	r3, [r0, #0]
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	4798      	blx	r3
 80119ac:	7b41      	ldrb	r1, [r0, #13]
 80119ae:	00cb      	lsls	r3, r1, #3
 80119b0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80119b4:	7a03      	ldrb	r3, [r0, #8]
 80119b6:	0648      	lsls	r0, r1, #25
 80119b8:	ea43 0302 	orr.w	r3, r3, r2
 80119bc:	bf44      	itt	mi
 80119be:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80119c2:	b21b      	sxthmi	r3, r3
 80119c4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80119c8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80119cc:	462a      	mov	r2, r5
 80119ce:	f105 0c08 	add.w	ip, r5, #8
 80119d2:	443b      	add	r3, r7
 80119d4:	4433      	add	r3, r6
 80119d6:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80119da:	b29b      	uxth	r3, r3
 80119dc:	4635      	mov	r5, r6
 80119de:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80119e2:	6810      	ldr	r0, [r2, #0]
 80119e4:	3208      	adds	r2, #8
 80119e6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80119ea:	4637      	mov	r7, r6
 80119ec:	4562      	cmp	r2, ip
 80119ee:	c703      	stmia	r7!, {r0, r1}
 80119f0:	463e      	mov	r6, r7
 80119f2:	d1f6      	bne.n	80119e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 80119f4:	6810      	ldr	r0, [r2, #0]
 80119f6:	6038      	str	r0, [r7, #0]
 80119f8:	8892      	ldrh	r2, [r2, #4]
 80119fa:	80ba      	strh	r2, [r7, #4]
 80119fc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8011a00:	10db      	asrs	r3, r3, #3
 8011a02:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8011a06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011a0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8011a0e:	4313      	orrs	r3, r2
 8011a10:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8011a14:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8011a18:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8011a1c:	1a9b      	subs	r3, r3, r2
 8011a1e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8011a22:	e768      	b.n	80118f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8011a24:	f023 0204 	bic.w	r2, r3, #4
 8011a28:	f640 611b 	movw	r1, #3611	; 0xe1b
 8011a2c:	428a      	cmp	r2, r1
 8011a2e:	d003      	beq.n	8011a38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8011a30:	f640 621d 	movw	r2, #3613	; 0xe1d
 8011a34:	4293      	cmp	r3, r2
 8011a36:	d120      	bne.n	8011a7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8011a38:	3b01      	subs	r3, #1
 8011a3a:	4602      	mov	r2, r0
 8011a3c:	4629      	mov	r1, r5
 8011a3e:	4620      	mov	r0, r4
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	f7ff ff41 	bl	80118c8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8011a46:	7b41      	ldrb	r1, [r0, #13]
 8011a48:	00cb      	lsls	r3, r1, #3
 8011a4a:	0649      	lsls	r1, r1, #25
 8011a4c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011a50:	7a03      	ldrb	r3, [r0, #8]
 8011a52:	ea43 0302 	orr.w	r3, r3, r2
 8011a56:	bf44      	itt	mi
 8011a58:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011a5c:	b21b      	sxthmi	r3, r3
 8011a5e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8011a62:	7b6b      	ldrb	r3, [r5, #13]
 8011a64:	7aaa      	ldrb	r2, [r5, #10]
 8011a66:	005b      	lsls	r3, r3, #1
 8011a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a6c:	4313      	orrs	r3, r2
 8011a6e:	115a      	asrs	r2, r3, #5
 8011a70:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8011a74:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8011a78:	e035      	b.n	8011ae6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8011a7a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8011a7e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8011a82:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8011a86:	7a2a      	ldrb	r2, [r5, #8]
 8011a88:	ea42 0201 	orr.w	r2, r2, r1
 8011a8c:	f640 6109 	movw	r1, #3593	; 0xe09
 8011a90:	bf1c      	itt	ne
 8011a92:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8011a96:	b212      	sxthne	r2, r2
 8011a98:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8011a9c:	f023 0210 	bic.w	r2, r3, #16
 8011aa0:	428a      	cmp	r2, r1
 8011aa2:	d003      	beq.n	8011aac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8011aa4:	f640 6213 	movw	r2, #3603	; 0xe13
 8011aa8:	4293      	cmp	r3, r2
 8011aaa:	d129      	bne.n	8011b00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8011aac:	7b6e      	ldrb	r6, [r5, #13]
 8011aae:	4629      	mov	r1, r5
 8011ab0:	0076      	lsls	r6, r6, #1
 8011ab2:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8011ab6:	7aae      	ldrb	r6, [r5, #10]
 8011ab8:	4316      	orrs	r6, r2
 8011aba:	f640 6213 	movw	r2, #3603	; 0xe13
 8011abe:	4293      	cmp	r3, r2
 8011ac0:	4602      	mov	r2, r0
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	bf16      	itet	ne
 8011ac6:	f103 33ff 	addne.w	r3, r3, #4294967295
 8011aca:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8011ace:	b29b      	uxthne	r3, r3
 8011ad0:	f7ff fefa 	bl	80118c8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8011ad4:	7b43      	ldrb	r3, [r0, #13]
 8011ad6:	7a82      	ldrb	r2, [r0, #10]
 8011ad8:	005b      	lsls	r3, r3, #1
 8011ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ade:	4313      	orrs	r3, r2
 8011ae0:	1af6      	subs	r6, r6, r3
 8011ae2:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8011ae6:	7b69      	ldrb	r1, [r5, #13]
 8011ae8:	00cb      	lsls	r3, r1, #3
 8011aea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011aee:	7a2b      	ldrb	r3, [r5, #8]
 8011af0:	4313      	orrs	r3, r2
 8011af2:	064a      	lsls	r2, r1, #25
 8011af4:	bf44      	itt	mi
 8011af6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011afa:	b21b      	sxthmi	r3, r3
 8011afc:	1bdb      	subs	r3, r3, r7
 8011afe:	e73f      	b.n	8011980 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8011b00:	2300      	movs	r3, #0
 8011b02:	e7b7      	b.n	8011a74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8011b04:	3fc00079 	.word	0x3fc00079
 8011b08:	08022a34 	.word	0x08022a34
 8011b0c:	08022ca6 	.word	0x08022ca6
 8011b10:	08022a3d 	.word	0x08022a3d

08011b14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8011b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b18:	4604      	mov	r4, r0
 8011b1a:	b942      	cbnz	r2, 8011b2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8011b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b20:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8011b24:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8011b28:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8011b2c:	e046      	b.n	8011bbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8011b2e:	7b51      	ldrb	r1, [r2, #13]
 8011b30:	8893      	ldrh	r3, [r2, #4]
 8011b32:	010f      	lsls	r7, r1, #4
 8011b34:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8011b38:	79d7      	ldrb	r7, [r2, #7]
 8011b3a:	4307      	orrs	r7, r0
 8011b3c:	2f04      	cmp	r7, #4
 8011b3e:	b2bd      	uxth	r5, r7
 8011b40:	bfcc      	ite	gt
 8011b42:	08bf      	lsrgt	r7, r7, #2
 8011b44:	2701      	movle	r7, #1
 8011b46:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8011b4a:	f200 80ab 	bhi.w	8011ca4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8011b4e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8011b52:	4283      	cmp	r3, r0
 8011b54:	d216      	bcs.n	8011b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011b56:	f240 605b 	movw	r0, #1627	; 0x65b
 8011b5a:	4283      	cmp	r3, r0
 8011b5c:	d859      	bhi.n	8011c12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8011b5e:	f240 6057 	movw	r0, #1623	; 0x657
 8011b62:	4283      	cmp	r3, r0
 8011b64:	d20e      	bcs.n	8011b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011b66:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8011b6a:	d24a      	bcs.n	8011c02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8011b6c:	f240 604e 	movw	r0, #1614	; 0x64e
 8011b70:	4283      	cmp	r3, r0
 8011b72:	d207      	bcs.n	8011b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011b74:	f240 601a 	movw	r0, #1562	; 0x61a
 8011b78:	4283      	cmp	r3, r0
 8011b7a:	d02a      	beq.n	8011bd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011b7c:	d821      	bhi.n	8011bc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8011b7e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8011b82:	d35b      	bcc.n	8011c3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8011b84:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8011b88:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8011b8c:	f040 80d0 	bne.w	8011d30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8011b90:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8011b94:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8011b98:	f040 80ca 	bne.w	8011d30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8011b9c:	00cb      	lsls	r3, r1, #3
 8011b9e:	0649      	lsls	r1, r1, #25
 8011ba0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8011ba4:	7a13      	ldrb	r3, [r2, #8]
 8011ba6:	ea43 0300 	orr.w	r3, r3, r0
 8011baa:	bf44      	itt	mi
 8011bac:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011bb0:	b21b      	sxthmi	r3, r3
 8011bb2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8011bb6:	1b5d      	subs	r5, r3, r5
 8011bb8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8011bbc:	4610      	mov	r0, r2
 8011bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bc2:	f240 604b 	movw	r0, #1611	; 0x64b
 8011bc6:	4283      	cmp	r3, r0
 8011bc8:	d338      	bcc.n	8011c3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8011bca:	f240 604c 	movw	r0, #1612	; 0x64c
 8011bce:	4283      	cmp	r3, r0
 8011bd0:	d9d8      	bls.n	8011b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011bd2:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8011bd6:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8011bda:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8011bde:	f040 80f2 	bne.w	8011dc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8011be2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8011be6:	f040 80ee 	bne.w	8011dc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8011bea:	00cb      	lsls	r3, r1, #3
 8011bec:	064e      	lsls	r6, r1, #25
 8011bee:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8011bf2:	7a13      	ldrb	r3, [r2, #8]
 8011bf4:	ea43 0300 	orr.w	r3, r3, r0
 8011bf8:	bf44      	itt	mi
 8011bfa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011bfe:	b21b      	sxthmi	r3, r3
 8011c00:	e7d9      	b.n	8011bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8011c02:	f240 6054 	movw	r0, #1620	; 0x654
 8011c06:	4283      	cmp	r3, r0
 8011c08:	d8e3      	bhi.n	8011bd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011c0a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8011c0e:	d9e0      	bls.n	8011bd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011c10:	e7b8      	b.n	8011b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011c12:	f240 6074 	movw	r0, #1652	; 0x674
 8011c16:	4283      	cmp	r3, r0
 8011c18:	d0b4      	beq.n	8011b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011c1a:	d82d      	bhi.n	8011c78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8011c1c:	f240 605e 	movw	r0, #1630	; 0x65e
 8011c20:	4283      	cmp	r3, r0
 8011c22:	d804      	bhi.n	8011c2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8011c24:	f240 605d 	movw	r0, #1629	; 0x65d
 8011c28:	4283      	cmp	r3, r0
 8011c2a:	d3d2      	bcc.n	8011bd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011c2c:	e7aa      	b.n	8011b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011c2e:	f240 605f 	movw	r0, #1631	; 0x65f
 8011c32:	4283      	cmp	r3, r0
 8011c34:	d0cd      	beq.n	8011bd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011c36:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8011c3a:	d0a3      	beq.n	8011b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011c3c:	00cb      	lsls	r3, r1, #3
 8011c3e:	0649      	lsls	r1, r1, #25
 8011c40:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8011c44:	7a13      	ldrb	r3, [r2, #8]
 8011c46:	ea43 0300 	orr.w	r3, r3, r0
 8011c4a:	bf44      	itt	mi
 8011c4c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011c50:	b21b      	sxthmi	r3, r3
 8011c52:	1b5d      	subs	r5, r3, r5
 8011c54:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8011c58:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8011c5c:	7b53      	ldrb	r3, [r2, #13]
 8011c5e:	015b      	lsls	r3, r3, #5
 8011c60:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8011c64:	7993      	ldrb	r3, [r2, #6]
 8011c66:	430b      	orrs	r3, r1
 8011c68:	2105      	movs	r1, #5
 8011c6a:	005b      	lsls	r3, r3, #1
 8011c6c:	fb93 f3f1 	sdiv	r3, r3, r1
 8011c70:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8011c74:	440b      	add	r3, r1
 8011c76:	e757      	b.n	8011b28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8011c78:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8011c7c:	4283      	cmp	r3, r0
 8011c7e:	d809      	bhi.n	8011c94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8011c80:	f240 60df 	movw	r0, #1759	; 0x6df
 8011c84:	4283      	cmp	r3, r0
 8011c86:	f4bf af7d 	bcs.w	8011b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011c8a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8011c8e:	2b05      	cmp	r3, #5
 8011c90:	d8d4      	bhi.n	8011c3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8011c92:	e777      	b.n	8011b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011c94:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8011c98:	4283      	cmp	r3, r0
 8011c9a:	d09a      	beq.n	8011bd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011c9c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8011ca0:	4283      	cmp	r3, r0
 8011ca2:	e7ca      	b.n	8011c3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8011ca4:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8011ca8:	d22b      	bcs.n	8011d02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8011caa:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8011cae:	4283      	cmp	r3, r0
 8011cb0:	d28f      	bcs.n	8011bd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011cb2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011cb6:	4283      	cmp	r3, r0
 8011cb8:	d816      	bhi.n	8011ce8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8011cba:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8011cbe:	4283      	cmp	r3, r0
 8011cc0:	f4bf af60 	bcs.w	8011b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011cc4:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8011cc8:	4283      	cmp	r3, r0
 8011cca:	d80a      	bhi.n	8011ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8011ccc:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8011cd0:	4283      	cmp	r3, r0
 8011cd2:	f4bf af57 	bcs.w	8011b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011cd6:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8011cda:	4283      	cmp	r3, r0
 8011cdc:	f43f af79 	beq.w	8011bd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011ce0:	e7ac      	b.n	8011c3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8011ce2:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8011ce6:	e7f8      	b.n	8011cda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8011ce8:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8011cec:	4283      	cmp	r3, r0
 8011cee:	d802      	bhi.n	8011cf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8011cf0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8011cf4:	e798      	b.n	8011c28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8011cf6:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8011cfa:	4283      	cmp	r3, r0
 8011cfc:	f47f af42 	bne.w	8011b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011d00:	e767      	b.n	8011bd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011d02:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8011d06:	4283      	cmp	r3, r0
 8011d08:	f43f af63 	beq.w	8011bd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011d0c:	d802      	bhi.n	8011d14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8011d0e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8011d12:	e7f2      	b.n	8011cfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8011d14:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8011d18:	4283      	cmp	r3, r0
 8011d1a:	d805      	bhi.n	8011d28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8011d1c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8011d20:	4283      	cmp	r3, r0
 8011d22:	f4ff af2f 	bcc.w	8011b84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8011d26:	e754      	b.n	8011bd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8011d28:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8011d2c:	4283      	cmp	r3, r0
 8011d2e:	e7af      	b.n	8011c90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8011d30:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8011d34:	4617      	mov	r7, r2
 8011d36:	f102 0808 	add.w	r8, r2, #8
 8011d3a:	4666      	mov	r6, ip
 8011d3c:	6838      	ldr	r0, [r7, #0]
 8011d3e:	3708      	adds	r7, #8
 8011d40:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8011d44:	46e6      	mov	lr, ip
 8011d46:	4547      	cmp	r7, r8
 8011d48:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8011d4c:	46f4      	mov	ip, lr
 8011d4e:	d1f5      	bne.n	8011d3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8011d50:	6838      	ldr	r0, [r7, #0]
 8011d52:	f8ce 0000 	str.w	r0, [lr]
 8011d56:	88b9      	ldrh	r1, [r7, #4]
 8011d58:	f8ae 1004 	strh.w	r1, [lr, #4]
 8011d5c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8011d60:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8011d64:	d009      	beq.n	8011d7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8011d66:	7b51      	ldrb	r1, [r2, #13]
 8011d68:	7992      	ldrb	r2, [r2, #6]
 8011d6a:	0149      	lsls	r1, r1, #5
 8011d6c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8011d70:	4311      	orrs	r1, r2
 8011d72:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8011d76:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8011d7a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8011d7e:	d00d      	beq.n	8011d9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8011d80:	442b      	add	r3, r5
 8011d82:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8011d8c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8011d90:	10db      	asrs	r3, r3, #3
 8011d92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011d96:	4313      	orrs	r3, r2
 8011d98:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8011d9c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8011da0:	00cb      	lsls	r3, r1, #3
 8011da2:	064f      	lsls	r7, r1, #25
 8011da4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011da8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8011dac:	ea43 0302 	orr.w	r3, r3, r2
 8011db0:	bf44      	itt	mi
 8011db2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011db6:	b21b      	sxthmi	r3, r3
 8011db8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8011dbc:	1b5d      	subs	r5, r3, r5
 8011dbe:	4632      	mov	r2, r6
 8011dc0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8011dc4:	e6fa      	b.n	8011bbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8011dc6:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8011dca:	4694      	mov	ip, r2
 8011dcc:	f102 0908 	add.w	r9, r2, #8
 8011dd0:	4676      	mov	r6, lr
 8011dd2:	f8dc 0000 	ldr.w	r0, [ip]
 8011dd6:	f10c 0c08 	add.w	ip, ip, #8
 8011dda:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8011dde:	46f0      	mov	r8, lr
 8011de0:	45cc      	cmp	ip, r9
 8011de2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8011de6:	46c6      	mov	lr, r8
 8011de8:	d1f3      	bne.n	8011dd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 8011dea:	f8dc 0000 	ldr.w	r0, [ip]
 8011dee:	f8c8 0000 	str.w	r0, [r8]
 8011df2:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8011df6:	f8a8 1004 	strh.w	r1, [r8, #4]
 8011dfa:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8011dfe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8011e02:	d009      	beq.n	8011e18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8011e04:	7b51      	ldrb	r1, [r2, #13]
 8011e06:	7992      	ldrb	r2, [r2, #6]
 8011e08:	0149      	lsls	r1, r1, #5
 8011e0a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8011e0e:	4311      	orrs	r1, r2
 8011e10:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8011e14:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8011e18:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8011e1c:	d00d      	beq.n	8011e3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8011e1e:	1bdb      	subs	r3, r3, r7
 8011e20:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8011e2a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8011e2e:	10db      	asrs	r3, r3, #3
 8011e30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011e34:	4313      	orrs	r3, r2
 8011e36:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8011e3a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8011e3e:	00cb      	lsls	r3, r1, #3
 8011e40:	0648      	lsls	r0, r1, #25
 8011e42:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011e46:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8011e4a:	ea43 0302 	orr.w	r3, r3, r2
 8011e4e:	bf44      	itt	mi
 8011e50:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011e54:	b21b      	sxthmi	r3, r3
 8011e56:	e7b1      	b.n	8011dbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

08011e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8011e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e5c:	461e      	mov	r6, r3
 8011e5e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8011e60:	4604      	mov	r4, r0
 8011e62:	4617      	mov	r7, r2
 8011e64:	b92b      	cbnz	r3, 8011e72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8011e66:	4b25      	ldr	r3, [pc, #148]	; (8011efc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8011e68:	21c0      	movs	r1, #192	; 0xc0
 8011e6a:	4a25      	ldr	r2, [pc, #148]	; (8011f00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8011e6c:	4825      	ldr	r0, [pc, #148]	; (8011f04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8011e6e:	f00d f913 	bl	801f098 <__assert_func>
 8011e72:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8011e74:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011e78:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8011e7c:	f7f8 fa3e 	bl	800a2fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011e80:	4605      	mov	r5, r0
 8011e82:	b918      	cbnz	r0, 8011e8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8011e84:	6030      	str	r0, [r6, #0]
 8011e86:	4628      	mov	r0, r5
 8011e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	4601      	mov	r1, r0
 8011e90:	4638      	mov	r0, r7
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	4798      	blx	r3
 8011e96:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8011e9a:	4602      	mov	r2, r0
 8011e9c:	6030      	str	r0, [r6, #0]
 8011e9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011ea2:	d213      	bcs.n	8011ecc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8011ea4:	4643      	mov	r3, r8
 8011ea6:	4639      	mov	r1, r7
 8011ea8:	4620      	mov	r0, r4
 8011eaa:	f7ff fe33 	bl	8011b14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8011eae:	6030      	str	r0, [r6, #0]
 8011eb0:	6833      	ldr	r3, [r6, #0]
 8011eb2:	b143      	cbz	r3, 8011ec6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8011eb4:	7b5a      	ldrb	r2, [r3, #13]
 8011eb6:	7a9b      	ldrb	r3, [r3, #10]
 8011eb8:	0052      	lsls	r2, r2, #1
 8011eba:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011ebe:	4313      	orrs	r3, r2
 8011ec0:	bf0c      	ite	eq
 8011ec2:	2301      	moveq	r3, #1
 8011ec4:	2300      	movne	r3, #0
 8011ec6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8011eca:	e7dc      	b.n	8011e86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8011ecc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8011ed0:	b29b      	uxth	r3, r3
 8011ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8011ed4:	d804      	bhi.n	8011ee0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8011ed6:	4639      	mov	r1, r7
 8011ed8:	4620      	mov	r0, r4
 8011eda:	f7ff fd01 	bl	80118e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8011ede:	e7e6      	b.n	8011eae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8011ee0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d0e3      	beq.n	8011eb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8011ee8:	f640 1302 	movw	r3, #2306	; 0x902
 8011eec:	429d      	cmp	r5, r3
 8011eee:	d1df      	bne.n	8011eb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8011ef0:	4601      	mov	r1, r0
 8011ef2:	4620      	mov	r0, r4
 8011ef4:	f7ff fcc4 	bl	8011880 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8011ef8:	e7d9      	b.n	8011eae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8011efa:	bf00      	nop
 8011efc:	08022a34 	.word	0x08022a34
 8011f00:	08022ca6 	.word	0x08022ca6
 8011f04:	08022a3d 	.word	0x08022a3d

08011f08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8011f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f0c:	461e      	mov	r6, r3
 8011f0e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8011f10:	4604      	mov	r4, r0
 8011f12:	4617      	mov	r7, r2
 8011f14:	b92b      	cbnz	r3, 8011f22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8011f16:	4b26      	ldr	r3, [pc, #152]	; (8011fb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8011f18:	21c0      	movs	r1, #192	; 0xc0
 8011f1a:	4a26      	ldr	r2, [pc, #152]	; (8011fb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8011f1c:	4826      	ldr	r0, [pc, #152]	; (8011fb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8011f1e:	f00d f8bb 	bl	801f098 <__assert_func>
 8011f22:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8011f24:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011f28:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8011f2c:	f7f8 f9e6 	bl	800a2fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011f30:	4605      	mov	r5, r0
 8011f32:	b918      	cbnz	r0, 8011f3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8011f34:	6030      	str	r0, [r6, #0]
 8011f36:	4628      	mov	r0, r5
 8011f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	4601      	mov	r1, r0
 8011f40:	4638      	mov	r0, r7
 8011f42:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8011f46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011f4a:	47c8      	blx	r9
 8011f4c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8011f50:	4602      	mov	r2, r0
 8011f52:	6030      	str	r0, [r6, #0]
 8011f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011f58:	d213      	bcs.n	8011f82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8011f5a:	4643      	mov	r3, r8
 8011f5c:	4639      	mov	r1, r7
 8011f5e:	4620      	mov	r0, r4
 8011f60:	f7ff fdd8 	bl	8011b14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8011f64:	6030      	str	r0, [r6, #0]
 8011f66:	6833      	ldr	r3, [r6, #0]
 8011f68:	b143      	cbz	r3, 8011f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8011f6a:	7b5a      	ldrb	r2, [r3, #13]
 8011f6c:	7a9b      	ldrb	r3, [r3, #10]
 8011f6e:	0052      	lsls	r2, r2, #1
 8011f70:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011f74:	4313      	orrs	r3, r2
 8011f76:	bf0c      	ite	eq
 8011f78:	2301      	moveq	r3, #1
 8011f7a:	2300      	movne	r3, #0
 8011f7c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8011f80:	e7d9      	b.n	8011f36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8011f82:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8011f86:	b29b      	uxth	r3, r3
 8011f88:	2b7f      	cmp	r3, #127	; 0x7f
 8011f8a:	d804      	bhi.n	8011f96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8011f8c:	4639      	mov	r1, r7
 8011f8e:	4620      	mov	r0, r4
 8011f90:	f7ff fca6 	bl	80118e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8011f94:	e7e6      	b.n	8011f64 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8011f96:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d0e3      	beq.n	8011f66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8011f9e:	f640 1302 	movw	r3, #2306	; 0x902
 8011fa2:	429d      	cmp	r5, r3
 8011fa4:	d1df      	bne.n	8011f66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8011fa6:	4601      	mov	r1, r0
 8011fa8:	4620      	mov	r0, r4
 8011faa:	f7ff fc69 	bl	8011880 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8011fae:	e7d9      	b.n	8011f64 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8011fb0:	08022a34 	.word	0x08022a34
 8011fb4:	08022ca6 	.word	0x08022ca6
 8011fb8:	08022a3d 	.word	0x08022a3d

08011fbc <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8011fbc:	b510      	push	{r4, lr}
 8011fbe:	4604      	mov	r4, r0
 8011fc0:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8011fc4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8011fc6:	b9d9      	cbnz	r1, 8012000 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 8011fc8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8011fca:	2b0a      	cmp	r3, #10
 8011fcc:	d037      	beq.n	801203e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8011fce:	4620      	mov	r0, r4
 8011fd0:	f7ff fc15 	bl	80117fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8011fd4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8011fd6:	2b09      	cmp	r3, #9
 8011fd8:	d906      	bls.n	8011fe8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8011fda:	4b19      	ldr	r3, [pc, #100]	; (8012040 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8011fdc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8011fe0:	4a18      	ldr	r2, [pc, #96]	; (8012044 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8011fe2:	4819      	ldr	r0, [pc, #100]	; (8012048 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 8011fe4:	f00d f858 	bl	801f098 <__assert_func>
 8011fe8:	1c5a      	adds	r2, r3, #1
 8011fea:	8722      	strh	r2, [r4, #56]	; 0x38
 8011fec:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8011fee:	4413      	add	r3, r2
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	2b09      	cmp	r3, #9
 8011ff4:	bf88      	it	hi
 8011ff6:	3b0a      	subhi	r3, #10
 8011ff8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011ffc:	8458      	strh	r0, [r3, #34]	; 0x22
 8011ffe:	e7e3      	b.n	8011fc8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 8012000:	2b0a      	cmp	r3, #10
 8012002:	d01c      	beq.n	801203e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8012004:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8012006:	3901      	subs	r1, #1
 8012008:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801200c:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801200e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8012012:	1c51      	adds	r1, r2, #1
 8012014:	b289      	uxth	r1, r1
 8012016:	2901      	cmp	r1, #1
 8012018:	bf8a      	itet	hi
 801201a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801201e:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8012020:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8012022:	2b09      	cmp	r3, #9
 8012024:	d8d9      	bhi.n	8011fda <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8012026:	1c5a      	adds	r2, r3, #1
 8012028:	8722      	strh	r2, [r4, #56]	; 0x38
 801202a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801202c:	4413      	add	r3, r2
 801202e:	b29b      	uxth	r3, r3
 8012030:	2b09      	cmp	r3, #9
 8012032:	bf88      	it	hi
 8012034:	3b0a      	subhi	r3, #10
 8012036:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801203a:	8458      	strh	r0, [r3, #34]	; 0x22
 801203c:	e7c0      	b.n	8011fc0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801203e:	bd10      	pop	{r4, pc}
 8012040:	08022a69 	.word	0x08022a69
 8012044:	08022dfc 	.word	0x08022dfc
 8012048:	08022a3d 	.word	0x08022a3d

0801204c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801204c:	b538      	push	{r3, r4, r5, lr}
 801204e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8012050:	4604      	mov	r4, r0
 8012052:	b92a      	cbnz	r2, 8012060 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8012054:	4b13      	ldr	r3, [pc, #76]	; (80120a4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8012056:	21d5      	movs	r1, #213	; 0xd5
 8012058:	4a13      	ldr	r2, [pc, #76]	; (80120a8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801205a:	4814      	ldr	r0, [pc, #80]	; (80120ac <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801205c:	f00d f81c 	bl	801f098 <__assert_func>
 8012060:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8012062:	3a01      	subs	r2, #1
 8012064:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8012068:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801206a:	8702      	strh	r2, [r0, #56]	; 0x38
 801206c:	1c5a      	adds	r2, r3, #1
 801206e:	b292      	uxth	r2, r2
 8012070:	2a09      	cmp	r2, #9
 8012072:	bf8a      	itet	hi
 8012074:	3b09      	subhi	r3, #9
 8012076:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8012078:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801207a:	f7ff ff9f 	bl	8011fbc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801207e:	8c23      	ldrh	r3, [r4, #32]
 8012080:	2b01      	cmp	r3, #1
 8012082:	bf9c      	itt	ls
 8012084:	3301      	addls	r3, #1
 8012086:	8423      	strhls	r3, [r4, #32]
 8012088:	8be3      	ldrh	r3, [r4, #30]
 801208a:	b90b      	cbnz	r3, 8012090 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801208c:	2302      	movs	r3, #2
 801208e:	83e3      	strh	r3, [r4, #30]
 8012090:	8be3      	ldrh	r3, [r4, #30]
 8012092:	4628      	mov	r0, r5
 8012094:	3b01      	subs	r3, #1
 8012096:	b29b      	uxth	r3, r3
 8012098:	83e3      	strh	r3, [r4, #30]
 801209a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801209e:	8365      	strh	r5, [r4, #26]
 80120a0:	bd38      	pop	{r3, r4, r5, pc}
 80120a2:	bf00      	nop
 80120a4:	08022a34 	.word	0x08022a34
 80120a8:	08022d51 	.word	0x08022d51
 80120ac:	08022a3d 	.word	0x08022a3d

080120b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80120b0:	428a      	cmp	r2, r1
 80120b2:	b538      	push	{r3, r4, r5, lr}
 80120b4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80120b6:	d90c      	bls.n	80120d2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 80120b8:	b92c      	cbnz	r4, 80120c6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 80120ba:	4b1c      	ldr	r3, [pc, #112]	; (801212c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 80120bc:	21e1      	movs	r1, #225	; 0xe1
 80120be:	4a1c      	ldr	r2, [pc, #112]	; (8012130 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 80120c0:	481c      	ldr	r0, [pc, #112]	; (8012134 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 80120c2:	f00c ffe9 	bl	801f098 <__assert_func>
 80120c6:	3c01      	subs	r4, #1
 80120c8:	4b1b      	ldr	r3, [pc, #108]	; (8012138 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 80120ca:	4a1c      	ldr	r2, [pc, #112]	; (801213c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 80120cc:	21c5      	movs	r1, #197	; 0xc5
 80120ce:	8704      	strh	r4, [r0, #56]	; 0x38
 80120d0:	e7f6      	b.n	80120c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80120d2:	428c      	cmp	r4, r1
 80120d4:	d203      	bcs.n	80120de <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 80120d6:	4b1a      	ldr	r3, [pc, #104]	; (8012140 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 80120d8:	21cb      	movs	r1, #203	; 0xcb
 80120da:	4a1a      	ldr	r2, [pc, #104]	; (8012144 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 80120dc:	e7f0      	b.n	80120c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80120de:	1a64      	subs	r4, r4, r1
 80120e0:	250a      	movs	r5, #10
 80120e2:	8704      	strh	r4, [r0, #56]	; 0x38
 80120e4:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 80120e6:	4421      	add	r1, r4
 80120e8:	b289      	uxth	r1, r1
 80120ea:	2909      	cmp	r1, #9
 80120ec:	bf88      	it	hi
 80120ee:	390a      	subhi	r1, #10
 80120f0:	86c1      	strh	r1, [r0, #54]	; 0x36
 80120f2:	b1ba      	cbz	r2, 8012124 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 80120f4:	3a01      	subs	r2, #1
 80120f6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80120f8:	b292      	uxth	r2, r2
 80120fa:	2909      	cmp	r1, #9
 80120fc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8012100:	d903      	bls.n	801210a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8012102:	4b11      	ldr	r3, [pc, #68]	; (8012148 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8012104:	21e6      	movs	r1, #230	; 0xe6
 8012106:	4a11      	ldr	r2, [pc, #68]	; (801214c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8012108:	e7da      	b.n	80120c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801210a:	3101      	adds	r1, #1
 801210c:	8701      	strh	r1, [r0, #56]	; 0x38
 801210e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8012110:	b901      	cbnz	r1, 8012114 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8012112:	86c5      	strh	r5, [r0, #54]	; 0x36
 8012114:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8012116:	3901      	subs	r1, #1
 8012118:	b289      	uxth	r1, r1
 801211a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801211c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8012120:	844c      	strh	r4, [r1, #34]	; 0x22
 8012122:	e7e6      	b.n	80120f2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8012124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012128:	f7ff bf48 	b.w	8011fbc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801212c:	08022a34 	.word	0x08022a34
 8012130:	08022b2a 	.word	0x08022b2a
 8012134:	08022a3d 	.word	0x08022a3d
 8012138:	08022a75 	.word	0x08022a75
 801213c:	08022bd4 	.word	0x08022bd4
 8012140:	08022a83 	.word	0x08022a83
 8012144:	08022eab 	.word	0x08022eab
 8012148:	08022a8f 	.word	0x08022a8f
 801214c:	08022aa2 	.word	0x08022aa2

08012150 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8012150:	3a01      	subs	r2, #1
 8012152:	b570      	push	{r4, r5, r6, lr}
 8012154:	b292      	uxth	r2, r2
 8012156:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801215a:	42b2      	cmp	r2, r6
 801215c:	d019      	beq.n	8012192 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801215e:	8c04      	ldrh	r4, [r0, #32]
 8012160:	f831 5b02 	ldrh.w	r5, [r1], #2
 8012164:	4294      	cmp	r4, r2
 8012166:	d805      	bhi.n	8012174 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8012168:	4b19      	ldr	r3, [pc, #100]	; (80121d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801216a:	4a1a      	ldr	r2, [pc, #104]	; (80121d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801216c:	21c5      	movs	r1, #197	; 0xc5
 801216e:	481a      	ldr	r0, [pc, #104]	; (80121d8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8012170:	f00c ff92 	bl	801f098 <__assert_func>
 8012174:	8bc4      	ldrh	r4, [r0, #30]
 8012176:	4414      	add	r4, r2
 8012178:	3a01      	subs	r2, #1
 801217a:	b2a4      	uxth	r4, r4
 801217c:	b292      	uxth	r2, r2
 801217e:	2c01      	cmp	r4, #1
 8012180:	bf88      	it	hi
 8012182:	3c02      	subhi	r4, #2
 8012184:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012188:	8b64      	ldrh	r4, [r4, #26]
 801218a:	42ac      	cmp	r4, r5
 801218c:	d0e5      	beq.n	801215a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801218e:	2000      	movs	r0, #0
 8012190:	bd70      	pop	{r4, r5, r6, pc}
 8012192:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8012196:	2400      	movs	r4, #0
 8012198:	4413      	add	r3, r2
 801219a:	b2a2      	uxth	r2, r4
 801219c:	429a      	cmp	r2, r3
 801219e:	da14      	bge.n	80121ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 80121a0:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 80121a2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80121a6:	4296      	cmp	r6, r2
 80121a8:	d802      	bhi.n	80121b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 80121aa:	4b09      	ldr	r3, [pc, #36]	; (80121d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80121ac:	4a0b      	ldr	r2, [pc, #44]	; (80121dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 80121ae:	e7dd      	b.n	801216c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 80121b0:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80121b2:	3401      	adds	r4, #1
 80121b4:	4432      	add	r2, r6
 80121b6:	b292      	uxth	r2, r2
 80121b8:	2a09      	cmp	r2, #9
 80121ba:	bf88      	it	hi
 80121bc:	3a0a      	subhi	r2, #10
 80121be:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80121c2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80121c4:	42aa      	cmp	r2, r5
 80121c6:	d0e8      	beq.n	801219a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 80121c8:	e7e1      	b.n	801218e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80121ca:	2001      	movs	r0, #1
 80121cc:	e7e0      	b.n	8012190 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80121ce:	bf00      	nop
 80121d0:	08022a75 	.word	0x08022a75
 80121d4:	08022f2f 	.word	0x08022f2f
 80121d8:	08022a3d 	.word	0x08022a3d
 80121dc:	08022bd4 	.word	0x08022bd4

080121e0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80121e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e4:	4605      	mov	r5, r0
 80121e6:	4616      	mov	r6, r2
 80121e8:	1c8c      	adds	r4, r1, #2
 80121ea:	8809      	ldrh	r1, [r1, #0]
 80121ec:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80121f0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80121f4:	42b3      	cmp	r3, r6
 80121f6:	d124      	bne.n	8012242 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80121f8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80121fc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8012200:	f001 070f 	and.w	r7, r1, #15
 8012204:	4652      	mov	r2, sl
 8012206:	f8cd 8000 	str.w	r8, [sp]
 801220a:	464b      	mov	r3, r9
 801220c:	4621      	mov	r1, r4
 801220e:	4628      	mov	r0, r5
 8012210:	f7ff ff9e 	bl	8012150 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8012214:	4683      	mov	fp, r0
 8012216:	b168      	cbz	r0, 8012234 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8012218:	eb0a 0109 	add.w	r1, sl, r9
 801221c:	463a      	mov	r2, r7
 801221e:	4628      	mov	r0, r5
 8012220:	4441      	add	r1, r8
 8012222:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8012226:	4649      	mov	r1, r9
 8012228:	f7ff ff42 	bl	80120b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801222c:	4658      	mov	r0, fp
 801222e:	b003      	add	sp, #12
 8012230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012234:	eb07 010a 	add.w	r1, r7, sl
 8012238:	4449      	add	r1, r9
 801223a:	4441      	add	r1, r8
 801223c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8012240:	e7d2      	b.n	80121e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8012242:	f04f 0b00 	mov.w	fp, #0
 8012246:	e7f1      	b.n	801222c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08012248 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8012248:	b570      	push	{r4, r5, r6, lr}
 801224a:	8810      	ldrh	r0, [r2, #0]
 801224c:	4298      	cmp	r0, r3
 801224e:	d817      	bhi.n	8012280 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012250:	1e48      	subs	r0, r1, #1
 8012252:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8012256:	4298      	cmp	r0, r3
 8012258:	d312      	bcc.n	8012280 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801225a:	2400      	movs	r4, #0
 801225c:	428c      	cmp	r4, r1
 801225e:	d20f      	bcs.n	8012280 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012260:	1860      	adds	r0, r4, r1
 8012262:	1040      	asrs	r0, r0, #1
 8012264:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8012268:	0085      	lsls	r5, r0, #2
 801226a:	42b3      	cmp	r3, r6
 801226c:	d902      	bls.n	8012274 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801226e:	3001      	adds	r0, #1
 8012270:	b284      	uxth	r4, r0
 8012272:	e7f3      	b.n	801225c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8012274:	d201      	bcs.n	801227a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8012276:	b281      	uxth	r1, r0
 8012278:	e7f0      	b.n	801225c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801227a:	442a      	add	r2, r5
 801227c:	8850      	ldrh	r0, [r2, #2]
 801227e:	bd70      	pop	{r4, r5, r6, pc}
 8012280:	2000      	movs	r0, #0
 8012282:	e7fc      	b.n	801227e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08012284 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8012284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012288:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801228a:	4604      	mov	r4, r0
 801228c:	260b      	movs	r6, #11
 801228e:	886f      	ldrh	r7, [r5, #2]
 8012290:	087f      	lsrs	r7, r7, #1
 8012292:	3e01      	subs	r6, #1
 8012294:	d01b      	beq.n	80122ce <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8012296:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012298:	b92b      	cbnz	r3, 80122a6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801229a:	4b0e      	ldr	r3, [pc, #56]	; (80122d4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801229c:	21c0      	movs	r1, #192	; 0xc0
 801229e:	4a0e      	ldr	r2, [pc, #56]	; (80122d8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 80122a0:	480e      	ldr	r0, [pc, #56]	; (80122dc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 80122a2:	f00c fef9 	bl	801f098 <__assert_func>
 80122a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80122a8:	462a      	mov	r2, r5
 80122aa:	4639      	mov	r1, r7
 80122ac:	4620      	mov	r0, r4
 80122ae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80122b2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80122b6:	4643      	mov	r3, r8
 80122b8:	f7ff ffc6 	bl	8012248 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80122bc:	b138      	cbz	r0, 80122ce <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80122be:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80122c2:	4642      	mov	r2, r8
 80122c4:	4620      	mov	r0, r4
 80122c6:	f7ff ff8b 	bl	80121e0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80122ca:	2800      	cmp	r0, #0
 80122cc:	d1e1      	bne.n	8012292 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80122ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122d2:	bf00      	nop
 80122d4:	08022a34 	.word	0x08022a34
 80122d8:	08022ca6 	.word	0x08022ca6
 80122dc:	08022a3d 	.word	0x08022a3d

080122e0 <_ZN8touchgfx8ceil28_4El>:
 80122e0:	f110 030f 	adds.w	r3, r0, #15
 80122e4:	d401      	bmi.n	80122ea <_ZN8touchgfx8ceil28_4El+0xa>
 80122e6:	1118      	asrs	r0, r3, #4
 80122e8:	4770      	bx	lr
 80122ea:	2210      	movs	r2, #16
 80122ec:	f1c0 0001 	rsb	r0, r0, #1
 80122f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80122f4:	f010 000f 	ands.w	r0, r0, #15
 80122f8:	bf18      	it	ne
 80122fa:	2001      	movne	r0, #1
 80122fc:	1a18      	subs	r0, r3, r0
 80122fe:	4770      	bx	lr

08012300 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8012300:	2900      	cmp	r1, #0
 8012302:	b538      	push	{r3, r4, r5, lr}
 8012304:	dc05      	bgt.n	8012312 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 8012306:	4b0f      	ldr	r3, [pc, #60]	; (8012344 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8012308:	21f7      	movs	r1, #247	; 0xf7
 801230a:	4a0f      	ldr	r2, [pc, #60]	; (8012348 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801230c:	480f      	ldr	r0, [pc, #60]	; (801234c <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801230e:	f00c fec3 	bl	801f098 <__assert_func>
 8012312:	2800      	cmp	r0, #0
 8012314:	db06      	blt.n	8012324 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 8012316:	fb90 f4f1 	sdiv	r4, r0, r1
 801231a:	fb01 0114 	mls	r1, r1, r4, r0
 801231e:	6014      	str	r4, [r2, #0]
 8012320:	6019      	str	r1, [r3, #0]
 8012322:	bd38      	pop	{r3, r4, r5, pc}
 8012324:	4240      	negs	r0, r0
 8012326:	fb90 f4f1 	sdiv	r4, r0, r1
 801232a:	4265      	negs	r5, r4
 801232c:	fb01 0014 	mls	r0, r1, r4, r0
 8012330:	6015      	str	r5, [r2, #0]
 8012332:	6018      	str	r0, [r3, #0]
 8012334:	2800      	cmp	r0, #0
 8012336:	d0f4      	beq.n	8012322 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8012338:	6810      	ldr	r0, [r2, #0]
 801233a:	3801      	subs	r0, #1
 801233c:	6010      	str	r0, [r2, #0]
 801233e:	6818      	ldr	r0, [r3, #0]
 8012340:	1a09      	subs	r1, r1, r0
 8012342:	e7ed      	b.n	8012320 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8012344:	08023000 	.word	0x08023000
 8012348:	0802303f 	.word	0x0802303f
 801234c:	08023010 	.word	0x08023010

08012350 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8012350:	b570      	push	{r4, r5, r6, lr}
 8012352:	694a      	ldr	r2, [r1, #20]
 8012354:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012356:	684b      	ldr	r3, [r1, #4]
 8012358:	1b54      	subs	r4, r2, r5
 801235a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801235c:	f000 8106 	beq.w	801256c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8012360:	1b9b      	subs	r3, r3, r6
 8012362:	d003      	beq.n	801236c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8012364:	4363      	muls	r3, r4
 8012366:	2210      	movs	r2, #16
 8012368:	fb93 f3f2 	sdiv	r3, r3, r2
 801236c:	680c      	ldr	r4, [r1, #0]
 801236e:	698a      	ldr	r2, [r1, #24]
 8012370:	1b65      	subs	r5, r4, r5
 8012372:	f000 80fd 	beq.w	8012570 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8012376:	1b92      	subs	r2, r2, r6
 8012378:	d003      	beq.n	8012382 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801237a:	436a      	muls	r2, r5
 801237c:	2410      	movs	r4, #16
 801237e:	fb92 f2f4 	sdiv	r2, r2, r4
 8012382:	1a9b      	subs	r3, r3, r2
 8012384:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80125ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8012388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801238c:	460a      	mov	r2, r1
 801238e:	ee07 3a90 	vmov	s15, r3
 8012392:	f100 040c 	add.w	r4, r0, #12
 8012396:	4603      	mov	r3, r0
 8012398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801239c:	ee67 7a84 	vmul.f32	s15, s15, s8
 80123a0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80123a4:	eeb1 6a43 	vneg.f32	s12, s6
 80123a8:	edd2 7a02 	vldr	s15, [r2, #8]
 80123ac:	3214      	adds	r2, #20
 80123ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80123b2:	ece3 6a01 	vstmia	r3!, {s13}
 80123b6:	429c      	cmp	r4, r3
 80123b8:	ed52 7a02 	vldr	s15, [r2, #-8]
 80123bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80123c0:	edc3 7a02 	vstr	s15, [r3, #8]
 80123c4:	ed52 7a01 	vldr	s15, [r2, #-4]
 80123c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80123cc:	edc3 7a05 	vstr	s15, [r3, #20]
 80123d0:	d1ea      	bne.n	80123a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80123d2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80123d4:	698b      	ldr	r3, [r1, #24]
 80123d6:	edd0 4a02 	vldr	s9, [r0, #8]
 80123da:	1a9b      	subs	r3, r3, r2
 80123dc:	edd0 3a00 	vldr	s7, [r0]
 80123e0:	edd0 6a01 	vldr	s13, [r0, #4]
 80123e4:	ee07 3a90 	vmov	s15, r3
 80123e8:	684b      	ldr	r3, [r1, #4]
 80123ea:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80123ee:	ed90 5a05 	vldr	s10, [r0, #20]
 80123f2:	1a9b      	subs	r3, r3, r2
 80123f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123f8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80123fc:	ed90 2a03 	vldr	s4, [r0, #12]
 8012400:	ee07 3a10 	vmov	s14, r3
 8012404:	edd0 5a04 	vldr	s11, [r0, #16]
 8012408:	ee67 7a84 	vmul.f32	s15, s15, s8
 801240c:	ed90 1a07 	vldr	s2, [r0, #28]
 8012410:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012414:	edd0 2a06 	vldr	s5, [r0, #24]
 8012418:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801241c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8012420:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012424:	ee32 5a45 	vsub.f32	s10, s4, s10
 8012428:	eee6 7a87 	vfma.f32	s15, s13, s14
 801242c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8012430:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8012434:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012436:	694a      	ldr	r2, [r1, #20]
 8012438:	1b13      	subs	r3, r2, r4
 801243a:	ee07 3a10 	vmov	s14, r3
 801243e:	680b      	ldr	r3, [r1, #0]
 8012440:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012444:	1b1b      	subs	r3, r3, r4
 8012446:	ee27 7a04 	vmul.f32	s14, s14, s8
 801244a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801244e:	ee07 3a10 	vmov	s14, r3
 8012452:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012456:	ee27 7a04 	vmul.f32	s14, s14, s8
 801245a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801245e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8012462:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8012466:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012468:	698b      	ldr	r3, [r1, #24]
 801246a:	1a9b      	subs	r3, r3, r2
 801246c:	ee06 3a90 	vmov	s13, r3
 8012470:	684b      	ldr	r3, [r1, #4]
 8012472:	1a9b      	subs	r3, r3, r2
 8012474:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012478:	ee07 3a10 	vmov	s14, r3
 801247c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8012480:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012484:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8012488:	ee27 7a04 	vmul.f32	s14, s14, s8
 801248c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8012490:	ee66 6a83 	vmul.f32	s13, s13, s6
 8012494:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8012498:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801249a:	694a      	ldr	r2, [r1, #20]
 801249c:	1b13      	subs	r3, r2, r4
 801249e:	ee07 3a10 	vmov	s14, r3
 80124a2:	680b      	ldr	r3, [r1, #0]
 80124a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80124a8:	1b1b      	subs	r3, r3, r4
 80124aa:	ee27 7a04 	vmul.f32	s14, s14, s8
 80124ae:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80124b2:	ee07 3a10 	vmov	s14, r3
 80124b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80124ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 80124be:	eea5 5a87 	vfma.f32	s10, s11, s14
 80124c2:	edd0 5a08 	vldr	s11, [r0, #32]
 80124c6:	ee31 1a65 	vsub.f32	s2, s2, s11
 80124ca:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80124ce:	ee25 5a06 	vmul.f32	s10, s10, s12
 80124d2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80124d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80124d8:	698b      	ldr	r3, [r1, #24]
 80124da:	1a9b      	subs	r3, r3, r2
 80124dc:	ee07 3a10 	vmov	s14, r3
 80124e0:	684b      	ldr	r3, [r1, #4]
 80124e2:	1a9b      	subs	r3, r3, r2
 80124e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80124e8:	ee01 3a90 	vmov	s3, r3
 80124ec:	ee27 7a04 	vmul.f32	s14, s14, s8
 80124f0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80124f4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80124f8:	ee61 1a84 	vmul.f32	s3, s3, s8
 80124fc:	eea1 7a21 	vfma.f32	s14, s2, s3
 8012500:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012504:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8012508:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801250a:	694a      	ldr	r2, [r1, #20]
 801250c:	1b13      	subs	r3, r2, r4
 801250e:	ee03 3a10 	vmov	s6, r3
 8012512:	680b      	ldr	r3, [r1, #0]
 8012514:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8012518:	1b1b      	subs	r3, r3, r4
 801251a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801251e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8012522:	ee03 3a10 	vmov	s6, r3
 8012526:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801252a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801252e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8012532:	ee25 6a86 	vmul.f32	s12, s11, s12
 8012536:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801253a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801253e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8012542:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8012546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801254a:	dd13      	ble.n	8012574 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801254c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012550:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8012554:	63c3      	str	r3, [r0, #60]	; 0x3c
 8012556:	eee3 7a87 	vfma.f32	s15, s7, s14
 801255a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012562:	dd15      	ble.n	8012590 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8012564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012568:	6403      	str	r3, [r0, #64]	; 0x40
 801256a:	bd70      	pop	{r4, r5, r6, pc}
 801256c:	4623      	mov	r3, r4
 801256e:	e6fd      	b.n	801236c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8012570:	462a      	mov	r2, r5
 8012572:	e706      	b.n	8012382 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8012574:	d502      	bpl.n	801257c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8012576:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801257a:	e7e9      	b.n	8012550 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801257c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8012580:	eea3 2a85 	vfma.f32	s4, s7, s10
 8012584:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8012588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801258c:	dade      	bge.n	801254c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801258e:	e7f2      	b.n	8012576 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8012590:	d502      	bpl.n	8012598 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8012592:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012596:	e7e7      	b.n	8012568 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8012598:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801259c:	eee3 4a86 	vfma.f32	s9, s7, s12
 80125a0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80125a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a8:	dadc      	bge.n	8012564 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80125aa:	e7f2      	b.n	8012592 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80125ac:	3d800000 	.word	0x3d800000

080125b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80125b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b4:	f04f 0814 	mov.w	r8, #20
 80125b8:	4604      	mov	r4, r0
 80125ba:	4617      	mov	r7, r2
 80125bc:	460d      	mov	r5, r1
 80125be:	fb08 f903 	mul.w	r9, r8, r3
 80125c2:	461e      	mov	r6, r3
 80125c4:	eb02 0a09 	add.w	sl, r2, r9
 80125c8:	f8da 0004 	ldr.w	r0, [sl, #4]
 80125cc:	f7ff fe88 	bl	80122e0 <_ZN8touchgfx8ceil28_4El>
 80125d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125d2:	6160      	str	r0, [r4, #20]
 80125d4:	fb08 f803 	mul.w	r8, r8, r3
 80125d8:	9001      	str	r0, [sp, #4]
 80125da:	eb07 0b08 	add.w	fp, r7, r8
 80125de:	f8db 0004 	ldr.w	r0, [fp, #4]
 80125e2:	f7ff fe7d 	bl	80122e0 <_ZN8touchgfx8ceil28_4El>
 80125e6:	9a01      	ldr	r2, [sp, #4]
 80125e8:	1a80      	subs	r0, r0, r2
 80125ea:	61a0      	str	r0, [r4, #24]
 80125ec:	2800      	cmp	r0, #0
 80125ee:	f000 8088 	beq.w	8012702 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 80125f2:	f857 3009 	ldr.w	r3, [r7, r9]
 80125f6:	f857 c008 	ldr.w	ip, [r7, r8]
 80125fa:	f8db 0004 	ldr.w	r0, [fp, #4]
 80125fe:	ebac 0c03 	sub.w	ip, ip, r3
 8012602:	f8da 1004 	ldr.w	r1, [sl, #4]
 8012606:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801260a:	1a40      	subs	r0, r0, r1
 801260c:	fb0b f202 	mul.w	r2, fp, r2
 8012610:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8012614:	fb0c 2211 	mls	r2, ip, r1, r2
 8012618:	4641      	mov	r1, r8
 801261a:	fb00 2003 	mla	r0, r0, r3, r2
 801261e:	f104 0310 	add.w	r3, r4, #16
 8012622:	4622      	mov	r2, r4
 8012624:	3801      	subs	r0, #1
 8012626:	4440      	add	r0, r8
 8012628:	f7ff fe6a 	bl	8012300 <_ZN8touchgfx11floorDivModEllRlS0_>
 801262c:	f104 0308 	add.w	r3, r4, #8
 8012630:	1d22      	adds	r2, r4, #4
 8012632:	4641      	mov	r1, r8
 8012634:	4658      	mov	r0, fp
 8012636:	f7ff fe63 	bl	8012300 <_ZN8touchgfx11floorDivModEllRlS0_>
 801263a:	f8c4 800c 	str.w	r8, [r4, #12]
 801263e:	6962      	ldr	r2, [r4, #20]
 8012640:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012644:	eddf 6a31 	vldr	s13, [pc, #196]	; 801270c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8012648:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801264c:	6822      	ldr	r2, [r4, #0]
 801264e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8012652:	ee07 3a10 	vmov	s14, r3
 8012656:	f857 3009 	ldr.w	r3, [r7, r9]
 801265a:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801265e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012662:	ee07 3a90 	vmov	s15, r3
 8012666:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801266a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801266e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012672:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012676:	edd3 6a00 	vldr	s13, [r3]
 801267a:	eee6 6a07 	vfma.f32	s13, s12, s14
 801267e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8012682:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012686:	edc4 6a07 	vstr	s13, [r4, #28]
 801268a:	edd4 6a01 	vldr	s13, [r4, #4]
 801268e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8012692:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012696:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801269a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801269e:	ed84 6a08 	vstr	s12, [r4, #32]
 80126a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80126a4:	6262      	str	r2, [r4, #36]	; 0x24
 80126a6:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 80126aa:	ed93 6a03 	vldr	s12, [r3, #12]
 80126ae:	eea5 6a87 	vfma.f32	s12, s11, s14
 80126b2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80126b6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80126ba:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 80126be:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80126c2:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 80126c6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80126ca:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 80126ce:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80126d0:	6322      	str	r2, [r4, #48]	; 0x30
 80126d2:	ed93 6a06 	vldr	s12, [r3, #24]
 80126d6:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 80126da:	eea5 6a87 	vfma.f32	s12, s11, s14
 80126de:	eeb0 7a46 	vmov.f32	s14, s12
 80126e2:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 80126e6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80126ea:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 80126ee:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 80126f2:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 80126f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80126fa:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 80126fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8012700:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012702:	4620      	mov	r0, r4
 8012704:	b003      	add	sp, #12
 8012706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801270a:	bf00      	nop
 801270c:	3d800000 	.word	0x3d800000

08012710 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8012710:	4602      	mov	r2, r0
 8012712:	b148      	cbz	r0, 8012728 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8012714:	2300      	movs	r3, #0
 8012716:	b298      	uxth	r0, r3
 8012718:	3301      	adds	r3, #1
 801271a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801271e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8012722:	2900      	cmp	r1, #0
 8012724:	d1f7      	bne.n	8012716 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8012726:	4770      	bx	lr
 8012728:	4770      	bx	lr

0801272a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801272a:	b530      	push	{r4, r5, lr}
 801272c:	4604      	mov	r4, r0
 801272e:	b159      	cbz	r1, 8012748 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8012730:	b148      	cbz	r0, 8012746 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8012732:	2300      	movs	r3, #0
 8012734:	b298      	uxth	r0, r3
 8012736:	4282      	cmp	r2, r0
 8012738:	d905      	bls.n	8012746 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801273a:	5ccd      	ldrb	r5, [r1, r3]
 801273c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8012740:	3301      	adds	r3, #1
 8012742:	2d00      	cmp	r5, #0
 8012744:	d1f6      	bne.n	8012734 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8012746:	bd30      	pop	{r4, r5, pc}
 8012748:	4608      	mov	r0, r1
 801274a:	e7fc      	b.n	8012746 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801274c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801274c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801274e:	468c      	mov	ip, r1
 8012750:	b08b      	sub	sp, #44	; 0x2c
 8012752:	2100      	movs	r1, #0
 8012754:	ae01      	add	r6, sp, #4
 8012756:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801275a:	211f      	movs	r1, #31
 801275c:	fbb0 f7f3 	udiv	r7, r0, r3
 8012760:	fb03 0517 	mls	r5, r3, r7, r0
 8012764:	4638      	mov	r0, r7
 8012766:	b2ec      	uxtb	r4, r5
 8012768:	2d09      	cmp	r5, #9
 801276a:	bfd4      	ite	le
 801276c:	3430      	addle	r4, #48	; 0x30
 801276e:	3457      	addgt	r4, #87	; 0x57
 8012770:	b2e4      	uxtb	r4, r4
 8012772:	558c      	strb	r4, [r1, r6]
 8012774:	1e4c      	subs	r4, r1, #1
 8012776:	b92f      	cbnz	r7, 8012784 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8012778:	4431      	add	r1, r6
 801277a:	4660      	mov	r0, ip
 801277c:	f7ff ffd5 	bl	801272a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8012780:	b00b      	add	sp, #44	; 0x2c
 8012782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012784:	4621      	mov	r1, r4
 8012786:	e7e9      	b.n	801275c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08012788 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8012788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801278a:	4607      	mov	r7, r0
 801278c:	b08b      	sub	sp, #44	; 0x2c
 801278e:	4608      	mov	r0, r1
 8012790:	b341      	cbz	r1, 80127e4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8012792:	1e99      	subs	r1, r3, #2
 8012794:	2922      	cmp	r1, #34	; 0x22
 8012796:	d825      	bhi.n	80127e4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8012798:	2100      	movs	r1, #0
 801279a:	463c      	mov	r4, r7
 801279c:	261f      	movs	r6, #31
 801279e:	f10d 0c04 	add.w	ip, sp, #4
 80127a2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80127a6:	1e71      	subs	r1, r6, #1
 80127a8:	fb94 fef3 	sdiv	lr, r4, r3
 80127ac:	fb03 441e 	mls	r4, r3, lr, r4
 80127b0:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 80127b4:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 80127b8:	b2ec      	uxtb	r4, r5
 80127ba:	2d09      	cmp	r5, #9
 80127bc:	bfd4      	ite	le
 80127be:	3430      	addle	r4, #48	; 0x30
 80127c0:	3457      	addgt	r4, #87	; 0x57
 80127c2:	b2e4      	uxtb	r4, r4
 80127c4:	f80c 4006 	strb.w	r4, [ip, r6]
 80127c8:	4674      	mov	r4, lr
 80127ca:	b96c      	cbnz	r4, 80127e8 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 80127cc:	2f00      	cmp	r7, #0
 80127ce:	da05      	bge.n	80127dc <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 80127d0:	ab0a      	add	r3, sp, #40	; 0x28
 80127d2:	4419      	add	r1, r3
 80127d4:	232d      	movs	r3, #45	; 0x2d
 80127d6:	f801 3c24 	strb.w	r3, [r1, #-36]
 80127da:	1eb1      	subs	r1, r6, #2
 80127dc:	3101      	adds	r1, #1
 80127de:	4461      	add	r1, ip
 80127e0:	f7ff ffa3 	bl	801272a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80127e4:	b00b      	add	sp, #44	; 0x2c
 80127e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127e8:	460e      	mov	r6, r1
 80127ea:	e7dc      	b.n	80127a6 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

080127ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 80127ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127f0:	b085      	sub	sp, #20
 80127f2:	4691      	mov	r9, r2
 80127f4:	6802      	ldr	r2, [r0, #0]
 80127f6:	4688      	mov	r8, r1
 80127f8:	461c      	mov	r4, r3
 80127fa:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 80127fe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8012802:	4683      	mov	fp, r0
 8012804:	4610      	mov	r0, r2
 8012806:	9103      	str	r1, [sp, #12]
 8012808:	9302      	str	r3, [sp, #8]
 801280a:	9201      	str	r2, [sp, #4]
 801280c:	f7ff ff80 	bl	8012710 <_ZN8touchgfx7Unicode6strlenEPKt>
 8012810:	f1b8 0f00 	cmp.w	r8, #0
 8012814:	bf0c      	ite	eq
 8012816:	4684      	moveq	ip, r0
 8012818:	f100 0c01 	addne.w	ip, r0, #1
 801281c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8012820:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8012824:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8012826:	fa1f fc8c 	uxth.w	ip, ip
 801282a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801282c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8012830:	9903      	ldr	r1, [sp, #12]
 8012832:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012836:	d041      	beq.n	80128bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8012838:	d834      	bhi.n	80128a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801283a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801283e:	d059      	beq.n	80128f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8012840:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8012844:	d03a      	beq.n	80128bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8012846:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801284a:	d034      	beq.n	80128b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801284c:	2400      	movs	r4, #0
 801284e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8012852:	3a01      	subs	r2, #1
 8012854:	b169      	cbz	r1, 8012872 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8012856:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012858:	458c      	cmp	ip, r1
 801285a:	da09      	bge.n	8012870 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801285c:	eba1 010c 	sub.w	r1, r1, ip
 8012860:	b289      	uxth	r1, r1
 8012862:	b933      	cbnz	r3, 8012872 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8012864:	2e00      	cmp	r6, #0
 8012866:	d051      	beq.n	801290c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8012868:	2800      	cmp	r0, #0
 801286a:	d04f      	beq.n	801290c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801286c:	440c      	add	r4, r1
 801286e:	b2a4      	uxth	r4, r4
 8012870:	2100      	movs	r1, #0
 8012872:	682b      	ldr	r3, [r5, #0]
 8012874:	4293      	cmp	r3, r2
 8012876:	da07      	bge.n	8012888 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8012878:	f1b8 0f00 	cmp.w	r8, #0
 801287c:	d004      	beq.n	8012888 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801287e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8012882:	682b      	ldr	r3, [r5, #0]
 8012884:	3301      	adds	r3, #1
 8012886:	602b      	str	r3, [r5, #0]
 8012888:	2730      	movs	r7, #48	; 0x30
 801288a:	2c00      	cmp	r4, #0
 801288c:	d04e      	beq.n	801292c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801288e:	682e      	ldr	r6, [r5, #0]
 8012890:	3c01      	subs	r4, #1
 8012892:	42b2      	cmp	r2, r6
 8012894:	b2a4      	uxth	r4, r4
 8012896:	dd49      	ble.n	801292c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8012898:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801289c:	682b      	ldr	r3, [r5, #0]
 801289e:	3301      	adds	r3, #1
 80128a0:	602b      	str	r3, [r5, #0]
 80128a2:	e7f2      	b.n	801288a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 80128a4:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 80128a8:	d01d      	beq.n	80128e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 80128aa:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 80128ae:	d002      	beq.n	80128b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80128b0:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 80128b4:	e7c9      	b.n	801284a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80128b6:	4684      	mov	ip, r0
 80128b8:	f04f 0800 	mov.w	r8, #0
 80128bc:	2c00      	cmp	r4, #0
 80128be:	d0c6      	beq.n	801284e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80128c0:	b947      	cbnz	r7, 80128d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80128c2:	2801      	cmp	r0, #1
 80128c4:	d106      	bne.n	80128d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80128c6:	8814      	ldrh	r4, [r2, #0]
 80128c8:	2c30      	cmp	r4, #48	; 0x30
 80128ca:	bf02      	ittt	eq
 80128cc:	3202      	addeq	r2, #2
 80128ce:	4638      	moveq	r0, r7
 80128d0:	f8cb 2000 	streq.w	r2, [fp]
 80128d4:	45bc      	cmp	ip, r7
 80128d6:	da14      	bge.n	8012902 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 80128d8:	b2bf      	uxth	r7, r7
 80128da:	eba7 040c 	sub.w	r4, r7, ip
 80128de:	46bc      	mov	ip, r7
 80128e0:	b2a4      	uxth	r4, r4
 80128e2:	2600      	movs	r6, #0
 80128e4:	e7b3      	b.n	801284e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80128e6:	4684      	mov	ip, r0
 80128e8:	b16c      	cbz	r4, 8012906 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 80128ea:	42b8      	cmp	r0, r7
 80128ec:	dd00      	ble.n	80128f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 80128ee:	b2b8      	uxth	r0, r7
 80128f0:	2400      	movs	r4, #0
 80128f2:	e003      	b.n	80128fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 80128f4:	f04f 0c01 	mov.w	ip, #1
 80128f8:	2400      	movs	r4, #0
 80128fa:	4660      	mov	r0, ip
 80128fc:	4626      	mov	r6, r4
 80128fe:	46a0      	mov	r8, r4
 8012900:	e7a5      	b.n	801284e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8012902:	2400      	movs	r4, #0
 8012904:	e7ed      	b.n	80128e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8012906:	4626      	mov	r6, r4
 8012908:	46a0      	mov	r8, r4
 801290a:	e7a0      	b.n	801284e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801290c:	2900      	cmp	r1, #0
 801290e:	d0b0      	beq.n	8012872 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8012910:	2720      	movs	r7, #32
 8012912:	682e      	ldr	r6, [r5, #0]
 8012914:	2900      	cmp	r1, #0
 8012916:	d0ac      	beq.n	8012872 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8012918:	3901      	subs	r1, #1
 801291a:	4296      	cmp	r6, r2
 801291c:	b289      	uxth	r1, r1
 801291e:	daa7      	bge.n	8012870 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8012920:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8012924:	682b      	ldr	r3, [r5, #0]
 8012926:	3301      	adds	r3, #1
 8012928:	602b      	str	r3, [r5, #0]
 801292a:	e7f2      	b.n	8012912 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801292c:	b188      	cbz	r0, 8012952 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801292e:	682b      	ldr	r3, [r5, #0]
 8012930:	3801      	subs	r0, #1
 8012932:	429a      	cmp	r2, r3
 8012934:	b280      	uxth	r0, r0
 8012936:	dd0c      	ble.n	8012952 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8012938:	f8db 3000 	ldr.w	r3, [fp]
 801293c:	1c9c      	adds	r4, r3, #2
 801293e:	f8cb 4000 	str.w	r4, [fp]
 8012942:	881c      	ldrh	r4, [r3, #0]
 8012944:	682b      	ldr	r3, [r5, #0]
 8012946:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801294a:	682b      	ldr	r3, [r5, #0]
 801294c:	3301      	adds	r3, #1
 801294e:	602b      	str	r3, [r5, #0]
 8012950:	e7ec      	b.n	801292c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8012952:	2620      	movs	r6, #32
 8012954:	b151      	cbz	r1, 801296c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8012956:	6828      	ldr	r0, [r5, #0]
 8012958:	3901      	subs	r1, #1
 801295a:	4282      	cmp	r2, r0
 801295c:	b289      	uxth	r1, r1
 801295e:	dd05      	ble.n	801296c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8012960:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8012964:	682b      	ldr	r3, [r5, #0]
 8012966:	3301      	adds	r3, #1
 8012968:	602b      	str	r3, [r5, #0]
 801296a:	e7f3      	b.n	8012954 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801296c:	b005      	add	sp, #20
 801296e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012972 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8012972:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012976:	2400      	movs	r4, #0
 8012978:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801297c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8012980:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8012984:	8014      	strh	r4, [r2, #0]
 8012986:	701c      	strb	r4, [r3, #0]
 8012988:	f888 4000 	strb.w	r4, [r8]
 801298c:	f88c 4000 	strb.w	r4, [ip]
 8012990:	f88e 4000 	strb.w	r4, [lr]
 8012994:	703c      	strb	r4, [r7, #0]
 8012996:	6804      	ldr	r4, [r0, #0]
 8012998:	b1a4      	cbz	r4, 80129c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801299a:	8824      	ldrh	r4, [r4, #0]
 801299c:	f04f 0901 	mov.w	r9, #1
 80129a0:	b314      	cbz	r4, 80129e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80129a2:	2c2b      	cmp	r4, #43	; 0x2b
 80129a4:	d001      	beq.n	80129aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 80129a6:	2c20      	cmp	r4, #32
 80129a8:	d110      	bne.n	80129cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 80129aa:	8014      	strh	r4, [r2, #0]
 80129ac:	6804      	ldr	r4, [r0, #0]
 80129ae:	b10c      	cbz	r4, 80129b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80129b0:	3402      	adds	r4, #2
 80129b2:	6004      	str	r4, [r0, #0]
 80129b4:	680c      	ldr	r4, [r1, #0]
 80129b6:	b10c      	cbz	r4, 80129bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80129b8:	3401      	adds	r4, #1
 80129ba:	600c      	str	r4, [r1, #0]
 80129bc:	6804      	ldr	r4, [r0, #0]
 80129be:	b17c      	cbz	r4, 80129e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 80129c0:	8824      	ldrh	r4, [r4, #0]
 80129c2:	e7ed      	b.n	80129a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80129c4:	680c      	ldr	r4, [r1, #0]
 80129c6:	b17c      	cbz	r4, 80129e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80129c8:	7824      	ldrb	r4, [r4, #0]
 80129ca:	e7e7      	b.n	801299c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 80129cc:	2c2d      	cmp	r4, #45	; 0x2d
 80129ce:	d102      	bne.n	80129d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 80129d0:	f883 9000 	strb.w	r9, [r3]
 80129d4:	e7ea      	b.n	80129ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80129d6:	2c23      	cmp	r4, #35	; 0x23
 80129d8:	d107      	bne.n	80129ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 80129da:	f888 9000 	strb.w	r9, [r8]
 80129de:	e7e5      	b.n	80129ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80129e0:	680c      	ldr	r4, [r1, #0]
 80129e2:	b10c      	cbz	r4, 80129e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80129e4:	7824      	ldrb	r4, [r4, #0]
 80129e6:	e7db      	b.n	80129a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80129e8:	2400      	movs	r4, #0
 80129ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80129ee:	2b09      	cmp	r3, #9
 80129f0:	d901      	bls.n	80129f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 80129f2:	2c2a      	cmp	r4, #42	; 0x2a
 80129f4:	d122      	bne.n	8012a3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80129f6:	2301      	movs	r3, #1
 80129f8:	2c30      	cmp	r4, #48	; 0x30
 80129fa:	f88e 3000 	strb.w	r3, [lr]
 80129fe:	d10d      	bne.n	8012a1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8012a00:	f88c 3000 	strb.w	r3, [ip]
 8012a04:	6803      	ldr	r3, [r0, #0]
 8012a06:	b10b      	cbz	r3, 8012a0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8012a08:	3302      	adds	r3, #2
 8012a0a:	6003      	str	r3, [r0, #0]
 8012a0c:	680b      	ldr	r3, [r1, #0]
 8012a0e:	b10b      	cbz	r3, 8012a14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8012a10:	3301      	adds	r3, #1
 8012a12:	600b      	str	r3, [r1, #0]
 8012a14:	6803      	ldr	r3, [r0, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d02f      	beq.n	8012a7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8012a1a:	881c      	ldrh	r4, [r3, #0]
 8012a1c:	2c2a      	cmp	r4, #42	; 0x2a
 8012a1e:	d135      	bne.n	8012a8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8012a20:	f04f 33ff 	mov.w	r3, #4294967295
 8012a24:	6033      	str	r3, [r6, #0]
 8012a26:	6803      	ldr	r3, [r0, #0]
 8012a28:	b10b      	cbz	r3, 8012a2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8012a2a:	3302      	adds	r3, #2
 8012a2c:	6003      	str	r3, [r0, #0]
 8012a2e:	680b      	ldr	r3, [r1, #0]
 8012a30:	b10b      	cbz	r3, 8012a36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8012a32:	3301      	adds	r3, #1
 8012a34:	600b      	str	r3, [r1, #0]
 8012a36:	6803      	ldr	r3, [r0, #0]
 8012a38:	b31b      	cbz	r3, 8012a82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8012a3a:	881c      	ldrh	r4, [r3, #0]
 8012a3c:	2c2e      	cmp	r4, #46	; 0x2e
 8012a3e:	d11a      	bne.n	8012a76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8012a40:	2301      	movs	r3, #1
 8012a42:	703b      	strb	r3, [r7, #0]
 8012a44:	6803      	ldr	r3, [r0, #0]
 8012a46:	b10b      	cbz	r3, 8012a4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8012a48:	3302      	adds	r3, #2
 8012a4a:	6003      	str	r3, [r0, #0]
 8012a4c:	680b      	ldr	r3, [r1, #0]
 8012a4e:	b10b      	cbz	r3, 8012a54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8012a50:	3301      	adds	r3, #1
 8012a52:	600b      	str	r3, [r1, #0]
 8012a54:	6803      	ldr	r3, [r0, #0]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d036      	beq.n	8012ac8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8012a5a:	881b      	ldrh	r3, [r3, #0]
 8012a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8012a5e:	d137      	bne.n	8012ad0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8012a60:	f04f 33ff 	mov.w	r3, #4294967295
 8012a64:	602b      	str	r3, [r5, #0]
 8012a66:	6803      	ldr	r3, [r0, #0]
 8012a68:	b10b      	cbz	r3, 8012a6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8012a6a:	3302      	adds	r3, #2
 8012a6c:	6003      	str	r3, [r0, #0]
 8012a6e:	680b      	ldr	r3, [r1, #0]
 8012a70:	b10b      	cbz	r3, 8012a76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8012a72:	3301      	adds	r3, #1
 8012a74:	600b      	str	r3, [r1, #0]
 8012a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a7a:	680c      	ldr	r4, [r1, #0]
 8012a7c:	b134      	cbz	r4, 8012a8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8012a7e:	7824      	ldrb	r4, [r4, #0]
 8012a80:	e7cc      	b.n	8012a1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8012a82:	680b      	ldr	r3, [r1, #0]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d0f6      	beq.n	8012a76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8012a88:	781c      	ldrb	r4, [r3, #0]
 8012a8a:	e7d7      	b.n	8012a3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	220a      	movs	r2, #10
 8012a90:	6033      	str	r3, [r6, #0]
 8012a92:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012a96:	fa1f f38c 	uxth.w	r3, ip
 8012a9a:	2b09      	cmp	r3, #9
 8012a9c:	d8ce      	bhi.n	8012a3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8012a9e:	6833      	ldr	r3, [r6, #0]
 8012aa0:	fb02 c303 	mla	r3, r2, r3, ip
 8012aa4:	6033      	str	r3, [r6, #0]
 8012aa6:	6803      	ldr	r3, [r0, #0]
 8012aa8:	b10b      	cbz	r3, 8012aae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8012aaa:	3302      	adds	r3, #2
 8012aac:	6003      	str	r3, [r0, #0]
 8012aae:	680b      	ldr	r3, [r1, #0]
 8012ab0:	b10b      	cbz	r3, 8012ab6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8012ab2:	3301      	adds	r3, #1
 8012ab4:	600b      	str	r3, [r1, #0]
 8012ab6:	6803      	ldr	r3, [r0, #0]
 8012ab8:	b10b      	cbz	r3, 8012abe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8012aba:	881c      	ldrh	r4, [r3, #0]
 8012abc:	e7e9      	b.n	8012a92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8012abe:	680c      	ldr	r4, [r1, #0]
 8012ac0:	2c00      	cmp	r4, #0
 8012ac2:	d0e6      	beq.n	8012a92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8012ac4:	7824      	ldrb	r4, [r4, #0]
 8012ac6:	e7e4      	b.n	8012a92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8012ac8:	680b      	ldr	r3, [r1, #0]
 8012aca:	b10b      	cbz	r3, 8012ad0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8012acc:	781b      	ldrb	r3, [r3, #0]
 8012ace:	e7c5      	b.n	8012a5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	240a      	movs	r4, #10
 8012ad4:	602a      	str	r2, [r5, #0]
 8012ad6:	3b30      	subs	r3, #48	; 0x30
 8012ad8:	682a      	ldr	r2, [r5, #0]
 8012ada:	b29e      	uxth	r6, r3
 8012adc:	2e09      	cmp	r6, #9
 8012ade:	d813      	bhi.n	8012b08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8012ae0:	fb04 3302 	mla	r3, r4, r2, r3
 8012ae4:	602b      	str	r3, [r5, #0]
 8012ae6:	6803      	ldr	r3, [r0, #0]
 8012ae8:	b10b      	cbz	r3, 8012aee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8012aea:	3302      	adds	r3, #2
 8012aec:	6003      	str	r3, [r0, #0]
 8012aee:	680b      	ldr	r3, [r1, #0]
 8012af0:	b10b      	cbz	r3, 8012af6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8012af2:	3301      	adds	r3, #1
 8012af4:	600b      	str	r3, [r1, #0]
 8012af6:	6803      	ldr	r3, [r0, #0]
 8012af8:	b10b      	cbz	r3, 8012afe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8012afa:	881b      	ldrh	r3, [r3, #0]
 8012afc:	e7eb      	b.n	8012ad6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8012afe:	680b      	ldr	r3, [r1, #0]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d0e8      	beq.n	8012ad6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8012b04:	781b      	ldrb	r3, [r3, #0]
 8012b06:	e7e6      	b.n	8012ad6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8012b08:	2a06      	cmp	r2, #6
 8012b0a:	bfa8      	it	ge
 8012b0c:	2206      	movge	r2, #6
 8012b0e:	602a      	str	r2, [r5, #0]
 8012b10:	e7b1      	b.n	8012a76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08012b12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8012b12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b16:	b0a3      	sub	sp, #140	; 0x8c
 8012b18:	2600      	movs	r6, #0
 8012b1a:	4607      	mov	r7, r0
 8012b1c:	4688      	mov	r8, r1
 8012b1e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8012b22:	4631      	mov	r1, r6
 8012b24:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8012b26:	4648      	mov	r0, r9
 8012b28:	960d      	str	r6, [sp, #52]	; 0x34
 8012b2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012b2e:	2242      	movs	r2, #66	; 0x42
 8012b30:	f00c fc38 	bl	801f3a4 <memset>
 8012b34:	b15f      	cbz	r7, 8012b4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8012b36:	f108 3aff 	add.w	sl, r8, #4294967295
 8012b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b3e:	b152      	cbz	r2, 8012b56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8012b40:	8812      	ldrh	r2, [r2, #0]
 8012b42:	b10a      	cbz	r2, 8012b48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8012b44:	459a      	cmp	sl, r3
 8012b46:	dc2e      	bgt.n	8012ba6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8012b48:	2200      	movs	r2, #0
 8012b4a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8012b4e:	4638      	mov	r0, r7
 8012b50:	b023      	add	sp, #140	; 0x8c
 8012b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b56:	9a08      	ldr	r2, [sp, #32]
 8012b58:	2a00      	cmp	r2, #0
 8012b5a:	d0f5      	beq.n	8012b48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8012b5c:	7812      	ldrb	r2, [r2, #0]
 8012b5e:	e7f0      	b.n	8012b42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8012b60:	2d00      	cmp	r5, #0
 8012b62:	d0ea      	beq.n	8012b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8012b64:	782a      	ldrb	r2, [r5, #0]
 8012b66:	b142      	cbz	r2, 8012b7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8012b68:	2a25      	cmp	r2, #37	; 0x25
 8012b6a:	d001      	beq.n	8012b70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8012b6c:	459a      	cmp	sl, r3
 8012b6e:	dc08      	bgt.n	8012b82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8012b70:	f1bb 0f00 	cmp.w	fp, #0
 8012b74:	d121      	bne.n	8012bba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8012b76:	2d00      	cmp	r5, #0
 8012b78:	d0df      	beq.n	8012b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8012b7a:	782a      	ldrb	r2, [r5, #0]
 8012b7c:	f04f 0b00 	mov.w	fp, #0
 8012b80:	e01d      	b.n	8012bbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8012b82:	f1bb 0f00 	cmp.w	fp, #0
 8012b86:	d077      	beq.n	8012c78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8012b88:	f8bb 2000 	ldrh.w	r2, [fp]
 8012b8c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8012b90:	f1bb 0f00 	cmp.w	fp, #0
 8012b94:	d002      	beq.n	8012b9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8012b96:	f10b 0202 	add.w	r2, fp, #2
 8012b9a:	9209      	str	r2, [sp, #36]	; 0x24
 8012b9c:	b10d      	cbz	r5, 8012ba2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8012b9e:	3501      	adds	r5, #1
 8012ba0:	9508      	str	r5, [sp, #32]
 8012ba2:	3301      	adds	r3, #1
 8012ba4:	930d      	str	r3, [sp, #52]	; 0x34
 8012ba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ba8:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8012bac:	f1bb 0f00 	cmp.w	fp, #0
 8012bb0:	d0d6      	beq.n	8012b60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8012bb2:	f8bb 2000 	ldrh.w	r2, [fp]
 8012bb6:	2a00      	cmp	r2, #0
 8012bb8:	d1d6      	bne.n	8012b68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8012bba:	f8bb 2000 	ldrh.w	r2, [fp]
 8012bbe:	2a00      	cmp	r2, #0
 8012bc0:	d0bb      	beq.n	8012b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8012bc2:	459a      	cmp	sl, r3
 8012bc4:	ddb9      	ble.n	8012b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8012bc6:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8012bca:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012bce:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8012bd2:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8012bd6:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8012bda:	960e      	str	r6, [sp, #56]	; 0x38
 8012bdc:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8012be0:	960f      	str	r6, [sp, #60]	; 0x3c
 8012be2:	f1bb 0f00 	cmp.w	fp, #0
 8012be6:	d002      	beq.n	8012bee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8012be8:	f10b 0302 	add.w	r3, fp, #2
 8012bec:	9309      	str	r3, [sp, #36]	; 0x24
 8012bee:	b10d      	cbz	r5, 8012bf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8012bf0:	1c6b      	adds	r3, r5, #1
 8012bf2:	9308      	str	r3, [sp, #32]
 8012bf4:	ab0f      	add	r3, sp, #60	; 0x3c
 8012bf6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8012bfa:	a908      	add	r1, sp, #32
 8012bfc:	a809      	add	r0, sp, #36	; 0x24
 8012bfe:	9305      	str	r3, [sp, #20]
 8012c00:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8012c04:	9304      	str	r3, [sp, #16]
 8012c06:	ab0e      	add	r3, sp, #56	; 0x38
 8012c08:	9303      	str	r3, [sp, #12]
 8012c0a:	ab0c      	add	r3, sp, #48	; 0x30
 8012c0c:	9302      	str	r3, [sp, #8]
 8012c0e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8012c12:	9301      	str	r3, [sp, #4]
 8012c14:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8012c18:	9300      	str	r3, [sp, #0]
 8012c1a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8012c1e:	f7ff fea8 	bl	8012972 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8012c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	bfbf      	itttt	lt
 8012c28:	6823      	ldrlt	r3, [r4, #0]
 8012c2a:	3404      	addlt	r4, #4
 8012c2c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8012c30:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012c32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	bfbe      	ittt	lt
 8012c38:	6823      	ldrlt	r3, [r4, #0]
 8012c3a:	3404      	addlt	r4, #4
 8012c3c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8012c40:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8012c44:	bfb8      	it	lt
 8012c46:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8012c48:	b1d9      	cbz	r1, 8012c82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8012c4a:	880b      	ldrh	r3, [r1, #0]
 8012c4c:	2b69      	cmp	r3, #105	; 0x69
 8012c4e:	d01f      	beq.n	8012c90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8012c50:	d82f      	bhi.n	8012cb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8012c52:	2b58      	cmp	r3, #88	; 0x58
 8012c54:	d01c      	beq.n	8012c90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8012c56:	d818      	bhi.n	8012c8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8012c58:	2b25      	cmp	r3, #37	; 0x25
 8012c5a:	d034      	beq.n	8012cc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8012c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c5e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8012c62:	f1bb 0f00 	cmp.w	fp, #0
 8012c66:	f000 80b7 	beq.w	8012dd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8012c6a:	f8bb 5000 	ldrh.w	r5, [fp]
 8012c6e:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8012c72:	3301      	adds	r3, #1
 8012c74:	930d      	str	r3, [sp, #52]	; 0x34
 8012c76:	e029      	b.n	8012ccc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8012c78:	b10d      	cbz	r5, 8012c7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8012c7a:	782a      	ldrb	r2, [r5, #0]
 8012c7c:	e786      	b.n	8012b8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8012c7e:	462a      	mov	r2, r5
 8012c80:	e784      	b.n	8012b8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8012c82:	2a00      	cmp	r2, #0
 8012c84:	d0ea      	beq.n	8012c5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8012c86:	7813      	ldrb	r3, [r2, #0]
 8012c88:	e7e0      	b.n	8012c4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8012c8a:	3b63      	subs	r3, #99	; 0x63
 8012c8c:	2b01      	cmp	r3, #1
 8012c8e:	d8e5      	bhi.n	8012c5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8012c90:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8012c94:	b329      	cbz	r1, 8012ce2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8012c96:	880b      	ldrh	r3, [r1, #0]
 8012c98:	2b69      	cmp	r3, #105	; 0x69
 8012c9a:	d063      	beq.n	8012d64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8012c9c:	d825      	bhi.n	8012cea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8012c9e:	2b63      	cmp	r3, #99	; 0x63
 8012ca0:	d038      	beq.n	8012d14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8012ca2:	2b64      	cmp	r3, #100	; 0x64
 8012ca4:	d05e      	beq.n	8012d64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8012ca6:	2b58      	cmp	r3, #88	; 0x58
 8012ca8:	d07a      	beq.n	8012da0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8012caa:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8012cae:	4625      	mov	r5, r4
 8012cb0:	e036      	b.n	8012d20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8012cb2:	2b73      	cmp	r3, #115	; 0x73
 8012cb4:	d0ec      	beq.n	8012c90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8012cb6:	d802      	bhi.n	8012cbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8012cb8:	2b6f      	cmp	r3, #111	; 0x6f
 8012cba:	d1cf      	bne.n	8012c5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8012cbc:	e7e8      	b.n	8012c90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8012cbe:	2b75      	cmp	r3, #117	; 0x75
 8012cc0:	d0e6      	beq.n	8012c90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8012cc2:	2b78      	cmp	r3, #120	; 0x78
 8012cc4:	e7f9      	b.n	8012cba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8012cc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012cc8:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8012ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cce:	b10b      	cbz	r3, 8012cd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8012cd0:	3302      	adds	r3, #2
 8012cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8012cd4:	9b08      	ldr	r3, [sp, #32]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	f43f af2f 	beq.w	8012b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8012cdc:	3301      	adds	r3, #1
 8012cde:	9308      	str	r3, [sp, #32]
 8012ce0:	e72b      	b.n	8012b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8012ce2:	2a00      	cmp	r2, #0
 8012ce4:	d0e1      	beq.n	8012caa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8012ce6:	7813      	ldrb	r3, [r2, #0]
 8012ce8:	e7d6      	b.n	8012c98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8012cea:	2b73      	cmp	r3, #115	; 0x73
 8012cec:	d036      	beq.n	8012d5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 8012cee:	d807      	bhi.n	8012d00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8012cf0:	2b6f      	cmp	r3, #111	; 0x6f
 8012cf2:	d1da      	bne.n	8012caa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8012cf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012cf6:	1d25      	adds	r5, r4, #4
 8012cf8:	2308      	movs	r3, #8
 8012cfa:	eba8 0202 	sub.w	r2, r8, r2
 8012cfe:	e049      	b.n	8012d94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8012d00:	2b75      	cmp	r3, #117	; 0x75
 8012d02:	d042      	beq.n	8012d8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8012d04:	2b78      	cmp	r3, #120	; 0x78
 8012d06:	d1d0      	bne.n	8012caa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8012d08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012d0a:	1d25      	adds	r5, r4, #4
 8012d0c:	2310      	movs	r3, #16
 8012d0e:	eba8 0202 	sub.w	r2, r8, r2
 8012d12:	e03f      	b.n	8012d94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8012d14:	7823      	ldrb	r3, [r4, #0]
 8012d16:	1d25      	adds	r5, r4, #4
 8012d18:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8012d1c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8012d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d22:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d051      	beq.n	8012dce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8012d2a:	881a      	ldrh	r2, [r3, #0]
 8012d2c:	a80d      	add	r0, sp, #52	; 0x34
 8012d2e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8012d32:	462c      	mov	r4, r5
 8012d34:	9005      	str	r0, [sp, #20]
 8012d36:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 8012d3a:	9004      	str	r0, [sp, #16]
 8012d3c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012d3e:	9003      	str	r0, [sp, #12]
 8012d40:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8012d44:	9002      	str	r0, [sp, #8]
 8012d46:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012d48:	9001      	str	r0, [sp, #4]
 8012d4a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8012d4e:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8012d52:	9000      	str	r0, [sp, #0]
 8012d54:	a810      	add	r0, sp, #64	; 0x40
 8012d56:	f7ff fd49 	bl	80127ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8012d5a:	e7b7      	b.n	8012ccc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8012d5c:	1d25      	adds	r5, r4, #4
 8012d5e:	6823      	ldr	r3, [r4, #0]
 8012d60:	9310      	str	r3, [sp, #64]	; 0x40
 8012d62:	e7dd      	b.n	8012d20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8012d64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012d66:	230a      	movs	r3, #10
 8012d68:	4649      	mov	r1, r9
 8012d6a:	6820      	ldr	r0, [r4, #0]
 8012d6c:	eba8 0202 	sub.w	r2, r8, r2
 8012d70:	1d25      	adds	r5, r4, #4
 8012d72:	b292      	uxth	r2, r2
 8012d74:	f7ff fd08 	bl	8012788 <_ZN8touchgfx7Unicode4itoaElPtti>
 8012d78:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012d7c:	2b2d      	cmp	r3, #45	; 0x2d
 8012d7e:	d1cf      	bne.n	8012d20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8012d80:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8012d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d86:	3302      	adds	r3, #2
 8012d88:	e7ea      	b.n	8012d60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8012d8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012d8c:	1d25      	adds	r5, r4, #4
 8012d8e:	230a      	movs	r3, #10
 8012d90:	eba8 0202 	sub.w	r2, r8, r2
 8012d94:	b292      	uxth	r2, r2
 8012d96:	4649      	mov	r1, r9
 8012d98:	6820      	ldr	r0, [r4, #0]
 8012d9a:	f7ff fcd7 	bl	801274c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8012d9e:	e7bf      	b.n	8012d20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8012da0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012da2:	2310      	movs	r3, #16
 8012da4:	4649      	mov	r1, r9
 8012da6:	6820      	ldr	r0, [r4, #0]
 8012da8:	eba8 0202 	sub.w	r2, r8, r2
 8012dac:	1d25      	adds	r5, r4, #4
 8012dae:	b292      	uxth	r2, r2
 8012db0:	f7ff fccc 	bl	801274c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8012db4:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8012db8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d0af      	beq.n	8012d20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8012dc0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8012dc4:	2919      	cmp	r1, #25
 8012dc6:	d8f7      	bhi.n	8012db8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8012dc8:	3b20      	subs	r3, #32
 8012dca:	8013      	strh	r3, [r2, #0]
 8012dcc:	e7f4      	b.n	8012db8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8012dce:	9a08      	ldr	r2, [sp, #32]
 8012dd0:	2a00      	cmp	r2, #0
 8012dd2:	d0ab      	beq.n	8012d2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8012dd4:	7812      	ldrb	r2, [r2, #0]
 8012dd6:	e7a9      	b.n	8012d2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8012dd8:	2d00      	cmp	r5, #0
 8012dda:	f43f af48 	beq.w	8012c6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 8012dde:	782d      	ldrb	r5, [r5, #0]
 8012de0:	e745      	b.n	8012c6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08012de2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8012de2:	b507      	push	{r0, r1, r2, lr}
 8012de4:	9300      	str	r3, [sp, #0]
 8012de6:	4613      	mov	r3, r2
 8012de8:	2200      	movs	r2, #0
 8012dea:	f7ff fe92 	bl	8012b12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8012dee:	b003      	add	sp, #12
 8012df0:	f85d fb04 	ldr.w	pc, [sp], #4

08012df4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8012df4:	b40c      	push	{r2, r3}
 8012df6:	b507      	push	{r0, r1, r2, lr}
 8012df8:	ab04      	add	r3, sp, #16
 8012dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dfe:	9301      	str	r3, [sp, #4]
 8012e00:	f7ff ffef 	bl	8012de2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8012e04:	b003      	add	sp, #12
 8012e06:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e0a:	b002      	add	sp, #8
 8012e0c:	4770      	bx	lr
	...

08012e10 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8012e10:	4b01      	ldr	r3, [pc, #4]	; (8012e18 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8012e12:	6018      	str	r0, [r3, #0]
 8012e14:	4770      	bx	lr
 8012e16:	bf00      	nop
 8012e18:	20009ff4 	.word	0x20009ff4

08012e1c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8012e1c:	4b06      	ldr	r3, [pc, #24]	; (8012e38 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8012e1e:	881a      	ldrh	r2, [r3, #0]
 8012e20:	4282      	cmp	r2, r0
 8012e22:	d807      	bhi.n	8012e34 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8012e24:	4b05      	ldr	r3, [pc, #20]	; (8012e3c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8012e26:	881b      	ldrh	r3, [r3, #0]
 8012e28:	4413      	add	r3, r2
 8012e2a:	4298      	cmp	r0, r3
 8012e2c:	bfac      	ite	ge
 8012e2e:	2000      	movge	r0, #0
 8012e30:	2001      	movlt	r0, #1
 8012e32:	4770      	bx	lr
 8012e34:	2000      	movs	r0, #0
 8012e36:	4770      	bx	lr
 8012e38:	2000a014 	.word	0x2000a014
 8012e3c:	2000a018 	.word	0x2000a018

08012e40 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8012e40:	b508      	push	{r3, lr}
 8012e42:	4601      	mov	r1, r0
 8012e44:	f7ff ffea 	bl	8012e1c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8012e48:	b118      	cbz	r0, 8012e52 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8012e4a:	4b02      	ldr	r3, [pc, #8]	; (8012e54 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8012e52:	bd08      	pop	{r3, pc}
 8012e54:	20009ff8 	.word	0x20009ff8

08012e58 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8012e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e5c:	4d28      	ldr	r5, [pc, #160]	; (8012f00 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8012e5e:	682b      	ldr	r3, [r5, #0]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d04a      	beq.n	8012efa <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8012e64:	4a27      	ldr	r2, [pc, #156]	; (8012f04 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8012e66:	4e28      	ldr	r6, [pc, #160]	; (8012f08 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8012e68:	8810      	ldrh	r0, [r2, #0]
 8012e6a:	f8b6 8000 	ldrh.w	r8, [r6]
 8012e6e:	4c27      	ldr	r4, [pc, #156]	; (8012f0c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8012e70:	4440      	add	r0, r8
 8012e72:	4f27      	ldr	r7, [pc, #156]	; (8012f10 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8012e74:	1c41      	adds	r1, r0, #1
 8012e76:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 8012e7a:	f021 0101 	bic.w	r1, r1, #1
 8012e7e:	eb03 020e 	add.w	r2, r3, lr
 8012e82:	0409      	lsls	r1, r1, #16
 8012e84:	6022      	str	r2, [r4, #0]
 8012e86:	0c09      	lsrs	r1, r1, #16
 8012e88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8012e8c:	eb0e 010c 	add.w	r1, lr, ip
 8012e90:	185a      	adds	r2, r3, r1
 8012e92:	603a      	str	r2, [r7, #0]
 8012e94:	220e      	movs	r2, #14
 8012e96:	fb02 f208 	mul.w	r2, r2, r8
 8012e9a:	3203      	adds	r2, #3
 8012e9c:	f022 0203 	bic.w	r2, r2, #3
 8012ea0:	4411      	add	r1, r2
 8012ea2:	440b      	add	r3, r1
 8012ea4:	491b      	ldr	r1, [pc, #108]	; (8012f14 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8012ea6:	600b      	str	r3, [r1, #0]
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	491b      	ldr	r1, [pc, #108]	; (8012f18 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8012eac:	800b      	strh	r3, [r1, #0]
 8012eae:	491b      	ldr	r1, [pc, #108]	; (8012f1c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8012eb0:	6809      	ldr	r1, [r1, #0]
 8012eb2:	eba1 010e 	sub.w	r1, r1, lr
 8012eb6:	eba1 010c 	sub.w	r1, r1, ip
 8012eba:	469c      	mov	ip, r3
 8012ebc:	1a8a      	subs	r2, r1, r2
 8012ebe:	4918      	ldr	r1, [pc, #96]	; (8012f20 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8012ec0:	600a      	str	r2, [r1, #0]
 8012ec2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012ec6:	4a17      	ldr	r2, [pc, #92]	; (8012f24 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 8012ec8:	8013      	strh	r3, [r2, #0]
 8012eca:	4283      	cmp	r3, r0
 8012ecc:	d10d      	bne.n	8012eea <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8012ece:	8835      	ldrh	r5, [r6, #0]
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	6838      	ldr	r0, [r7, #0]
 8012ed4:	240e      	movs	r4, #14
 8012ed6:	429d      	cmp	r5, r3
 8012ed8:	d90f      	bls.n	8012efa <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8012eda:	fb04 0203 	mla	r2, r4, r3, r0
 8012ede:	3301      	adds	r3, #1
 8012ee0:	7b11      	ldrb	r1, [r2, #12]
 8012ee2:	f36f 1145 	bfc	r1, #5, #1
 8012ee6:	7311      	strb	r1, [r2, #12]
 8012ee8:	e7f5      	b.n	8012ed6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 8012eea:	682a      	ldr	r2, [r5, #0]
 8012eec:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8012ef0:	6822      	ldr	r2, [r4, #0]
 8012ef2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	e7e7      	b.n	8012eca <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 8012efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012efe:	bf00      	nop
 8012f00:	20009ff8 	.word	0x20009ff8
 8012f04:	2000a014 	.word	0x2000a014
 8012f08:	2000a018 	.word	0x2000a018
 8012f0c:	2000a00c 	.word	0x2000a00c
 8012f10:	20009ffc 	.word	0x20009ffc
 8012f14:	2000a004 	.word	0x2000a004
 8012f18:	2000a016 	.word	0x2000a016
 8012f1c:	2000a000 	.word	0x2000a000
 8012f20:	2000a010 	.word	0x2000a010
 8012f24:	2000a008 	.word	0x2000a008

08012f28 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8012f28:	4b10      	ldr	r3, [pc, #64]	; (8012f6c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8012f2a:	b510      	push	{r4, lr}
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	b9db      	cbnz	r3, 8012f68 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8012f30:	b1d1      	cbz	r1, 8012f68 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8012f32:	4b0f      	ldr	r3, [pc, #60]	; (8012f70 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8012f34:	240e      	movs	r4, #14
 8012f36:	801a      	strh	r2, [r3, #0]
 8012f38:	b292      	uxth	r2, r2
 8012f3a:	4b0e      	ldr	r3, [pc, #56]	; (8012f74 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8012f3c:	881b      	ldrh	r3, [r3, #0]
 8012f3e:	4413      	add	r3, r2
 8012f40:	4362      	muls	r2, r4
 8012f42:	2406      	movs	r4, #6
 8012f44:	fb04 2203 	mla	r2, r4, r3, r2
 8012f48:	428a      	cmp	r2, r1
 8012f4a:	d305      	bcc.n	8012f58 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8012f4c:	4b0a      	ldr	r3, [pc, #40]	; (8012f78 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8012f4e:	2135      	movs	r1, #53	; 0x35
 8012f50:	4a0a      	ldr	r2, [pc, #40]	; (8012f7c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8012f52:	480b      	ldr	r0, [pc, #44]	; (8012f80 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8012f54:	f00c f8a0 	bl	801f098 <__assert_func>
 8012f58:	4b0a      	ldr	r3, [pc, #40]	; (8012f84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8012f5a:	6019      	str	r1, [r3, #0]
 8012f5c:	4b0a      	ldr	r3, [pc, #40]	; (8012f88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8012f5e:	6018      	str	r0, [r3, #0]
 8012f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f64:	f7ff bf78 	b.w	8012e58 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8012f68:	bd10      	pop	{r4, pc}
 8012f6a:	bf00      	nop
 8012f6c:	2000a004 	.word	0x2000a004
 8012f70:	2000a018 	.word	0x2000a018
 8012f74:	2000a014 	.word	0x2000a014
 8012f78:	080230dd 	.word	0x080230dd
 8012f7c:	08023136 	.word	0x08023136
 8012f80:	080230b8 	.word	0x080230b8
 8012f84:	2000a000 	.word	0x2000a000
 8012f88:	20009ff8 	.word	0x20009ff8

08012f8c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8012f8c:	b470      	push	{r4, r5, r6}
 8012f8e:	4c07      	ldr	r4, [pc, #28]	; (8012fac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8012f90:	4605      	mov	r5, r0
 8012f92:	4610      	mov	r0, r2
 8012f94:	9a03      	ldr	r2, [sp, #12]
 8012f96:	6826      	ldr	r6, [r4, #0]
 8012f98:	b936      	cbnz	r6, 8012fa8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8012f9a:	6025      	str	r5, [r4, #0]
 8012f9c:	4c04      	ldr	r4, [pc, #16]	; (8012fb0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8012f9e:	8021      	strh	r1, [r4, #0]
 8012fa0:	4619      	mov	r1, r3
 8012fa2:	bc70      	pop	{r4, r5, r6}
 8012fa4:	f7ff bfc0 	b.w	8012f28 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8012fa8:	bc70      	pop	{r4, r5, r6}
 8012faa:	4770      	bx	lr
 8012fac:	2000a01c 	.word	0x2000a01c
 8012fb0:	2000a014 	.word	0x2000a014

08012fb4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8012fb4:	b508      	push	{r3, lr}
 8012fb6:	4b14      	ldr	r3, [pc, #80]	; (8013008 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8012fb8:	6819      	ldr	r1, [r3, #0]
 8012fba:	b931      	cbnz	r1, 8012fca <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8012fbc:	4b13      	ldr	r3, [pc, #76]	; (801300c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8012fbe:	f240 4185 	movw	r1, #1157	; 0x485
 8012fc2:	4a13      	ldr	r2, [pc, #76]	; (8013010 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8012fc4:	4813      	ldr	r0, [pc, #76]	; (8013014 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8012fc6:	f00c f867 	bl	801f098 <__assert_func>
 8012fca:	4a13      	ldr	r2, [pc, #76]	; (8013018 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8012fcc:	8803      	ldrh	r3, [r0, #0]
 8012fce:	8812      	ldrh	r2, [r2, #0]
 8012fd0:	4293      	cmp	r3, r2
 8012fd2:	d204      	bcs.n	8012fde <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8012fd4:	2214      	movs	r2, #20
 8012fd6:	fb02 1303 	mla	r3, r2, r3, r1
 8012fda:	8918      	ldrh	r0, [r3, #8]
 8012fdc:	bd08      	pop	{r3, pc}
 8012fde:	490f      	ldr	r1, [pc, #60]	; (801301c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8012fe0:	8809      	ldrh	r1, [r1, #0]
 8012fe2:	4411      	add	r1, r2
 8012fe4:	428b      	cmp	r3, r1
 8012fe6:	da06      	bge.n	8012ff6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8012fe8:	1a9b      	subs	r3, r3, r2
 8012fea:	4a0d      	ldr	r2, [pc, #52]	; (8013020 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8012fec:	210e      	movs	r1, #14
 8012fee:	6812      	ldr	r2, [r2, #0]
 8012ff0:	fb01 2303 	mla	r3, r1, r3, r2
 8012ff4:	e7f1      	b.n	8012fda <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8012ff6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	bf0a      	itet	eq
 8012ffe:	4b09      	ldreq	r3, [pc, #36]	; (8013024 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8013000:	2000      	movne	r0, #0
 8013002:	8818      	ldrheq	r0, [r3, #0]
 8013004:	e7ea      	b.n	8012fdc <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8013006:	bf00      	nop
 8013008:	2000a01c 	.word	0x2000a01c
 801300c:	080223ec 	.word	0x080223ec
 8013010:	080231e3 	.word	0x080231e3
 8013014:	080230b8 	.word	0x080230b8
 8013018:	2000a014 	.word	0x2000a014
 801301c:	2000a018 	.word	0x2000a018
 8013020:	20009ffc 	.word	0x20009ffc
 8013024:	20009f88 	.word	0x20009f88

08013028 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8013028:	b508      	push	{r3, lr}
 801302a:	4b14      	ldr	r3, [pc, #80]	; (801307c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801302c:	6819      	ldr	r1, [r3, #0]
 801302e:	b931      	cbnz	r1, 801303e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8013030:	4b13      	ldr	r3, [pc, #76]	; (8013080 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8013032:	f240 4199 	movw	r1, #1177	; 0x499
 8013036:	4a13      	ldr	r2, [pc, #76]	; (8013084 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8013038:	4813      	ldr	r0, [pc, #76]	; (8013088 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801303a:	f00c f82d 	bl	801f098 <__assert_func>
 801303e:	4a13      	ldr	r2, [pc, #76]	; (801308c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8013040:	8803      	ldrh	r3, [r0, #0]
 8013042:	8812      	ldrh	r2, [r2, #0]
 8013044:	4293      	cmp	r3, r2
 8013046:	d204      	bcs.n	8013052 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8013048:	2214      	movs	r2, #20
 801304a:	fb02 1303 	mla	r3, r2, r3, r1
 801304e:	8958      	ldrh	r0, [r3, #10]
 8013050:	bd08      	pop	{r3, pc}
 8013052:	490f      	ldr	r1, [pc, #60]	; (8013090 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8013054:	8809      	ldrh	r1, [r1, #0]
 8013056:	4411      	add	r1, r2
 8013058:	428b      	cmp	r3, r1
 801305a:	da06      	bge.n	801306a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801305c:	1a9b      	subs	r3, r3, r2
 801305e:	4a0d      	ldr	r2, [pc, #52]	; (8013094 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8013060:	210e      	movs	r1, #14
 8013062:	6812      	ldr	r2, [r2, #0]
 8013064:	fb01 2303 	mla	r3, r1, r3, r2
 8013068:	e7f1      	b.n	801304e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801306a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801306e:	4293      	cmp	r3, r2
 8013070:	bf0a      	itet	eq
 8013072:	4b09      	ldreq	r3, [pc, #36]	; (8013098 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8013074:	2000      	movne	r0, #0
 8013076:	8818      	ldrheq	r0, [r3, #0]
 8013078:	e7ea      	b.n	8013050 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801307a:	bf00      	nop
 801307c:	2000a01c 	.word	0x2000a01c
 8013080:	080223ec 	.word	0x080223ec
 8013084:	0802320f 	.word	0x0802320f
 8013088:	080230b8 	.word	0x080230b8
 801308c:	2000a014 	.word	0x2000a014
 8013090:	2000a018 	.word	0x2000a018
 8013094:	20009ffc 	.word	0x20009ffc
 8013098:	20009f8a 	.word	0x20009f8a

0801309c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801309c:	4b23      	ldr	r3, [pc, #140]	; (801312c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801309e:	b510      	push	{r4, lr}
 80130a0:	681c      	ldr	r4, [r3, #0]
 80130a2:	b934      	cbnz	r4, 80130b2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80130a4:	4b22      	ldr	r3, [pc, #136]	; (8013130 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80130a6:	f240 41ad 	movw	r1, #1197	; 0x4ad
 80130aa:	4a22      	ldr	r2, [pc, #136]	; (8013134 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80130ac:	4822      	ldr	r0, [pc, #136]	; (8013138 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80130ae:	f00b fff3 	bl	801f098 <__assert_func>
 80130b2:	4a22      	ldr	r2, [pc, #136]	; (801313c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80130b4:	880b      	ldrh	r3, [r1, #0]
 80130b6:	8812      	ldrh	r2, [r2, #0]
 80130b8:	4293      	cmp	r3, r2
 80130ba:	d211      	bcs.n	80130e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 80130bc:	2214      	movs	r2, #20
 80130be:	fb02 4303 	mla	r3, r2, r3, r4
 80130c2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80130c6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80130ca:	8a1a      	ldrh	r2, [r3, #16]
 80130cc:	8a5b      	ldrh	r3, [r3, #18]
 80130ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80130d2:	8004      	strh	r4, [r0, #0]
 80130d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80130d8:	8041      	strh	r1, [r0, #2]
 80130da:	8082      	strh	r2, [r0, #4]
 80130dc:	80c3      	strh	r3, [r0, #6]
 80130de:	e00e      	b.n	80130fe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80130e0:	4917      	ldr	r1, [pc, #92]	; (8013140 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 80130e2:	8809      	ldrh	r1, [r1, #0]
 80130e4:	4411      	add	r1, r2
 80130e6:	428b      	cmp	r3, r1
 80130e8:	da0a      	bge.n	8013100 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 80130ea:	1a9b      	subs	r3, r3, r2
 80130ec:	4a15      	ldr	r2, [pc, #84]	; (8013144 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 80130ee:	210e      	movs	r1, #14
 80130f0:	6812      	ldr	r2, [r2, #0]
 80130f2:	fb01 2303 	mla	r3, r1, r3, r2
 80130f6:	681a      	ldr	r2, [r3, #0]
 80130f8:	6002      	str	r2, [r0, #0]
 80130fa:	685a      	ldr	r2, [r3, #4]
 80130fc:	6042      	str	r2, [r0, #4]
 80130fe:	bd10      	pop	{r4, pc}
 8013100:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013104:	4293      	cmp	r3, r2
 8013106:	d10b      	bne.n	8013120 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8013108:	4b0f      	ldr	r3, [pc, #60]	; (8013148 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801310a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801310e:	4b0f      	ldr	r3, [pc, #60]	; (801314c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8013110:	8081      	strh	r1, [r0, #4]
 8013112:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013116:	2300      	movs	r3, #0
 8013118:	80c2      	strh	r2, [r0, #6]
 801311a:	8003      	strh	r3, [r0, #0]
 801311c:	8043      	strh	r3, [r0, #2]
 801311e:	e7ee      	b.n	80130fe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8013120:	2300      	movs	r3, #0
 8013122:	8003      	strh	r3, [r0, #0]
 8013124:	8043      	strh	r3, [r0, #2]
 8013126:	8083      	strh	r3, [r0, #4]
 8013128:	e7d8      	b.n	80130dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801312a:	bf00      	nop
 801312c:	2000a01c 	.word	0x2000a01c
 8013130:	080223ec 	.word	0x080223ec
 8013134:	0802317c 	.word	0x0802317c
 8013138:	080230b8 	.word	0x080230b8
 801313c:	2000a014 	.word	0x2000a014
 8013140:	2000a018 	.word	0x2000a018
 8013144:	20009ffc 	.word	0x20009ffc
 8013148:	20009f88 	.word	0x20009f88
 801314c:	20009f8a 	.word	0x20009f8a

08013150 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8013150:	4b18      	ldr	r3, [pc, #96]	; (80131b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	b34b      	cbz	r3, 80131aa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8013156:	4a18      	ldr	r2, [pc, #96]	; (80131b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8013158:	8800      	ldrh	r0, [r0, #0]
 801315a:	8812      	ldrh	r2, [r2, #0]
 801315c:	4290      	cmp	r0, r2
 801315e:	d211      	bcs.n	8013184 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8013160:	2214      	movs	r2, #20
 8013162:	fb02 3300 	mla	r3, r2, r0, r3
 8013166:	8a1a      	ldrh	r2, [r3, #16]
 8013168:	8919      	ldrh	r1, [r3, #8]
 801316a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801316e:	428a      	cmp	r2, r1
 8013170:	db1d      	blt.n	80131ae <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8013172:	8a58      	ldrh	r0, [r3, #18]
 8013174:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8013178:	895b      	ldrh	r3, [r3, #10]
 801317a:	4298      	cmp	r0, r3
 801317c:	bfac      	ite	ge
 801317e:	2000      	movge	r0, #0
 8013180:	2001      	movlt	r0, #1
 8013182:	4770      	bx	lr
 8013184:	4b0d      	ldr	r3, [pc, #52]	; (80131bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8013186:	881b      	ldrh	r3, [r3, #0]
 8013188:	4413      	add	r3, r2
 801318a:	4298      	cmp	r0, r3
 801318c:	da0d      	bge.n	80131aa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801318e:	4b0c      	ldr	r3, [pc, #48]	; (80131c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8013190:	1a80      	subs	r0, r0, r2
 8013192:	220e      	movs	r2, #14
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	fb02 3300 	mla	r3, r2, r0, r3
 801319a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801319e:	891a      	ldrh	r2, [r3, #8]
 80131a0:	4291      	cmp	r1, r2
 80131a2:	db04      	blt.n	80131ae <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80131a4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80131a8:	e7e6      	b.n	8013178 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 80131aa:	2000      	movs	r0, #0
 80131ac:	4770      	bx	lr
 80131ae:	2001      	movs	r0, #1
 80131b0:	4770      	bx	lr
 80131b2:	bf00      	nop
 80131b4:	2000a01c 	.word	0x2000a01c
 80131b8:	2000a014 	.word	0x2000a014
 80131bc:	2000a018 	.word	0x2000a018
 80131c0:	20009ffc 	.word	0x20009ffc

080131c4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80131c4:	b508      	push	{r3, lr}
 80131c6:	4b12      	ldr	r3, [pc, #72]	; (8013210 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80131c8:	6819      	ldr	r1, [r3, #0]
 80131ca:	b931      	cbnz	r1, 80131da <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80131cc:	4b11      	ldr	r3, [pc, #68]	; (8013214 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80131ce:	f240 41d1 	movw	r1, #1233	; 0x4d1
 80131d2:	4a11      	ldr	r2, [pc, #68]	; (8013218 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80131d4:	4811      	ldr	r0, [pc, #68]	; (801321c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80131d6:	f00b ff5f 	bl	801f098 <__assert_func>
 80131da:	8803      	ldrh	r3, [r0, #0]
 80131dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131e0:	4293      	cmp	r3, r2
 80131e2:	d012      	beq.n	801320a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80131e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d103      	bne.n	80131f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 80131ec:	4b0c      	ldr	r3, [pc, #48]	; (8013220 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80131f2:	bd08      	pop	{r3, pc}
 80131f4:	4a0b      	ldr	r2, [pc, #44]	; (8013224 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 80131f6:	6812      	ldr	r2, [r2, #0]
 80131f8:	b11a      	cbz	r2, 8013202 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 80131fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80131fe:	2800      	cmp	r0, #0
 8013200:	d1f7      	bne.n	80131f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8013202:	2214      	movs	r2, #20
 8013204:	4353      	muls	r3, r2
 8013206:	58c8      	ldr	r0, [r1, r3]
 8013208:	e7f3      	b.n	80131f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801320a:	2000      	movs	r0, #0
 801320c:	e7f1      	b.n	80131f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801320e:	bf00      	nop
 8013210:	2000a01c 	.word	0x2000a01c
 8013214:	080223ec 	.word	0x080223ec
 8013218:	080231b2 	.word	0x080231b2
 801321c:	080230b8 	.word	0x080230b8
 8013220:	20009f94 	.word	0x20009f94
 8013224:	20009ff8 	.word	0x20009ff8

08013228 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8013228:	8802      	ldrh	r2, [r0, #0]
 801322a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801322e:	429a      	cmp	r2, r3
 8013230:	d845      	bhi.n	80132be <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8013232:	4b24      	ldr	r3, [pc, #144]	; (80132c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8013234:	8818      	ldrh	r0, [r3, #0]
 8013236:	4282      	cmp	r2, r0
 8013238:	d221      	bcs.n	801327e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801323a:	4b23      	ldr	r3, [pc, #140]	; (80132c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801323c:	6819      	ldr	r1, [r3, #0]
 801323e:	2314      	movs	r3, #20
 8013240:	fb03 1302 	mla	r3, r3, r2, r1
 8013244:	6858      	ldr	r0, [r3, #4]
 8013246:	2800      	cmp	r0, #0
 8013248:	d03a      	beq.n	80132c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801324a:	4920      	ldr	r1, [pc, #128]	; (80132cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801324c:	6809      	ldr	r1, [r1, #0]
 801324e:	2900      	cmp	r1, #0
 8013250:	d036      	beq.n	80132c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8013252:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013256:	2900      	cmp	r1, #0
 8013258:	d032      	beq.n	80132c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801325a:	891a      	ldrh	r2, [r3, #8]
 801325c:	8958      	ldrh	r0, [r3, #10]
 801325e:	4350      	muls	r0, r2
 8013260:	7c5a      	ldrb	r2, [r3, #17]
 8013262:	7cdb      	ldrb	r3, [r3, #19]
 8013264:	0952      	lsrs	r2, r2, #5
 8013266:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801326a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801326e:	2b0b      	cmp	r3, #11
 8013270:	bf18      	it	ne
 8013272:	0040      	lslne	r0, r0, #1
 8013274:	3003      	adds	r0, #3
 8013276:	f020 0003 	bic.w	r0, r0, #3
 801327a:	4408      	add	r0, r1
 801327c:	4770      	bx	lr
 801327e:	4b14      	ldr	r3, [pc, #80]	; (80132d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8013280:	881b      	ldrh	r3, [r3, #0]
 8013282:	4403      	add	r3, r0
 8013284:	429a      	cmp	r2, r3
 8013286:	da1a      	bge.n	80132be <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8013288:	4b12      	ldr	r3, [pc, #72]	; (80132d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801328a:	1a10      	subs	r0, r2, r0
 801328c:	210e      	movs	r1, #14
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	fb01 3000 	mla	r0, r1, r0, r3
 8013294:	7b03      	ldrb	r3, [r0, #12]
 8013296:	f003 031f 	and.w	r3, r3, #31
 801329a:	2b0b      	cmp	r3, #11
 801329c:	d10b      	bne.n	80132b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801329e:	8903      	ldrh	r3, [r0, #8]
 80132a0:	8940      	ldrh	r0, [r0, #10]
 80132a2:	4358      	muls	r0, r3
 80132a4:	4b09      	ldr	r3, [pc, #36]	; (80132cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80132a6:	3003      	adds	r0, #3
 80132a8:	6819      	ldr	r1, [r3, #0]
 80132aa:	f020 0303 	bic.w	r3, r0, #3
 80132ae:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80132b2:	4418      	add	r0, r3
 80132b4:	4770      	bx	lr
 80132b6:	2b0d      	cmp	r3, #13
 80132b8:	d101      	bne.n	80132be <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80132ba:	300d      	adds	r0, #13
 80132bc:	4770      	bx	lr
 80132be:	2000      	movs	r0, #0
 80132c0:	4770      	bx	lr
 80132c2:	bf00      	nop
 80132c4:	2000a014 	.word	0x2000a014
 80132c8:	2000a01c 	.word	0x2000a01c
 80132cc:	20009ff8 	.word	0x20009ff8
 80132d0:	2000a018 	.word	0x2000a018
 80132d4:	20009ffc 	.word	0x20009ffc

080132d8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80132d8:	4b17      	ldr	r3, [pc, #92]	; (8013338 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80132da:	b510      	push	{r4, lr}
 80132dc:	6819      	ldr	r1, [r3, #0]
 80132de:	8803      	ldrh	r3, [r0, #0]
 80132e0:	b1e9      	cbz	r1, 801331e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 80132e2:	4a16      	ldr	r2, [pc, #88]	; (801333c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80132e4:	8812      	ldrh	r2, [r2, #0]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d90a      	bls.n	8013300 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 80132ea:	2214      	movs	r2, #20
 80132ec:	fb02 1303 	mla	r3, r2, r3, r1
 80132f0:	7c58      	ldrb	r0, [r3, #17]
 80132f2:	0942      	lsrs	r2, r0, #5
 80132f4:	7cd8      	ldrb	r0, [r3, #19]
 80132f6:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80132fa:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80132fe:	bd10      	pop	{r4, pc}
 8013300:	490f      	ldr	r1, [pc, #60]	; (8013340 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8013302:	8809      	ldrh	r1, [r1, #0]
 8013304:	4411      	add	r1, r2
 8013306:	428b      	cmp	r3, r1
 8013308:	da09      	bge.n	801331e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801330a:	1a9b      	subs	r3, r3, r2
 801330c:	4a0d      	ldr	r2, [pc, #52]	; (8013344 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801330e:	210e      	movs	r1, #14
 8013310:	6812      	ldr	r2, [r2, #0]
 8013312:	fb01 2303 	mla	r3, r1, r3, r2
 8013316:	7b18      	ldrb	r0, [r3, #12]
 8013318:	f000 001f 	and.w	r0, r0, #31
 801331c:	e7ef      	b.n	80132fe <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801331e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013322:	4293      	cmp	r3, r2
 8013324:	d106      	bne.n	8013334 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8013326:	f7f5 fae7 	bl	80088f8 <_ZN8touchgfx3HAL3lcdEv>
 801332a:	6803      	ldr	r3, [r0, #0]
 801332c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013332:	4718      	bx	r3
 8013334:	2000      	movs	r0, #0
 8013336:	e7e2      	b.n	80132fe <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8013338:	2000a01c 	.word	0x2000a01c
 801333c:	2000a014 	.word	0x2000a014
 8013340:	2000a018 	.word	0x2000a018
 8013344:	20009ffc 	.word	0x20009ffc

08013348 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8013348:	2010      	movs	r0, #16
 801334a:	4770      	bx	lr

0801334c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801334c:	2000      	movs	r0, #0
 801334e:	4770      	bx	lr

08013350 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8013350:	2bff      	cmp	r3, #255	; 0xff
 8013352:	d050      	beq.n	80133f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8013354:	2a0b      	cmp	r2, #11
 8013356:	d04a      	beq.n	80133ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8013358:	d80e      	bhi.n	8013378 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801335a:	2a03      	cmp	r2, #3
 801335c:	d03f      	beq.n	80133de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801335e:	d804      	bhi.n	801336a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8013360:	2a01      	cmp	r2, #1
 8013362:	d03e      	beq.n	80133e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8013364:	d93f      	bls.n	80133e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8013366:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8013368:	4770      	bx	lr
 801336a:	2a09      	cmp	r2, #9
 801336c:	d03f      	beq.n	80133ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801336e:	d83c      	bhi.n	80133ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8013370:	2a08      	cmp	r2, #8
 8013372:	d03a      	beq.n	80133ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8013374:	2000      	movs	r0, #0
 8013376:	4770      	bx	lr
 8013378:	2a2f      	cmp	r2, #47	; 0x2f
 801337a:	d024      	beq.n	80133c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801337c:	d80d      	bhi.n	801339a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801337e:	2a2d      	cmp	r2, #45	; 0x2d
 8013380:	d014      	beq.n	80133ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8013382:	d826      	bhi.n	80133d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8013384:	2a2c      	cmp	r2, #44	; 0x2c
 8013386:	d1f5      	bne.n	8013374 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013388:	684b      	ldr	r3, [r1, #4]
 801338a:	781b      	ldrb	r3, [r3, #0]
 801338c:	2b01      	cmp	r3, #1
 801338e:	d018      	beq.n	80133c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8013390:	d323      	bcc.n	80133da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8013392:	2b02      	cmp	r3, #2
 8013394:	d1ee      	bne.n	8013374 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013396:	6880      	ldr	r0, [r0, #8]
 8013398:	4770      	bx	lr
 801339a:	2a31      	cmp	r2, #49	; 0x31
 801339c:	d004      	beq.n	80133a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801339e:	d328      	bcc.n	80133f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80133a0:	2a32      	cmp	r2, #50	; 0x32
 80133a2:	d026      	beq.n	80133f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80133a4:	2a33      	cmp	r2, #51	; 0x33
 80133a6:	d1e5      	bne.n	8013374 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80133a8:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80133aa:	4770      	bx	lr
 80133ac:	684b      	ldr	r3, [r1, #4]
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	2b01      	cmp	r3, #1
 80133b2:	d004      	beq.n	80133be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80133b4:	d30b      	bcc.n	80133ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80133b6:	2b02      	cmp	r3, #2
 80133b8:	d1dc      	bne.n	8013374 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80133ba:	6900      	ldr	r0, [r0, #16]
 80133bc:	4770      	bx	lr
 80133be:	6a00      	ldr	r0, [r0, #32]
 80133c0:	4770      	bx	lr
 80133c2:	6980      	ldr	r0, [r0, #24]
 80133c4:	4770      	bx	lr
 80133c6:	684b      	ldr	r3, [r1, #4]
 80133c8:	781b      	ldrb	r3, [r3, #0]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d1d2      	bne.n	8013374 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80133ce:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80133d0:	4770      	bx	lr
 80133d2:	684b      	ldr	r3, [r1, #4]
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d1cc      	bne.n	8013374 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80133da:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80133dc:	4770      	bx	lr
 80133de:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80133e0:	4770      	bx	lr
 80133e2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80133e4:	4770      	bx	lr
 80133e6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80133e8:	4770      	bx	lr
 80133ea:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80133ec:	4770      	bx	lr
 80133ee:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80133f0:	4770      	bx	lr
 80133f2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80133f4:	4770      	bx	lr
 80133f6:	2a0b      	cmp	r2, #11
 80133f8:	d049      	beq.n	801348e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80133fa:	d80e      	bhi.n	801341a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 80133fc:	2a03      	cmp	r2, #3
 80133fe:	d040      	beq.n	8013482 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8013400:	d804      	bhi.n	801340c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8013402:	2a01      	cmp	r2, #1
 8013404:	d03f      	beq.n	8013486 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8013406:	d940      	bls.n	801348a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8013408:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801340a:	4770      	bx	lr
 801340c:	2a09      	cmp	r2, #9
 801340e:	d03e      	beq.n	801348e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8013410:	d801      	bhi.n	8013416 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8013412:	2a08      	cmp	r2, #8
 8013414:	d1ae      	bne.n	8013374 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013416:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8013418:	4770      	bx	lr
 801341a:	2a2f      	cmp	r2, #47	; 0x2f
 801341c:	d024      	beq.n	8013468 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801341e:	d80d      	bhi.n	801343c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8013420:	2a2d      	cmp	r2, #45	; 0x2d
 8013422:	d014      	beq.n	801344e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8013424:	d826      	bhi.n	8013474 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8013426:	2a2c      	cmp	r2, #44	; 0x2c
 8013428:	d1a4      	bne.n	8013374 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801342a:	684b      	ldr	r3, [r1, #4]
 801342c:	781b      	ldrb	r3, [r3, #0]
 801342e:	2b01      	cmp	r3, #1
 8013430:	d018      	beq.n	8013464 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8013432:	d324      	bcc.n	801347e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8013434:	2b02      	cmp	r3, #2
 8013436:	d19d      	bne.n	8013374 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013438:	68c0      	ldr	r0, [r0, #12]
 801343a:	4770      	bx	lr
 801343c:	2a31      	cmp	r2, #49	; 0x31
 801343e:	d004      	beq.n	801344a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8013440:	d327      	bcc.n	8013492 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8013442:	2a32      	cmp	r2, #50	; 0x32
 8013444:	d025      	beq.n	8013492 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8013446:	2a33      	cmp	r2, #51	; 0x33
 8013448:	d194      	bne.n	8013374 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801344a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801344c:	4770      	bx	lr
 801344e:	684b      	ldr	r3, [r1, #4]
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	2b01      	cmp	r3, #1
 8013454:	d004      	beq.n	8013460 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8013456:	d30b      	bcc.n	8013470 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8013458:	2b02      	cmp	r3, #2
 801345a:	d18b      	bne.n	8013374 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801345c:	6940      	ldr	r0, [r0, #20]
 801345e:	4770      	bx	lr
 8013460:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013462:	4770      	bx	lr
 8013464:	69c0      	ldr	r0, [r0, #28]
 8013466:	4770      	bx	lr
 8013468:	684b      	ldr	r3, [r1, #4]
 801346a:	781b      	ldrb	r3, [r3, #0]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d181      	bne.n	8013374 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8013470:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8013472:	4770      	bx	lr
 8013474:	684b      	ldr	r3, [r1, #4]
 8013476:	781b      	ldrb	r3, [r3, #0]
 8013478:	2b00      	cmp	r3, #0
 801347a:	f47f af7b 	bne.w	8013374 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801347e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8013480:	4770      	bx	lr
 8013482:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8013484:	4770      	bx	lr
 8013486:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8013488:	4770      	bx	lr
 801348a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801348c:	4770      	bx	lr
 801348e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8013490:	4770      	bx	lr
 8013492:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8013494:	4770      	bx	lr

08013496 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013496:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801349a:	b087      	sub	sp, #28
 801349c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801349e:	9205      	str	r2, [sp, #20]
 80134a0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80134a4:	9101      	str	r1, [sp, #4]
 80134a6:	9202      	str	r2, [sp, #8]
 80134a8:	6841      	ldr	r1, [r0, #4]
 80134aa:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80134ae:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80134b2:	fb01 2404 	mla	r4, r1, r4, r2
 80134b6:	6802      	ldr	r2, [r0, #0]
 80134b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80134bc:	f8de 2000 	ldr.w	r2, [lr]
 80134c0:	9203      	str	r2, [sp, #12]
 80134c2:	f8de 2004 	ldr.w	r2, [lr, #4]
 80134c6:	3204      	adds	r2, #4
 80134c8:	9204      	str	r2, [sp, #16]
 80134ca:	9a02      	ldr	r2, [sp, #8]
 80134cc:	43d6      	mvns	r6, r2
 80134ce:	b2f6      	uxtb	r6, r6
 80134d0:	9a01      	ldr	r2, [sp, #4]
 80134d2:	2a00      	cmp	r2, #0
 80134d4:	dc03      	bgt.n	80134de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80134d6:	9a05      	ldr	r2, [sp, #20]
 80134d8:	2a00      	cmp	r2, #0
 80134da:	f340 8129 	ble.w	8013730 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80134de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80134e0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80134e4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80134e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80134ea:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80134ee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	dd0e      	ble.n	8013514 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80134f6:	1408      	asrs	r0, r1, #16
 80134f8:	d405      	bmi.n	8013506 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80134fa:	4560      	cmp	r0, ip
 80134fc:	da03      	bge.n	8013506 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80134fe:	1410      	asrs	r0, r2, #16
 8013500:	d401      	bmi.n	8013506 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013502:	42b8      	cmp	r0, r7
 8013504:	db07      	blt.n	8013516 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8013506:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013508:	3b01      	subs	r3, #1
 801350a:	3402      	adds	r4, #2
 801350c:	4401      	add	r1, r0
 801350e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013510:	4402      	add	r2, r0
 8013512:	e7ee      	b.n	80134f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013514:	d071      	beq.n	80135fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013516:	1e58      	subs	r0, r3, #1
 8013518:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801351a:	fb05 1500 	mla	r5, r5, r0, r1
 801351e:	142d      	asrs	r5, r5, #16
 8013520:	d45f      	bmi.n	80135e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8013522:	4565      	cmp	r5, ip
 8013524:	da5d      	bge.n	80135e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8013526:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013528:	fb05 2000 	mla	r0, r5, r0, r2
 801352c:	1400      	asrs	r0, r0, #16
 801352e:	d458      	bmi.n	80135e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8013530:	42b8      	cmp	r0, r7
 8013532:	da56      	bge.n	80135e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8013534:	4699      	mov	r9, r3
 8013536:	46a2      	mov	sl, r4
 8013538:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801353c:	f1b9 0f00 	cmp.w	r9, #0
 8013540:	dd57      	ble.n	80135f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8013542:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013546:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801354a:	9803      	ldr	r0, [sp, #12]
 801354c:	140d      	asrs	r5, r1, #16
 801354e:	f109 39ff 	add.w	r9, r9, #4294967295
 8013552:	fb07 000c 	mla	r0, r7, ip, r0
 8013556:	5d40      	ldrb	r0, [r0, r5]
 8013558:	9d04      	ldr	r5, [sp, #16]
 801355a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801355e:	f8ba 5000 	ldrh.w	r5, [sl]
 8013562:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8013566:	122f      	asrs	r7, r5, #8
 8013568:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801356c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013570:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013574:	00ed      	lsls	r5, r5, #3
 8013576:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801357a:	fb17 f706 	smulbb	r7, r7, r6
 801357e:	b2ed      	uxtb	r5, r5
 8013580:	fb18 f806 	smulbb	r8, r8, r6
 8013584:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8013588:	10c7      	asrs	r7, r0, #3
 801358a:	fb15 f506 	smulbb	r5, r5, r6
 801358e:	00c0      	lsls	r0, r0, #3
 8013590:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8013594:	fa1f fc8c 	uxth.w	ip, ip
 8013598:	b2c0      	uxtb	r0, r0
 801359a:	fb07 870b 	mla	r7, r7, fp, r8
 801359e:	fb00 500b 	mla	r0, r0, fp, r5
 80135a2:	f10c 0501 	add.w	r5, ip, #1
 80135a6:	b2bf      	uxth	r7, r7
 80135a8:	b280      	uxth	r0, r0
 80135aa:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80135ae:	f107 0801 	add.w	r8, r7, #1
 80135b2:	1c45      	adds	r5, r0, #1
 80135b4:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80135b8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80135bc:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80135c0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80135c2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80135c6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80135ca:	4401      	add	r1, r0
 80135cc:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80135d0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80135d2:	ea45 0c0c 	orr.w	ip, r5, ip
 80135d6:	4402      	add	r2, r0
 80135d8:	ea4c 0c08 	orr.w	ip, ip, r8
 80135dc:	f82a cb02 	strh.w	ip, [sl], #2
 80135e0:	e7ac      	b.n	801353c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80135e2:	f04f 0800 	mov.w	r8, #0
 80135e6:	f8bd a008 	ldrh.w	sl, [sp, #8]
 80135ea:	eb03 0008 	add.w	r0, r3, r8
 80135ee:	2800      	cmp	r0, #0
 80135f0:	dc41      	bgt.n	8013676 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80135f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80135f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80135fa:	9b01      	ldr	r3, [sp, #4]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	f340 8097 	ble.w	8013730 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8013602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013606:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013608:	ee30 0a04 	vadd.f32	s0, s0, s8
 801360c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013610:	eef0 6a62 	vmov.f32	s13, s5
 8013614:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013618:	ee31 1a05 	vadd.f32	s2, s2, s10
 801361c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013620:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8013624:	eef0 6a43 	vmov.f32	s13, s6
 8013628:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801362c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8013630:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013634:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013638:	ee77 2a62 	vsub.f32	s5, s14, s5
 801363c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013640:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013644:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013648:	ee12 2a90 	vmov	r2, s5
 801364c:	eef0 2a47 	vmov.f32	s5, s14
 8013650:	fb92 f3f3 	sdiv	r3, r2, r3
 8013654:	ee13 2a10 	vmov	r2, s6
 8013658:	9313      	str	r3, [sp, #76]	; 0x4c
 801365a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801365c:	eeb0 3a67 	vmov.f32	s6, s15
 8013660:	fb92 f3f3 	sdiv	r3, r2, r3
 8013664:	9314      	str	r3, [sp, #80]	; 0x50
 8013666:	9b01      	ldr	r3, [sp, #4]
 8013668:	9a05      	ldr	r2, [sp, #20]
 801366a:	3b01      	subs	r3, #1
 801366c:	9301      	str	r3, [sp, #4]
 801366e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013670:	bf08      	it	eq
 8013672:	4613      	moveq	r3, r2
 8013674:	e72c      	b.n	80134d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8013676:	140f      	asrs	r7, r1, #16
 8013678:	d453      	bmi.n	8013722 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801367a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801367e:	42bd      	cmp	r5, r7
 8013680:	dd4f      	ble.n	8013722 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8013682:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8013686:	d44c      	bmi.n	8013722 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8013688:	f8de 000c 	ldr.w	r0, [lr, #12]
 801368c:	4560      	cmp	r0, ip
 801368e:	dd48      	ble.n	8013722 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8013690:	9803      	ldr	r0, [sp, #12]
 8013692:	b22d      	sxth	r5, r5
 8013694:	fb0c 0505 	mla	r5, ip, r5, r0
 8013698:	5de8      	ldrb	r0, [r5, r7]
 801369a:	9d04      	ldr	r5, [sp, #16]
 801369c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80136a0:	f06f 0501 	mvn.w	r5, #1
 80136a4:	fb05 fb08 	mul.w	fp, r5, r8
 80136a8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80136ac:	f834 500b 	ldrh.w	r5, [r4, fp]
 80136b0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80136b4:	122f      	asrs	r7, r5, #8
 80136b6:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80136ba:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80136be:	00ed      	lsls	r5, r5, #3
 80136c0:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80136c4:	fb17 f706 	smulbb	r7, r7, r6
 80136c8:	b2ed      	uxtb	r5, r5
 80136ca:	fb19 f906 	smulbb	r9, r9, r6
 80136ce:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80136d2:	10c7      	asrs	r7, r0, #3
 80136d4:	fb15 f506 	smulbb	r5, r5, r6
 80136d8:	00c0      	lsls	r0, r0, #3
 80136da:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80136de:	fa1f fc8c 	uxth.w	ip, ip
 80136e2:	b2c0      	uxtb	r0, r0
 80136e4:	fb07 970a 	mla	r7, r7, sl, r9
 80136e8:	fb00 500a 	mla	r0, r0, sl, r5
 80136ec:	f10c 0501 	add.w	r5, ip, #1
 80136f0:	b2bf      	uxth	r7, r7
 80136f2:	b280      	uxth	r0, r0
 80136f4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80136f8:	f107 0901 	add.w	r9, r7, #1
 80136fc:	1c45      	adds	r5, r0, #1
 80136fe:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8013702:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013706:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801370a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801370e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8013712:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8013716:	ea45 0c0c 	orr.w	ip, r5, ip
 801371a:	ea4c 0c09 	orr.w	ip, ip, r9
 801371e:	f824 c00b 	strh.w	ip, [r4, fp]
 8013722:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013724:	f108 38ff 	add.w	r8, r8, #4294967295
 8013728:	4401      	add	r1, r0
 801372a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801372c:	4402      	add	r2, r0
 801372e:	e75c      	b.n	80135ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8013730:	b007      	add	sp, #28
 8013732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013736 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013736:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801373a:	b085      	sub	sp, #20
 801373c:	4693      	mov	fp, r2
 801373e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013742:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013744:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8013746:	6870      	ldr	r0, [r6, #4]
 8013748:	9100      	str	r1, [sp, #0]
 801374a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801374e:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8013752:	fb00 2404 	mla	r4, r0, r4, r2
 8013756:	6832      	ldr	r2, [r6, #0]
 8013758:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801375c:	682a      	ldr	r2, [r5, #0]
 801375e:	9201      	str	r2, [sp, #4]
 8013760:	686a      	ldr	r2, [r5, #4]
 8013762:	3204      	adds	r2, #4
 8013764:	9202      	str	r2, [sp, #8]
 8013766:	9a00      	ldr	r2, [sp, #0]
 8013768:	2a00      	cmp	r2, #0
 801376a:	dc03      	bgt.n	8013774 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801376c:	f1bb 0f00 	cmp.w	fp, #0
 8013770:	f340 80a0 	ble.w	80138b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8013774:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013776:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801377a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801377e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013780:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8013784:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013788:	2b00      	cmp	r3, #0
 801378a:	dd0c      	ble.n	80137a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801378c:	1406      	asrs	r6, r0, #16
 801378e:	d405      	bmi.n	801379c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8013790:	454e      	cmp	r6, r9
 8013792:	da03      	bge.n	801379c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8013794:	1416      	asrs	r6, r2, #16
 8013796:	d401      	bmi.n	801379c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8013798:	4546      	cmp	r6, r8
 801379a:	db05      	blt.n	80137a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801379c:	4470      	add	r0, lr
 801379e:	4462      	add	r2, ip
 80137a0:	3b01      	subs	r3, #1
 80137a2:	3402      	adds	r4, #2
 80137a4:	e7f0      	b.n	8013788 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80137a6:	d00f      	beq.n	80137c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80137a8:	1e5e      	subs	r6, r3, #1
 80137aa:	fb0e 0706 	mla	r7, lr, r6, r0
 80137ae:	143f      	asrs	r7, r7, #16
 80137b0:	d541      	bpl.n	8013836 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 80137b2:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80137b6:	4698      	mov	r8, r3
 80137b8:	9603      	str	r6, [sp, #12]
 80137ba:	f1b8 0f00 	cmp.w	r8, #0
 80137be:	dc59      	bgt.n	8013874 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80137c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80137c4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80137c8:	9b00      	ldr	r3, [sp, #0]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	dd72      	ble.n	80138b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80137ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80137d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80137d8:	eeb0 6a62 	vmov.f32	s12, s5
 80137dc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80137e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80137e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80137e8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80137ec:	eeb0 6a43 	vmov.f32	s12, s6
 80137f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80137f4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80137f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80137fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013800:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013804:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013808:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801380c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013810:	ee12 2a90 	vmov	r2, s5
 8013814:	eef0 2a47 	vmov.f32	s5, s14
 8013818:	fb92 fef3 	sdiv	lr, r2, r3
 801381c:	ee13 2a10 	vmov	r2, s6
 8013820:	eeb0 3a67 	vmov.f32	s6, s15
 8013824:	fb92 fcf3 	sdiv	ip, r2, r3
 8013828:	9b00      	ldr	r3, [sp, #0]
 801382a:	3b01      	subs	r3, #1
 801382c:	9300      	str	r3, [sp, #0]
 801382e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013830:	bf08      	it	eq
 8013832:	465b      	moveq	r3, fp
 8013834:	e797      	b.n	8013766 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8013836:	454f      	cmp	r7, r9
 8013838:	dabb      	bge.n	80137b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801383a:	fb0c 2606 	mla	r6, ip, r6, r2
 801383e:	1436      	asrs	r6, r6, #16
 8013840:	d4b7      	bmi.n	80137b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8013842:	4546      	cmp	r6, r8
 8013844:	dab5      	bge.n	80137b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8013846:	461e      	mov	r6, r3
 8013848:	46a0      	mov	r8, r4
 801384a:	2e00      	cmp	r6, #0
 801384c:	ddb8      	ble.n	80137c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801384e:	1417      	asrs	r7, r2, #16
 8013850:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8013854:	9901      	ldr	r1, [sp, #4]
 8013856:	ea4f 4920 	mov.w	r9, r0, asr #16
 801385a:	4462      	add	r2, ip
 801385c:	4470      	add	r0, lr
 801385e:	fb0a 1707 	mla	r7, sl, r7, r1
 8013862:	9902      	ldr	r1, [sp, #8]
 8013864:	3e01      	subs	r6, #1
 8013866:	f817 7009 	ldrb.w	r7, [r7, r9]
 801386a:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801386e:	f828 7b02 	strh.w	r7, [r8], #2
 8013872:	e7ea      	b.n	801384a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8013874:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013878:	d417      	bmi.n	80138aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801387a:	68ae      	ldr	r6, [r5, #8]
 801387c:	454e      	cmp	r6, r9
 801387e:	dd14      	ble.n	80138aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8013880:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8013884:	d411      	bmi.n	80138aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8013886:	68ef      	ldr	r7, [r5, #12]
 8013888:	4557      	cmp	r7, sl
 801388a:	dd0e      	ble.n	80138aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801388c:	9f01      	ldr	r7, [sp, #4]
 801388e:	b236      	sxth	r6, r6
 8013890:	f06f 0101 	mvn.w	r1, #1
 8013894:	fb0a 7606 	mla	r6, sl, r6, r7
 8013898:	9f02      	ldr	r7, [sp, #8]
 801389a:	f816 6009 	ldrb.w	r6, [r6, r9]
 801389e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80138a2:	fb01 f608 	mul.w	r6, r1, r8
 80138a6:	9903      	ldr	r1, [sp, #12]
 80138a8:	538f      	strh	r7, [r1, r6]
 80138aa:	4470      	add	r0, lr
 80138ac:	4462      	add	r2, ip
 80138ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80138b2:	e782      	b.n	80137ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80138b4:	b005      	add	sp, #20
 80138b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080138ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80138ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138be:	b087      	sub	sp, #28
 80138c0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80138c2:	9205      	str	r2, [sp, #20]
 80138c4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80138c8:	9102      	str	r1, [sp, #8]
 80138ca:	9203      	str	r2, [sp, #12]
 80138cc:	6861      	ldr	r1, [r4, #4]
 80138ce:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80138d2:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80138d6:	fb01 2000 	mla	r0, r1, r0, r2
 80138da:	6822      	ldr	r2, [r4, #0]
 80138dc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80138e0:	9200      	str	r2, [sp, #0]
 80138e2:	f8dc 2000 	ldr.w	r2, [ip]
 80138e6:	9204      	str	r2, [sp, #16]
 80138e8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80138ec:	3204      	adds	r2, #4
 80138ee:	9201      	str	r2, [sp, #4]
 80138f0:	9a03      	ldr	r2, [sp, #12]
 80138f2:	43d5      	mvns	r5, r2
 80138f4:	b2ed      	uxtb	r5, r5
 80138f6:	9a02      	ldr	r2, [sp, #8]
 80138f8:	2a00      	cmp	r2, #0
 80138fa:	dc03      	bgt.n	8013904 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80138fc:	9a05      	ldr	r2, [sp, #20]
 80138fe:	2a00      	cmp	r2, #0
 8013900:	f340 812c 	ble.w	8013b5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8013904:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013906:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801390a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801390e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013910:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013914:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013918:	2b00      	cmp	r3, #0
 801391a:	dd10      	ble.n	801393e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801391c:	140c      	asrs	r4, r1, #16
 801391e:	d405      	bmi.n	801392c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013920:	4574      	cmp	r4, lr
 8013922:	da03      	bge.n	801392c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013924:	1414      	asrs	r4, r2, #16
 8013926:	d401      	bmi.n	801392c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013928:	42bc      	cmp	r4, r7
 801392a:	db09      	blt.n	8013940 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801392c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801392e:	3b01      	subs	r3, #1
 8013930:	9800      	ldr	r0, [sp, #0]
 8013932:	4421      	add	r1, r4
 8013934:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013936:	3002      	adds	r0, #2
 8013938:	4422      	add	r2, r4
 801393a:	9000      	str	r0, [sp, #0]
 801393c:	e7ec      	b.n	8013918 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801393e:	d071      	beq.n	8013a24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8013940:	1e5c      	subs	r4, r3, #1
 8013942:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013944:	fb06 1604 	mla	r6, r6, r4, r1
 8013948:	1436      	asrs	r6, r6, #16
 801394a:	d45d      	bmi.n	8013a08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801394c:	4576      	cmp	r6, lr
 801394e:	da5b      	bge.n	8013a08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8013950:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8013952:	fb06 2404 	mla	r4, r6, r4, r2
 8013956:	1424      	asrs	r4, r4, #16
 8013958:	d456      	bmi.n	8013a08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801395a:	42bc      	cmp	r4, r7
 801395c:	da54      	bge.n	8013a08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801395e:	4698      	mov	r8, r3
 8013960:	f8dd 9000 	ldr.w	r9, [sp]
 8013964:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8013968:	f1b8 0f00 	cmp.w	r8, #0
 801396c:	dd54      	ble.n	8013a18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801396e:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8013972:	1414      	asrs	r4, r2, #16
 8013974:	9804      	ldr	r0, [sp, #16]
 8013976:	140e      	asrs	r6, r1, #16
 8013978:	f108 38ff 	add.w	r8, r8, #4294967295
 801397c:	fb07 0404 	mla	r4, r7, r4, r0
 8013980:	9801      	ldr	r0, [sp, #4]
 8013982:	f814 e006 	ldrb.w	lr, [r4, r6]
 8013986:	f8b9 4000 	ldrh.w	r4, [r9]
 801398a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801398e:	1227      	asrs	r7, r4, #8
 8013990:	eb00 0b0e 	add.w	fp, r0, lr
 8013994:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8013998:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801399c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801399e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80139a2:	f89b b001 	ldrb.w	fp, [fp, #1]
 80139a6:	4401      	add	r1, r0
 80139a8:	fb16 f60a 	smulbb	r6, r6, sl
 80139ac:	9814      	ldr	r0, [sp, #80]	; 0x50
 80139ae:	fb1b fb0a 	smulbb	fp, fp, sl
 80139b2:	fb07 6705 	mla	r7, r7, r5, r6
 80139b6:	10e6      	asrs	r6, r4, #3
 80139b8:	00e4      	lsls	r4, r4, #3
 80139ba:	4402      	add	r2, r0
 80139bc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80139c0:	b2bf      	uxth	r7, r7
 80139c2:	b2e4      	uxtb	r4, r4
 80139c4:	fb06 b605 	mla	r6, r6, r5, fp
 80139c8:	fb14 f405 	smulbb	r4, r4, r5
 80139cc:	b2b6      	uxth	r6, r6
 80139ce:	fb0e 4e0a 	mla	lr, lr, sl, r4
 80139d2:	1c7c      	adds	r4, r7, #1
 80139d4:	f106 0b01 	add.w	fp, r6, #1
 80139d8:	fa1f fe8e 	uxth.w	lr, lr
 80139dc:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80139e0:	f10e 0401 	add.w	r4, lr, #1
 80139e4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80139e8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80139ec:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 80139f0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80139f4:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80139f8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80139fc:	4327      	orrs	r7, r4
 80139fe:	ea47 070b 	orr.w	r7, r7, fp
 8013a02:	f829 7b02 	strh.w	r7, [r9], #2
 8013a06:	e7af      	b.n	8013968 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8013a08:	f04f 0e00 	mov.w	lr, #0
 8013a0c:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8013a10:	eb03 040e 	add.w	r4, r3, lr
 8013a14:	2c00      	cmp	r4, #0
 8013a16:	dc43      	bgt.n	8013aa0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8013a18:	9a00      	ldr	r2, [sp, #0]
 8013a1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013a1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8013a22:	9300      	str	r3, [sp, #0]
 8013a24:	9b02      	ldr	r3, [sp, #8]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	f340 8098 	ble.w	8013b5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8013a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013a30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a32:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013a36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013a3a:	eef0 6a62 	vmov.f32	s13, s5
 8013a3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013a42:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013a46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013a4a:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8013a4e:	eef0 6a43 	vmov.f32	s13, s6
 8013a52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013a56:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8013a5a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013a5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013a62:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013a66:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013a6a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013a6e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013a72:	ee12 2a90 	vmov	r2, s5
 8013a76:	eef0 2a47 	vmov.f32	s5, s14
 8013a7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8013a7e:	ee13 2a10 	vmov	r2, s6
 8013a82:	9313      	str	r3, [sp, #76]	; 0x4c
 8013a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a86:	eeb0 3a67 	vmov.f32	s6, s15
 8013a8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8013a8e:	9314      	str	r3, [sp, #80]	; 0x50
 8013a90:	9b02      	ldr	r3, [sp, #8]
 8013a92:	9a05      	ldr	r2, [sp, #20]
 8013a94:	3b01      	subs	r3, #1
 8013a96:	9302      	str	r3, [sp, #8]
 8013a98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a9a:	bf08      	it	eq
 8013a9c:	4613      	moveq	r3, r2
 8013a9e:	e72a      	b.n	80138f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8013aa0:	140f      	asrs	r7, r1, #16
 8013aa2:	d454      	bmi.n	8013b4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8013aa4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8013aa8:	42be      	cmp	r6, r7
 8013aaa:	dd50      	ble.n	8013b4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8013aac:	ea5f 4822 	movs.w	r8, r2, asr #16
 8013ab0:	d44d      	bmi.n	8013b4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8013ab2:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8013ab6:	4544      	cmp	r4, r8
 8013ab8:	dd49      	ble.n	8013b4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8013aba:	9c04      	ldr	r4, [sp, #16]
 8013abc:	b236      	sxth	r6, r6
 8013abe:	f06f 0001 	mvn.w	r0, #1
 8013ac2:	fb08 4606 	mla	r6, r8, r6, r4
 8013ac6:	9c01      	ldr	r4, [sp, #4]
 8013ac8:	fb00 fa0e 	mul.w	sl, r0, lr
 8013acc:	9800      	ldr	r0, [sp, #0]
 8013ace:	f816 8007 	ldrb.w	r8, [r6, r7]
 8013ad2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8013ad6:	eb04 0b08 	add.w	fp, r4, r8
 8013ada:	f830 400a 	ldrh.w	r4, [r0, sl]
 8013ade:	9801      	ldr	r0, [sp, #4]
 8013ae0:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8013ae4:	1227      	asrs	r7, r4, #8
 8013ae6:	f89b b001 	ldrb.w	fp, [fp, #1]
 8013aea:	fb16 f609 	smulbb	r6, r6, r9
 8013aee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013af2:	f810 8008 	ldrb.w	r8, [r0, r8]
 8013af6:	fb1b fb09 	smulbb	fp, fp, r9
 8013afa:	fb07 6705 	mla	r7, r7, r5, r6
 8013afe:	10e6      	asrs	r6, r4, #3
 8013b00:	00e4      	lsls	r4, r4, #3
 8013b02:	9800      	ldr	r0, [sp, #0]
 8013b04:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013b08:	b2bf      	uxth	r7, r7
 8013b0a:	b2e4      	uxtb	r4, r4
 8013b0c:	fb06 b605 	mla	r6, r6, r5, fp
 8013b10:	fb14 f405 	smulbb	r4, r4, r5
 8013b14:	b2b6      	uxth	r6, r6
 8013b16:	fb08 4809 	mla	r8, r8, r9, r4
 8013b1a:	1c7c      	adds	r4, r7, #1
 8013b1c:	f106 0b01 	add.w	fp, r6, #1
 8013b20:	fa1f f888 	uxth.w	r8, r8
 8013b24:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8013b28:	f108 0401 	add.w	r4, r8, #1
 8013b2c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8013b30:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013b34:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8013b38:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8013b3c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8013b40:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8013b44:	4327      	orrs	r7, r4
 8013b46:	ea47 070b 	orr.w	r7, r7, fp
 8013b4a:	f820 700a 	strh.w	r7, [r0, sl]
 8013b4e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013b50:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013b54:	4401      	add	r1, r0
 8013b56:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013b58:	4402      	add	r2, r0
 8013b5a:	e759      	b.n	8013a10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8013b5c:	b007      	add	sp, #28
 8013b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013b64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b68:	b085      	sub	sp, #20
 8013b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013b6e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013b70:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8013b72:	9203      	str	r2, [sp, #12]
 8013b74:	6870      	ldr	r0, [r6, #4]
 8013b76:	686f      	ldr	r7, [r5, #4]
 8013b78:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8013b7c:	3704      	adds	r7, #4
 8013b7e:	9101      	str	r1, [sp, #4]
 8013b80:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8013b84:	fb00 2404 	mla	r4, r0, r4, r2
 8013b88:	6832      	ldr	r2, [r6, #0]
 8013b8a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013b8e:	682a      	ldr	r2, [r5, #0]
 8013b90:	9202      	str	r2, [sp, #8]
 8013b92:	9a01      	ldr	r2, [sp, #4]
 8013b94:	2a00      	cmp	r2, #0
 8013b96:	dc03      	bgt.n	8013ba0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8013b98:	9a03      	ldr	r2, [sp, #12]
 8013b9a:	2a00      	cmp	r2, #0
 8013b9c:	f340 80cc 	ble.w	8013d38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8013ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013ba2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8013ba6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013baa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013bac:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8013bb0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	dd0d      	ble.n	8013bd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013bb8:	1406      	asrs	r6, r0, #16
 8013bba:	d405      	bmi.n	8013bc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8013bbc:	454e      	cmp	r6, r9
 8013bbe:	da03      	bge.n	8013bc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8013bc0:	1416      	asrs	r6, r2, #16
 8013bc2:	d401      	bmi.n	8013bc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8013bc4:	4546      	cmp	r6, r8
 8013bc6:	db06      	blt.n	8013bd6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8013bc8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013bca:	4460      	add	r0, ip
 8013bcc:	3b01      	subs	r3, #1
 8013bce:	3402      	adds	r4, #2
 8013bd0:	4432      	add	r2, r6
 8013bd2:	e7ef      	b.n	8013bb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8013bd4:	d00f      	beq.n	8013bf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8013bd6:	1e5e      	subs	r6, r3, #1
 8013bd8:	fb0c 0e06 	mla	lr, ip, r6, r0
 8013bdc:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8013be0:	d543      	bpl.n	8013c6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8013be2:	4698      	mov	r8, r3
 8013be4:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8013be8:	f1b8 0f00 	cmp.w	r8, #0
 8013bec:	dc71      	bgt.n	8013cd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8013bee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013bf2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013bf6:	9b01      	ldr	r3, [sp, #4]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	f340 809d 	ble.w	8013d38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8013bfe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c04:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013c08:	eeb0 6a62 	vmov.f32	s12, s5
 8013c0c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013c10:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013c14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013c18:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8013c1c:	eeb0 6a43 	vmov.f32	s12, s6
 8013c20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013c24:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013c28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013c2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013c30:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013c34:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013c38:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013c3c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013c40:	ee12 2a90 	vmov	r2, s5
 8013c44:	eef0 2a47 	vmov.f32	s5, s14
 8013c48:	fb92 fcf3 	sdiv	ip, r2, r3
 8013c4c:	ee13 2a10 	vmov	r2, s6
 8013c50:	eeb0 3a67 	vmov.f32	s6, s15
 8013c54:	fb92 f3f3 	sdiv	r3, r2, r3
 8013c58:	9312      	str	r3, [sp, #72]	; 0x48
 8013c5a:	9b01      	ldr	r3, [sp, #4]
 8013c5c:	9a03      	ldr	r2, [sp, #12]
 8013c5e:	3b01      	subs	r3, #1
 8013c60:	9301      	str	r3, [sp, #4]
 8013c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c64:	bf08      	it	eq
 8013c66:	4613      	moveq	r3, r2
 8013c68:	e793      	b.n	8013b92 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8013c6a:	45ce      	cmp	lr, r9
 8013c6c:	dab9      	bge.n	8013be2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8013c6e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013c70:	fb01 2606 	mla	r6, r1, r6, r2
 8013c74:	1436      	asrs	r6, r6, #16
 8013c76:	d4b4      	bmi.n	8013be2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8013c78:	4546      	cmp	r6, r8
 8013c7a:	dab2      	bge.n	8013be2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8013c7c:	4698      	mov	r8, r3
 8013c7e:	46a2      	mov	sl, r4
 8013c80:	f1b8 0f00 	cmp.w	r8, #0
 8013c84:	ddb3      	ble.n	8013bee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8013c86:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8013c8a:	1416      	asrs	r6, r2, #16
 8013c8c:	9902      	ldr	r1, [sp, #8]
 8013c8e:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8013c92:	f108 38ff 	add.w	r8, r8, #4294967295
 8013c96:	4460      	add	r0, ip
 8013c98:	fb09 1606 	mla	r6, r9, r6, r1
 8013c9c:	4928      	ldr	r1, [pc, #160]	; (8013d40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8013c9e:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8013ca2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8013ca6:	eb07 0b0e 	add.w	fp, r7, lr
 8013caa:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8013cae:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8013cb2:	00f6      	lsls	r6, r6, #3
 8013cb4:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8013cb8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013cba:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8013cbe:	440a      	add	r2, r1
 8013cc0:	ea49 0606 	orr.w	r6, r9, r6
 8013cc4:	f817 900e 	ldrb.w	r9, [r7, lr]
 8013cc8:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8013ccc:	f82a 6b02 	strh.w	r6, [sl], #2
 8013cd0:	e7d6      	b.n	8013c80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8013cd2:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013cd6:	d429      	bmi.n	8013d2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8013cd8:	68ae      	ldr	r6, [r5, #8]
 8013cda:	454e      	cmp	r6, r9
 8013cdc:	dd26      	ble.n	8013d2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8013cde:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8013ce2:	d423      	bmi.n	8013d2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8013ce4:	68e9      	ldr	r1, [r5, #12]
 8013ce6:	4559      	cmp	r1, fp
 8013ce8:	dd20      	ble.n	8013d2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8013cea:	fa0f fe86 	sxth.w	lr, r6
 8013cee:	9902      	ldr	r1, [sp, #8]
 8013cf0:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8013cf4:	f06f 0101 	mvn.w	r1, #1
 8013cf8:	f81e e009 	ldrb.w	lr, [lr, r9]
 8013cfc:	fb01 f908 	mul.w	r9, r1, r8
 8013d00:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8013d04:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8013d08:	eb07 060e 	add.w	r6, r7, lr
 8013d0c:	f896 b002 	ldrb.w	fp, [r6, #2]
 8013d10:	7876      	ldrb	r6, [r6, #1]
 8013d12:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8013d16:	00f6      	lsls	r6, r6, #3
 8013d18:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8013d1c:	ea4b 0606 	orr.w	r6, fp, r6
 8013d20:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8013d24:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8013d28:	f82a 6009 	strh.w	r6, [sl, r9]
 8013d2c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013d2e:	4460      	add	r0, ip
 8013d30:	f108 38ff 	add.w	r8, r8, #4294967295
 8013d34:	440a      	add	r2, r1
 8013d36:	e757      	b.n	8013be8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8013d38:	b005      	add	sp, #20
 8013d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d3e:	bf00      	nop
 8013d40:	fffff800 	.word	0xfffff800

08013d44 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d48:	b087      	sub	sp, #28
 8013d4a:	468b      	mov	fp, r1
 8013d4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013d50:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013d52:	9204      	str	r2, [sp, #16]
 8013d54:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8013d58:	6841      	ldr	r1, [r0, #4]
 8013d5a:	9205      	str	r2, [sp, #20]
 8013d5c:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8013d60:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8013d64:	fb01 2404 	mla	r4, r1, r4, r2
 8013d68:	6802      	ldr	r2, [r0, #0]
 8013d6a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013d6e:	f8dc 2000 	ldr.w	r2, [ip]
 8013d72:	9201      	str	r2, [sp, #4]
 8013d74:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8013d78:	3204      	adds	r2, #4
 8013d7a:	9202      	str	r2, [sp, #8]
 8013d7c:	f1bb 0f00 	cmp.w	fp, #0
 8013d80:	dc03      	bgt.n	8013d8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8013d82:	9a04      	ldr	r2, [sp, #16]
 8013d84:	2a00      	cmp	r2, #0
 8013d86:	f340 8138 	ble.w	8013ffa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8013d8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013d8c:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8013d90:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013d94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d96:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8013d9a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	dd0e      	ble.n	8013dc0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8013da2:	1402      	asrs	r2, r0, #16
 8013da4:	d405      	bmi.n	8013db2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8013da6:	42ba      	cmp	r2, r7
 8013da8:	da03      	bge.n	8013db2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8013daa:	140a      	asrs	r2, r1, #16
 8013dac:	d401      	bmi.n	8013db2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8013dae:	42b2      	cmp	r2, r6
 8013db0:	db07      	blt.n	8013dc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8013db2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013db4:	3b01      	subs	r3, #1
 8013db6:	3402      	adds	r4, #2
 8013db8:	4410      	add	r0, r2
 8013dba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013dbc:	4411      	add	r1, r2
 8013dbe:	e7ee      	b.n	8013d9e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8013dc0:	d019      	beq.n	8013df6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8013dc2:	1e5a      	subs	r2, r3, #1
 8013dc4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013dc6:	fb05 0502 	mla	r5, r5, r2, r0
 8013dca:	142d      	asrs	r5, r5, #16
 8013dcc:	d409      	bmi.n	8013de2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8013dce:	42bd      	cmp	r5, r7
 8013dd0:	da07      	bge.n	8013de2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8013dd2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013dd4:	fb05 1202 	mla	r2, r5, r2, r1
 8013dd8:	1412      	asrs	r2, r2, #16
 8013dda:	d402      	bmi.n	8013de2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8013ddc:	42b2      	cmp	r2, r6
 8013dde:	f2c0 80ac 	blt.w	8013f3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8013de2:	f04f 0e00 	mov.w	lr, #0
 8013de6:	eb03 020e 	add.w	r2, r3, lr
 8013dea:	2a00      	cmp	r2, #0
 8013dec:	dc3e      	bgt.n	8013e6c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8013dee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013df2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013df6:	f1bb 0f00 	cmp.w	fp, #0
 8013dfa:	f340 80fe 	ble.w	8013ffa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8013dfe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013e02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e04:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013e08:	f1bb 0b01 	subs.w	fp, fp, #1
 8013e0c:	eeb0 6a62 	vmov.f32	s12, s5
 8013e10:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013e14:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013e18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013e1c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8013e20:	eeb0 6a43 	vmov.f32	s12, s6
 8013e24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013e28:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8013e2c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013e30:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013e34:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013e38:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013e3c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013e40:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013e44:	ee12 2a90 	vmov	r2, s5
 8013e48:	eef0 2a47 	vmov.f32	s5, s14
 8013e4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8013e50:	ee13 2a10 	vmov	r2, s6
 8013e54:	9313      	str	r3, [sp, #76]	; 0x4c
 8013e56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e58:	eeb0 3a67 	vmov.f32	s6, s15
 8013e5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8013e60:	9a04      	ldr	r2, [sp, #16]
 8013e62:	9314      	str	r3, [sp, #80]	; 0x50
 8013e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e66:	bf08      	it	eq
 8013e68:	4613      	moveq	r3, r2
 8013e6a:	e787      	b.n	8013d7c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8013e6c:	1406      	asrs	r6, r0, #16
 8013e6e:	d45d      	bmi.n	8013f2c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8013e70:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8013e74:	42b5      	cmp	r5, r6
 8013e76:	dd59      	ble.n	8013f2c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8013e78:	140f      	asrs	r7, r1, #16
 8013e7a:	d457      	bmi.n	8013f2c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8013e7c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013e80:	42ba      	cmp	r2, r7
 8013e82:	dd53      	ble.n	8013f2c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8013e84:	9a01      	ldr	r2, [sp, #4]
 8013e86:	b22d      	sxth	r5, r5
 8013e88:	fb07 2505 	mla	r5, r7, r5, r2
 8013e8c:	5daa      	ldrb	r2, [r5, r6]
 8013e8e:	9d02      	ldr	r5, [sp, #8]
 8013e90:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8013e94:	0e2e      	lsrs	r6, r5, #24
 8013e96:	d049      	beq.n	8013f2c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8013e98:	f06f 0201 	mvn.w	r2, #1
 8013e9c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013ea0:	fb02 f20e 	mul.w	r2, r2, lr
 8013ea4:	f834 8002 	ldrh.w	r8, [r4, r2]
 8013ea8:	9203      	str	r2, [sp, #12]
 8013eaa:	9a05      	ldr	r2, [sp, #20]
 8013eac:	ea4f 2728 	mov.w	r7, r8, asr #8
 8013eb0:	4356      	muls	r6, r2
 8013eb2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013eb6:	1c72      	adds	r2, r6, #1
 8013eb8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8013ebc:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8013ec0:	b2ed      	uxtb	r5, r5
 8013ec2:	1212      	asrs	r2, r2, #8
 8013ec4:	fa1f f982 	uxth.w	r9, r2
 8013ec8:	43d2      	mvns	r2, r2
 8013eca:	fb16 f609 	smulbb	r6, r6, r9
 8013ece:	b2d2      	uxtb	r2, r2
 8013ed0:	fb15 f509 	smulbb	r5, r5, r9
 8013ed4:	fb07 6702 	mla	r7, r7, r2, r6
 8013ed8:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8013edc:	fb1a fa09 	smulbb	sl, sl, r9
 8013ee0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8013ee4:	b2bf      	uxth	r7, r7
 8013ee6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013eea:	fa5f f888 	uxtb.w	r8, r8
 8013eee:	fb06 a602 	mla	r6, r6, r2, sl
 8013ef2:	fb08 5502 	mla	r5, r8, r2, r5
 8013ef6:	1c7a      	adds	r2, r7, #1
 8013ef8:	b2b6      	uxth	r6, r6
 8013efa:	b2ad      	uxth	r5, r5
 8013efc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8013f00:	9a03      	ldr	r2, [sp, #12]
 8013f02:	f105 0a01 	add.w	sl, r5, #1
 8013f06:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013f0a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013f0e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013f12:	ea4a 0707 	orr.w	r7, sl, r7
 8013f16:	f106 0a01 	add.w	sl, r6, #1
 8013f1a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8013f1e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013f22:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8013f26:	ea47 070a 	orr.w	r7, r7, sl
 8013f2a:	52a7      	strh	r7, [r4, r2]
 8013f2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013f2e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013f32:	4410      	add	r0, r2
 8013f34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013f36:	4411      	add	r1, r2
 8013f38:	e755      	b.n	8013de6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8013f3a:	f04f 0800 	mov.w	r8, #0
 8013f3e:	eba3 0208 	sub.w	r2, r3, r8
 8013f42:	2a00      	cmp	r2, #0
 8013f44:	f77f af53 	ble.w	8013dee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8013f48:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8013f4c:	140a      	asrs	r2, r1, #16
 8013f4e:	9f01      	ldr	r7, [sp, #4]
 8013f50:	1405      	asrs	r5, r0, #16
 8013f52:	fb06 7202 	mla	r2, r6, r2, r7
 8013f56:	5d52      	ldrb	r2, [r2, r5]
 8013f58:	9d02      	ldr	r5, [sp, #8]
 8013f5a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8013f5e:	0e2e      	lsrs	r6, r5, #24
 8013f60:	d044      	beq.n	8013fec <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8013f62:	9a05      	ldr	r2, [sp, #20]
 8013f64:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013f68:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8013f6c:	4356      	muls	r6, r2
 8013f6e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8013f72:	1c72      	adds	r2, r6, #1
 8013f74:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013f78:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8013f7c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8013f80:	b2ed      	uxtb	r5, r5
 8013f82:	1212      	asrs	r2, r2, #8
 8013f84:	fa1f f982 	uxth.w	r9, r2
 8013f88:	43d2      	mvns	r2, r2
 8013f8a:	fb16 f609 	smulbb	r6, r6, r9
 8013f8e:	b2d2      	uxtb	r2, r2
 8013f90:	fb15 f509 	smulbb	r5, r5, r9
 8013f94:	fb07 6702 	mla	r7, r7, r2, r6
 8013f98:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8013f9c:	fb1a fa09 	smulbb	sl, sl, r9
 8013fa0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013fa4:	b2bf      	uxth	r7, r7
 8013fa6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013faa:	fa5f fe8e 	uxtb.w	lr, lr
 8013fae:	fb06 a602 	mla	r6, r6, r2, sl
 8013fb2:	fb0e 5502 	mla	r5, lr, r2, r5
 8013fb6:	1c7a      	adds	r2, r7, #1
 8013fb8:	b2b6      	uxth	r6, r6
 8013fba:	b2ad      	uxth	r5, r5
 8013fbc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8013fc0:	f105 0a01 	add.w	sl, r5, #1
 8013fc4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013fc8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013fcc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013fd0:	ea4a 0707 	orr.w	r7, sl, r7
 8013fd4:	f106 0a01 	add.w	sl, r6, #1
 8013fd8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8013fdc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013fe0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8013fe4:	ea47 070a 	orr.w	r7, r7, sl
 8013fe8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8013fec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013fee:	f108 0801 	add.w	r8, r8, #1
 8013ff2:	4410      	add	r0, r2
 8013ff4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ff6:	4411      	add	r1, r2
 8013ff8:	e7a1      	b.n	8013f3e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8013ffa:	b007      	add	sp, #28
 8013ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014000 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014004:	b085      	sub	sp, #20
 8014006:	468b      	mov	fp, r1
 8014008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801400c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801400e:	9203      	str	r2, [sp, #12]
 8014010:	6841      	ldr	r1, [r0, #4]
 8014012:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8014016:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801401a:	fb01 2404 	mla	r4, r1, r4, r2
 801401e:	6802      	ldr	r2, [r0, #0]
 8014020:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8014024:	f8de 2000 	ldr.w	r2, [lr]
 8014028:	9200      	str	r2, [sp, #0]
 801402a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801402e:	3204      	adds	r2, #4
 8014030:	9201      	str	r2, [sp, #4]
 8014032:	f1bb 0f00 	cmp.w	fp, #0
 8014036:	dc03      	bgt.n	8014040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8014038:	9a03      	ldr	r2, [sp, #12]
 801403a:	2a00      	cmp	r2, #0
 801403c:	f340 8153 	ble.w	80142e6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8014040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014042:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8014046:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801404a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801404c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8014050:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014054:	2b00      	cmp	r3, #0
 8014056:	dd0e      	ble.n	8014076 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014058:	1408      	asrs	r0, r1, #16
 801405a:	d405      	bmi.n	8014068 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801405c:	42b8      	cmp	r0, r7
 801405e:	da03      	bge.n	8014068 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014060:	1410      	asrs	r0, r2, #16
 8014062:	d401      	bmi.n	8014068 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014064:	42b0      	cmp	r0, r6
 8014066:	db07      	blt.n	8014078 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8014068:	9811      	ldr	r0, [sp, #68]	; 0x44
 801406a:	3b01      	subs	r3, #1
 801406c:	3402      	adds	r4, #2
 801406e:	4401      	add	r1, r0
 8014070:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014072:	4402      	add	r2, r0
 8014074:	e7ee      	b.n	8014054 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8014076:	d017      	beq.n	80140a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8014078:	1e58      	subs	r0, r3, #1
 801407a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801407c:	fb05 1500 	mla	r5, r5, r0, r1
 8014080:	142d      	asrs	r5, r5, #16
 8014082:	d409      	bmi.n	8014098 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8014084:	42bd      	cmp	r5, r7
 8014086:	da07      	bge.n	8014098 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8014088:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801408a:	fb05 2000 	mla	r0, r5, r0, r2
 801408e:	1400      	asrs	r0, r0, #16
 8014090:	d402      	bmi.n	8014098 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8014092:	42b0      	cmp	r0, r6
 8014094:	f2c0 80bc 	blt.w	8014210 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8014098:	2600      	movs	r6, #0
 801409a:	1998      	adds	r0, r3, r6
 801409c:	2800      	cmp	r0, #0
 801409e:	dc3e      	bgt.n	801411e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80140a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80140a4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80140a8:	f1bb 0f00 	cmp.w	fp, #0
 80140ac:	f340 811b 	ble.w	80142e6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80140b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80140b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80140ba:	f1bb 0b01 	subs.w	fp, fp, #1
 80140be:	eeb0 6a62 	vmov.f32	s12, s5
 80140c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80140c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80140ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80140ce:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80140d2:	eeb0 6a43 	vmov.f32	s12, s6
 80140d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80140da:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80140de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80140e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80140e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80140ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80140ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80140f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80140f6:	ee12 2a90 	vmov	r2, s5
 80140fa:	eef0 2a47 	vmov.f32	s5, s14
 80140fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8014102:	ee13 2a10 	vmov	r2, s6
 8014106:	9311      	str	r3, [sp, #68]	; 0x44
 8014108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801410a:	eeb0 3a67 	vmov.f32	s6, s15
 801410e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014112:	9a03      	ldr	r2, [sp, #12]
 8014114:	9312      	str	r3, [sp, #72]	; 0x48
 8014116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014118:	bf08      	it	eq
 801411a:	4613      	moveq	r3, r2
 801411c:	e789      	b.n	8014032 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801411e:	140f      	asrs	r7, r1, #16
 8014120:	d426      	bmi.n	8014170 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8014122:	f8de 5008 	ldr.w	r5, [lr, #8]
 8014126:	42bd      	cmp	r5, r7
 8014128:	dd22      	ble.n	8014170 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801412a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801412e:	d41f      	bmi.n	8014170 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8014130:	f8de 000c 	ldr.w	r0, [lr, #12]
 8014134:	4560      	cmp	r0, ip
 8014136:	dd1b      	ble.n	8014170 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8014138:	9800      	ldr	r0, [sp, #0]
 801413a:	b22d      	sxth	r5, r5
 801413c:	fb0c 0505 	mla	r5, ip, r5, r0
 8014140:	5de8      	ldrb	r0, [r5, r7]
 8014142:	9d01      	ldr	r5, [sp, #4]
 8014144:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8014148:	0e07      	lsrs	r7, r0, #24
 801414a:	2fff      	cmp	r7, #255	; 0xff
 801414c:	d116      	bne.n	801417c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801414e:	f06f 0501 	mvn.w	r5, #1
 8014152:	fb05 f706 	mul.w	r7, r5, r6
 8014156:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801415a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801415e:	0945      	lsrs	r5, r0, #5
 8014160:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8014164:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8014168:	ea4c 0505 	orr.w	r5, ip, r5
 801416c:	4305      	orrs	r5, r0
 801416e:	53e5      	strh	r5, [r4, r7]
 8014170:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014172:	3e01      	subs	r6, #1
 8014174:	4401      	add	r1, r0
 8014176:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014178:	4402      	add	r2, r0
 801417a:	e78e      	b.n	801409a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801417c:	b2fd      	uxtb	r5, r7
 801417e:	2f00      	cmp	r7, #0
 8014180:	d0f6      	beq.n	8014170 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8014182:	f06f 0701 	mvn.w	r7, #1
 8014186:	fa1f f985 	uxth.w	r9, r5
 801418a:	43ed      	mvns	r5, r5
 801418c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8014190:	4377      	muls	r7, r6
 8014192:	fb1a fa09 	smulbb	sl, sl, r9
 8014196:	b2ed      	uxtb	r5, r5
 8014198:	f834 8007 	ldrh.w	r8, [r4, r7]
 801419c:	9702      	str	r7, [sp, #8]
 801419e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80141a2:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80141a6:	fb17 f709 	smulbb	r7, r7, r9
 80141aa:	b2c0      	uxtb	r0, r0
 80141ac:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80141b0:	fb10 f009 	smulbb	r0, r0, r9
 80141b4:	fb0c 7c05 	mla	ip, ip, r5, r7
 80141b8:	ea4f 07e8 	mov.w	r7, r8, asr #3
 80141bc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80141c0:	fa1f fc8c 	uxth.w	ip, ip
 80141c4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80141c8:	fa5f f888 	uxtb.w	r8, r8
 80141cc:	fb07 a705 	mla	r7, r7, r5, sl
 80141d0:	fb08 0005 	mla	r0, r8, r5, r0
 80141d4:	f10c 0501 	add.w	r5, ip, #1
 80141d8:	b2bf      	uxth	r7, r7
 80141da:	b280      	uxth	r0, r0
 80141dc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80141e0:	f100 0a01 	add.w	sl, r0, #1
 80141e4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80141e8:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80141ec:	9802      	ldr	r0, [sp, #8]
 80141ee:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80141f2:	ea4a 0c0c 	orr.w	ip, sl, ip
 80141f6:	f107 0a01 	add.w	sl, r7, #1
 80141fa:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80141fe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8014202:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8014206:	ea4c 0c0a 	orr.w	ip, ip, sl
 801420a:	f824 c000 	strh.w	ip, [r4, r0]
 801420e:	e7af      	b.n	8014170 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8014210:	f04f 0800 	mov.w	r8, #0
 8014214:	eba3 0008 	sub.w	r0, r3, r8
 8014218:	2800      	cmp	r0, #0
 801421a:	f77f af41 	ble.w	80140a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801421e:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8014222:	1410      	asrs	r0, r2, #16
 8014224:	9f00      	ldr	r7, [sp, #0]
 8014226:	140d      	asrs	r5, r1, #16
 8014228:	fb06 7000 	mla	r0, r6, r0, r7
 801422c:	5d40      	ldrb	r0, [r0, r5]
 801422e:	9d01      	ldr	r5, [sp, #4]
 8014230:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8014234:	0e2e      	lsrs	r6, r5, #24
 8014236:	2eff      	cmp	r6, #255	; 0xff
 8014238:	d112      	bne.n	8014260 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801423a:	482c      	ldr	r0, [pc, #176]	; (80142ec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801423c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8014240:	0968      	lsrs	r0, r5, #5
 8014242:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8014246:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801424a:	4330      	orrs	r0, r6
 801424c:	4328      	orrs	r0, r5
 801424e:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8014252:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014254:	f108 0801 	add.w	r8, r8, #1
 8014258:	4401      	add	r1, r0
 801425a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801425c:	4402      	add	r2, r0
 801425e:	e7d9      	b.n	8014214 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8014260:	b2f0      	uxtb	r0, r6
 8014262:	2e00      	cmp	r6, #0
 8014264:	d0f5      	beq.n	8014252 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8014266:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801426a:	fa1f f980 	uxth.w	r9, r0
 801426e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8014272:	43c0      	mvns	r0, r0
 8014274:	ea4f 272c 	mov.w	r7, ip, asr #8
 8014278:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801427c:	fb16 f609 	smulbb	r6, r6, r9
 8014280:	b2c0      	uxtb	r0, r0
 8014282:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014286:	b2ed      	uxtb	r5, r5
 8014288:	fb1a fa09 	smulbb	sl, sl, r9
 801428c:	fb07 6700 	mla	r7, r7, r0, r6
 8014290:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8014294:	fb15 f509 	smulbb	r5, r5, r9
 8014298:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801429c:	b2bf      	uxth	r7, r7
 801429e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80142a2:	fa5f fc8c 	uxtb.w	ip, ip
 80142a6:	fb06 a600 	mla	r6, r6, r0, sl
 80142aa:	fb0c 5500 	mla	r5, ip, r0, r5
 80142ae:	1c78      	adds	r0, r7, #1
 80142b0:	b2b6      	uxth	r6, r6
 80142b2:	b2ad      	uxth	r5, r5
 80142b4:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80142b8:	f105 0a01 	add.w	sl, r5, #1
 80142bc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80142c0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80142c4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80142c8:	ea4a 0707 	orr.w	r7, sl, r7
 80142cc:	f106 0a01 	add.w	sl, r6, #1
 80142d0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80142d4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80142d8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80142dc:	ea47 070a 	orr.w	r7, r7, sl
 80142e0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80142e4:	e7b5      	b.n	8014252 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80142e6:	b005      	add	sp, #20
 80142e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ec:	fffff800 	.word	0xfffff800

080142f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80142f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142f4:	b087      	sub	sp, #28
 80142f6:	468b      	mov	fp, r1
 80142f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80142fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80142fe:	9204      	str	r2, [sp, #16]
 8014300:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8014304:	6861      	ldr	r1, [r4, #4]
 8014306:	9205      	str	r2, [sp, #20]
 8014308:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801430c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8014310:	fb01 2000 	mla	r0, r1, r0, r2
 8014314:	6822      	ldr	r2, [r4, #0]
 8014316:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801431a:	f8de 2000 	ldr.w	r2, [lr]
 801431e:	9201      	str	r2, [sp, #4]
 8014320:	f8de 2004 	ldr.w	r2, [lr, #4]
 8014324:	9202      	str	r2, [sp, #8]
 8014326:	f1bb 0f00 	cmp.w	fp, #0
 801432a:	dc03      	bgt.n	8014334 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801432c:	9a04      	ldr	r2, [sp, #16]
 801432e:	2a00      	cmp	r2, #0
 8014330:	f340 8142 	ble.w	80145b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8014334:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014336:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801433a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801433e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014340:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8014344:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014348:	2b00      	cmp	r3, #0
 801434a:	dd0e      	ble.n	801436a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801434c:	140c      	asrs	r4, r1, #16
 801434e:	d405      	bmi.n	801435c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8014350:	42bc      	cmp	r4, r7
 8014352:	da03      	bge.n	801435c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8014354:	1414      	asrs	r4, r2, #16
 8014356:	d401      	bmi.n	801435c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8014358:	42b4      	cmp	r4, r6
 801435a:	db07      	blt.n	801436c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801435c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801435e:	3b01      	subs	r3, #1
 8014360:	3002      	adds	r0, #2
 8014362:	4421      	add	r1, r4
 8014364:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014366:	4422      	add	r2, r4
 8014368:	e7ee      	b.n	8014348 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801436a:	d019      	beq.n	80143a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801436c:	1e5c      	subs	r4, r3, #1
 801436e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014370:	fb05 1504 	mla	r5, r5, r4, r1
 8014374:	142d      	asrs	r5, r5, #16
 8014376:	d409      	bmi.n	801438c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8014378:	42bd      	cmp	r5, r7
 801437a:	da07      	bge.n	801438c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801437c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801437e:	fb05 2404 	mla	r4, r5, r4, r2
 8014382:	1424      	asrs	r4, r4, #16
 8014384:	d402      	bmi.n	801438c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8014386:	42b4      	cmp	r4, r6
 8014388:	f2c0 80b1 	blt.w	80144ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801438c:	f04f 0800 	mov.w	r8, #0
 8014390:	eb03 0408 	add.w	r4, r3, r8
 8014394:	2c00      	cmp	r4, #0
 8014396:	dc3e      	bgt.n	8014416 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8014398:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801439c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80143a0:	f1bb 0f00 	cmp.w	fp, #0
 80143a4:	f340 8108 	ble.w	80145b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80143a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80143ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80143ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80143b2:	f1bb 0b01 	subs.w	fp, fp, #1
 80143b6:	eeb0 6a62 	vmov.f32	s12, s5
 80143ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80143be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80143c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80143c6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80143ca:	eeb0 6a43 	vmov.f32	s12, s6
 80143ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80143d2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80143d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80143da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80143de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80143e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80143e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80143ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80143ee:	ee12 2a90 	vmov	r2, s5
 80143f2:	eef0 2a47 	vmov.f32	s5, s14
 80143f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80143fa:	ee13 2a10 	vmov	r2, s6
 80143fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8014400:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014402:	eeb0 3a67 	vmov.f32	s6, s15
 8014406:	fb92 f3f3 	sdiv	r3, r2, r3
 801440a:	9a04      	ldr	r2, [sp, #16]
 801440c:	9314      	str	r3, [sp, #80]	; 0x50
 801440e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014410:	bf08      	it	eq
 8014412:	4613      	moveq	r3, r2
 8014414:	e787      	b.n	8014326 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8014416:	140e      	asrs	r6, r1, #16
 8014418:	d462      	bmi.n	80144e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801441a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801441e:	42b5      	cmp	r5, r6
 8014420:	dd5e      	ble.n	80144e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8014422:	1417      	asrs	r7, r2, #16
 8014424:	d45c      	bmi.n	80144e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8014426:	f8de 400c 	ldr.w	r4, [lr, #12]
 801442a:	42bc      	cmp	r4, r7
 801442c:	dd58      	ble.n	80144e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801442e:	b22d      	sxth	r5, r5
 8014430:	9c02      	ldr	r4, [sp, #8]
 8014432:	fb07 6505 	mla	r5, r7, r5, r6
 8014436:	5d66      	ldrb	r6, [r4, r5]
 8014438:	2e00      	cmp	r6, #0
 801443a:	d051      	beq.n	80144e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801443c:	9c01      	ldr	r4, [sp, #4]
 801443e:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8014442:	f06f 0401 	mvn.w	r4, #1
 8014446:	fb04 f408 	mul.w	r4, r4, r8
 801444a:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801444e:	5b05      	ldrh	r5, [r0, r4]
 8014450:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014454:	9403      	str	r4, [sp, #12]
 8014456:	9c05      	ldr	r4, [sp, #20]
 8014458:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801445c:	4366      	muls	r6, r4
 801445e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8014462:	1c74      	adds	r4, r6, #1
 8014464:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8014468:	122e      	asrs	r6, r5, #8
 801446a:	1224      	asrs	r4, r4, #8
 801446c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8014470:	00ed      	lsls	r5, r5, #3
 8014472:	b2a7      	uxth	r7, r4
 8014474:	43e4      	mvns	r4, r4
 8014476:	b2ed      	uxtb	r5, r5
 8014478:	b2e4      	uxtb	r4, r4
 801447a:	fb16 f604 	smulbb	r6, r6, r4
 801447e:	fb15 f504 	smulbb	r5, r5, r4
 8014482:	fb0c 6c07 	mla	ip, ip, r7, r6
 8014486:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801448a:	fb1a fa04 	smulbb	sl, sl, r4
 801448e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8014492:	fa1f fc8c 	uxth.w	ip, ip
 8014496:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801449a:	fa5f f989 	uxtb.w	r9, r9
 801449e:	fb06 a607 	mla	r6, r6, r7, sl
 80144a2:	f10c 0401 	add.w	r4, ip, #1
 80144a6:	fb09 5507 	mla	r5, r9, r7, r5
 80144aa:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80144ae:	9c03      	ldr	r4, [sp, #12]
 80144b0:	b2ad      	uxth	r5, r5
 80144b2:	b2b6      	uxth	r6, r6
 80144b4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80144b8:	f105 0a01 	add.w	sl, r5, #1
 80144bc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80144c0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80144c4:	ea4a 0c0c 	orr.w	ip, sl, ip
 80144c8:	f106 0a01 	add.w	sl, r6, #1
 80144cc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80144d0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80144d4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80144d8:	ea4c 0c0a 	orr.w	ip, ip, sl
 80144dc:	f820 c004 	strh.w	ip, [r0, r4]
 80144e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80144e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80144e6:	4421      	add	r1, r4
 80144e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80144ea:	4422      	add	r2, r4
 80144ec:	e750      	b.n	8014390 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80144ee:	f04f 0900 	mov.w	r9, #0
 80144f2:	eba3 0409 	sub.w	r4, r3, r9
 80144f6:	2c00      	cmp	r4, #0
 80144f8:	f77f af4e 	ble.w	8014398 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80144fc:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8014500:	140d      	asrs	r5, r1, #16
 8014502:	1414      	asrs	r4, r2, #16
 8014504:	fb06 5404 	mla	r4, r6, r4, r5
 8014508:	9d02      	ldr	r5, [sp, #8]
 801450a:	5d2e      	ldrb	r6, [r5, r4]
 801450c:	2e00      	cmp	r6, #0
 801450e:	d04c      	beq.n	80145aa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8014510:	9d01      	ldr	r5, [sp, #4]
 8014512:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8014516:	9c05      	ldr	r4, [sp, #20]
 8014518:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801451c:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8014520:	4366      	muls	r6, r4
 8014522:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8014526:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801452a:	1c74      	adds	r4, r6, #1
 801452c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8014530:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8014534:	122e      	asrs	r6, r5, #8
 8014536:	1224      	asrs	r4, r4, #8
 8014538:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801453c:	00ed      	lsls	r5, r5, #3
 801453e:	b2a7      	uxth	r7, r4
 8014540:	43e4      	mvns	r4, r4
 8014542:	b2ed      	uxtb	r5, r5
 8014544:	b2e4      	uxtb	r4, r4
 8014546:	fb16 f604 	smulbb	r6, r6, r4
 801454a:	fb15 f504 	smulbb	r5, r5, r4
 801454e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8014552:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8014556:	fb1a fa04 	smulbb	sl, sl, r4
 801455a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801455e:	fa1f fc8c 	uxth.w	ip, ip
 8014562:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8014566:	fa5f f888 	uxtb.w	r8, r8
 801456a:	fb06 a607 	mla	r6, r6, r7, sl
 801456e:	f10c 0401 	add.w	r4, ip, #1
 8014572:	fb08 5507 	mla	r5, r8, r7, r5
 8014576:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801457a:	b2ad      	uxth	r5, r5
 801457c:	b2b6      	uxth	r6, r6
 801457e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8014582:	f105 0a01 	add.w	sl, r5, #1
 8014586:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801458a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801458e:	ea4a 0c0c 	orr.w	ip, sl, ip
 8014592:	f106 0a01 	add.w	sl, r6, #1
 8014596:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801459a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801459e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80145a2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80145a6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80145aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80145ac:	f109 0901 	add.w	r9, r9, #1
 80145b0:	4421      	add	r1, r4
 80145b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80145b4:	4422      	add	r2, r4
 80145b6:	e79c      	b.n	80144f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 80145b8:	b007      	add	sp, #28
 80145ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080145be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80145be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145c2:	b085      	sub	sp, #20
 80145c4:	468b      	mov	fp, r1
 80145c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80145ca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80145cc:	9203      	str	r2, [sp, #12]
 80145ce:	6861      	ldr	r1, [r4, #4]
 80145d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80145d4:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 80145d8:	fb01 2000 	mla	r0, r1, r0, r2
 80145dc:	6822      	ldr	r2, [r4, #0]
 80145de:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80145e2:	f8d8 2000 	ldr.w	r2, [r8]
 80145e6:	9200      	str	r2, [sp, #0]
 80145e8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80145ec:	9201      	str	r2, [sp, #4]
 80145ee:	f1bb 0f00 	cmp.w	fp, #0
 80145f2:	dc03      	bgt.n	80145fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80145f4:	9a03      	ldr	r2, [sp, #12]
 80145f6:	2a00      	cmp	r2, #0
 80145f8:	f340 8146 	ble.w	8014888 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80145fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80145fe:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8014602:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8014606:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014608:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801460c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014610:	2b00      	cmp	r3, #0
 8014612:	dd0e      	ble.n	8014632 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8014614:	140c      	asrs	r4, r1, #16
 8014616:	d405      	bmi.n	8014624 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014618:	42bc      	cmp	r4, r7
 801461a:	da03      	bge.n	8014624 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801461c:	1414      	asrs	r4, r2, #16
 801461e:	d401      	bmi.n	8014624 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014620:	42b4      	cmp	r4, r6
 8014622:	db07      	blt.n	8014634 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014624:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014626:	3b01      	subs	r3, #1
 8014628:	3002      	adds	r0, #2
 801462a:	4421      	add	r1, r4
 801462c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801462e:	4422      	add	r2, r4
 8014630:	e7ee      	b.n	8014610 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8014632:	d017      	beq.n	8014664 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8014634:	1e5c      	subs	r4, r3, #1
 8014636:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014638:	fb05 1504 	mla	r5, r5, r4, r1
 801463c:	142d      	asrs	r5, r5, #16
 801463e:	d409      	bmi.n	8014654 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014640:	42bd      	cmp	r5, r7
 8014642:	da07      	bge.n	8014654 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014644:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014646:	fb05 2404 	mla	r4, r5, r4, r2
 801464a:	1424      	asrs	r4, r4, #16
 801464c:	d402      	bmi.n	8014654 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801464e:	42b4      	cmp	r4, r6
 8014650:	f2c0 80b3 	blt.w	80147ba <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8014654:	2600      	movs	r6, #0
 8014656:	199c      	adds	r4, r3, r6
 8014658:	2c00      	cmp	r4, #0
 801465a:	dc3e      	bgt.n	80146da <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801465c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014660:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014664:	f1bb 0f00 	cmp.w	fp, #0
 8014668:	f340 810e 	ble.w	8014888 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801466c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014672:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014676:	f1bb 0b01 	subs.w	fp, fp, #1
 801467a:	eeb0 6a62 	vmov.f32	s12, s5
 801467e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014682:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014686:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801468a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801468e:	eeb0 6a43 	vmov.f32	s12, s6
 8014692:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014696:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801469a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801469e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80146a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80146a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80146aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80146ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80146b2:	ee12 2a90 	vmov	r2, s5
 80146b6:	eef0 2a47 	vmov.f32	s5, s14
 80146ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80146be:	ee13 2a10 	vmov	r2, s6
 80146c2:	9311      	str	r3, [sp, #68]	; 0x44
 80146c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146c6:	eeb0 3a67 	vmov.f32	s6, s15
 80146ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80146ce:	9a03      	ldr	r2, [sp, #12]
 80146d0:	9312      	str	r3, [sp, #72]	; 0x48
 80146d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146d4:	bf08      	it	eq
 80146d6:	4613      	moveq	r3, r2
 80146d8:	e789      	b.n	80145ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80146da:	140f      	asrs	r7, r1, #16
 80146dc:	d418      	bmi.n	8014710 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80146de:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80146e2:	42bd      	cmp	r5, r7
 80146e4:	dd14      	ble.n	8014710 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80146e6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80146ea:	d411      	bmi.n	8014710 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80146ec:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80146f0:	4564      	cmp	r4, ip
 80146f2:	dd0d      	ble.n	8014710 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80146f4:	b22d      	sxth	r5, r5
 80146f6:	9c01      	ldr	r4, [sp, #4]
 80146f8:	fb0c 7505 	mla	r5, ip, r5, r7
 80146fc:	5d64      	ldrb	r4, [r4, r5]
 80146fe:	2cff      	cmp	r4, #255	; 0xff
 8014700:	d10c      	bne.n	801471c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8014702:	9c00      	ldr	r4, [sp, #0]
 8014704:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8014708:	f06f 0401 	mvn.w	r4, #1
 801470c:	4374      	muls	r4, r6
 801470e:	5305      	strh	r5, [r0, r4]
 8014710:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014712:	3e01      	subs	r6, #1
 8014714:	4421      	add	r1, r4
 8014716:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014718:	4422      	add	r2, r4
 801471a:	e79c      	b.n	8014656 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801471c:	2c00      	cmp	r4, #0
 801471e:	d0f7      	beq.n	8014710 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8014720:	9f00      	ldr	r7, [sp, #0]
 8014722:	fa1f fc84 	uxth.w	ip, r4
 8014726:	43e4      	mvns	r4, r4
 8014728:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801472c:	f06f 0501 	mvn.w	r5, #1
 8014730:	b2e4      	uxtb	r4, r4
 8014732:	4375      	muls	r5, r6
 8014734:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8014738:	9502      	str	r5, [sp, #8]
 801473a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801473e:	5b45      	ldrh	r5, [r0, r5]
 8014740:	122f      	asrs	r7, r5, #8
 8014742:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8014746:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801474a:	00ed      	lsls	r5, r5, #3
 801474c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8014750:	fb17 f704 	smulbb	r7, r7, r4
 8014754:	b2ed      	uxtb	r5, r5
 8014756:	fb1a fa04 	smulbb	sl, sl, r4
 801475a:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801475e:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8014762:	fb15 f504 	smulbb	r5, r5, r4
 8014766:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801476a:	fa1f fe8e 	uxth.w	lr, lr
 801476e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8014772:	fa5f f989 	uxtb.w	r9, r9
 8014776:	fb07 a70c 	mla	r7, r7, ip, sl
 801477a:	f10e 0401 	add.w	r4, lr, #1
 801477e:	fb09 550c 	mla	r5, r9, ip, r5
 8014782:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8014786:	9c02      	ldr	r4, [sp, #8]
 8014788:	b2ad      	uxth	r5, r5
 801478a:	b2bf      	uxth	r7, r7
 801478c:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8014790:	f105 0a01 	add.w	sl, r5, #1
 8014794:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8014798:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801479c:	ea4a 0e0e 	orr.w	lr, sl, lr
 80147a0:	f107 0a01 	add.w	sl, r7, #1
 80147a4:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80147a8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80147ac:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80147b0:	ea4e 0e0a 	orr.w	lr, lr, sl
 80147b4:	f820 e004 	strh.w	lr, [r0, r4]
 80147b8:	e7aa      	b.n	8014710 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80147ba:	f04f 0900 	mov.w	r9, #0
 80147be:	eba3 0409 	sub.w	r4, r3, r9
 80147c2:	2c00      	cmp	r4, #0
 80147c4:	f77f af4a 	ble.w	801465c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80147c8:	1414      	asrs	r4, r2, #16
 80147ca:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80147ce:	140d      	asrs	r5, r1, #16
 80147d0:	fb06 5504 	mla	r5, r6, r4, r5
 80147d4:	9c01      	ldr	r4, [sp, #4]
 80147d6:	5d64      	ldrb	r4, [r4, r5]
 80147d8:	2cff      	cmp	r4, #255	; 0xff
 80147da:	d10b      	bne.n	80147f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80147dc:	9c00      	ldr	r4, [sp, #0]
 80147de:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 80147e2:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 80147e6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80147e8:	f109 0901 	add.w	r9, r9, #1
 80147ec:	4421      	add	r1, r4
 80147ee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80147f0:	4422      	add	r2, r4
 80147f2:	e7e4      	b.n	80147be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80147f4:	2c00      	cmp	r4, #0
 80147f6:	d0f6      	beq.n	80147e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80147f8:	9e00      	ldr	r6, [sp, #0]
 80147fa:	b2a7      	uxth	r7, r4
 80147fc:	43e4      	mvns	r4, r4
 80147fe:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8014802:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8014806:	b2e4      	uxtb	r4, r4
 8014808:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801480c:	122e      	asrs	r6, r5, #8
 801480e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8014812:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014816:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801481a:	00ed      	lsls	r5, r5, #3
 801481c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8014820:	fb16 f604 	smulbb	r6, r6, r4
 8014824:	b2ed      	uxtb	r5, r5
 8014826:	fb1a fa04 	smulbb	sl, sl, r4
 801482a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801482e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8014832:	fb15 f504 	smulbb	r5, r5, r4
 8014836:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801483a:	fa1f fc8c 	uxth.w	ip, ip
 801483e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8014842:	fa5f fe8e 	uxtb.w	lr, lr
 8014846:	fb06 a607 	mla	r6, r6, r7, sl
 801484a:	f10c 0401 	add.w	r4, ip, #1
 801484e:	fb0e 5507 	mla	r5, lr, r7, r5
 8014852:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8014856:	b2ad      	uxth	r5, r5
 8014858:	b2b6      	uxth	r6, r6
 801485a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801485e:	f105 0a01 	add.w	sl, r5, #1
 8014862:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8014866:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801486a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801486e:	f106 0a01 	add.w	sl, r6, #1
 8014872:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8014876:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801487a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801487e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8014882:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8014886:	e7ae      	b.n	80147e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8014888:	b005      	add	sp, #20
 801488a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801488e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801488e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014892:	b085      	sub	sp, #20
 8014894:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014896:	9203      	str	r2, [sp, #12]
 8014898:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801489c:	9100      	str	r1, [sp, #0]
 801489e:	9201      	str	r2, [sp, #4]
 80148a0:	6841      	ldr	r1, [r0, #4]
 80148a2:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80148a6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80148aa:	fb01 2404 	mla	r4, r1, r4, r2
 80148ae:	6802      	ldr	r2, [r0, #0]
 80148b0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80148b4:	f8de 2000 	ldr.w	r2, [lr]
 80148b8:	9202      	str	r2, [sp, #8]
 80148ba:	9a01      	ldr	r2, [sp, #4]
 80148bc:	43d6      	mvns	r6, r2
 80148be:	b2f6      	uxtb	r6, r6
 80148c0:	9a00      	ldr	r2, [sp, #0]
 80148c2:	2a00      	cmp	r2, #0
 80148c4:	dc03      	bgt.n	80148ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80148c6:	9a03      	ldr	r2, [sp, #12]
 80148c8:	2a00      	cmp	r2, #0
 80148ca:	f340 8124 	ble.w	8014b16 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80148ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80148d0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80148d4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80148d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80148da:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80148de:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	dd0e      	ble.n	8014904 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80148e6:	1408      	asrs	r0, r1, #16
 80148e8:	d405      	bmi.n	80148f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80148ea:	4560      	cmp	r0, ip
 80148ec:	da03      	bge.n	80148f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80148ee:	1410      	asrs	r0, r2, #16
 80148f0:	d401      	bmi.n	80148f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80148f2:	42b8      	cmp	r0, r7
 80148f4:	db07      	blt.n	8014906 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80148f6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80148f8:	3b01      	subs	r3, #1
 80148fa:	3402      	adds	r4, #2
 80148fc:	4401      	add	r1, r0
 80148fe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014900:	4402      	add	r2, r0
 8014902:	e7ee      	b.n	80148e2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8014904:	d06e      	beq.n	80149e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8014906:	1e58      	subs	r0, r3, #1
 8014908:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801490a:	fb05 1500 	mla	r5, r5, r0, r1
 801490e:	142d      	asrs	r5, r5, #16
 8014910:	d45c      	bmi.n	80149cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8014912:	4565      	cmp	r5, ip
 8014914:	da5a      	bge.n	80149cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8014916:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014918:	fb05 2000 	mla	r0, r5, r0, r2
 801491c:	1400      	asrs	r0, r0, #16
 801491e:	d455      	bmi.n	80149cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8014920:	42b8      	cmp	r0, r7
 8014922:	da53      	bge.n	80149cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8014924:	4699      	mov	r9, r3
 8014926:	46a2      	mov	sl, r4
 8014928:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801492c:	f1b9 0f00 	cmp.w	r9, #0
 8014930:	dd54      	ble.n	80149dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8014932:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8014936:	140d      	asrs	r5, r1, #16
 8014938:	1410      	asrs	r0, r2, #16
 801493a:	f109 39ff 	add.w	r9, r9, #4294967295
 801493e:	fb07 5000 	mla	r0, r7, r0, r5
 8014942:	9d02      	ldr	r5, [sp, #8]
 8014944:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8014948:	f8ba 5000 	ldrh.w	r5, [sl]
 801494c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8014950:	122f      	asrs	r7, r5, #8
 8014952:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8014956:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801495a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801495e:	00ed      	lsls	r5, r5, #3
 8014960:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8014964:	fb17 f706 	smulbb	r7, r7, r6
 8014968:	b2ed      	uxtb	r5, r5
 801496a:	fb18 f806 	smulbb	r8, r8, r6
 801496e:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8014972:	10c7      	asrs	r7, r0, #3
 8014974:	fb15 f506 	smulbb	r5, r5, r6
 8014978:	00c0      	lsls	r0, r0, #3
 801497a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801497e:	fa1f fc8c 	uxth.w	ip, ip
 8014982:	b2c0      	uxtb	r0, r0
 8014984:	fb07 870b 	mla	r7, r7, fp, r8
 8014988:	fb00 500b 	mla	r0, r0, fp, r5
 801498c:	f10c 0501 	add.w	r5, ip, #1
 8014990:	b2bf      	uxth	r7, r7
 8014992:	b280      	uxth	r0, r0
 8014994:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8014998:	f107 0801 	add.w	r8, r7, #1
 801499c:	1c45      	adds	r5, r0, #1
 801499e:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80149a2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80149a6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80149aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80149ac:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80149b0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80149b4:	4401      	add	r1, r0
 80149b6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80149ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 80149bc:	ea45 0c0c 	orr.w	ip, r5, ip
 80149c0:	4402      	add	r2, r0
 80149c2:	ea4c 0c08 	orr.w	ip, ip, r8
 80149c6:	f82a cb02 	strh.w	ip, [sl], #2
 80149ca:	e7af      	b.n	801492c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80149cc:	f04f 0800 	mov.w	r8, #0
 80149d0:	f8bd a004 	ldrh.w	sl, [sp, #4]
 80149d4:	eb03 0008 	add.w	r0, r3, r8
 80149d8:	2800      	cmp	r0, #0
 80149da:	dc41      	bgt.n	8014a60 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80149dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80149e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80149e4:	9b00      	ldr	r3, [sp, #0]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	f340 8095 	ble.w	8014b16 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80149ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80149f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80149f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80149fa:	eef0 6a62 	vmov.f32	s13, s5
 80149fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014a02:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014a06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014a0a:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8014a0e:	eef0 6a43 	vmov.f32	s13, s6
 8014a12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014a16:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8014a1a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014a1e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014a22:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014a26:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014a2a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014a2e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014a32:	ee12 2a90 	vmov	r2, s5
 8014a36:	eef0 2a47 	vmov.f32	s5, s14
 8014a3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8014a3e:	ee13 2a10 	vmov	r2, s6
 8014a42:	9311      	str	r3, [sp, #68]	; 0x44
 8014a44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a46:	eeb0 3a67 	vmov.f32	s6, s15
 8014a4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8014a4e:	9312      	str	r3, [sp, #72]	; 0x48
 8014a50:	9b00      	ldr	r3, [sp, #0]
 8014a52:	9a03      	ldr	r2, [sp, #12]
 8014a54:	3b01      	subs	r3, #1
 8014a56:	9300      	str	r3, [sp, #0]
 8014a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a5a:	bf08      	it	eq
 8014a5c:	4613      	moveq	r3, r2
 8014a5e:	e72f      	b.n	80148c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8014a60:	140f      	asrs	r7, r1, #16
 8014a62:	d451      	bmi.n	8014b08 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8014a64:	f8de 5008 	ldr.w	r5, [lr, #8]
 8014a68:	42bd      	cmp	r5, r7
 8014a6a:	dd4d      	ble.n	8014b08 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8014a6c:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8014a70:	d44a      	bmi.n	8014b08 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8014a72:	f8de 000c 	ldr.w	r0, [lr, #12]
 8014a76:	4560      	cmp	r0, ip
 8014a78:	dd46      	ble.n	8014b08 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8014a7a:	b22d      	sxth	r5, r5
 8014a7c:	9802      	ldr	r0, [sp, #8]
 8014a7e:	fb0c 7505 	mla	r5, ip, r5, r7
 8014a82:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8014a86:	f06f 0501 	mvn.w	r5, #1
 8014a8a:	fb05 fb08 	mul.w	fp, r5, r8
 8014a8e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8014a92:	f834 500b 	ldrh.w	r5, [r4, fp]
 8014a96:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014a9a:	122f      	asrs	r7, r5, #8
 8014a9c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8014aa0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014aa4:	00ed      	lsls	r5, r5, #3
 8014aa6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8014aaa:	fb17 f706 	smulbb	r7, r7, r6
 8014aae:	b2ed      	uxtb	r5, r5
 8014ab0:	fb19 f906 	smulbb	r9, r9, r6
 8014ab4:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8014ab8:	10c7      	asrs	r7, r0, #3
 8014aba:	fb15 f506 	smulbb	r5, r5, r6
 8014abe:	00c0      	lsls	r0, r0, #3
 8014ac0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8014ac4:	fa1f fc8c 	uxth.w	ip, ip
 8014ac8:	b2c0      	uxtb	r0, r0
 8014aca:	fb07 970a 	mla	r7, r7, sl, r9
 8014ace:	fb00 500a 	mla	r0, r0, sl, r5
 8014ad2:	f10c 0501 	add.w	r5, ip, #1
 8014ad6:	b2bf      	uxth	r7, r7
 8014ad8:	b280      	uxth	r0, r0
 8014ada:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8014ade:	f107 0901 	add.w	r9, r7, #1
 8014ae2:	1c45      	adds	r5, r0, #1
 8014ae4:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8014ae8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8014aec:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8014af0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8014af4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8014af8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8014afc:	ea45 0c0c 	orr.w	ip, r5, ip
 8014b00:	ea4c 0c09 	orr.w	ip, ip, r9
 8014b04:	f824 c00b 	strh.w	ip, [r4, fp]
 8014b08:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014b0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8014b0e:	4401      	add	r1, r0
 8014b10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014b12:	4402      	add	r2, r0
 8014b14:	e75e      	b.n	80149d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014b16:	b005      	add	sp, #20
 8014b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b1c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b20:	b085      	sub	sp, #20
 8014b22:	4693      	mov	fp, r2
 8014b24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014b28:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014b2a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8014b2c:	6870      	ldr	r0, [r6, #4]
 8014b2e:	9101      	str	r1, [sp, #4]
 8014b30:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8014b34:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8014b38:	fb00 2404 	mla	r4, r0, r4, r2
 8014b3c:	6832      	ldr	r2, [r6, #0]
 8014b3e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8014b42:	682a      	ldr	r2, [r5, #0]
 8014b44:	9202      	str	r2, [sp, #8]
 8014b46:	9a01      	ldr	r2, [sp, #4]
 8014b48:	2a00      	cmp	r2, #0
 8014b4a:	dc03      	bgt.n	8014b54 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8014b4c:	f1bb 0f00 	cmp.w	fp, #0
 8014b50:	f340 809a 	ble.w	8014c88 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8014b54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014b56:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8014b5a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014b5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014b60:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8014b64:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	dd0c      	ble.n	8014b86 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014b6c:	1406      	asrs	r6, r0, #16
 8014b6e:	d405      	bmi.n	8014b7c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8014b70:	454e      	cmp	r6, r9
 8014b72:	da03      	bge.n	8014b7c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8014b74:	1416      	asrs	r6, r2, #16
 8014b76:	d401      	bmi.n	8014b7c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8014b78:	4546      	cmp	r6, r8
 8014b7a:	db05      	blt.n	8014b88 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8014b7c:	4470      	add	r0, lr
 8014b7e:	4462      	add	r2, ip
 8014b80:	3b01      	subs	r3, #1
 8014b82:	3402      	adds	r4, #2
 8014b84:	e7f0      	b.n	8014b68 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8014b86:	d00f      	beq.n	8014ba8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8014b88:	1e5e      	subs	r6, r3, #1
 8014b8a:	fb0e 0706 	mla	r7, lr, r6, r0
 8014b8e:	143f      	asrs	r7, r7, #16
 8014b90:	d541      	bpl.n	8014c16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8014b92:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8014b96:	4698      	mov	r8, r3
 8014b98:	9603      	str	r6, [sp, #12]
 8014b9a:	f1b8 0f00 	cmp.w	r8, #0
 8014b9e:	dc56      	bgt.n	8014c4e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8014ba0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014ba4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014ba8:	9b01      	ldr	r3, [sp, #4]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	dd6c      	ble.n	8014c88 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8014bae:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014bb4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014bb8:	eeb0 6a62 	vmov.f32	s12, s5
 8014bbc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014bc0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014bc4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014bc8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014bcc:	eeb0 6a43 	vmov.f32	s12, s6
 8014bd0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014bd4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014bd8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014bdc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014be0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014be4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014be8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014bec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014bf0:	ee12 2a90 	vmov	r2, s5
 8014bf4:	eef0 2a47 	vmov.f32	s5, s14
 8014bf8:	fb92 fef3 	sdiv	lr, r2, r3
 8014bfc:	ee13 2a10 	vmov	r2, s6
 8014c00:	eeb0 3a67 	vmov.f32	s6, s15
 8014c04:	fb92 fcf3 	sdiv	ip, r2, r3
 8014c08:	9b01      	ldr	r3, [sp, #4]
 8014c0a:	3b01      	subs	r3, #1
 8014c0c:	9301      	str	r3, [sp, #4]
 8014c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c10:	bf08      	it	eq
 8014c12:	465b      	moveq	r3, fp
 8014c14:	e797      	b.n	8014b46 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8014c16:	454f      	cmp	r7, r9
 8014c18:	dabb      	bge.n	8014b92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014c1a:	fb0c 2606 	mla	r6, ip, r6, r2
 8014c1e:	1436      	asrs	r6, r6, #16
 8014c20:	d4b7      	bmi.n	8014b92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014c22:	4546      	cmp	r6, r8
 8014c24:	dab5      	bge.n	8014b92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014c26:	461e      	mov	r6, r3
 8014c28:	46a0      	mov	r8, r4
 8014c2a:	2e00      	cmp	r6, #0
 8014c2c:	ddb8      	ble.n	8014ba0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8014c2e:	1417      	asrs	r7, r2, #16
 8014c30:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8014c34:	ea4f 4920 	mov.w	r9, r0, asr #16
 8014c38:	9902      	ldr	r1, [sp, #8]
 8014c3a:	4470      	add	r0, lr
 8014c3c:	4462      	add	r2, ip
 8014c3e:	fb0a 9707 	mla	r7, sl, r7, r9
 8014c42:	3e01      	subs	r6, #1
 8014c44:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8014c48:	f828 7b02 	strh.w	r7, [r8], #2
 8014c4c:	e7ed      	b.n	8014c2a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8014c4e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014c52:	d414      	bmi.n	8014c7e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8014c54:	68ae      	ldr	r6, [r5, #8]
 8014c56:	454e      	cmp	r6, r9
 8014c58:	dd11      	ble.n	8014c7e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8014c5a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8014c5e:	d40e      	bmi.n	8014c7e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8014c60:	68ef      	ldr	r7, [r5, #12]
 8014c62:	4557      	cmp	r7, sl
 8014c64:	dd0b      	ble.n	8014c7e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8014c66:	b236      	sxth	r6, r6
 8014c68:	f06f 0101 	mvn.w	r1, #1
 8014c6c:	9f02      	ldr	r7, [sp, #8]
 8014c6e:	fb0a 9606 	mla	r6, sl, r6, r9
 8014c72:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8014c76:	fb01 f608 	mul.w	r6, r1, r8
 8014c7a:	9903      	ldr	r1, [sp, #12]
 8014c7c:	538f      	strh	r7, [r1, r6]
 8014c7e:	4470      	add	r0, lr
 8014c80:	4462      	add	r2, ip
 8014c82:	f108 38ff 	add.w	r8, r8, #4294967295
 8014c86:	e788      	b.n	8014b9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8014c88:	b005      	add	sp, #20
 8014c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014c8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014c8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c92:	b087      	sub	sp, #28
 8014c94:	468b      	mov	fp, r1
 8014c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014c9a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014c9c:	9203      	str	r2, [sp, #12]
 8014c9e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8014ca2:	6841      	ldr	r1, [r0, #4]
 8014ca4:	9204      	str	r2, [sp, #16]
 8014ca6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8014caa:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8014cae:	fb01 2505 	mla	r5, r1, r5, r2
 8014cb2:	6802      	ldr	r2, [r0, #0]
 8014cb4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8014cb8:	f8d9 2000 	ldr.w	r2, [r9]
 8014cbc:	9201      	str	r2, [sp, #4]
 8014cbe:	f1bb 0f00 	cmp.w	fp, #0
 8014cc2:	dc03      	bgt.n	8014ccc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8014cc4:	9a03      	ldr	r2, [sp, #12]
 8014cc6:	2a00      	cmp	r2, #0
 8014cc8:	f340 8158 	ble.w	8014f7c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8014ccc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014cce:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8014cd2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014cd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014cd8:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8014cdc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	dd0e      	ble.n	8014d02 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8014ce4:	1402      	asrs	r2, r0, #16
 8014ce6:	d405      	bmi.n	8014cf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014ce8:	42ba      	cmp	r2, r7
 8014cea:	da03      	bge.n	8014cf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014cec:	140a      	asrs	r2, r1, #16
 8014cee:	d401      	bmi.n	8014cf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014cf0:	42b2      	cmp	r2, r6
 8014cf2:	db07      	blt.n	8014d04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014cf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014cf6:	3b01      	subs	r3, #1
 8014cf8:	3502      	adds	r5, #2
 8014cfa:	4410      	add	r0, r2
 8014cfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014cfe:	4411      	add	r1, r2
 8014d00:	e7ee      	b.n	8014ce0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8014d02:	d017      	beq.n	8014d34 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8014d04:	1e5a      	subs	r2, r3, #1
 8014d06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014d08:	fb04 0402 	mla	r4, r4, r2, r0
 8014d0c:	1424      	asrs	r4, r4, #16
 8014d0e:	d409      	bmi.n	8014d24 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014d10:	42bc      	cmp	r4, r7
 8014d12:	da07      	bge.n	8014d24 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014d14:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014d16:	fb04 1202 	mla	r2, r4, r2, r1
 8014d1a:	1412      	asrs	r2, r2, #16
 8014d1c:	d402      	bmi.n	8014d24 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014d1e:	42b2      	cmp	r2, r6
 8014d20:	f2c0 80bf 	blt.w	8014ea2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8014d24:	2700      	movs	r7, #0
 8014d26:	19da      	adds	r2, r3, r7
 8014d28:	2a00      	cmp	r2, #0
 8014d2a:	dc3e      	bgt.n	8014daa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8014d2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014d30:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8014d34:	f1bb 0f00 	cmp.w	fp, #0
 8014d38:	f340 8120 	ble.w	8014f7c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8014d3c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014d40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d42:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014d46:	f1bb 0b01 	subs.w	fp, fp, #1
 8014d4a:	eeb0 6a62 	vmov.f32	s12, s5
 8014d4e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014d52:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014d56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014d5a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014d5e:	eeb0 6a43 	vmov.f32	s12, s6
 8014d62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014d66:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8014d6a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014d6e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014d72:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014d76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014d7a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014d7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014d82:	ee12 2a90 	vmov	r2, s5
 8014d86:	eef0 2a47 	vmov.f32	s5, s14
 8014d8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8014d8e:	ee13 2a10 	vmov	r2, s6
 8014d92:	9313      	str	r3, [sp, #76]	; 0x4c
 8014d94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d96:	eeb0 3a67 	vmov.f32	s6, s15
 8014d9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8014d9e:	9a03      	ldr	r2, [sp, #12]
 8014da0:	9314      	str	r3, [sp, #80]	; 0x50
 8014da2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014da4:	bf08      	it	eq
 8014da6:	4613      	moveq	r3, r2
 8014da8:	e789      	b.n	8014cbe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8014daa:	1406      	asrs	r6, r0, #16
 8014dac:	d42d      	bmi.n	8014e0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8014dae:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8014db2:	42b4      	cmp	r4, r6
 8014db4:	dd29      	ble.n	8014e0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8014db6:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8014dba:	d426      	bmi.n	8014e0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8014dbc:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8014dc0:	4562      	cmp	r2, ip
 8014dc2:	dd22      	ble.n	8014e0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8014dc4:	b224      	sxth	r4, r4
 8014dc6:	9a01      	ldr	r2, [sp, #4]
 8014dc8:	fb0c 6404 	mla	r4, ip, r4, r6
 8014dcc:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8014dd0:	0e22      	lsrs	r2, r4, #24
 8014dd2:	d01a      	beq.n	8014e0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8014dd4:	9e04      	ldr	r6, [sp, #16]
 8014dd6:	4372      	muls	r2, r6
 8014dd8:	1c56      	adds	r6, r2, #1
 8014dda:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014dde:	0a26      	lsrs	r6, r4, #8
 8014de0:	1212      	asrs	r2, r2, #8
 8014de2:	9605      	str	r6, [sp, #20]
 8014de4:	2aff      	cmp	r2, #255	; 0xff
 8014de6:	d116      	bne.n	8014e16 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8014de8:	f06f 0201 	mvn.w	r2, #1
 8014dec:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8014df0:	fb02 fc07 	mul.w	ip, r2, r7
 8014df4:	0962      	lsrs	r2, r4, #5
 8014df6:	f026 0607 	bic.w	r6, r6, #7
 8014dfa:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8014dfe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8014e02:	4316      	orrs	r6, r2
 8014e04:	4326      	orrs	r6, r4
 8014e06:	f825 600c 	strh.w	r6, [r5, ip]
 8014e0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014e0c:	3f01      	subs	r7, #1
 8014e0e:	4410      	add	r0, r2
 8014e10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014e12:	4411      	add	r1, r2
 8014e14:	e787      	b.n	8014d26 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8014e16:	f06f 0601 	mvn.w	r6, #1
 8014e1a:	fa1f fa82 	uxth.w	sl, r2
 8014e1e:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8014e22:	43d2      	mvns	r2, r2
 8014e24:	437e      	muls	r6, r7
 8014e26:	b2e4      	uxtb	r4, r4
 8014e28:	fb1c fc0a 	smulbb	ip, ip, sl
 8014e2c:	b2d2      	uxtb	r2, r2
 8014e2e:	f835 8006 	ldrh.w	r8, [r5, r6]
 8014e32:	fb14 f40a 	smulbb	r4, r4, sl
 8014e36:	9602      	str	r6, [sp, #8]
 8014e38:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8014e3c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8014e40:	fb16 f60a 	smulbb	r6, r6, sl
 8014e44:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8014e48:	fb0e ce02 	mla	lr, lr, r2, ip
 8014e4c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8014e50:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8014e54:	fa1f fe8e 	uxth.w	lr, lr
 8014e58:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8014e5c:	fa5f f888 	uxtb.w	r8, r8
 8014e60:	fb0c 6c02 	mla	ip, ip, r2, r6
 8014e64:	fb08 4402 	mla	r4, r8, r2, r4
 8014e68:	f10e 0201 	add.w	r2, lr, #1
 8014e6c:	fa1f fc8c 	uxth.w	ip, ip
 8014e70:	b2a4      	uxth	r4, r4
 8014e72:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8014e76:	9a02      	ldr	r2, [sp, #8]
 8014e78:	1c66      	adds	r6, r4, #1
 8014e7a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8014e7e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8014e82:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8014e86:	ea46 0e0e 	orr.w	lr, r6, lr
 8014e8a:	f10c 0601 	add.w	r6, ip, #1
 8014e8e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8014e92:	0976      	lsrs	r6, r6, #5
 8014e94:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8014e98:	ea4e 0e06 	orr.w	lr, lr, r6
 8014e9c:	f825 e002 	strh.w	lr, [r5, r2]
 8014ea0:	e7b3      	b.n	8014e0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8014ea2:	f04f 0800 	mov.w	r8, #0
 8014ea6:	eba3 0208 	sub.w	r2, r3, r8
 8014eaa:	2a00      	cmp	r2, #0
 8014eac:	f77f af3e 	ble.w	8014d2c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8014eb0:	1404      	asrs	r4, r0, #16
 8014eb2:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8014eb6:	140a      	asrs	r2, r1, #16
 8014eb8:	fb06 4202 	mla	r2, r6, r2, r4
 8014ebc:	9c01      	ldr	r4, [sp, #4]
 8014ebe:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8014ec2:	0e22      	lsrs	r2, r4, #24
 8014ec4:	d015      	beq.n	8014ef2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8014ec6:	9e04      	ldr	r6, [sp, #16]
 8014ec8:	4372      	muls	r2, r6
 8014eca:	1c56      	adds	r6, r2, #1
 8014ecc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014ed0:	0a26      	lsrs	r6, r4, #8
 8014ed2:	1212      	asrs	r2, r2, #8
 8014ed4:	2aff      	cmp	r2, #255	; 0xff
 8014ed6:	d113      	bne.n	8014f00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8014ed8:	0962      	lsrs	r2, r4, #5
 8014eda:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8014ede:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8014ee2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8014ee6:	f026 0607 	bic.w	r6, r6, #7
 8014eea:	4316      	orrs	r6, r2
 8014eec:	4326      	orrs	r6, r4
 8014eee:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8014ef2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014ef4:	f108 0801 	add.w	r8, r8, #1
 8014ef8:	4410      	add	r0, r2
 8014efa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014efc:	4411      	add	r1, r2
 8014efe:	e7d2      	b.n	8014ea6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8014f00:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8014f04:	fa1f fa82 	uxth.w	sl, r2
 8014f08:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8014f0c:	43d2      	mvns	r2, r2
 8014f0e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8014f12:	fb17 f70a 	smulbb	r7, r7, sl
 8014f16:	b2d2      	uxtb	r2, r2
 8014f18:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014f1c:	b2e4      	uxtb	r4, r4
 8014f1e:	b2f6      	uxtb	r6, r6
 8014f20:	fb0c 7c02 	mla	ip, ip, r2, r7
 8014f24:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8014f28:	fb14 f40a 	smulbb	r4, r4, sl
 8014f2c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8014f30:	fa1f fc8c 	uxth.w	ip, ip
 8014f34:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8014f38:	fb16 f60a 	smulbb	r6, r6, sl
 8014f3c:	fa5f fe8e 	uxtb.w	lr, lr
 8014f40:	fb0e 4402 	mla	r4, lr, r2, r4
 8014f44:	fb07 6702 	mla	r7, r7, r2, r6
 8014f48:	f10c 0201 	add.w	r2, ip, #1
 8014f4c:	b2a4      	uxth	r4, r4
 8014f4e:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8014f52:	1c66      	adds	r6, r4, #1
 8014f54:	b2bf      	uxth	r7, r7
 8014f56:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8014f5a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8014f5e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8014f62:	ea46 0c0c 	orr.w	ip, r6, ip
 8014f66:	1c7e      	adds	r6, r7, #1
 8014f68:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8014f6c:	0976      	lsrs	r6, r6, #5
 8014f6e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8014f72:	ea4c 0c06 	orr.w	ip, ip, r6
 8014f76:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8014f7a:	e7ba      	b.n	8014ef2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8014f7c:	b007      	add	sp, #28
 8014f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014f84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f88:	b085      	sub	sp, #20
 8014f8a:	468b      	mov	fp, r1
 8014f8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014f90:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014f92:	9203      	str	r2, [sp, #12]
 8014f94:	6841      	ldr	r1, [r0, #4]
 8014f96:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014f9a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8014f9e:	fb01 2404 	mla	r4, r1, r4, r2
 8014fa2:	6802      	ldr	r2, [r0, #0]
 8014fa4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8014fa8:	f8d8 2000 	ldr.w	r2, [r8]
 8014fac:	9201      	str	r2, [sp, #4]
 8014fae:	f1bb 0f00 	cmp.w	fp, #0
 8014fb2:	dc03      	bgt.n	8014fbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8014fb4:	9a03      	ldr	r2, [sp, #12]
 8014fb6:	2a00      	cmp	r2, #0
 8014fb8:	f340 814f 	ble.w	801525a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8014fbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014fbe:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8014fc2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8014fc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014fc8:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8014fcc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	dd0e      	ble.n	8014ff2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8014fd4:	1408      	asrs	r0, r1, #16
 8014fd6:	d405      	bmi.n	8014fe4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8014fd8:	42b8      	cmp	r0, r7
 8014fda:	da03      	bge.n	8014fe4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8014fdc:	1410      	asrs	r0, r2, #16
 8014fde:	d401      	bmi.n	8014fe4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8014fe0:	42b0      	cmp	r0, r6
 8014fe2:	db07      	blt.n	8014ff4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014fe4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014fe6:	3b01      	subs	r3, #1
 8014fe8:	3402      	adds	r4, #2
 8014fea:	4401      	add	r1, r0
 8014fec:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014fee:	4402      	add	r2, r0
 8014ff0:	e7ee      	b.n	8014fd0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8014ff2:	d017      	beq.n	8015024 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8014ff4:	1e58      	subs	r0, r3, #1
 8014ff6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014ff8:	fb05 1500 	mla	r5, r5, r0, r1
 8014ffc:	142d      	asrs	r5, r5, #16
 8014ffe:	d409      	bmi.n	8015014 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015000:	42bd      	cmp	r5, r7
 8015002:	da07      	bge.n	8015014 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015004:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015006:	fb05 2000 	mla	r0, r5, r0, r2
 801500a:	1400      	asrs	r0, r0, #16
 801500c:	d402      	bmi.n	8015014 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801500e:	42b0      	cmp	r0, r6
 8015010:	f2c0 80ba 	blt.w	8015188 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8015014:	2600      	movs	r6, #0
 8015016:	1998      	adds	r0, r3, r6
 8015018:	2800      	cmp	r0, #0
 801501a:	dc3e      	bgt.n	801509a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801501c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015020:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015024:	f1bb 0f00 	cmp.w	fp, #0
 8015028:	f340 8117 	ble.w	801525a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801502c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015032:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015036:	f1bb 0b01 	subs.w	fp, fp, #1
 801503a:	eeb0 6a62 	vmov.f32	s12, s5
 801503e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015042:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015046:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801504a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801504e:	eeb0 6a43 	vmov.f32	s12, s6
 8015052:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015056:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801505a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801505e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015062:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015066:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801506a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801506e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015072:	ee12 2a90 	vmov	r2, s5
 8015076:	eef0 2a47 	vmov.f32	s5, s14
 801507a:	fb92 f3f3 	sdiv	r3, r2, r3
 801507e:	ee13 2a10 	vmov	r2, s6
 8015082:	9311      	str	r3, [sp, #68]	; 0x44
 8015084:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015086:	eeb0 3a67 	vmov.f32	s6, s15
 801508a:	fb92 f3f3 	sdiv	r3, r2, r3
 801508e:	9a03      	ldr	r2, [sp, #12]
 8015090:	9312      	str	r3, [sp, #72]	; 0x48
 8015092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015094:	bf08      	it	eq
 8015096:	4613      	moveq	r3, r2
 8015098:	e789      	b.n	8014fae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801509a:	140f      	asrs	r7, r1, #16
 801509c:	d424      	bmi.n	80150e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801509e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80150a2:	42bd      	cmp	r5, r7
 80150a4:	dd20      	ble.n	80150e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80150a6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80150aa:	d41d      	bmi.n	80150e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80150ac:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80150b0:	4560      	cmp	r0, ip
 80150b2:	dd19      	ble.n	80150e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80150b4:	b22d      	sxth	r5, r5
 80150b6:	9801      	ldr	r0, [sp, #4]
 80150b8:	fb0c 7505 	mla	r5, ip, r5, r7
 80150bc:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80150c0:	0e07      	lsrs	r7, r0, #24
 80150c2:	2fff      	cmp	r7, #255	; 0xff
 80150c4:	d116      	bne.n	80150f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80150c6:	f06f 0501 	mvn.w	r5, #1
 80150ca:	fb05 f706 	mul.w	r7, r5, r6
 80150ce:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 80150d2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80150d6:	0945      	lsrs	r5, r0, #5
 80150d8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80150dc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80150e0:	ea4c 0505 	orr.w	r5, ip, r5
 80150e4:	4305      	orrs	r5, r0
 80150e6:	53e5      	strh	r5, [r4, r7]
 80150e8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80150ea:	3e01      	subs	r6, #1
 80150ec:	4401      	add	r1, r0
 80150ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 80150f0:	4402      	add	r2, r0
 80150f2:	e790      	b.n	8015016 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80150f4:	b2fd      	uxtb	r5, r7
 80150f6:	2f00      	cmp	r7, #0
 80150f8:	d0f6      	beq.n	80150e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80150fa:	f06f 0701 	mvn.w	r7, #1
 80150fe:	fa1f f985 	uxth.w	r9, r5
 8015102:	43ed      	mvns	r5, r5
 8015104:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8015108:	4377      	muls	r7, r6
 801510a:	fb1a fa09 	smulbb	sl, sl, r9
 801510e:	b2ed      	uxtb	r5, r5
 8015110:	f834 e007 	ldrh.w	lr, [r4, r7]
 8015114:	9702      	str	r7, [sp, #8]
 8015116:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801511a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801511e:	fb17 f709 	smulbb	r7, r7, r9
 8015122:	b2c0      	uxtb	r0, r0
 8015124:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015128:	fb10 f009 	smulbb	r0, r0, r9
 801512c:	fb0c 7c05 	mla	ip, ip, r5, r7
 8015130:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8015134:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8015138:	fa1f fc8c 	uxth.w	ip, ip
 801513c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8015140:	fa5f fe8e 	uxtb.w	lr, lr
 8015144:	fb07 a705 	mla	r7, r7, r5, sl
 8015148:	fb0e 0005 	mla	r0, lr, r5, r0
 801514c:	f10c 0501 	add.w	r5, ip, #1
 8015150:	b2bf      	uxth	r7, r7
 8015152:	b280      	uxth	r0, r0
 8015154:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8015158:	f100 0a01 	add.w	sl, r0, #1
 801515c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8015160:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8015164:	9802      	ldr	r0, [sp, #8]
 8015166:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801516a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801516e:	f107 0a01 	add.w	sl, r7, #1
 8015172:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8015176:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801517a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801517e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8015182:	f824 c000 	strh.w	ip, [r4, r0]
 8015186:	e7af      	b.n	80150e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015188:	f04f 0e00 	mov.w	lr, #0
 801518c:	eba3 000e 	sub.w	r0, r3, lr
 8015190:	2800      	cmp	r0, #0
 8015192:	f77f af43 	ble.w	801501c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8015196:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801519a:	140d      	asrs	r5, r1, #16
 801519c:	1410      	asrs	r0, r2, #16
 801519e:	fb06 5000 	mla	r0, r6, r0, r5
 80151a2:	9d01      	ldr	r5, [sp, #4]
 80151a4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 80151a8:	0e2e      	lsrs	r6, r5, #24
 80151aa:	2eff      	cmp	r6, #255	; 0xff
 80151ac:	d112      	bne.n	80151d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80151ae:	482c      	ldr	r0, [pc, #176]	; (8015260 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 80151b0:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 80151b4:	0968      	lsrs	r0, r5, #5
 80151b6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80151ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80151be:	4330      	orrs	r0, r6
 80151c0:	4328      	orrs	r0, r5
 80151c2:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 80151c6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80151c8:	f10e 0e01 	add.w	lr, lr, #1
 80151cc:	4401      	add	r1, r0
 80151ce:	9812      	ldr	r0, [sp, #72]	; 0x48
 80151d0:	4402      	add	r2, r0
 80151d2:	e7db      	b.n	801518c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80151d4:	b2f0      	uxtb	r0, r6
 80151d6:	2e00      	cmp	r6, #0
 80151d8:	d0f5      	beq.n	80151c6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80151da:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80151de:	fa1f f980 	uxth.w	r9, r0
 80151e2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80151e6:	43c0      	mvns	r0, r0
 80151e8:	ea4f 272c 	mov.w	r7, ip, asr #8
 80151ec:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80151f0:	fb16 f609 	smulbb	r6, r6, r9
 80151f4:	b2c0      	uxtb	r0, r0
 80151f6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80151fa:	b2ed      	uxtb	r5, r5
 80151fc:	fb1a fa09 	smulbb	sl, sl, r9
 8015200:	fb07 6700 	mla	r7, r7, r0, r6
 8015204:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8015208:	fb15 f509 	smulbb	r5, r5, r9
 801520c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8015210:	b2bf      	uxth	r7, r7
 8015212:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8015216:	fa5f fc8c 	uxtb.w	ip, ip
 801521a:	fb06 a600 	mla	r6, r6, r0, sl
 801521e:	fb0c 5500 	mla	r5, ip, r0, r5
 8015222:	1c78      	adds	r0, r7, #1
 8015224:	b2b6      	uxth	r6, r6
 8015226:	b2ad      	uxth	r5, r5
 8015228:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801522c:	f105 0a01 	add.w	sl, r5, #1
 8015230:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8015234:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8015238:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801523c:	ea4a 0707 	orr.w	r7, sl, r7
 8015240:	f106 0a01 	add.w	sl, r6, #1
 8015244:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8015248:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801524c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8015250:	ea47 070a 	orr.w	r7, r7, sl
 8015254:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8015258:	e7b5      	b.n	80151c6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801525a:	b005      	add	sp, #20
 801525c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015260:	fffff800 	.word	0xfffff800

08015264 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015268:	b087      	sub	sp, #28
 801526a:	468b      	mov	fp, r1
 801526c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015270:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015272:	9203      	str	r2, [sp, #12]
 8015274:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8015278:	6841      	ldr	r1, [r0, #4]
 801527a:	9204      	str	r2, [sp, #16]
 801527c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8015280:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8015284:	fb01 2404 	mla	r4, r1, r4, r2
 8015288:	6802      	ldr	r2, [r0, #0]
 801528a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801528e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8015292:	3201      	adds	r2, #1
 8015294:	f022 0201 	bic.w	r2, r2, #1
 8015298:	9200      	str	r2, [sp, #0]
 801529a:	f8d9 2000 	ldr.w	r2, [r9]
 801529e:	9201      	str	r2, [sp, #4]
 80152a0:	f1bb 0f00 	cmp.w	fp, #0
 80152a4:	dc03      	bgt.n	80152ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80152a6:	9a03      	ldr	r2, [sp, #12]
 80152a8:	2a00      	cmp	r2, #0
 80152aa:	f340 816a 	ble.w	8015582 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80152ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80152b0:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 80152b4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80152b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80152ba:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 80152be:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	dd0e      	ble.n	80152e4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80152c6:	1402      	asrs	r2, r0, #16
 80152c8:	d405      	bmi.n	80152d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80152ca:	42ba      	cmp	r2, r7
 80152cc:	da03      	bge.n	80152d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80152ce:	140a      	asrs	r2, r1, #16
 80152d0:	d401      	bmi.n	80152d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80152d2:	42b2      	cmp	r2, r6
 80152d4:	db07      	blt.n	80152e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80152d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80152d8:	3b01      	subs	r3, #1
 80152da:	3402      	adds	r4, #2
 80152dc:	4410      	add	r0, r2
 80152de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80152e0:	4411      	add	r1, r2
 80152e2:	e7ee      	b.n	80152c2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80152e4:	d017      	beq.n	8015316 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80152e6:	1e5a      	subs	r2, r3, #1
 80152e8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80152ea:	fb05 0502 	mla	r5, r5, r2, r0
 80152ee:	142d      	asrs	r5, r5, #16
 80152f0:	d409      	bmi.n	8015306 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80152f2:	42bd      	cmp	r5, r7
 80152f4:	da07      	bge.n	8015306 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80152f6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80152f8:	fb05 1202 	mla	r2, r5, r2, r1
 80152fc:	1412      	asrs	r2, r2, #16
 80152fe:	d402      	bmi.n	8015306 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8015300:	42b2      	cmp	r2, r6
 8015302:	f2c0 80c8 	blt.w	8015496 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8015306:	2700      	movs	r7, #0
 8015308:	19da      	adds	r2, r3, r7
 801530a:	2a00      	cmp	r2, #0
 801530c:	dc3e      	bgt.n	801538c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801530e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015312:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015316:	f1bb 0f00 	cmp.w	fp, #0
 801531a:	f340 8132 	ble.w	8015582 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801531e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015322:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015324:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015328:	f1bb 0b01 	subs.w	fp, fp, #1
 801532c:	eeb0 6a62 	vmov.f32	s12, s5
 8015330:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015334:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015338:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801533c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8015340:	eeb0 6a43 	vmov.f32	s12, s6
 8015344:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015348:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801534c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015350:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015354:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015358:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801535c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015360:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015364:	ee12 2a90 	vmov	r2, s5
 8015368:	eef0 2a47 	vmov.f32	s5, s14
 801536c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015370:	ee13 2a10 	vmov	r2, s6
 8015374:	9313      	str	r3, [sp, #76]	; 0x4c
 8015376:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015378:	eeb0 3a67 	vmov.f32	s6, s15
 801537c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015380:	9a03      	ldr	r2, [sp, #12]
 8015382:	9314      	str	r3, [sp, #80]	; 0x50
 8015384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015386:	bf08      	it	eq
 8015388:	4613      	moveq	r3, r2
 801538a:	e789      	b.n	80152a0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801538c:	1405      	asrs	r5, r0, #16
 801538e:	d436      	bmi.n	80153fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8015390:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8015394:	42aa      	cmp	r2, r5
 8015396:	dd32      	ble.n	80153fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8015398:	140e      	asrs	r6, r1, #16
 801539a:	d430      	bmi.n	80153fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801539c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80153a0:	42b2      	cmp	r2, r6
 80153a2:	dd2c      	ble.n	80153fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80153a4:	9a00      	ldr	r2, [sp, #0]
 80153a6:	fb06 5502 	mla	r5, r6, r2, r5
 80153aa:	9e01      	ldr	r6, [sp, #4]
 80153ac:	086a      	lsrs	r2, r5, #1
 80153ae:	5cb2      	ldrb	r2, [r6, r2]
 80153b0:	07ee      	lsls	r6, r5, #31
 80153b2:	bf54      	ite	pl
 80153b4:	f002 020f 	andpl.w	r2, r2, #15
 80153b8:	1112      	asrmi	r2, r2, #4
 80153ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80153be:	b2d2      	uxtb	r2, r2
 80153c0:	b1ea      	cbz	r2, 80153fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80153c2:	9d04      	ldr	r5, [sp, #16]
 80153c4:	436a      	muls	r2, r5
 80153c6:	1c55      	adds	r5, r2, #1
 80153c8:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80153cc:	4d6e      	ldr	r5, [pc, #440]	; (8015588 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80153ce:	1212      	asrs	r2, r2, #8
 80153d0:	682d      	ldr	r5, [r5, #0]
 80153d2:	2aff      	cmp	r2, #255	; 0xff
 80153d4:	ea4f 2615 	mov.w	r6, r5, lsr #8
 80153d8:	9605      	str	r6, [sp, #20]
 80153da:	d116      	bne.n	801540a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80153dc:	f06f 0201 	mvn.w	r2, #1
 80153e0:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80153e4:	fb02 fc07 	mul.w	ip, r2, r7
 80153e8:	096a      	lsrs	r2, r5, #5
 80153ea:	f026 0607 	bic.w	r6, r6, #7
 80153ee:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80153f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80153f6:	4316      	orrs	r6, r2
 80153f8:	432e      	orrs	r6, r5
 80153fa:	f824 600c 	strh.w	r6, [r4, ip]
 80153fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015400:	3f01      	subs	r7, #1
 8015402:	4410      	add	r0, r2
 8015404:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015406:	4411      	add	r1, r2
 8015408:	e77e      	b.n	8015308 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801540a:	f06f 0601 	mvn.w	r6, #1
 801540e:	fa1f fa82 	uxth.w	sl, r2
 8015412:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8015416:	43d2      	mvns	r2, r2
 8015418:	437e      	muls	r6, r7
 801541a:	b2ed      	uxtb	r5, r5
 801541c:	fb1c fc0a 	smulbb	ip, ip, sl
 8015420:	b2d2      	uxtb	r2, r2
 8015422:	f834 8006 	ldrh.w	r8, [r4, r6]
 8015426:	fb15 f50a 	smulbb	r5, r5, sl
 801542a:	9602      	str	r6, [sp, #8]
 801542c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8015430:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8015434:	fb16 f60a 	smulbb	r6, r6, sl
 8015438:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801543c:	fb0e ce02 	mla	lr, lr, r2, ip
 8015440:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8015444:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8015448:	fa1f fe8e 	uxth.w	lr, lr
 801544c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8015450:	fa5f f888 	uxtb.w	r8, r8
 8015454:	fb0c 6c02 	mla	ip, ip, r2, r6
 8015458:	fb08 5502 	mla	r5, r8, r2, r5
 801545c:	f10e 0201 	add.w	r2, lr, #1
 8015460:	fa1f fc8c 	uxth.w	ip, ip
 8015464:	b2ad      	uxth	r5, r5
 8015466:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801546a:	9a02      	ldr	r2, [sp, #8]
 801546c:	1c6e      	adds	r6, r5, #1
 801546e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8015472:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8015476:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801547a:	ea46 0e0e 	orr.w	lr, r6, lr
 801547e:	f10c 0601 	add.w	r6, ip, #1
 8015482:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8015486:	0976      	lsrs	r6, r6, #5
 8015488:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801548c:	ea4e 0e06 	orr.w	lr, lr, r6
 8015490:	f824 e002 	strh.w	lr, [r4, r2]
 8015494:	e7b3      	b.n	80153fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8015496:	f04f 0800 	mov.w	r8, #0
 801549a:	eba3 0208 	sub.w	r2, r3, r8
 801549e:	2a00      	cmp	r2, #0
 80154a0:	f77f af35 	ble.w	801530e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80154a4:	1402      	asrs	r2, r0, #16
 80154a6:	9e00      	ldr	r6, [sp, #0]
 80154a8:	140d      	asrs	r5, r1, #16
 80154aa:	fb06 2505 	mla	r5, r6, r5, r2
 80154ae:	9e01      	ldr	r6, [sp, #4]
 80154b0:	086a      	lsrs	r2, r5, #1
 80154b2:	07ed      	lsls	r5, r5, #31
 80154b4:	5cb2      	ldrb	r2, [r6, r2]
 80154b6:	bf54      	ite	pl
 80154b8:	f002 020f 	andpl.w	r2, r2, #15
 80154bc:	1112      	asrmi	r2, r2, #4
 80154be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80154c2:	b2d2      	uxtb	r2, r2
 80154c4:	b1c2      	cbz	r2, 80154f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80154c6:	9d04      	ldr	r5, [sp, #16]
 80154c8:	436a      	muls	r2, r5
 80154ca:	1c55      	adds	r5, r2, #1
 80154cc:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80154d0:	4d2d      	ldr	r5, [pc, #180]	; (8015588 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80154d2:	1212      	asrs	r2, r2, #8
 80154d4:	682e      	ldr	r6, [r5, #0]
 80154d6:	2aff      	cmp	r2, #255	; 0xff
 80154d8:	ea4f 2516 	mov.w	r5, r6, lsr #8
 80154dc:	d113      	bne.n	8015506 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80154de:	0972      	lsrs	r2, r6, #5
 80154e0:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 80154e4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80154e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80154ec:	f025 0507 	bic.w	r5, r5, #7
 80154f0:	4315      	orrs	r5, r2
 80154f2:	4335      	orrs	r5, r6
 80154f4:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 80154f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80154fa:	f108 0801 	add.w	r8, r8, #1
 80154fe:	4410      	add	r0, r2
 8015500:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015502:	4411      	add	r1, r2
 8015504:	e7c9      	b.n	801549a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8015506:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801550a:	fa1f fa82 	uxth.w	sl, r2
 801550e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8015512:	43d2      	mvns	r2, r2
 8015514:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8015518:	fb17 f70a 	smulbb	r7, r7, sl
 801551c:	b2d2      	uxtb	r2, r2
 801551e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015522:	b2f6      	uxtb	r6, r6
 8015524:	b2ed      	uxtb	r5, r5
 8015526:	fb0c 7c02 	mla	ip, ip, r2, r7
 801552a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801552e:	fb16 f60a 	smulbb	r6, r6, sl
 8015532:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8015536:	fa1f fc8c 	uxth.w	ip, ip
 801553a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801553e:	fb15 f50a 	smulbb	r5, r5, sl
 8015542:	fa5f fe8e 	uxtb.w	lr, lr
 8015546:	fb0e 6602 	mla	r6, lr, r2, r6
 801554a:	fb07 5702 	mla	r7, r7, r2, r5
 801554e:	f10c 0201 	add.w	r2, ip, #1
 8015552:	b2b6      	uxth	r6, r6
 8015554:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8015558:	1c75      	adds	r5, r6, #1
 801555a:	b2bf      	uxth	r7, r7
 801555c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8015560:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8015564:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8015568:	ea45 0c0c 	orr.w	ip, r5, ip
 801556c:	1c7d      	adds	r5, r7, #1
 801556e:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8015572:	096d      	lsrs	r5, r5, #5
 8015574:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8015578:	ea4c 0c05 	orr.w	ip, ip, r5
 801557c:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8015580:	e7ba      	b.n	80154f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8015582:	b007      	add	sp, #28
 8015584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015588:	20009f9c 	.word	0x20009f9c

0801558c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015590:	b087      	sub	sp, #28
 8015592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015596:	f8df 8308 	ldr.w	r8, [pc, #776]	; 80158a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801559a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801559c:	9101      	str	r1, [sp, #4]
 801559e:	9205      	str	r2, [sp, #20]
 80155a0:	6841      	ldr	r1, [r0, #4]
 80155a2:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80155a6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80155aa:	fb01 2404 	mla	r4, r1, r4, r2
 80155ae:	6802      	ldr	r2, [r0, #0]
 80155b0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80155b4:	f8db 2008 	ldr.w	r2, [fp, #8]
 80155b8:	3201      	adds	r2, #1
 80155ba:	f022 0201 	bic.w	r2, r2, #1
 80155be:	9202      	str	r2, [sp, #8]
 80155c0:	f8db 2000 	ldr.w	r2, [fp]
 80155c4:	9203      	str	r2, [sp, #12]
 80155c6:	9a01      	ldr	r2, [sp, #4]
 80155c8:	2a00      	cmp	r2, #0
 80155ca:	dc03      	bgt.n	80155d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80155cc:	9a05      	ldr	r2, [sp, #20]
 80155ce:	2a00      	cmp	r2, #0
 80155d0:	f340 8162 	ble.w	8015898 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80155d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80155d6:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 80155da:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80155de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80155e0:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 80155e4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	dd0e      	ble.n	801560a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80155ec:	1402      	asrs	r2, r0, #16
 80155ee:	d405      	bmi.n	80155fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80155f0:	42ba      	cmp	r2, r7
 80155f2:	da03      	bge.n	80155fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80155f4:	140a      	asrs	r2, r1, #16
 80155f6:	d401      	bmi.n	80155fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80155f8:	42b2      	cmp	r2, r6
 80155fa:	db07      	blt.n	801560c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80155fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80155fe:	3b01      	subs	r3, #1
 8015600:	3402      	adds	r4, #2
 8015602:	4410      	add	r0, r2
 8015604:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015606:	4411      	add	r1, r2
 8015608:	e7ee      	b.n	80155e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801560a:	d017      	beq.n	801563c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801560c:	1e5a      	subs	r2, r3, #1
 801560e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015610:	fb05 0502 	mla	r5, r5, r2, r0
 8015614:	142d      	asrs	r5, r5, #16
 8015616:	d409      	bmi.n	801562c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8015618:	42bd      	cmp	r5, r7
 801561a:	da07      	bge.n	801562c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801561c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801561e:	fb05 1202 	mla	r2, r5, r2, r1
 8015622:	1412      	asrs	r2, r2, #16
 8015624:	d402      	bmi.n	801562c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8015626:	42b2      	cmp	r2, r6
 8015628:	f2c0 80c3 	blt.w	80157b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801562c:	2500      	movs	r5, #0
 801562e:	195a      	adds	r2, r3, r5
 8015630:	2a00      	cmp	r2, #0
 8015632:	dc3f      	bgt.n	80156b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8015634:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015638:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801563c:	9b01      	ldr	r3, [sp, #4]
 801563e:	2b00      	cmp	r3, #0
 8015640:	f340 812a 	ble.w	8015898 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8015644:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015648:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801564a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801564e:	eeb0 6a62 	vmov.f32	s12, s5
 8015652:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015656:	ee31 1a05 	vadd.f32	s2, s2, s10
 801565a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801565e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8015662:	eeb0 6a43 	vmov.f32	s12, s6
 8015666:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801566a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801566e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015672:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015676:	ee77 2a62 	vsub.f32	s5, s14, s5
 801567a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801567e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015682:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015686:	ee12 2a90 	vmov	r2, s5
 801568a:	eef0 2a47 	vmov.f32	s5, s14
 801568e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015692:	ee13 2a10 	vmov	r2, s6
 8015696:	9313      	str	r3, [sp, #76]	; 0x4c
 8015698:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801569a:	eeb0 3a67 	vmov.f32	s6, s15
 801569e:	fb92 f3f3 	sdiv	r3, r2, r3
 80156a2:	9314      	str	r3, [sp, #80]	; 0x50
 80156a4:	9b01      	ldr	r3, [sp, #4]
 80156a6:	9a05      	ldr	r2, [sp, #20]
 80156a8:	3b01      	subs	r3, #1
 80156aa:	9301      	str	r3, [sp, #4]
 80156ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80156ae:	bf08      	it	eq
 80156b0:	4613      	moveq	r3, r2
 80156b2:	e788      	b.n	80155c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80156b4:	1406      	asrs	r6, r0, #16
 80156b6:	d42c      	bmi.n	8015712 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80156b8:	f8db 2008 	ldr.w	r2, [fp, #8]
 80156bc:	42b2      	cmp	r2, r6
 80156be:	dd28      	ble.n	8015712 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80156c0:	140f      	asrs	r7, r1, #16
 80156c2:	d426      	bmi.n	8015712 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80156c4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80156c8:	42ba      	cmp	r2, r7
 80156ca:	dd22      	ble.n	8015712 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80156cc:	9a02      	ldr	r2, [sp, #8]
 80156ce:	fb07 6602 	mla	r6, r7, r2, r6
 80156d2:	9f03      	ldr	r7, [sp, #12]
 80156d4:	0872      	lsrs	r2, r6, #1
 80156d6:	07f6      	lsls	r6, r6, #31
 80156d8:	5cba      	ldrb	r2, [r7, r2]
 80156da:	bf54      	ite	pl
 80156dc:	f002 020f 	andpl.w	r2, r2, #15
 80156e0:	1112      	asrmi	r2, r2, #4
 80156e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80156e6:	b2d2      	uxtb	r2, r2
 80156e8:	2aff      	cmp	r2, #255	; 0xff
 80156ea:	d118      	bne.n	801571e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80156ec:	f06f 0601 	mvn.w	r6, #1
 80156f0:	f8d8 2000 	ldr.w	r2, [r8]
 80156f4:	fb06 f705 	mul.w	r7, r6, r5
 80156f8:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 80156fc:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8015700:	0956      	lsrs	r6, r2, #5
 8015702:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8015706:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801570a:	ea4c 0606 	orr.w	r6, ip, r6
 801570e:	4316      	orrs	r6, r2
 8015710:	53e6      	strh	r6, [r4, r7]
 8015712:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015714:	3d01      	subs	r5, #1
 8015716:	4410      	add	r0, r2
 8015718:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801571a:	4411      	add	r1, r2
 801571c:	e787      	b.n	801562e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801571e:	2a00      	cmp	r2, #0
 8015720:	d0f7      	beq.n	8015712 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8015722:	f06f 0601 	mvn.w	r6, #1
 8015726:	f8d8 c000 	ldr.w	ip, [r8]
 801572a:	fa1f f982 	uxth.w	r9, r2
 801572e:	43d2      	mvns	r2, r2
 8015730:	436e      	muls	r6, r5
 8015732:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8015736:	b2d2      	uxtb	r2, r2
 8015738:	f834 e006 	ldrh.w	lr, [r4, r6]
 801573c:	fb1a fa09 	smulbb	sl, sl, r9
 8015740:	9604      	str	r6, [sp, #16]
 8015742:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8015746:	ea4f 272e 	mov.w	r7, lr, asr #8
 801574a:	fb16 f609 	smulbb	r6, r6, r9
 801574e:	fa5f fc8c 	uxtb.w	ip, ip
 8015752:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8015756:	fb1c fc09 	smulbb	ip, ip, r9
 801575a:	fb07 6702 	mla	r7, r7, r2, r6
 801575e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8015762:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8015766:	b2bf      	uxth	r7, r7
 8015768:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801576c:	fa5f fe8e 	uxtb.w	lr, lr
 8015770:	fb06 a602 	mla	r6, r6, r2, sl
 8015774:	fb0e cc02 	mla	ip, lr, r2, ip
 8015778:	1c7a      	adds	r2, r7, #1
 801577a:	b2b6      	uxth	r6, r6
 801577c:	fa1f fc8c 	uxth.w	ip, ip
 8015780:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8015784:	9a04      	ldr	r2, [sp, #16]
 8015786:	f10c 0a01 	add.w	sl, ip, #1
 801578a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801578e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8015792:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8015796:	ea4a 0707 	orr.w	r7, sl, r7
 801579a:	f106 0a01 	add.w	sl, r6, #1
 801579e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80157a2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80157a6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80157aa:	ea47 070a 	orr.w	r7, r7, sl
 80157ae:	52a7      	strh	r7, [r4, r2]
 80157b0:	e7af      	b.n	8015712 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80157b2:	f04f 0e00 	mov.w	lr, #0
 80157b6:	eba3 020e 	sub.w	r2, r3, lr
 80157ba:	2a00      	cmp	r2, #0
 80157bc:	f77f af3a 	ble.w	8015634 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80157c0:	1402      	asrs	r2, r0, #16
 80157c2:	9e02      	ldr	r6, [sp, #8]
 80157c4:	140d      	asrs	r5, r1, #16
 80157c6:	fb06 2505 	mla	r5, r6, r5, r2
 80157ca:	9e03      	ldr	r6, [sp, #12]
 80157cc:	086a      	lsrs	r2, r5, #1
 80157ce:	07ed      	lsls	r5, r5, #31
 80157d0:	5cb2      	ldrb	r2, [r6, r2]
 80157d2:	bf54      	ite	pl
 80157d4:	f002 020f 	andpl.w	r2, r2, #15
 80157d8:	1112      	asrmi	r2, r2, #4
 80157da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80157de:	b2d2      	uxtb	r2, r2
 80157e0:	2aff      	cmp	r2, #255	; 0xff
 80157e2:	d115      	bne.n	8015810 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80157e4:	f8d8 5000 	ldr.w	r5, [r8]
 80157e8:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 80157ec:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 80157f0:	096a      	lsrs	r2, r5, #5
 80157f2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80157f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80157fa:	4332      	orrs	r2, r6
 80157fc:	432a      	orrs	r2, r5
 80157fe:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8015802:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015804:	f10e 0e01 	add.w	lr, lr, #1
 8015808:	4410      	add	r0, r2
 801580a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801580c:	4411      	add	r1, r2
 801580e:	e7d2      	b.n	80157b6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8015810:	2a00      	cmp	r2, #0
 8015812:	d0f6      	beq.n	8015802 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015814:	f8d8 7000 	ldr.w	r7, [r8]
 8015818:	fa1f f982 	uxth.w	r9, r2
 801581c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8015820:	43d2      	mvns	r2, r2
 8015822:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8015826:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801582a:	ea4f 262c 	mov.w	r6, ip, asr #8
 801582e:	fb15 f509 	smulbb	r5, r5, r9
 8015832:	b2d2      	uxtb	r2, r2
 8015834:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8015838:	b2ff      	uxtb	r7, r7
 801583a:	fb1a fa09 	smulbb	sl, sl, r9
 801583e:	fb06 5602 	mla	r6, r6, r2, r5
 8015842:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8015846:	fb17 f709 	smulbb	r7, r7, r9
 801584a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801584e:	b2b6      	uxth	r6, r6
 8015850:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8015854:	fa5f fc8c 	uxtb.w	ip, ip
 8015858:	fb05 a502 	mla	r5, r5, r2, sl
 801585c:	fb0c 7702 	mla	r7, ip, r2, r7
 8015860:	1c72      	adds	r2, r6, #1
 8015862:	b2ad      	uxth	r5, r5
 8015864:	b2bf      	uxth	r7, r7
 8015866:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801586a:	f107 0a01 	add.w	sl, r7, #1
 801586e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8015872:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8015876:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801587a:	ea4a 0606 	orr.w	r6, sl, r6
 801587e:	f105 0a01 	add.w	sl, r5, #1
 8015882:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8015886:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801588a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801588e:	ea46 060a 	orr.w	r6, r6, sl
 8015892:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8015896:	e7b4      	b.n	8015802 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015898:	b007      	add	sp, #28
 801589a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801589e:	bf00      	nop
 80158a0:	20009f9c 	.word	0x20009f9c

080158a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80158a4:	4770      	bx	lr

080158a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80158a6:	4770      	bx	lr

080158a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80158a8:	4770      	bx	lr

080158aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80158aa:	4770      	bx	lr

080158ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80158ac:	4770      	bx	lr

080158ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80158ae:	4770      	bx	lr

080158b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80158b0:	4770      	bx	lr

080158b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80158b2:	4770      	bx	lr

080158b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80158b4:	4770      	bx	lr

080158b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80158b6:	4770      	bx	lr

080158b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80158b8:	4770      	bx	lr

080158ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80158ba:	4770      	bx	lr

080158bc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80158bc:	4770      	bx	lr

080158be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80158be:	4770      	bx	lr

080158c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80158c0:	4770      	bx	lr

080158c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 80158c2:	4770      	bx	lr

080158c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80158c4:	4770      	bx	lr

080158c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80158c6:	4770      	bx	lr

080158c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80158c8:	4770      	bx	lr

080158ca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80158ca:	4770      	bx	lr

080158cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80158cc:	4770      	bx	lr

080158ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80158ce:	4770      	bx	lr

080158d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80158d0:	4770      	bx	lr

080158d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80158d2:	4770      	bx	lr

080158d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80158d4:	4770      	bx	lr

080158d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80158d6:	4770      	bx	lr

080158d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80158d8:	4770      	bx	lr

080158da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80158da:	4770      	bx	lr

080158dc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80158dc:	b508      	push	{r3, lr}
 80158de:	4b06      	ldr	r3, [pc, #24]	; (80158f8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 80158e0:	8818      	ldrh	r0, [r3, #0]
 80158e2:	b928      	cbnz	r0, 80158f0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 80158e4:	4b05      	ldr	r3, [pc, #20]	; (80158fc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 80158e6:	2150      	movs	r1, #80	; 0x50
 80158e8:	4a05      	ldr	r2, [pc, #20]	; (8015900 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 80158ea:	4806      	ldr	r0, [pc, #24]	; (8015904 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 80158ec:	f009 fbd4 	bl	801f098 <__assert_func>
 80158f0:	0040      	lsls	r0, r0, #1
 80158f2:	b280      	uxth	r0, r0
 80158f4:	bd08      	pop	{r3, pc}
 80158f6:	bf00      	nop
 80158f8:	20009f8e 	.word	0x20009f8e
 80158fc:	08023593 	.word	0x08023593
 8015900:	08023b8c 	.word	0x08023b8c
 8015904:	080235d5 	.word	0x080235d5

08015908 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8015908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801590c:	b08b      	sub	sp, #44	; 0x2c
 801590e:	460f      	mov	r7, r1
 8015910:	4616      	mov	r6, r2
 8015912:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8015916:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801591a:	f1bb 0f00 	cmp.w	fp, #0
 801591e:	d049      	beq.n	80159b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8015920:	6810      	ldr	r0, [r2, #0]
 8015922:	ad06      	add	r5, sp, #24
 8015924:	6851      	ldr	r1, [r2, #4]
 8015926:	c503      	stmia	r5!, {r0, r1}
 8015928:	6818      	ldr	r0, [r3, #0]
 801592a:	ad08      	add	r5, sp, #32
 801592c:	6859      	ldr	r1, [r3, #4]
 801592e:	c503      	stmia	r5!, {r0, r1}
 8015930:	a806      	add	r0, sp, #24
 8015932:	f7fa f9b3 	bl	800fc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015936:	4631      	mov	r1, r6
 8015938:	a808      	add	r0, sp, #32
 801593a:	f7fa f9d7 	bl	800fcec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801593e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015942:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015946:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801594a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801594e:	fb16 2103 	smlabb	r1, r6, r3, r2
 8015952:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8015956:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801595a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801595e:	4f5f      	ldr	r7, [pc, #380]	; (8015adc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8015960:	440a      	add	r2, r1
 8015962:	6838      	ldr	r0, [r7, #0]
 8015964:	46b9      	mov	r9, r7
 8015966:	f8ad 2020 	strh.w	r2, [sp, #32]
 801596a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801596e:	4413      	add	r3, r2
 8015970:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015974:	6803      	ldr	r3, [r0, #0]
 8015976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015978:	4798      	blx	r3
 801597a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801597e:	d01c      	beq.n	80159ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8015980:	f010 0f04 	tst.w	r0, #4
 8015984:	d01d      	beq.n	80159c2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8015986:	f8d9 0000 	ldr.w	r0, [r9]
 801598a:	2700      	movs	r7, #0
 801598c:	b2ad      	uxth	r5, r5
 801598e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015992:	6801      	ldr	r1, [r0, #0]
 8015994:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015998:	f8cd b00c 	str.w	fp, [sp, #12]
 801599c:	9501      	str	r5, [sp, #4]
 801599e:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80159a2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80159a6:	9402      	str	r4, [sp, #8]
 80159a8:	fa1f f488 	uxth.w	r4, r8
 80159ac:	9400      	str	r4, [sp, #0]
 80159ae:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80159b0:	4631      	mov	r1, r6
 80159b2:	47a0      	blx	r4
 80159b4:	b00b      	add	sp, #44	; 0x2c
 80159b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ba:	b914      	cbnz	r4, 80159c2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80159bc:	f010 0f01 	tst.w	r0, #1
 80159c0:	e7e0      	b.n	8015984 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80159c2:	f8d9 0000 	ldr.w	r0, [r9]
 80159c6:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80159ca:	6803      	ldr	r3, [r0, #0]
 80159cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159ce:	4798      	blx	r3
 80159d0:	4b43      	ldr	r3, [pc, #268]	; (8015ae0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80159d2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80159d6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80159da:	881a      	ldrh	r2, [r3, #0]
 80159dc:	469a      	mov	sl, r3
 80159de:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80159e2:	fb05 f502 	mul.w	r5, r5, r2
 80159e6:	fb02 1404 	mla	r4, r2, r4, r1
 80159ea:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80159ee:	d059      	beq.n	8015aa4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 80159f0:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 80159f4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80159f8:	fa1f f28b 	uxth.w	r2, fp
 80159fc:	469e      	mov	lr, r3
 80159fe:	fa1f f989 	uxth.w	r9, r9
 8015a02:	42ac      	cmp	r4, r5
 8015a04:	d264      	bcs.n	8015ad0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8015a06:	eb04 0a07 	add.w	sl, r4, r7
 8015a0a:	4554      	cmp	r4, sl
 8015a0c:	d23d      	bcs.n	8015a8a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8015a0e:	8821      	ldrh	r1, [r4, #0]
 8015a10:	f836 3b02 	ldrh.w	r3, [r6], #2
 8015a14:	1208      	asrs	r0, r1, #8
 8015a16:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8015a1a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8015a1e:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8015a22:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015a26:	00c9      	lsls	r1, r1, #3
 8015a28:	fb10 f009 	smulbb	r0, r0, r9
 8015a2c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8015a30:	b2c9      	uxtb	r1, r1
 8015a32:	fb0c 0c02 	mla	ip, ip, r2, r0
 8015a36:	10d8      	asrs	r0, r3, #3
 8015a38:	fb1b fb09 	smulbb	fp, fp, r9
 8015a3c:	00db      	lsls	r3, r3, #3
 8015a3e:	fa1f fc8c 	uxth.w	ip, ip
 8015a42:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8015a46:	fb11 f109 	smulbb	r1, r1, r9
 8015a4a:	b2db      	uxtb	r3, r3
 8015a4c:	fb00 b002 	mla	r0, r0, r2, fp
 8015a50:	f10c 0b01 	add.w	fp, ip, #1
 8015a54:	fb03 1302 	mla	r3, r3, r2, r1
 8015a58:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8015a5c:	b29b      	uxth	r3, r3
 8015a5e:	b280      	uxth	r0, r0
 8015a60:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8015a64:	f103 0c01 	add.w	ip, r3, #1
 8015a68:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8015a6c:	1c43      	adds	r3, r0, #1
 8015a6e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8015a72:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8015a76:	0940      	lsrs	r0, r0, #5
 8015a78:	ea4c 0c0b 	orr.w	ip, ip, fp
 8015a7c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8015a80:	ea4c 0c00 	orr.w	ip, ip, r0
 8015a84:	f824 cb02 	strh.w	ip, [r4], #2
 8015a88:	e7bf      	b.n	8015a0a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8015a8a:	f8be 3000 	ldrh.w	r3, [lr]
 8015a8e:	eba3 0308 	sub.w	r3, r3, r8
 8015a92:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015a96:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015a9a:	eba3 0308 	sub.w	r3, r3, r8
 8015a9e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8015aa2:	e7ae      	b.n	8015a02 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8015aa4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8015aa8:	f8d9 0000 	ldr.w	r0, [r9]
 8015aac:	42ac      	cmp	r4, r5
 8015aae:	6803      	ldr	r3, [r0, #0]
 8015ab0:	d20e      	bcs.n	8015ad0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8015ab2:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8015ab6:	4632      	mov	r2, r6
 8015ab8:	463b      	mov	r3, r7
 8015aba:	4621      	mov	r1, r4
 8015abc:	47c0      	blx	r8
 8015abe:	f8ba 3000 	ldrh.w	r3, [sl]
 8015ac2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015ac6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015aca:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8015ace:	e7eb      	b.n	8015aa8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8015ad0:	4b02      	ldr	r3, [pc, #8]	; (8015adc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8015ad2:	6818      	ldr	r0, [r3, #0]
 8015ad4:	6803      	ldr	r3, [r0, #0]
 8015ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ad8:	4798      	blx	r3
 8015ada:	e76b      	b.n	80159b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8015adc:	20009f94 	.word	0x20009f94
 8015ae0:	20009f8e 	.word	0x20009f8e

08015ae4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8015ae4:	b510      	push	{r4, lr}
 8015ae6:	4604      	mov	r4, r0
 8015ae8:	2104      	movs	r1, #4
 8015aea:	f009 faa6 	bl	801f03a <_ZdlPvj>
 8015aee:	4620      	mov	r0, r4
 8015af0:	bd10      	pop	{r4, pc}

08015af2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8015af2:	b510      	push	{r4, lr}
 8015af4:	4604      	mov	r4, r0
 8015af6:	2104      	movs	r1, #4
 8015af8:	f009 fa9f 	bl	801f03a <_ZdlPvj>
 8015afc:	4620      	mov	r0, r4
 8015afe:	bd10      	pop	{r4, pc}

08015b00 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8015b00:	b510      	push	{r4, lr}
 8015b02:	4604      	mov	r4, r0
 8015b04:	2104      	movs	r1, #4
 8015b06:	f009 fa98 	bl	801f03a <_ZdlPvj>
 8015b0a:	4620      	mov	r0, r4
 8015b0c:	bd10      	pop	{r4, pc}

08015b0e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8015b0e:	b510      	push	{r4, lr}
 8015b10:	4604      	mov	r4, r0
 8015b12:	2104      	movs	r1, #4
 8015b14:	f009 fa91 	bl	801f03a <_ZdlPvj>
 8015b18:	4620      	mov	r0, r4
 8015b1a:	bd10      	pop	{r4, pc}

08015b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8015b1c:	b510      	push	{r4, lr}
 8015b1e:	4604      	mov	r4, r0
 8015b20:	2104      	movs	r1, #4
 8015b22:	f009 fa8a 	bl	801f03a <_ZdlPvj>
 8015b26:	4620      	mov	r0, r4
 8015b28:	bd10      	pop	{r4, pc}

08015b2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8015b2a:	b510      	push	{r4, lr}
 8015b2c:	4604      	mov	r4, r0
 8015b2e:	2104      	movs	r1, #4
 8015b30:	f009 fa83 	bl	801f03a <_ZdlPvj>
 8015b34:	4620      	mov	r0, r4
 8015b36:	bd10      	pop	{r4, pc}

08015b38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8015b38:	b510      	push	{r4, lr}
 8015b3a:	4604      	mov	r4, r0
 8015b3c:	2104      	movs	r1, #4
 8015b3e:	f009 fa7c 	bl	801f03a <_ZdlPvj>
 8015b42:	4620      	mov	r0, r4
 8015b44:	bd10      	pop	{r4, pc}

08015b46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8015b46:	b510      	push	{r4, lr}
 8015b48:	4604      	mov	r4, r0
 8015b4a:	2104      	movs	r1, #4
 8015b4c:	f009 fa75 	bl	801f03a <_ZdlPvj>
 8015b50:	4620      	mov	r0, r4
 8015b52:	bd10      	pop	{r4, pc}

08015b54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8015b54:	b510      	push	{r4, lr}
 8015b56:	4604      	mov	r4, r0
 8015b58:	2104      	movs	r1, #4
 8015b5a:	f009 fa6e 	bl	801f03a <_ZdlPvj>
 8015b5e:	4620      	mov	r0, r4
 8015b60:	bd10      	pop	{r4, pc}

08015b62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8015b62:	b510      	push	{r4, lr}
 8015b64:	4604      	mov	r4, r0
 8015b66:	2104      	movs	r1, #4
 8015b68:	f009 fa67 	bl	801f03a <_ZdlPvj>
 8015b6c:	4620      	mov	r0, r4
 8015b6e:	bd10      	pop	{r4, pc}

08015b70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8015b70:	b510      	push	{r4, lr}
 8015b72:	4604      	mov	r4, r0
 8015b74:	2104      	movs	r1, #4
 8015b76:	f009 fa60 	bl	801f03a <_ZdlPvj>
 8015b7a:	4620      	mov	r0, r4
 8015b7c:	bd10      	pop	{r4, pc}

08015b7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8015b7e:	b510      	push	{r4, lr}
 8015b80:	4604      	mov	r4, r0
 8015b82:	2104      	movs	r1, #4
 8015b84:	f009 fa59 	bl	801f03a <_ZdlPvj>
 8015b88:	4620      	mov	r0, r4
 8015b8a:	bd10      	pop	{r4, pc}

08015b8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8015b8c:	b510      	push	{r4, lr}
 8015b8e:	4604      	mov	r4, r0
 8015b90:	2104      	movs	r1, #4
 8015b92:	f009 fa52 	bl	801f03a <_ZdlPvj>
 8015b96:	4620      	mov	r0, r4
 8015b98:	bd10      	pop	{r4, pc}

08015b9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8015b9a:	b510      	push	{r4, lr}
 8015b9c:	4604      	mov	r4, r0
 8015b9e:	2104      	movs	r1, #4
 8015ba0:	f009 fa4b 	bl	801f03a <_ZdlPvj>
 8015ba4:	4620      	mov	r0, r4
 8015ba6:	bd10      	pop	{r4, pc}

08015ba8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8015ba8:	b510      	push	{r4, lr}
 8015baa:	4604      	mov	r4, r0
 8015bac:	2104      	movs	r1, #4
 8015bae:	f009 fa44 	bl	801f03a <_ZdlPvj>
 8015bb2:	4620      	mov	r0, r4
 8015bb4:	bd10      	pop	{r4, pc}

08015bb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8015bb6:	b510      	push	{r4, lr}
 8015bb8:	4604      	mov	r4, r0
 8015bba:	2104      	movs	r1, #4
 8015bbc:	f009 fa3d 	bl	801f03a <_ZdlPvj>
 8015bc0:	4620      	mov	r0, r4
 8015bc2:	bd10      	pop	{r4, pc}

08015bc4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8015bc4:	b510      	push	{r4, lr}
 8015bc6:	4604      	mov	r4, r0
 8015bc8:	2104      	movs	r1, #4
 8015bca:	f009 fa36 	bl	801f03a <_ZdlPvj>
 8015bce:	4620      	mov	r0, r4
 8015bd0:	bd10      	pop	{r4, pc}

08015bd2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8015bd2:	b510      	push	{r4, lr}
 8015bd4:	4604      	mov	r4, r0
 8015bd6:	2104      	movs	r1, #4
 8015bd8:	f009 fa2f 	bl	801f03a <_ZdlPvj>
 8015bdc:	4620      	mov	r0, r4
 8015bde:	bd10      	pop	{r4, pc}

08015be0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8015be0:	b510      	push	{r4, lr}
 8015be2:	4604      	mov	r4, r0
 8015be4:	2104      	movs	r1, #4
 8015be6:	f009 fa28 	bl	801f03a <_ZdlPvj>
 8015bea:	4620      	mov	r0, r4
 8015bec:	bd10      	pop	{r4, pc}

08015bee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8015bee:	b510      	push	{r4, lr}
 8015bf0:	4604      	mov	r4, r0
 8015bf2:	2104      	movs	r1, #4
 8015bf4:	f009 fa21 	bl	801f03a <_ZdlPvj>
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	bd10      	pop	{r4, pc}

08015bfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8015bfc:	b510      	push	{r4, lr}
 8015bfe:	4604      	mov	r4, r0
 8015c00:	2104      	movs	r1, #4
 8015c02:	f009 fa1a 	bl	801f03a <_ZdlPvj>
 8015c06:	4620      	mov	r0, r4
 8015c08:	bd10      	pop	{r4, pc}

08015c0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8015c0a:	b510      	push	{r4, lr}
 8015c0c:	4604      	mov	r4, r0
 8015c0e:	2104      	movs	r1, #4
 8015c10:	f009 fa13 	bl	801f03a <_ZdlPvj>
 8015c14:	4620      	mov	r0, r4
 8015c16:	bd10      	pop	{r4, pc}

08015c18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8015c18:	b510      	push	{r4, lr}
 8015c1a:	4604      	mov	r4, r0
 8015c1c:	2104      	movs	r1, #4
 8015c1e:	f009 fa0c 	bl	801f03a <_ZdlPvj>
 8015c22:	4620      	mov	r0, r4
 8015c24:	bd10      	pop	{r4, pc}

08015c26 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8015c26:	b510      	push	{r4, lr}
 8015c28:	4604      	mov	r4, r0
 8015c2a:	2104      	movs	r1, #4
 8015c2c:	f009 fa05 	bl	801f03a <_ZdlPvj>
 8015c30:	4620      	mov	r0, r4
 8015c32:	bd10      	pop	{r4, pc}

08015c34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8015c34:	b510      	push	{r4, lr}
 8015c36:	4604      	mov	r4, r0
 8015c38:	2104      	movs	r1, #4
 8015c3a:	f009 f9fe 	bl	801f03a <_ZdlPvj>
 8015c3e:	4620      	mov	r0, r4
 8015c40:	bd10      	pop	{r4, pc}

08015c42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8015c42:	b510      	push	{r4, lr}
 8015c44:	4604      	mov	r4, r0
 8015c46:	2104      	movs	r1, #4
 8015c48:	f009 f9f7 	bl	801f03a <_ZdlPvj>
 8015c4c:	4620      	mov	r0, r4
 8015c4e:	bd10      	pop	{r4, pc}

08015c50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8015c50:	b510      	push	{r4, lr}
 8015c52:	4604      	mov	r4, r0
 8015c54:	2104      	movs	r1, #4
 8015c56:	f009 f9f0 	bl	801f03a <_ZdlPvj>
 8015c5a:	4620      	mov	r0, r4
 8015c5c:	bd10      	pop	{r4, pc}

08015c5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8015c5e:	b510      	push	{r4, lr}
 8015c60:	4604      	mov	r4, r0
 8015c62:	2104      	movs	r1, #4
 8015c64:	f009 f9e9 	bl	801f03a <_ZdlPvj>
 8015c68:	4620      	mov	r0, r4
 8015c6a:	bd10      	pop	{r4, pc}

08015c6c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8015c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c6e:	4606      	mov	r6, r0
 8015c70:	b087      	sub	sp, #28
 8015c72:	460c      	mov	r4, r1
 8015c74:	4617      	mov	r7, r2
 8015c76:	461d      	mov	r5, r3
 8015c78:	b333      	cbz	r3, 8015cc8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8015c7a:	4608      	mov	r0, r1
 8015c7c:	f7f7 f82d 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 8015c80:	bb10      	cbnz	r0, 8015cc8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8015c82:	6820      	ldr	r0, [r4, #0]
 8015c84:	ab04      	add	r3, sp, #16
 8015c86:	6861      	ldr	r1, [r4, #4]
 8015c88:	4c1b      	ldr	r4, [pc, #108]	; (8015cf8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8015c8a:	c303      	stmia	r3!, {r0, r1}
 8015c8c:	a804      	add	r0, sp, #16
 8015c8e:	f7fa f805 	bl	800fc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015c92:	6820      	ldr	r0, [r4, #0]
 8015c94:	6803      	ldr	r3, [r0, #0]
 8015c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c98:	4798      	blx	r3
 8015c9a:	2dff      	cmp	r5, #255	; 0xff
 8015c9c:	d016      	beq.n	8015ccc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8015c9e:	f010 0f08 	tst.w	r0, #8
 8015ca2:	6820      	ldr	r0, [r4, #0]
 8015ca4:	d015      	beq.n	8015cd2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8015ca6:	2400      	movs	r4, #0
 8015ca8:	6801      	ldr	r1, [r0, #0]
 8015caa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015cae:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015cb2:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8015cb6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8015cba:	9401      	str	r4, [sp, #4]
 8015cbc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8015cc0:	9400      	str	r4, [sp, #0]
 8015cc2:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8015cc4:	4639      	mov	r1, r7
 8015cc6:	47a0      	blx	r4
 8015cc8:	b007      	add	sp, #28
 8015cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ccc:	f010 0f02 	tst.w	r0, #2
 8015cd0:	e7e7      	b.n	8015ca2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8015cd2:	6803      	ldr	r3, [r0, #0]
 8015cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cd6:	4798      	blx	r3
 8015cd8:	4b08      	ldr	r3, [pc, #32]	; (8015cfc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8015cda:	4601      	mov	r1, r0
 8015cdc:	4630      	mov	r0, r6
 8015cde:	881a      	ldrh	r2, [r3, #0]
 8015ce0:	6833      	ldr	r3, [r6, #0]
 8015ce2:	e9cd 7500 	strd	r7, r5, [sp]
 8015ce6:	69dd      	ldr	r5, [r3, #28]
 8015ce8:	ab04      	add	r3, sp, #16
 8015cea:	47a8      	blx	r5
 8015cec:	6820      	ldr	r0, [r4, #0]
 8015cee:	6803      	ldr	r3, [r0, #0]
 8015cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cf2:	4798      	blx	r3
 8015cf4:	e7e8      	b.n	8015cc8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8015cf6:	bf00      	nop
 8015cf8:	20009f94 	.word	0x20009f94
 8015cfc:	20009f8e 	.word	0x20009f8e

08015d00 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8015d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d04:	4f97      	ldr	r7, [pc, #604]	; (8015f64 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8015d06:	4616      	mov	r6, r2
 8015d08:	b08f      	sub	sp, #60	; 0x3c
 8015d0a:	4604      	mov	r4, r0
 8015d0c:	683a      	ldr	r2, [r7, #0]
 8015d0e:	4689      	mov	r9, r1
 8015d10:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8015d14:	2a02      	cmp	r2, #2
 8015d16:	d106      	bne.n	8015d26 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8015d18:	4b93      	ldr	r3, [pc, #588]	; (8015f68 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8015d1a:	f44f 7159 	mov.w	r1, #868	; 0x364
 8015d1e:	4a93      	ldr	r2, [pc, #588]	; (8015f6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8015d20:	4893      	ldr	r0, [pc, #588]	; (8015f70 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 8015d22:	f009 f9b9 	bl	801f098 <__assert_func>
 8015d26:	ad0e      	add	r5, sp, #56	; 0x38
 8015d28:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8015d2c:	4628      	mov	r0, r5
 8015d2e:	f7fd fad3 	bl	80132d8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015d32:	6823      	ldr	r3, [r4, #0]
 8015d34:	4680      	mov	r8, r0
 8015d36:	4620      	mov	r0, r4
 8015d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d3a:	4798      	blx	r3
 8015d3c:	4580      	cmp	r8, r0
 8015d3e:	d004      	beq.n	8015d4a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8015d40:	4b8c      	ldr	r3, [pc, #560]	; (8015f74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8015d42:	f240 3166 	movw	r1, #870	; 0x366
 8015d46:	4a89      	ldr	r2, [pc, #548]	; (8015f6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8015d48:	e7ea      	b.n	8015d20 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015d4a:	4628      	mov	r0, r5
 8015d4c:	f7fd fa3a 	bl	80131c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015d50:	4680      	mov	r8, r0
 8015d52:	b920      	cbnz	r0, 8015d5e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8015d54:	4b88      	ldr	r3, [pc, #544]	; (8015f78 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8015d56:	f44f 715a 	mov.w	r1, #872	; 0x368
 8015d5a:	4a84      	ldr	r2, [pc, #528]	; (8015f6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8015d5c:	e7e0      	b.n	8015d20 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015d5e:	6830      	ldr	r0, [r6, #0]
 8015d60:	ab06      	add	r3, sp, #24
 8015d62:	6871      	ldr	r1, [r6, #4]
 8015d64:	f10d 0b20 	add.w	fp, sp, #32
 8015d68:	f9b6 a000 	ldrsh.w	sl, [r6]
 8015d6c:	c303      	stmia	r3!, {r0, r1}
 8015d6e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015d72:	ab08      	add	r3, sp, #32
 8015d74:	f8d9 0000 	ldr.w	r0, [r9]
 8015d78:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8015d7c:	c303      	stmia	r3!, {r0, r1}
 8015d7e:	4628      	mov	r0, r5
 8015d80:	f7fd f918 	bl	8012fb4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015d84:	4606      	mov	r6, r0
 8015d86:	4628      	mov	r0, r5
 8015d88:	4d7c      	ldr	r5, [pc, #496]	; (8015f7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8015d8a:	f7fd f94d 	bl	8013028 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015d8e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8015d92:	a806      	add	r0, sp, #24
 8015d94:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8015d98:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8015d9c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8015da0:	f7f9 ff7c 	bl	800fc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015da4:	4658      	mov	r0, fp
 8015da6:	f7f9 ff79 	bl	800fc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015daa:	a80a      	add	r0, sp, #40	; 0x28
 8015dac:	f7f9 ff76 	bl	800fc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015db0:	4b73      	ldr	r3, [pc, #460]	; (8015f80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8015db2:	2100      	movs	r1, #0
 8015db4:	f9b5 2000 	ldrsh.w	r2, [r5]
 8015db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015dbc:	4658      	mov	r0, fp
 8015dbe:	910c      	str	r1, [sp, #48]	; 0x30
 8015dc0:	a90c      	add	r1, sp, #48	; 0x30
 8015dc2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015dc6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015dca:	f7f6 ff43 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 8015dce:	4658      	mov	r0, fp
 8015dd0:	f7f6 ff83 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 8015dd4:	2800      	cmp	r0, #0
 8015dd6:	f040 809a 	bne.w	8015f0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8015dda:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8015dde:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8015de2:	4288      	cmp	r0, r1
 8015de4:	db38      	blt.n	8015e58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8015de6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8015dea:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8015dee:	429a      	cmp	r2, r3
 8015df0:	db32      	blt.n	8015e58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8015df2:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8015df6:	4430      	add	r0, r6
 8015df8:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8015dfc:	4431      	add	r1, r6
 8015dfe:	b200      	sxth	r0, r0
 8015e00:	b209      	sxth	r1, r1
 8015e02:	4288      	cmp	r0, r1
 8015e04:	dc28      	bgt.n	8015e58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8015e06:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8015e0a:	440a      	add	r2, r1
 8015e0c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8015e10:	440b      	add	r3, r1
 8015e12:	b212      	sxth	r2, r2
 8015e14:	b21b      	sxth	r3, r3
 8015e16:	429a      	cmp	r2, r3
 8015e18:	dc1e      	bgt.n	8015e58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8015e1a:	6823      	ldr	r3, [r4, #0]
 8015e1c:	4620      	mov	r0, r4
 8015e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e20:	4798      	blx	r3
 8015e22:	4682      	mov	sl, r0
 8015e24:	6838      	ldr	r0, [r7, #0]
 8015e26:	6803      	ldr	r3, [r0, #0]
 8015e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e2a:	4798      	blx	r3
 8015e2c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8015e30:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015e34:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8015e38:	1a5b      	subs	r3, r3, r1
 8015e3a:	b29b      	uxth	r3, r3
 8015e3c:	b21c      	sxth	r4, r3
 8015e3e:	2c00      	cmp	r4, #0
 8015e40:	dc0f      	bgt.n	8015e62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 8015e42:	bf18      	it	ne
 8015e44:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8015e48:	4644      	mov	r4, r8
 8015e4a:	bf1e      	ittt	ne
 8015e4c:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8015e50:	185b      	addne	r3, r3, r1
 8015e52:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8015e56:	e009      	b.n	8015e6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8015e58:	4b4a      	ldr	r3, [pc, #296]	; (8015f84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8015e5a:	f240 3176 	movw	r1, #886	; 0x376
 8015e5e:	4a43      	ldr	r2, [pc, #268]	; (8015f6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8015e60:	e75e      	b.n	8015d20 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015e62:	1ad3      	subs	r3, r2, r3
 8015e64:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8015e68:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8015e6c:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8015e70:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015e74:	1b9b      	subs	r3, r3, r6
 8015e76:	b29b      	uxth	r3, r3
 8015e78:	b219      	sxth	r1, r3
 8015e7a:	2900      	cmp	r1, #0
 8015e7c:	dd4b      	ble.n	8015f16 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8015e7e:	4351      	muls	r1, r2
 8015e80:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8015e84:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015e88:	1acb      	subs	r3, r1, r3
 8015e8a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015e8e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8015e92:	2e00      	cmp	r6, #0
 8015e94:	dd3b      	ble.n	8015f0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8015e96:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	dd37      	ble.n	8015f0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8015e9e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8015ea2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8015ea6:	fb0a f90c 	mul.w	r9, sl, ip
 8015eaa:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8015eae:	4481      	add	r9, r0
 8015eb0:	8828      	ldrh	r0, [r5, #0]
 8015eb2:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8015eb6:	1a41      	subs	r1, r0, r1
 8015eb8:	42ae      	cmp	r6, r5
 8015eba:	bfa8      	it	ge
 8015ebc:	462e      	movge	r6, r5
 8015ebe:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8015ec2:	428e      	cmp	r6, r1
 8015ec4:	bfa8      	it	ge
 8015ec6:	460e      	movge	r6, r1
 8015ec8:	429d      	cmp	r5, r3
 8015eca:	bfa8      	it	ge
 8015ecc:	461d      	movge	r5, r3
 8015ece:	4b2c      	ldr	r3, [pc, #176]	; (8015f80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8015ed0:	881b      	ldrh	r3, [r3, #0]
 8015ed2:	eba3 030c 	sub.w	r3, r3, ip
 8015ed6:	429d      	cmp	r5, r3
 8015ed8:	bfa8      	it	ge
 8015eda:	461d      	movge	r5, r3
 8015edc:	42b0      	cmp	r0, r6
 8015ede:	d12c      	bne.n	8015f3a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8015ee0:	4290      	cmp	r0, r2
 8015ee2:	d12a      	bne.n	8015f3a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8015ee4:	6838      	ldr	r0, [r7, #0]
 8015ee6:	9203      	str	r2, [sp, #12]
 8015ee8:	6803      	ldr	r3, [r0, #0]
 8015eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015eec:	4798      	blx	r3
 8015eee:	07c3      	lsls	r3, r0, #31
 8015ef0:	d51a      	bpl.n	8015f28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8015ef2:	9a03      	ldr	r2, [sp, #12]
 8015ef4:	6838      	ldr	r0, [r7, #0]
 8015ef6:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8015efa:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8015efe:	6803      	ldr	r3, [r0, #0]
 8015f00:	9200      	str	r2, [sp, #0]
 8015f02:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8015f04:	4623      	mov	r3, r4
 8015f06:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8015f0a:	47a8      	blx	r5
 8015f0c:	4680      	mov	r8, r0
 8015f0e:	4640      	mov	r0, r8
 8015f10:	b00f      	add	sp, #60	; 0x3c
 8015f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f16:	bf1f      	itttt	ne
 8015f18:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8015f1c:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 8015f20:	185b      	addne	r3, r3, r1
 8015f22:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8015f26:	e7b2      	b.n	8015e8e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 8015f28:	6838      	ldr	r0, [r7, #0]
 8015f2a:	464a      	mov	r2, r9
 8015f2c:	4621      	mov	r1, r4
 8015f2e:	6803      	ldr	r3, [r0, #0]
 8015f30:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8015f32:	fb05 f30a 	mul.w	r3, r5, sl
 8015f36:	47b0      	blx	r6
 8015f38:	e7e9      	b.n	8015f0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8015f3a:	4355      	muls	r5, r2
 8015f3c:	0076      	lsls	r6, r6, #1
 8015f3e:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8015f42:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8015f46:	9303      	str	r3, [sp, #12]
 8015f48:	9b03      	ldr	r3, [sp, #12]
 8015f4a:	429c      	cmp	r4, r3
 8015f4c:	d2df      	bcs.n	8015f0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8015f4e:	6838      	ldr	r0, [r7, #0]
 8015f50:	464a      	mov	r2, r9
 8015f52:	4621      	mov	r1, r4
 8015f54:	44d1      	add	r9, sl
 8015f56:	6803      	ldr	r3, [r0, #0]
 8015f58:	445c      	add	r4, fp
 8015f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f5c:	461d      	mov	r5, r3
 8015f5e:	4633      	mov	r3, r6
 8015f60:	47a8      	blx	r5
 8015f62:	e7f1      	b.n	8015f48 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8015f64:	20009f94 	.word	0x20009f94
 8015f68:	0802338b 	.word	0x0802338b
 8015f6c:	08023c3c 	.word	0x08023c3c
 8015f70:	0802343d 	.word	0x0802343d
 8015f74:	0802346f 	.word	0x0802346f
 8015f78:	080234c4 	.word	0x080234c4
 8015f7c:	20009f8e 	.word	0x20009f8e
 8015f80:	20009f90 	.word	0x20009f90
 8015f84:	08023502 	.word	0x08023502

08015f88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8015f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f8c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8015f90:	4688      	mov	r8, r1
 8015f92:	4614      	mov	r4, r2
 8015f94:	461d      	mov	r5, r3
 8015f96:	9e08      	ldr	r6, [sp, #32]
 8015f98:	2f00      	cmp	r7, #0
 8015f9a:	f000 80b4 	beq.w	8016106 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	f7f6 fe9b 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	f040 80ae 	bne.w	8016106 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8015faa:	f9b5 1000 	ldrsh.w	r1, [r5]
 8015fae:	2fff      	cmp	r7, #255	; 0xff
 8015fb0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8015fb4:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8015fb8:	fb04 1303 	mla	r3, r4, r3, r1
 8015fbc:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8015fc0:	eba4 0200 	sub.w	r2, r4, r0
 8015fc4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8015fc8:	fb04 f505 	mul.w	r5, r4, r5
 8015fcc:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8015fd0:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8015fd4:	d04b      	beq.n	801606e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 8015fd6:	b2bc      	uxth	r4, r7
 8015fd8:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8015fdc:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8015fe0:	fa5f f788 	uxtb.w	r7, r8
 8015fe4:	b2f3      	uxtb	r3, r6
 8015fe6:	0040      	lsls	r0, r0, #1
 8015fe8:	fb0e fe04 	mul.w	lr, lr, r4
 8015fec:	4367      	muls	r7, r4
 8015fee:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8015ff2:	4363      	muls	r3, r4
 8015ff4:	fa1f fc8c 	uxth.w	ip, ip
 8015ff8:	42a9      	cmp	r1, r5
 8015ffa:	f080 8084 	bcs.w	8016106 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8015ffe:	eb01 0900 	add.w	r9, r1, r0
 8016002:	4549      	cmp	r1, r9
 8016004:	d231      	bcs.n	801606a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8016006:	880a      	ldrh	r2, [r1, #0]
 8016008:	1214      	asrs	r4, r2, #8
 801600a:	10d6      	asrs	r6, r2, #3
 801600c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8016010:	00d2      	lsls	r2, r2, #3
 8016012:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016016:	b2d2      	uxtb	r2, r2
 8016018:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801601c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8016020:	fb14 f40c 	smulbb	r4, r4, ip
 8016024:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8016028:	fb12 f20c 	smulbb	r2, r2, ip
 801602c:	fb16 f60c 	smulbb	r6, r6, ip
 8016030:	4474      	add	r4, lr
 8016032:	441a      	add	r2, r3
 8016034:	b2a4      	uxth	r4, r4
 8016036:	443e      	add	r6, r7
 8016038:	b292      	uxth	r2, r2
 801603a:	f104 0a01 	add.w	sl, r4, #1
 801603e:	b2b6      	uxth	r6, r6
 8016040:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8016044:	f102 0a01 	add.w	sl, r2, #1
 8016048:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801604c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8016050:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8016054:	4322      	orrs	r2, r4
 8016056:	1c74      	adds	r4, r6, #1
 8016058:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801605c:	0976      	lsrs	r6, r6, #5
 801605e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8016062:	4332      	orrs	r2, r6
 8016064:	f821 2b02 	strh.w	r2, [r1], #2
 8016068:	e7cb      	b.n	8016002 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 801606a:	4441      	add	r1, r8
 801606c:	e7c4      	b.n	8015ff8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801606e:	0973      	lsrs	r3, r6, #5
 8016070:	4f26      	ldr	r7, [pc, #152]	; (801610c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 8016072:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8016076:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801607a:	ea08 0707 	and.w	r7, r8, r7
 801607e:	433b      	orrs	r3, r7
 8016080:	4333      	orrs	r3, r6
 8016082:	07e6      	lsls	r6, r4, #31
 8016084:	b29b      	uxth	r3, r3
 8016086:	d50b      	bpl.n	80160a0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8016088:	0040      	lsls	r0, r0, #1
 801608a:	0052      	lsls	r2, r2, #1
 801608c:	42a9      	cmp	r1, r5
 801608e:	d23a      	bcs.n	8016106 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8016090:	180c      	adds	r4, r1, r0
 8016092:	42a1      	cmp	r1, r4
 8016094:	d202      	bcs.n	801609c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8016096:	f821 3b02 	strh.w	r3, [r1], #2
 801609a:	e7fa      	b.n	8016092 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801609c:	4411      	add	r1, r2
 801609e:	e7f5      	b.n	801608c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 80160a0:	078f      	lsls	r7, r1, #30
 80160a2:	d008      	beq.n	80160b6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 80160a4:	0066      	lsls	r6, r4, #1
 80160a6:	460a      	mov	r2, r1
 80160a8:	42aa      	cmp	r2, r5
 80160aa:	d202      	bcs.n	80160b2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 80160ac:	8013      	strh	r3, [r2, #0]
 80160ae:	4432      	add	r2, r6
 80160b0:	e7fa      	b.n	80160a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 80160b2:	3102      	adds	r1, #2
 80160b4:	3801      	subs	r0, #1
 80160b6:	07c6      	lsls	r6, r0, #31
 80160b8:	d50b      	bpl.n	80160d2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 80160ba:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 80160be:	0066      	lsls	r6, r4, #1
 80160c0:	3a01      	subs	r2, #1
 80160c2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80160c6:	42aa      	cmp	r2, r5
 80160c8:	d202      	bcs.n	80160d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 80160ca:	8013      	strh	r3, [r2, #0]
 80160cc:	4432      	add	r2, r6
 80160ce:	e7fa      	b.n	80160c6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 80160d0:	3801      	subs	r0, #1
 80160d2:	b1c0      	cbz	r0, 8016106 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 80160d4:	1040      	asrs	r0, r0, #1
 80160d6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 80160da:	0080      	lsls	r0, r0, #2
 80160dc:	0064      	lsls	r4, r4, #1
 80160de:	42a9      	cmp	r1, r5
 80160e0:	d211      	bcs.n	8016106 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 80160e2:	078a      	lsls	r2, r1, #30
 80160e4:	d006      	beq.n	80160f4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80160e6:	4b0a      	ldr	r3, [pc, #40]	; (8016110 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 80160e8:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80160ec:	4a09      	ldr	r2, [pc, #36]	; (8016114 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 80160ee:	480a      	ldr	r0, [pc, #40]	; (8016118 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 80160f0:	f008 ffd2 	bl	801f098 <__assert_func>
 80160f4:	180e      	adds	r6, r1, r0
 80160f6:	460a      	mov	r2, r1
 80160f8:	42b2      	cmp	r2, r6
 80160fa:	d202      	bcs.n	8016102 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 80160fc:	f842 3b04 	str.w	r3, [r2], #4
 8016100:	e7fa      	b.n	80160f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 8016102:	4421      	add	r1, r4
 8016104:	e7eb      	b.n	80160de <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8016106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801610a:	bf00      	nop
 801610c:	00fff800 	.word	0x00fff800
 8016110:	0802323c 	.word	0x0802323c
 8016114:	08023888 	.word	0x08023888
 8016118:	0802343d 	.word	0x0802343d

0801611c <_ZN8touchgfx8LCD16bppC1Ev>:
 801611c:	2200      	movs	r2, #0
 801611e:	4910      	ldr	r1, [pc, #64]	; (8016160 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8016120:	6042      	str	r2, [r0, #4]
 8016122:	6001      	str	r1, [r0, #0]
 8016124:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8016128:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801612c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8016130:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8016134:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8016138:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801613c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8016140:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8016144:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8016148:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801614c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8016150:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8016154:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8016158:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801615c:	4770      	bx	lr
 801615e:	bf00      	nop
 8016160:	08023840 	.word	0x08023840

08016164 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8016164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016168:	b08d      	sub	sp, #52	; 0x34
 801616a:	460d      	mov	r5, r1
 801616c:	4604      	mov	r4, r0
 801616e:	4699      	mov	r9, r3
 8016170:	6808      	ldr	r0, [r1, #0]
 8016172:	ab08      	add	r3, sp, #32
 8016174:	6849      	ldr	r1, [r1, #4]
 8016176:	c303      	stmia	r3!, {r0, r1}
 8016178:	6810      	ldr	r0, [r2, #0]
 801617a:	ab0a      	add	r3, sp, #40	; 0x28
 801617c:	6851      	ldr	r1, [r2, #4]
 801617e:	c303      	stmia	r3!, {r0, r1}
 8016180:	a808      	add	r0, sp, #32
 8016182:	f7f9 fd8b 	bl	800fc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016186:	4629      	mov	r1, r5
 8016188:	a80a      	add	r0, sp, #40	; 0x28
 801618a:	4d67      	ldr	r5, [pc, #412]	; (8016328 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801618c:	f7f9 fdae 	bl	800fcec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016190:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8016194:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8016198:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801619c:	6828      	ldr	r0, [r5, #0]
 801619e:	fb11 2103 	smlabb	r1, r1, r3, r2
 80161a2:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 80161a6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80161aa:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80161ae:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80161b2:	440a      	add	r2, r1
 80161b4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80161b8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80161bc:	4413      	add	r3, r2
 80161be:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80161c2:	6803      	ldr	r3, [r0, #0]
 80161c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161c6:	4798      	blx	r3
 80161c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80161cc:	d119      	bne.n	8016202 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80161ce:	f010 0f20 	tst.w	r0, #32
 80161d2:	6828      	ldr	r0, [r5, #0]
 80161d4:	d018      	beq.n	8016208 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80161d6:	2500      	movs	r5, #0
 80161d8:	6801      	ldr	r1, [r0, #0]
 80161da:	b2b6      	uxth	r6, r6
 80161dc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80161e0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80161e4:	9601      	str	r6, [sp, #4]
 80161e6:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80161ea:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80161ee:	9502      	str	r5, [sp, #8]
 80161f0:	fa1f f588 	uxth.w	r5, r8
 80161f4:	9500      	str	r5, [sp, #0]
 80161f6:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80161f8:	4621      	mov	r1, r4
 80161fa:	47a8      	blx	r5
 80161fc:	b00d      	add	sp, #52	; 0x34
 80161fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016202:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016206:	e7e4      	b.n	80161d2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8016208:	6803      	ldr	r3, [r0, #0]
 801620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801620c:	4798      	blx	r3
 801620e:	4947      	ldr	r1, [pc, #284]	; (801632c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8016210:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8016214:	880b      	ldrh	r3, [r1, #0]
 8016216:	468a      	mov	sl, r1
 8016218:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801621c:	fb03 5202 	mla	r2, r3, r2, r5
 8016220:	4373      	muls	r3, r6
 8016222:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8016226:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801622a:	9307      	str	r3, [sp, #28]
 801622c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8016230:	9306      	str	r3, [sp, #24]
 8016232:	9b07      	ldr	r3, [sp, #28]
 8016234:	4298      	cmp	r0, r3
 8016236:	d270      	bcs.n	801631a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8016238:	9b06      	ldr	r3, [sp, #24]
 801623a:	4621      	mov	r1, r4
 801623c:	eb00 0b03 	add.w	fp, r0, r3
 8016240:	4558      	cmp	r0, fp
 8016242:	d25d      	bcs.n	8016300 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8016244:	f851 4b04 	ldr.w	r4, [r1], #4
 8016248:	0e23      	lsrs	r3, r4, #24
 801624a:	d014      	beq.n	8016276 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801624c:	2bff      	cmp	r3, #255	; 0xff
 801624e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8016252:	d112      	bne.n	801627a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8016254:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016258:	d10f      	bne.n	801627a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801625a:	0963      	lsrs	r3, r4, #5
 801625c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8016260:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8016264:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016268:	f02c 0c07 	bic.w	ip, ip, #7
 801626c:	ea43 0c0c 	orr.w	ip, r3, ip
 8016270:	ea4c 0404 	orr.w	r4, ip, r4
 8016274:	8004      	strh	r4, [r0, #0]
 8016276:	3002      	adds	r0, #2
 8016278:	e7e2      	b.n	8016240 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801627a:	fb09 f303 	mul.w	r3, r9, r3
 801627e:	8807      	ldrh	r7, [r0, #0]
 8016280:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8016284:	fa5f fc8c 	uxtb.w	ip, ip
 8016288:	1c5a      	adds	r2, r3, #1
 801628a:	123e      	asrs	r6, r7, #8
 801628c:	10fd      	asrs	r5, r7, #3
 801628e:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8016292:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8016296:	00ff      	lsls	r7, r7, #3
 8016298:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801629c:	1212      	asrs	r2, r2, #8
 801629e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80162a2:	b293      	uxth	r3, r2
 80162a4:	43d2      	mvns	r2, r2
 80162a6:	b2ff      	uxtb	r7, r7
 80162a8:	fb1e fe03 	smulbb	lr, lr, r3
 80162ac:	b2d2      	uxtb	r2, r2
 80162ae:	fb1c fc03 	smulbb	ip, ip, r3
 80162b2:	b2e4      	uxtb	r4, r4
 80162b4:	fb06 e602 	mla	r6, r6, r2, lr
 80162b8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80162bc:	fb14 f403 	smulbb	r4, r4, r3
 80162c0:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80162c4:	b2b6      	uxth	r6, r6
 80162c6:	fb05 c502 	mla	r5, r5, r2, ip
 80162ca:	fb07 4702 	mla	r7, r7, r2, r4
 80162ce:	f106 0e01 	add.w	lr, r6, #1
 80162d2:	b2ad      	uxth	r5, r5
 80162d4:	b2bf      	uxth	r7, r7
 80162d6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80162da:	f105 0c01 	add.w	ip, r5, #1
 80162de:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 80162e2:	1c7e      	adds	r6, r7, #1
 80162e4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80162e8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80162ec:	096d      	lsrs	r5, r5, #5
 80162ee:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80162f2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80162f6:	ea46 060e 	orr.w	r6, r6, lr
 80162fa:	432e      	orrs	r6, r5
 80162fc:	8006      	strh	r6, [r0, #0]
 80162fe:	e7ba      	b.n	8016276 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8016300:	f8ba 3000 	ldrh.w	r3, [sl]
 8016304:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8016308:	eba3 0308 	sub.w	r3, r3, r8
 801630c:	eba4 0408 	sub.w	r4, r4, r8
 8016310:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016314:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8016318:	e78b      	b.n	8016232 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801631a:	4b03      	ldr	r3, [pc, #12]	; (8016328 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801631c:	6818      	ldr	r0, [r3, #0]
 801631e:	6803      	ldr	r3, [r0, #0]
 8016320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016322:	4798      	blx	r3
 8016324:	e76a      	b.n	80161fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8016326:	bf00      	nop
 8016328:	20009f94 	.word	0x20009f94
 801632c:	20009f8e 	.word	0x20009f8e

08016330 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8016330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016334:	b085      	sub	sp, #20
 8016336:	6810      	ldr	r0, [r2, #0]
 8016338:	460c      	mov	r4, r1
 801633a:	6851      	ldr	r1, [r2, #4]
 801633c:	466d      	mov	r5, sp
 801633e:	4616      	mov	r6, r2
 8016340:	c503      	stmia	r5!, {r0, r1}
 8016342:	6818      	ldr	r0, [r3, #0]
 8016344:	6859      	ldr	r1, [r3, #4]
 8016346:	c503      	stmia	r5!, {r0, r1}
 8016348:	4668      	mov	r0, sp
 801634a:	4d2e      	ldr	r5, [pc, #184]	; (8016404 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801634c:	f7f9 fca6 	bl	800fc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016350:	4631      	mov	r1, r6
 8016352:	a802      	add	r0, sp, #8
 8016354:	4e2c      	ldr	r6, [pc, #176]	; (8016408 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8016356:	f7f9 fcc9 	bl	800fcec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801635a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801635e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016362:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8016366:	6828      	ldr	r0, [r5, #0]
 8016368:	fb11 2103 	smlabb	r1, r1, r3, r2
 801636c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8016370:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8016374:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8016378:	f8bd 1000 	ldrh.w	r1, [sp]
 801637c:	440a      	add	r2, r1
 801637e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8016382:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8016386:	4413      	add	r3, r2
 8016388:	f8ad 300a 	strh.w	r3, [sp, #10]
 801638c:	6803      	ldr	r3, [r0, #0]
 801638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016390:	4798      	blx	r3
 8016392:	8833      	ldrh	r3, [r6, #0]
 8016394:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8016398:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801639c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80163a0:	f8df e068 	ldr.w	lr, [pc, #104]	; 801640c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 80163a4:	fb03 1202 	mla	r2, r3, r2, r1
 80163a8:	fb08 f303 	mul.w	r3, r8, r3
 80163ac:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80163b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80163b4:	4298      	cmp	r0, r3
 80163b6:	d21d      	bcs.n	80163f4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 80163b8:	eb00 080c 	add.w	r8, r0, ip
 80163bc:	4540      	cmp	r0, r8
 80163be:	d20f      	bcs.n	80163e0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 80163c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80163c4:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80163c8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80163cc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80163d0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80163d4:	ea42 0209 	orr.w	r2, r2, r9
 80163d8:	430a      	orrs	r2, r1
 80163da:	f820 2b02 	strh.w	r2, [r0], #2
 80163de:	e7ed      	b.n	80163bc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80163e0:	8832      	ldrh	r2, [r6, #0]
 80163e2:	1bd2      	subs	r2, r2, r7
 80163e4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80163e8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80163ec:	1bd2      	subs	r2, r2, r7
 80163ee:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80163f2:	e7df      	b.n	80163b4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80163f4:	6828      	ldr	r0, [r5, #0]
 80163f6:	6803      	ldr	r3, [r0, #0]
 80163f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163fa:	4798      	blx	r3
 80163fc:	b005      	add	sp, #20
 80163fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016402:	bf00      	nop
 8016404:	20009f94 	.word	0x20009f94
 8016408:	20009f8e 	.word	0x20009f8e
 801640c:	fffff800 	.word	0xfffff800

08016410 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8016410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016414:	b08e      	sub	sp, #56	; 0x38
 8016416:	460e      	mov	r6, r1
 8016418:	4604      	mov	r4, r0
 801641a:	461d      	mov	r5, r3
 801641c:	6808      	ldr	r0, [r1, #0]
 801641e:	ab0a      	add	r3, sp, #40	; 0x28
 8016420:	6849      	ldr	r1, [r1, #4]
 8016422:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80165f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8016426:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 80165fc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801642a:	c303      	stmia	r3!, {r0, r1}
 801642c:	6810      	ldr	r0, [r2, #0]
 801642e:	ab0c      	add	r3, sp, #48	; 0x30
 8016430:	6851      	ldr	r1, [r2, #4]
 8016432:	c303      	stmia	r3!, {r0, r1}
 8016434:	a80a      	add	r0, sp, #40	; 0x28
 8016436:	f7f9 fc31 	bl	800fc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801643a:	4631      	mov	r1, r6
 801643c:	a80c      	add	r0, sp, #48	; 0x30
 801643e:	f7f9 fc55 	bl	800fcec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016442:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8016446:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801644a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801644e:	f8d8 0000 	ldr.w	r0, [r8]
 8016452:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016456:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801645a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801645e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016462:	440c      	add	r4, r1
 8016464:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8016468:	440a      	add	r2, r1
 801646a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801646e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8016472:	4413      	add	r3, r2
 8016474:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016478:	6803      	ldr	r3, [r0, #0]
 801647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801647c:	4798      	blx	r3
 801647e:	2dff      	cmp	r5, #255	; 0xff
 8016480:	d124      	bne.n	80164cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8016482:	f010 0f01 	tst.w	r0, #1
 8016486:	f8d8 0000 	ldr.w	r0, [r8]
 801648a:	d022      	beq.n	80164d2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801648c:	2100      	movs	r1, #0
 801648e:	f04f 0e01 	mov.w	lr, #1
 8016492:	f8d0 c000 	ldr.w	ip, [r0]
 8016496:	b2b6      	uxth	r6, r6
 8016498:	f8cd e018 	str.w	lr, [sp, #24]
 801649c:	b2bf      	uxth	r7, r7
 801649e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80164a2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80164a6:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80164aa:	f8b9 e000 	ldrh.w	lr, [r9]
 80164ae:	9503      	str	r5, [sp, #12]
 80164b0:	9601      	str	r6, [sp, #4]
 80164b2:	9700      	str	r7, [sp, #0]
 80164b4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80164b8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80164bc:	9102      	str	r1, [sp, #8]
 80164be:	4621      	mov	r1, r4
 80164c0:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80164c4:	47a8      	blx	r5
 80164c6:	b00e      	add	sp, #56	; 0x38
 80164c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164cc:	f010 0f04 	tst.w	r0, #4
 80164d0:	e7d9      	b.n	8016486 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80164d2:	6803      	ldr	r3, [r0, #0]
 80164d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164d6:	4798      	blx	r3
 80164d8:	f8b9 3000 	ldrh.w	r3, [r9]
 80164dc:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80164e0:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80164e4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80164e8:	435e      	muls	r6, r3
 80164ea:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80164ee:	2dff      	cmp	r5, #255	; 0xff
 80164f0:	fb03 1202 	mla	r2, r3, r2, r1
 80164f4:	ebac 0c07 	sub.w	ip, ip, r7
 80164f8:	eba3 0707 	sub.w	r7, r3, r7
 80164fc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8016500:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016504:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8016508:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801650c:	d049      	beq.n	80165a2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801650e:	43eb      	mvns	r3, r5
 8016510:	fa1f f985 	uxth.w	r9, r5
 8016514:	b2db      	uxtb	r3, r3
 8016516:	42b0      	cmp	r0, r6
 8016518:	d266      	bcs.n	80165e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801651a:	eb00 0a0e 	add.w	sl, r0, lr
 801651e:	4550      	cmp	r0, sl
 8016520:	4621      	mov	r1, r4
 8016522:	f104 0403 	add.w	r4, r4, #3
 8016526:	d25b      	bcs.n	80165e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8016528:	8802      	ldrh	r2, [r0, #0]
 801652a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801652e:	ea4f 2822 	mov.w	r8, r2, asr #8
 8016532:	fb11 f109 	smulbb	r1, r1, r9
 8016536:	10d5      	asrs	r5, r2, #3
 8016538:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801653c:	00d2      	lsls	r2, r2, #3
 801653e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8016542:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8016546:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801654a:	fb08 1803 	mla	r8, r8, r3, r1
 801654e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8016552:	b2d2      	uxtb	r2, r2
 8016554:	fb11 f109 	smulbb	r1, r1, r9
 8016558:	fa1f f888 	uxth.w	r8, r8
 801655c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8016560:	fb05 1503 	mla	r5, r5, r3, r1
 8016564:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8016568:	fb11 f109 	smulbb	r1, r1, r9
 801656c:	b2ad      	uxth	r5, r5
 801656e:	fb02 1203 	mla	r2, r2, r3, r1
 8016572:	f108 0101 	add.w	r1, r8, #1
 8016576:	b292      	uxth	r2, r2
 8016578:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801657c:	1c51      	adds	r1, r2, #1
 801657e:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8016582:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016586:	1c69      	adds	r1, r5, #1
 8016588:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801658c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8016590:	096d      	lsrs	r5, r5, #5
 8016592:	ea42 0208 	orr.w	r2, r2, r8
 8016596:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801659a:	432a      	orrs	r2, r5
 801659c:	f820 2b02 	strh.w	r2, [r0], #2
 80165a0:	e7bd      	b.n	801651e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 80165a2:	4a14      	ldr	r2, [pc, #80]	; (80165f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 80165a4:	42b0      	cmp	r0, r6
 80165a6:	d21f      	bcs.n	80165e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80165a8:	eb00 050e 	add.w	r5, r0, lr
 80165ac:	42a8      	cmp	r0, r5
 80165ae:	4621      	mov	r1, r4
 80165b0:	f104 0403 	add.w	r4, r4, #3
 80165b4:	d210      	bcs.n	80165d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 80165b6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80165ba:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80165be:	00db      	lsls	r3, r3, #3
 80165c0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80165c4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80165c8:	430b      	orrs	r3, r1
 80165ca:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80165ce:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80165d2:	f820 3b02 	strh.w	r3, [r0], #2
 80165d6:	e7e9      	b.n	80165ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80165d8:	4438      	add	r0, r7
 80165da:	eb01 040c 	add.w	r4, r1, ip
 80165de:	e7e1      	b.n	80165a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80165e0:	4438      	add	r0, r7
 80165e2:	eb01 040c 	add.w	r4, r1, ip
 80165e6:	e796      	b.n	8016516 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80165e8:	4b03      	ldr	r3, [pc, #12]	; (80165f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80165ea:	6818      	ldr	r0, [r3, #0]
 80165ec:	6803      	ldr	r3, [r0, #0]
 80165ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165f0:	4798      	blx	r3
 80165f2:	e768      	b.n	80164c6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80165f4:	fffff800 	.word	0xfffff800
 80165f8:	20009f94 	.word	0x20009f94
 80165fc:	20009f8e 	.word	0x20009f8e

08016600 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8016600:	b570      	push	{r4, r5, r6, lr}
 8016602:	9c04      	ldr	r4, [sp, #16]
 8016604:	4605      	mov	r5, r0
 8016606:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801660a:	4608      	mov	r0, r1
 801660c:	4619      	mov	r1, r3
 801660e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016612:	2a0d      	cmp	r2, #13
 8016614:	d825      	bhi.n	8016662 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 8016616:	e8df f002 	tbb	[pc, r2]
 801661a:	1807      	.short	0x1807
 801661c:	1d1d1d13 	.word	0x1d1d1d13
 8016620:	1d1d1d1d 	.word	0x1d1d1d1d
 8016624:	1d1d1d1d 	.word	0x1d1d1d1d
 8016628:	682a      	ldr	r2, [r5, #0]
 801662a:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801662e:	68d6      	ldr	r6, [r2, #12]
 8016630:	4623      	mov	r3, r4
 8016632:	460a      	mov	r2, r1
 8016634:	4601      	mov	r1, r0
 8016636:	46b4      	mov	ip, r6
 8016638:	4628      	mov	r0, r5
 801663a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801663e:	4760      	bx	ip
 8016640:	4622      	mov	r2, r4
 8016642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016646:	f7ff bd8d 	b.w	8016164 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801664a:	4622      	mov	r2, r4
 801664c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016650:	f7ff bede 	b.w	8016410 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8016654:	4b03      	ldr	r3, [pc, #12]	; (8016664 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8016656:	f240 315d 	movw	r1, #861	; 0x35d
 801665a:	4a03      	ldr	r2, [pc, #12]	; (8016668 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801665c:	4803      	ldr	r0, [pc, #12]	; (801666c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801665e:	f008 fd1b 	bl	801f098 <__assert_func>
 8016662:	bd70      	pop	{r4, r5, r6, pc}
 8016664:	08023562 	.word	0x08023562
 8016668:	08023cc2 	.word	0x08023cc2
 801666c:	0802343d 	.word	0x0802343d

08016670 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8016670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016674:	b093      	sub	sp, #76	; 0x4c
 8016676:	880e      	ldrh	r6, [r1, #0]
 8016678:	4681      	mov	r9, r0
 801667a:	4688      	mov	r8, r1
 801667c:	4615      	mov	r5, r2
 801667e:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8016682:	b136      	cbz	r6, 8016692 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 8016684:	4b70      	ldr	r3, [pc, #448]	; (8016848 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8016686:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 801668a:	4a70      	ldr	r2, [pc, #448]	; (801684c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801668c:	4870      	ldr	r0, [pc, #448]	; (8016850 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801668e:	f008 fd03 	bl	801f098 <__assert_func>
 8016692:	6810      	ldr	r0, [r2, #0]
 8016694:	ac0e      	add	r4, sp, #56	; 0x38
 8016696:	6851      	ldr	r1, [r2, #4]
 8016698:	4f6e      	ldr	r7, [pc, #440]	; (8016854 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801669a:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8016858 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801669e:	c403      	stmia	r4!, {r0, r1}
 80166a0:	6818      	ldr	r0, [r3, #0]
 80166a2:	ac10      	add	r4, sp, #64	; 0x40
 80166a4:	6859      	ldr	r1, [r3, #4]
 80166a6:	c403      	stmia	r4!, {r0, r1}
 80166a8:	a80e      	add	r0, sp, #56	; 0x38
 80166aa:	f7f9 faf7 	bl	800fc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80166ae:	4629      	mov	r1, r5
 80166b0:	a810      	add	r0, sp, #64	; 0x40
 80166b2:	f7f9 fb1b 	bl	800fcec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80166b6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80166ba:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80166be:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80166c2:	6838      	ldr	r0, [r7, #0]
 80166c4:	fb11 2103 	smlabb	r1, r1, r3, r2
 80166c8:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 80166cc:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 80166d0:	4489      	add	r9, r1
 80166d2:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80166d6:	440a      	add	r2, r1
 80166d8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80166dc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80166e0:	4413      	add	r3, r2
 80166e2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80166e6:	6803      	ldr	r3, [r0, #0]
 80166e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166ea:	4798      	blx	r3
 80166ec:	f010 0f80 	tst.w	r0, #128	; 0x80
 80166f0:	6838      	ldr	r0, [r7, #0]
 80166f2:	d01d      	beq.n	8016730 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 80166f4:	210b      	movs	r1, #11
 80166f6:	6802      	ldr	r2, [r0, #0]
 80166f8:	b2a4      	uxth	r4, r4
 80166fa:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80166fe:	9107      	str	r1, [sp, #28]
 8016700:	b2ad      	uxth	r5, r5
 8016702:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8016706:	f8bb 1000 	ldrh.w	r1, [fp]
 801670a:	9502      	str	r5, [sp, #8]
 801670c:	9106      	str	r1, [sp, #24]
 801670e:	2101      	movs	r1, #1
 8016710:	9401      	str	r4, [sp, #4]
 8016712:	e9cd a104 	strd	sl, r1, [sp, #16]
 8016716:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801671a:	9103      	str	r1, [sp, #12]
 801671c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8016720:	9100      	str	r1, [sp, #0]
 8016722:	4649      	mov	r1, r9
 8016724:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8016726:	4642      	mov	r2, r8
 8016728:	47a0      	blx	r4
 801672a:	b013      	add	sp, #76	; 0x4c
 801672c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016730:	6803      	ldr	r3, [r0, #0]
 8016732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016734:	4798      	blx	r3
 8016736:	f8bb 3000 	ldrh.w	r3, [fp]
 801673a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801673e:	f04f 0e04 	mov.w	lr, #4
 8016742:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8016746:	435d      	muls	r5, r3
 8016748:	fb03 1202 	mla	r2, r3, r2, r1
 801674c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8016750:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8016754:	920c      	str	r2, [sp, #48]	; 0x30
 8016756:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801675a:	1b12      	subs	r2, r2, r4
 801675c:	920d      	str	r2, [sp, #52]	; 0x34
 801675e:	0062      	lsls	r2, r4, #1
 8016760:	1b1c      	subs	r4, r3, r4
 8016762:	920a      	str	r2, [sp, #40]	; 0x28
 8016764:	0063      	lsls	r3, r4, #1
 8016766:	930b      	str	r3, [sp, #44]	; 0x2c
 8016768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801676a:	4298      	cmp	r0, r3
 801676c:	d266      	bcs.n	801683c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801676e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016770:	eb00 0b03 	add.w	fp, r0, r3
 8016774:	4558      	cmp	r0, fp
 8016776:	d25c      	bcs.n	8016832 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 8016778:	f819 3b01 	ldrb.w	r3, [r9], #1
 801677c:	fb1e e303 	smlabb	r3, lr, r3, lr
 8016780:	f858 2003 	ldr.w	r2, [r8, r3]
 8016784:	0e11      	lsrs	r1, r2, #24
 8016786:	d012      	beq.n	80167ae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 8016788:	29ff      	cmp	r1, #255	; 0xff
 801678a:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801678e:	d110      	bne.n	80167b2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8016790:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8016794:	d10d      	bne.n	80167b2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8016796:	0953      	lsrs	r3, r2, #5
 8016798:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801679c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80167a0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80167a4:	f027 0707 	bic.w	r7, r7, #7
 80167a8:	431f      	orrs	r7, r3
 80167aa:	433a      	orrs	r2, r7
 80167ac:	8002      	strh	r2, [r0, #0]
 80167ae:	3002      	adds	r0, #2
 80167b0:	e7e0      	b.n	8016774 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 80167b2:	fb0a f101 	mul.w	r1, sl, r1
 80167b6:	8806      	ldrh	r6, [r0, #0]
 80167b8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80167bc:	b2d2      	uxtb	r2, r2
 80167be:	1c4b      	adds	r3, r1, #1
 80167c0:	1235      	asrs	r5, r6, #8
 80167c2:	10f4      	asrs	r4, r6, #3
 80167c4:	eb03 2321 	add.w	r3, r3, r1, asr #8
 80167c8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80167cc:	00f6      	lsls	r6, r6, #3
 80167ce:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80167d2:	121b      	asrs	r3, r3, #8
 80167d4:	b2f6      	uxtb	r6, r6
 80167d6:	b299      	uxth	r1, r3
 80167d8:	43db      	mvns	r3, r3
 80167da:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80167de:	fb1c fc01 	smulbb	ip, ip, r1
 80167e2:	b2db      	uxtb	r3, r3
 80167e4:	fb12 f201 	smulbb	r2, r2, r1
 80167e8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80167ec:	fb05 c503 	mla	r5, r5, r3, ip
 80167f0:	b2ff      	uxtb	r7, r7
 80167f2:	fb06 2203 	mla	r2, r6, r3, r2
 80167f6:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80167fa:	fb17 f701 	smulbb	r7, r7, r1
 80167fe:	b2ad      	uxth	r5, r5
 8016800:	b292      	uxth	r2, r2
 8016802:	fb04 7403 	mla	r4, r4, r3, r7
 8016806:	f105 0c01 	add.w	ip, r5, #1
 801680a:	1c57      	adds	r7, r2, #1
 801680c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8016810:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8016814:	b2a4      	uxth	r4, r4
 8016816:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801681a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801681e:	433d      	orrs	r5, r7
 8016820:	1c67      	adds	r7, r4, #1
 8016822:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8016826:	0964      	lsrs	r4, r4, #5
 8016828:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801682c:	4325      	orrs	r5, r4
 801682e:	8005      	strh	r5, [r0, #0]
 8016830:	e7bd      	b.n	80167ae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 8016832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016834:	4418      	add	r0, r3
 8016836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016838:	4499      	add	r9, r3
 801683a:	e795      	b.n	8016768 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801683c:	4b05      	ldr	r3, [pc, #20]	; (8016854 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801683e:	6818      	ldr	r0, [r3, #0]
 8016840:	6803      	ldr	r3, [r0, #0]
 8016842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016844:	4798      	blx	r3
 8016846:	e770      	b.n	801672a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 8016848:	0802333b 	.word	0x0802333b
 801684c:	08023a93 	.word	0x08023a93
 8016850:	0802343d 	.word	0x0802343d
 8016854:	20009f94 	.word	0x20009f94
 8016858:	20009f8e 	.word	0x20009f8e

0801685c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016860:	4614      	mov	r4, r2
 8016862:	880a      	ldrh	r2, [r1, #0]
 8016864:	b087      	sub	sp, #28
 8016866:	4680      	mov	r8, r0
 8016868:	2a02      	cmp	r2, #2
 801686a:	460d      	mov	r5, r1
 801686c:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8016870:	d006      	beq.n	8016880 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8016872:	4b63      	ldr	r3, [pc, #396]	; (8016a00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 8016874:	f240 11e1 	movw	r1, #481	; 0x1e1
 8016878:	4a62      	ldr	r2, [pc, #392]	; (8016a04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801687a:	4863      	ldr	r0, [pc, #396]	; (8016a08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 801687c:	f008 fc0c 	bl	801f098 <__assert_func>
 8016880:	2e00      	cmp	r6, #0
 8016882:	f000 80b9 	beq.w	80169f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 8016886:	6820      	ldr	r0, [r4, #0]
 8016888:	af02      	add	r7, sp, #8
 801688a:	6861      	ldr	r1, [r4, #4]
 801688c:	c703      	stmia	r7!, {r0, r1}
 801688e:	6818      	ldr	r0, [r3, #0]
 8016890:	af04      	add	r7, sp, #16
 8016892:	6859      	ldr	r1, [r3, #4]
 8016894:	c703      	stmia	r7!, {r0, r1}
 8016896:	a802      	add	r0, sp, #8
 8016898:	f7f9 fa00 	bl	800fc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801689c:	4621      	mov	r1, r4
 801689e:	a804      	add	r0, sp, #16
 80168a0:	f7f9 fa24 	bl	800fcec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80168a4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80168a8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80168ac:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80168b0:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80168b4:	fb14 2103 	smlabb	r1, r4, r3, r2
 80168b8:	eb08 0401 	add.w	r4, r8, r1
 80168bc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80168c0:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80168c4:	440a      	add	r2, r1
 80168c6:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 80168ca:	f8ad 2010 	strh.w	r2, [sp, #16]
 80168ce:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80168d2:	4413      	add	r3, r2
 80168d4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80168d8:	4b4c      	ldr	r3, [pc, #304]	; (8016a0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 80168da:	6818      	ldr	r0, [r3, #0]
 80168dc:	6803      	ldr	r3, [r0, #0]
 80168de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168e0:	4798      	blx	r3
 80168e2:	4b4b      	ldr	r3, [pc, #300]	; (8016a10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 80168e4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80168e8:	2eff      	cmp	r6, #255	; 0xff
 80168ea:	881a      	ldrh	r2, [r3, #0]
 80168ec:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80168f0:	fb02 c101 	mla	r1, r2, r1, ip
 80168f4:	fb02 f207 	mul.w	r2, r2, r7
 80168f8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80168fc:	f105 0104 	add.w	r1, r5, #4
 8016900:	461d      	mov	r5, r3
 8016902:	d05a      	beq.n	80169ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 8016904:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8016908:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801690c:	b2b6      	uxth	r6, r6
 801690e:	9301      	str	r3, [sp, #4]
 8016910:	fa1f fe8e 	uxth.w	lr, lr
 8016914:	4282      	cmp	r2, r0
 8016916:	d96a      	bls.n	80169ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8016918:	eb00 0b0a 	add.w	fp, r0, sl
 801691c:	4583      	cmp	fp, r0
 801691e:	d940      	bls.n	80169a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 8016920:	8805      	ldrh	r5, [r0, #0]
 8016922:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016926:	122f      	asrs	r7, r5, #8
 8016928:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801692c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8016930:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016934:	00ed      	lsls	r5, r5, #3
 8016936:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801693a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801693e:	fb17 f70e 	smulbb	r7, r7, lr
 8016942:	b2ed      	uxtb	r5, r5
 8016944:	fb19 f90e 	smulbb	r9, r9, lr
 8016948:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801694c:	fb15 f50e 	smulbb	r5, r5, lr
 8016950:	fb0c 7c06 	mla	ip, ip, r6, r7
 8016954:	10df      	asrs	r7, r3, #3
 8016956:	00db      	lsls	r3, r3, #3
 8016958:	fa1f fc8c 	uxth.w	ip, ip
 801695c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8016960:	b2db      	uxtb	r3, r3
 8016962:	fb07 9706 	mla	r7, r7, r6, r9
 8016966:	f10c 0901 	add.w	r9, ip, #1
 801696a:	fb03 5306 	mla	r3, r3, r6, r5
 801696e:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8016972:	b29b      	uxth	r3, r3
 8016974:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8016978:	b2bf      	uxth	r7, r7
 801697a:	f103 0c01 	add.w	ip, r3, #1
 801697e:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8016982:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8016986:	ea4c 0c09 	orr.w	ip, ip, r9
 801698a:	f107 0901 	add.w	r9, r7, #1
 801698e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8016992:	097f      	lsrs	r7, r7, #5
 8016994:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8016998:	ea4c 0c07 	orr.w	ip, ip, r7
 801699c:	f820 cb02 	strh.w	ip, [r0], #2
 80169a0:	e7bc      	b.n	801691c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80169a2:	9b01      	ldr	r3, [sp, #4]
 80169a4:	881b      	ldrh	r3, [r3, #0]
 80169a6:	eba3 0308 	sub.w	r3, r3, r8
 80169aa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80169ae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80169b2:	eba3 0308 	sub.w	r3, r3, r8
 80169b6:	441c      	add	r4, r3
 80169b8:	e7ac      	b.n	8016914 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 80169ba:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80169be:	4282      	cmp	r2, r0
 80169c0:	d915      	bls.n	80169ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 80169c2:	eb00 060a 	add.w	r6, r0, sl
 80169c6:	4286      	cmp	r6, r0
 80169c8:	d906      	bls.n	80169d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 80169ca:	f814 3b01 	ldrb.w	r3, [r4], #1
 80169ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80169d2:	f820 3b02 	strh.w	r3, [r0], #2
 80169d6:	e7f6      	b.n	80169c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 80169d8:	882b      	ldrh	r3, [r5, #0]
 80169da:	eba3 0308 	sub.w	r3, r3, r8
 80169de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80169e2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80169e6:	eba3 0308 	sub.w	r3, r3, r8
 80169ea:	441c      	add	r4, r3
 80169ec:	e7e7      	b.n	80169be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 80169ee:	4b07      	ldr	r3, [pc, #28]	; (8016a0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 80169f0:	6818      	ldr	r0, [r3, #0]
 80169f2:	6803      	ldr	r3, [r0, #0]
 80169f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169f6:	4798      	blx	r3
 80169f8:	b007      	add	sp, #28
 80169fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169fe:	bf00      	nop
 8016a00:	0802326b 	.word	0x0802326b
 8016a04:	080238fd 	.word	0x080238fd
 8016a08:	0802343d 	.word	0x0802343d
 8016a0c:	20009f94 	.word	0x20009f94
 8016a10:	20009f8e 	.word	0x20009f8e

08016a14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8016a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a18:	f8b1 9000 	ldrh.w	r9, [r1]
 8016a1c:	b091      	sub	sp, #68	; 0x44
 8016a1e:	4604      	mov	r4, r0
 8016a20:	460f      	mov	r7, r1
 8016a22:	f1b9 0f01 	cmp.w	r9, #1
 8016a26:	4690      	mov	r8, r2
 8016a28:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8016a2c:	d006      	beq.n	8016a3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 8016a2e:	4b84      	ldr	r3, [pc, #528]	; (8016c40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 8016a30:	f240 212f 	movw	r1, #559	; 0x22f
 8016a34:	4a83      	ldr	r2, [pc, #524]	; (8016c44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 8016a36:	4884      	ldr	r0, [pc, #528]	; (8016c48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 8016a38:	f008 fb2e 	bl	801f098 <__assert_func>
 8016a3c:	2d00      	cmp	r5, #0
 8016a3e:	d04f      	beq.n	8016ae0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8016a40:	6810      	ldr	r0, [r2, #0]
 8016a42:	ae0c      	add	r6, sp, #48	; 0x30
 8016a44:	6851      	ldr	r1, [r2, #4]
 8016a46:	f8df b208 	ldr.w	fp, [pc, #520]	; 8016c50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 8016a4a:	c603      	stmia	r6!, {r0, r1}
 8016a4c:	6818      	ldr	r0, [r3, #0]
 8016a4e:	ae0e      	add	r6, sp, #56	; 0x38
 8016a50:	6859      	ldr	r1, [r3, #4]
 8016a52:	c603      	stmia	r6!, {r0, r1}
 8016a54:	a80c      	add	r0, sp, #48	; 0x30
 8016a56:	f7f9 f921 	bl	800fc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016a5a:	4641      	mov	r1, r8
 8016a5c:	a80e      	add	r0, sp, #56	; 0x38
 8016a5e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8016c54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 8016a62:	f7f9 f943 	bl	800fcec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016a66:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8016a6a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8016a6e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8016a72:	f8db 0000 	ldr.w	r0, [fp]
 8016a76:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016a7a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8016a7e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8016a82:	440c      	add	r4, r1
 8016a84:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8016a88:	440a      	add	r2, r1
 8016a8a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8016a8e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8016a92:	4413      	add	r3, r2
 8016a94:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016a98:	6803      	ldr	r3, [r0, #0]
 8016a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a9c:	4798      	blx	r3
 8016a9e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8016aa2:	f8db 0000 	ldr.w	r0, [fp]
 8016aa6:	d01e      	beq.n	8016ae6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 8016aa8:	2200      	movs	r2, #0
 8016aaa:	6801      	ldr	r1, [r0, #0]
 8016aac:	b2b6      	uxth	r6, r6
 8016aae:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016ab2:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8016ab6:	220b      	movs	r2, #11
 8016ab8:	9207      	str	r2, [sp, #28]
 8016aba:	f8b8 2000 	ldrh.w	r2, [r8]
 8016abe:	9504      	str	r5, [sp, #16]
 8016ac0:	9601      	str	r6, [sp, #4]
 8016ac2:	e9cd 9205 	strd	r9, r2, [sp, #20]
 8016ac6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8016aca:	9203      	str	r2, [sp, #12]
 8016acc:	fa1f f28a 	uxth.w	r2, sl
 8016ad0:	9202      	str	r2, [sp, #8]
 8016ad2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8016ad6:	9200      	str	r2, [sp, #0]
 8016ad8:	463a      	mov	r2, r7
 8016ada:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8016adc:	4621      	mov	r1, r4
 8016ade:	47a8      	blx	r5
 8016ae0:	b011      	add	sp, #68	; 0x44
 8016ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ae6:	6803      	ldr	r3, [r0, #0]
 8016ae8:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8016aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016aee:	4798      	blx	r3
 8016af0:	f8b8 2000 	ldrh.w	r2, [r8]
 8016af4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8016af8:	2dff      	cmp	r5, #255	; 0xff
 8016afa:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8016afe:	fb0a fa02 	mul.w	sl, sl, r2
 8016b02:	fb02 1303 	mla	r3, r2, r3, r1
 8016b06:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016b0a:	d062      	beq.n	8016bd2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 8016b0c:	ea6f 0c05 	mvn.w	ip, r5
 8016b10:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8016b14:	b2ad      	uxth	r5, r5
 8016b16:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8016b1a:	fa5f fc8c 	uxtb.w	ip, ip
 8016b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8016b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b22:	4298      	cmp	r0, r3
 8016b24:	f080 8085 	bcs.w	8016c32 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8016b28:	eb00 0b09 	add.w	fp, r0, r9
 8016b2c:	4558      	cmp	r0, fp
 8016b2e:	d246      	bcs.n	8016bbe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8016b30:	f814 eb01 	ldrb.w	lr, [r4], #1
 8016b34:	2303      	movs	r3, #3
 8016b36:	2204      	movs	r2, #4
 8016b38:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8016b3c:	8803      	ldrh	r3, [r0, #0]
 8016b3e:	eb07 0a0e 	add.w	sl, r7, lr
 8016b42:	1219      	asrs	r1, r3, #8
 8016b44:	10da      	asrs	r2, r3, #3
 8016b46:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8016b4a:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8016b4e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8016b52:	00db      	lsls	r3, r3, #3
 8016b54:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8016b58:	fb18 f805 	smulbb	r8, r8, r5
 8016b5c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8016b60:	fb1e fe05 	smulbb	lr, lr, r5
 8016b64:	b2db      	uxtb	r3, r3
 8016b66:	fb01 810c 	mla	r1, r1, ip, r8
 8016b6a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8016b6e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8016b72:	fb18 f805 	smulbb	r8, r8, r5
 8016b76:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8016b7a:	b289      	uxth	r1, r1
 8016b7c:	fb02 820c 	mla	r2, r2, ip, r8
 8016b80:	fb03 e30c 	mla	r3, r3, ip, lr
 8016b84:	f101 0801 	add.w	r8, r1, #1
 8016b88:	b292      	uxth	r2, r2
 8016b8a:	b29b      	uxth	r3, r3
 8016b8c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8016b90:	f102 0801 	add.w	r8, r2, #1
 8016b94:	f103 0e01 	add.w	lr, r3, #1
 8016b98:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8016b9c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8016ba0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8016ba4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016ba8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8016bac:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8016bb0:	ea4e 0101 	orr.w	r1, lr, r1
 8016bb4:	ea41 0108 	orr.w	r1, r1, r8
 8016bb8:	f820 1b02 	strh.w	r1, [r0], #2
 8016bbc:	e7b6      	b.n	8016b2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8016bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bc0:	881b      	ldrh	r3, [r3, #0]
 8016bc2:	1b9b      	subs	r3, r3, r6
 8016bc4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016bc8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8016bcc:	1b9b      	subs	r3, r3, r6
 8016bce:	441c      	add	r4, r3
 8016bd0:	e7a6      	b.n	8016b20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 8016bd2:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8016bd6:	2203      	movs	r2, #3
 8016bd8:	2504      	movs	r5, #4
 8016bda:	491c      	ldr	r1, [pc, #112]	; (8016c4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 8016bdc:	4550      	cmp	r0, sl
 8016bde:	d228      	bcs.n	8016c32 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8016be0:	eb00 0c09 	add.w	ip, r0, r9
 8016be4:	4560      	cmp	r0, ip
 8016be6:	4623      	mov	r3, r4
 8016be8:	d219      	bcs.n	8016c1e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8016bea:	f893 e000 	ldrb.w	lr, [r3]
 8016bee:	3401      	adds	r4, #1
 8016bf0:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8016bf4:	eb07 0b0e 	add.w	fp, r7, lr
 8016bf8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8016bfc:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8016c00:	f89b b001 	ldrb.w	fp, [fp, #1]
 8016c04:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8016c08:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8016c0c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8016c10:	ea43 030b 	orr.w	r3, r3, fp
 8016c14:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8016c18:	f820 3b02 	strh.w	r3, [r0], #2
 8016c1c:	e7e2      	b.n	8016be4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8016c1e:	f8b8 3000 	ldrh.w	r3, [r8]
 8016c22:	1b9b      	subs	r3, r3, r6
 8016c24:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016c28:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8016c2c:	1b9b      	subs	r3, r3, r6
 8016c2e:	441c      	add	r4, r3
 8016c30:	e7d4      	b.n	8016bdc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8016c32:	4b07      	ldr	r3, [pc, #28]	; (8016c50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 8016c34:	6818      	ldr	r0, [r3, #0]
 8016c36:	6803      	ldr	r3, [r0, #0]
 8016c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c3a:	4798      	blx	r3
 8016c3c:	e750      	b.n	8016ae0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8016c3e:	bf00      	nop
 8016c40:	080232b9 	.word	0x080232b9
 8016c44:	08023986 	.word	0x08023986
 8016c48:	0802343d 	.word	0x0802343d
 8016c4c:	fffff800 	.word	0xfffff800
 8016c50:	20009f94 	.word	0x20009f94
 8016c54:	20009f8e 	.word	0x20009f8e

08016c58 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8016c58:	b430      	push	{r4, r5}
 8016c5a:	780d      	ldrb	r5, [r1, #0]
 8016c5c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8016c60:	2d01      	cmp	r5, #1
 8016c62:	d00a      	beq.n	8016c7a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8016c64:	d305      	bcc.n	8016c72 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8016c66:	2d02      	cmp	r5, #2
 8016c68:	d10b      	bne.n	8016c82 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8016c6a:	9402      	str	r4, [sp, #8]
 8016c6c:	bc30      	pop	{r4, r5}
 8016c6e:	f7ff bdf5 	b.w	801685c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8016c72:	9402      	str	r4, [sp, #8]
 8016c74:	bc30      	pop	{r4, r5}
 8016c76:	f7ff bcfb 	b.w	8016670 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8016c7a:	9402      	str	r4, [sp, #8]
 8016c7c:	bc30      	pop	{r4, r5}
 8016c7e:	f7ff bec9 	b.w	8016a14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8016c82:	bc30      	pop	{r4, r5}
 8016c84:	4770      	bx	lr
	...

08016c88 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8016c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c8c:	b087      	sub	sp, #28
 8016c8e:	4604      	mov	r4, r0
 8016c90:	460e      	mov	r6, r1
 8016c92:	6810      	ldr	r0, [r2, #0]
 8016c94:	6851      	ldr	r1, [r2, #4]
 8016c96:	ad02      	add	r5, sp, #8
 8016c98:	4617      	mov	r7, r2
 8016c9a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8016c9e:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8016ed0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8016ca2:	c503      	stmia	r5!, {r0, r1}
 8016ca4:	6818      	ldr	r0, [r3, #0]
 8016ca6:	ad04      	add	r5, sp, #16
 8016ca8:	6859      	ldr	r1, [r3, #4]
 8016caa:	c503      	stmia	r5!, {r0, r1}
 8016cac:	a802      	add	r0, sp, #8
 8016cae:	f7f8 fff5 	bl	800fc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016cb2:	4639      	mov	r1, r7
 8016cb4:	a804      	add	r0, sp, #16
 8016cb6:	f7f9 f819 	bl	800fcec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016cba:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8016cbe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8016cc2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8016cc6:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8016cca:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016cce:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8016cd2:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8016cd6:	440e      	add	r6, r1
 8016cd8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8016cdc:	440a      	add	r2, r1
 8016cde:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016ce2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8016ce6:	4413      	add	r3, r2
 8016ce8:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016cec:	4b77      	ldr	r3, [pc, #476]	; (8016ecc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8016cee:	6818      	ldr	r0, [r3, #0]
 8016cf0:	6803      	ldr	r3, [r0, #0]
 8016cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016cf4:	4798      	blx	r3
 8016cf6:	f8b9 b000 	ldrh.w	fp, [r9]
 8016cfa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8016cfe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8016d02:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8016d06:	fb05 f50b 	mul.w	r5, r5, fp
 8016d0a:	fb0b 2303 	mla	r3, fp, r3, r2
 8016d0e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016d12:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8016d16:	9300      	str	r3, [sp, #0]
 8016d18:	d069      	beq.n	8016dee <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8016d1a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8016d1e:	4558      	cmp	r0, fp
 8016d20:	f080 80cc 	bcs.w	8016ebc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8016d24:	9b00      	ldr	r3, [sp, #0]
 8016d26:	4631      	mov	r1, r6
 8016d28:	18c3      	adds	r3, r0, r3
 8016d2a:	9301      	str	r3, [sp, #4]
 8016d2c:	9b01      	ldr	r3, [sp, #4]
 8016d2e:	4298      	cmp	r0, r3
 8016d30:	d24f      	bcs.n	8016dd2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8016d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d36:	2a00      	cmp	r2, #0
 8016d38:	d048      	beq.n	8016dcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8016d3a:	fb0a f202 	mul.w	r2, sl, r2
 8016d3e:	1c53      	adds	r3, r2, #1
 8016d40:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016d44:	121b      	asrs	r3, r3, #8
 8016d46:	d041      	beq.n	8016dcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8016d48:	8802      	ldrh	r2, [r0, #0]
 8016d4a:	b29e      	uxth	r6, r3
 8016d4c:	f8b4 c000 	ldrh.w	ip, [r4]
 8016d50:	43db      	mvns	r3, r3
 8016d52:	1215      	asrs	r5, r2, #8
 8016d54:	b2db      	uxtb	r3, r3
 8016d56:	ea4f 272c 	mov.w	r7, ip, asr #8
 8016d5a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8016d5e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8016d62:	fb15 f503 	smulbb	r5, r5, r3
 8016d66:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016d6a:	00d2      	lsls	r2, r2, #3
 8016d6c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8016d70:	fb07 5706 	mla	r7, r7, r6, r5
 8016d74:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8016d78:	b2d2      	uxtb	r2, r2
 8016d7a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8016d7e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8016d82:	fb1e fe03 	smulbb	lr, lr, r3
 8016d86:	b2bf      	uxth	r7, r7
 8016d88:	fb12 f203 	smulbb	r2, r2, r3
 8016d8c:	fa5f fc8c 	uxtb.w	ip, ip
 8016d90:	fb05 e506 	mla	r5, r5, r6, lr
 8016d94:	f107 0e01 	add.w	lr, r7, #1
 8016d98:	fb0c 2c06 	mla	ip, ip, r6, r2
 8016d9c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8016da0:	fa1f fc8c 	uxth.w	ip, ip
 8016da4:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8016da8:	b2ad      	uxth	r5, r5
 8016daa:	f10c 0701 	add.w	r7, ip, #1
 8016dae:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8016db2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8016db6:	ea47 070e 	orr.w	r7, r7, lr
 8016dba:	f105 0e01 	add.w	lr, r5, #1
 8016dbe:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8016dc2:	096d      	lsrs	r5, r5, #5
 8016dc4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8016dc8:	432f      	orrs	r7, r5
 8016dca:	8007      	strh	r7, [r0, #0]
 8016dcc:	3002      	adds	r0, #2
 8016dce:	3402      	adds	r4, #2
 8016dd0:	e7ac      	b.n	8016d2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8016dd2:	f8b9 3000 	ldrh.w	r3, [r9]
 8016dd6:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8016dda:	eba3 0308 	sub.w	r3, r3, r8
 8016dde:	eba6 0608 	sub.w	r6, r6, r8
 8016de2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016de6:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8016dea:	440e      	add	r6, r1
 8016dec:	e797      	b.n	8016d1e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8016dee:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016df2:	42a8      	cmp	r0, r5
 8016df4:	d262      	bcs.n	8016ebc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8016df6:	9b00      	ldr	r3, [sp, #0]
 8016df8:	4631      	mov	r1, r6
 8016dfa:	eb00 0b03 	add.w	fp, r0, r3
 8016dfe:	4558      	cmp	r0, fp
 8016e00:	d24e      	bcs.n	8016ea0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8016e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e06:	b12b      	cbz	r3, 8016e14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8016e08:	2bff      	cmp	r3, #255	; 0xff
 8016e0a:	f8b4 e000 	ldrh.w	lr, [r4]
 8016e0e:	d104      	bne.n	8016e1a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8016e10:	f8a0 e000 	strh.w	lr, [r0]
 8016e14:	3002      	adds	r0, #2
 8016e16:	3402      	adds	r4, #2
 8016e18:	e7f1      	b.n	8016dfe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8016e1a:	8802      	ldrh	r2, [r0, #0]
 8016e1c:	b29f      	uxth	r7, r3
 8016e1e:	43db      	mvns	r3, r3
 8016e20:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8016e24:	1216      	asrs	r6, r2, #8
 8016e26:	b2db      	uxtb	r3, r3
 8016e28:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016e2c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8016e30:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8016e34:	00d2      	lsls	r2, r2, #3
 8016e36:	fb16 f603 	smulbb	r6, r6, r3
 8016e3a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8016e3e:	b2d2      	uxtb	r2, r2
 8016e40:	fb0c 6c07 	mla	ip, ip, r7, r6
 8016e44:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8016e48:	fb1a fa03 	smulbb	sl, sl, r3
 8016e4c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016e50:	fa1f fc8c 	uxth.w	ip, ip
 8016e54:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016e58:	fb12 f303 	smulbb	r3, r2, r3
 8016e5c:	fa5f fe8e 	uxtb.w	lr, lr
 8016e60:	fb06 a607 	mla	r6, r6, r7, sl
 8016e64:	f10c 0201 	add.w	r2, ip, #1
 8016e68:	fb0e 3307 	mla	r3, lr, r7, r3
 8016e6c:	b2b6      	uxth	r6, r6
 8016e6e:	b29b      	uxth	r3, r3
 8016e70:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8016e74:	f106 0a01 	add.w	sl, r6, #1
 8016e78:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8016e7c:	f103 0c01 	add.w	ip, r3, #1
 8016e80:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8016e84:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8016e88:	0976      	lsrs	r6, r6, #5
 8016e8a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8016e8e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8016e92:	ea4c 0c02 	orr.w	ip, ip, r2
 8016e96:	ea4c 0c06 	orr.w	ip, ip, r6
 8016e9a:	f8a0 c000 	strh.w	ip, [r0]
 8016e9e:	e7b9      	b.n	8016e14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8016ea0:	f8b9 3000 	ldrh.w	r3, [r9]
 8016ea4:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8016ea8:	eba3 0308 	sub.w	r3, r3, r8
 8016eac:	eba6 0608 	sub.w	r6, r6, r8
 8016eb0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016eb4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8016eb8:	440e      	add	r6, r1
 8016eba:	e79a      	b.n	8016df2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8016ebc:	4b03      	ldr	r3, [pc, #12]	; (8016ecc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8016ebe:	6818      	ldr	r0, [r3, #0]
 8016ec0:	6803      	ldr	r3, [r0, #0]
 8016ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ec4:	4798      	blx	r3
 8016ec6:	b007      	add	sp, #28
 8016ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ecc:	20009f94 	.word	0x20009f94
 8016ed0:	20009f8e 	.word	0x20009f8e

08016ed4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8016ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ed8:	b089      	sub	sp, #36	; 0x24
 8016eda:	4682      	mov	sl, r0
 8016edc:	460f      	mov	r7, r1
 8016ede:	4691      	mov	r9, r2
 8016ee0:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8016ee4:	4698      	mov	r8, r3
 8016ee6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016ee8:	2e00      	cmp	r6, #0
 8016eea:	d03d      	beq.n	8016f68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8016eec:	4608      	mov	r0, r1
 8016eee:	f7fc f861 	bl	8012fb4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016ef2:	4605      	mov	r5, r0
 8016ef4:	4638      	mov	r0, r7
 8016ef6:	f7fc f897 	bl	8013028 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016efa:	f8ad 000e 	strh.w	r0, [sp, #14]
 8016efe:	4638      	mov	r0, r7
 8016f00:	f8ad 9008 	strh.w	r9, [sp, #8]
 8016f04:	f8ad 500c 	strh.w	r5, [sp, #12]
 8016f08:	f8ad 800a 	strh.w	r8, [sp, #10]
 8016f0c:	f7fc f95a 	bl	80131c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016f10:	4605      	mov	r5, r0
 8016f12:	4638      	mov	r0, r7
 8016f14:	f7fc f988 	bl	8013228 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8016f18:	4681      	mov	r9, r0
 8016f1a:	4638      	mov	r0, r7
 8016f1c:	f7fc f9dc 	bl	80132d8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016f20:	280b      	cmp	r0, #11
 8016f22:	f200 816f 	bhi.w	8017204 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 8016f26:	e8df f010 	tbh	[pc, r0, lsl #1]
 8016f2a:	00c3      	.short	0x00c3
 8016f2c:	000c00b4 	.word	0x000c00b4
 8016f30:	016d016d 	.word	0x016d016d
 8016f34:	016d016d 	.word	0x016d016d
 8016f38:	016d016d 	.word	0x016d016d
 8016f3c:	016d016d 	.word	0x016d016d
 8016f40:	00bb      	.short	0x00bb
 8016f42:	4bb3      	ldr	r3, [pc, #716]	; (8017210 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 8016f44:	6818      	ldr	r0, [r3, #0]
 8016f46:	6803      	ldr	r3, [r0, #0]
 8016f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f4a:	4798      	blx	r3
 8016f4c:	2eff      	cmp	r6, #255	; 0xff
 8016f4e:	d121      	bne.n	8016f94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8016f50:	0683      	lsls	r3, r0, #26
 8016f52:	d41f      	bmi.n	8016f94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8016f54:	4638      	mov	r0, r7
 8016f56:	f7fc f8fb 	bl	8013150 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8016f5a:	b940      	cbnz	r0, 8016f6e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8016f5c:	4623      	mov	r3, r4
 8016f5e:	aa02      	add	r2, sp, #8
 8016f60:	4629      	mov	r1, r5
 8016f62:	4650      	mov	r0, sl
 8016f64:	f7ff f9e4 	bl	8016330 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8016f68:	b009      	add	sp, #36	; 0x24
 8016f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f6e:	f10d 0818 	add.w	r8, sp, #24
 8016f72:	4639      	mov	r1, r7
 8016f74:	af04      	add	r7, sp, #16
 8016f76:	4640      	mov	r0, r8
 8016f78:	f7fc f890 	bl	801309c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016f7c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8016f80:	e887 0003 	stmia.w	r7, {r0, r1}
 8016f84:	4638      	mov	r0, r7
 8016f86:	4621      	mov	r1, r4
 8016f88:	f7f5 fe64 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 8016f8c:	4638      	mov	r0, r7
 8016f8e:	f7f5 fea4 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f92:	b130      	cbz	r0, 8016fa2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 8016f94:	4633      	mov	r3, r6
 8016f96:	4622      	mov	r2, r4
 8016f98:	a902      	add	r1, sp, #8
 8016f9a:	4628      	mov	r0, r5
 8016f9c:	f7ff f8e2 	bl	8016164 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8016fa0:	e7e2      	b.n	8016f68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8016fa2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8016fa6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016faa:	4293      	cmp	r3, r2
 8016fac:	dd12      	ble.n	8016fd4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 8016fae:	1a9b      	subs	r3, r3, r2
 8016fb0:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016fb4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016fb8:	f8ad 0018 	strh.w	r0, [sp, #24]
 8016fbc:	4628      	mov	r0, r5
 8016fbe:	f8ad 201a 	strh.w	r2, [sp, #26]
 8016fc2:	4642      	mov	r2, r8
 8016fc4:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016fc8:	a902      	add	r1, sp, #8
 8016fca:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016fce:	4633      	mov	r3, r6
 8016fd0:	f7ff f8c8 	bl	8016164 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8016fd4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8016fd8:	f9b4 2000 	ldrsh.w	r2, [r4]
 8016fdc:	4293      	cmp	r3, r2
 8016fde:	dd12      	ble.n	8017006 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 8016fe0:	1a9b      	subs	r3, r3, r2
 8016fe2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8016fe6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8016fea:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016fee:	4642      	mov	r2, r8
 8016ff0:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016ffa:	23ff      	movs	r3, #255	; 0xff
 8016ffc:	f8ad 101e 	strh.w	r1, [sp, #30]
 8017000:	a902      	add	r1, sp, #8
 8017002:	f7ff f8af 	bl	8016164 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8017006:	463b      	mov	r3, r7
 8017008:	aa02      	add	r2, sp, #8
 801700a:	4629      	mov	r1, r5
 801700c:	4650      	mov	r0, sl
 801700e:	f7ff f98f 	bl	8016330 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8017012:	88a2      	ldrh	r2, [r4, #4]
 8017014:	8823      	ldrh	r3, [r4, #0]
 8017016:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801701a:	4413      	add	r3, r2
 801701c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017020:	440a      	add	r2, r1
 8017022:	b29b      	uxth	r3, r3
 8017024:	b292      	uxth	r2, r2
 8017026:	b218      	sxth	r0, r3
 8017028:	b211      	sxth	r1, r2
 801702a:	4288      	cmp	r0, r1
 801702c:	dd12      	ble.n	8017054 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 801702e:	1a9b      	subs	r3, r3, r2
 8017030:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8017034:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8017038:	4642      	mov	r2, r8
 801703a:	f8ad 1018 	strh.w	r1, [sp, #24]
 801703e:	a902      	add	r1, sp, #8
 8017040:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017044:	23ff      	movs	r3, #255	; 0xff
 8017046:	f8ad 001e 	strh.w	r0, [sp, #30]
 801704a:	4628      	mov	r0, r5
 801704c:	f8ad 601a 	strh.w	r6, [sp, #26]
 8017050:	f7ff f888 	bl	8016164 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8017054:	88e2      	ldrh	r2, [r4, #6]
 8017056:	8863      	ldrh	r3, [r4, #2]
 8017058:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801705c:	4413      	add	r3, r2
 801705e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8017062:	440a      	add	r2, r1
 8017064:	b29b      	uxth	r3, r3
 8017066:	b292      	uxth	r2, r2
 8017068:	b218      	sxth	r0, r3
 801706a:	b211      	sxth	r1, r2
 801706c:	4288      	cmp	r0, r1
 801706e:	f77f af7b 	ble.w	8016f68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8017072:	1a9b      	subs	r3, r3, r2
 8017074:	f9b4 6000 	ldrsh.w	r6, [r4]
 8017078:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801707c:	4642      	mov	r2, r8
 801707e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017082:	23ff      	movs	r3, #255	; 0xff
 8017084:	f8ad 6018 	strh.w	r6, [sp, #24]
 8017088:	f8ad 101a 	strh.w	r1, [sp, #26]
 801708c:	f8ad 001c 	strh.w	r0, [sp, #28]
 8017090:	e782      	b.n	8016f98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8017092:	4633      	mov	r3, r6
 8017094:	4622      	mov	r2, r4
 8017096:	a902      	add	r1, sp, #8
 8017098:	4628      	mov	r0, r5
 801709a:	f7ff f9b9 	bl	8016410 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801709e:	e763      	b.n	8016f68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80170a0:	9600      	str	r6, [sp, #0]
 80170a2:	4623      	mov	r3, r4
 80170a4:	aa02      	add	r2, sp, #8
 80170a6:	4649      	mov	r1, r9
 80170a8:	4628      	mov	r0, r5
 80170aa:	f7ff fdd5 	bl	8016c58 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80170ae:	e75b      	b.n	8016f68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80170b0:	4638      	mov	r0, r7
 80170b2:	f7fc f84d 	bl	8013150 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80170b6:	b950      	cbnz	r0, 80170ce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 80170b8:	f8da 3000 	ldr.w	r3, [sl]
 80170bc:	aa02      	add	r2, sp, #8
 80170be:	4629      	mov	r1, r5
 80170c0:	e9cd 6000 	strd	r6, r0, [sp]
 80170c4:	4650      	mov	r0, sl
 80170c6:	68de      	ldr	r6, [r3, #12]
 80170c8:	4623      	mov	r3, r4
 80170ca:	47b0      	blx	r6
 80170cc:	e74c      	b.n	8016f68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80170ce:	f10d 0818 	add.w	r8, sp, #24
 80170d2:	4639      	mov	r1, r7
 80170d4:	af04      	add	r7, sp, #16
 80170d6:	4640      	mov	r0, r8
 80170d8:	f7fb ffe0 	bl	801309c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80170dc:	e898 0003 	ldmia.w	r8, {r0, r1}
 80170e0:	e887 0003 	stmia.w	r7, {r0, r1}
 80170e4:	4638      	mov	r0, r7
 80170e6:	4621      	mov	r1, r4
 80170e8:	f7f5 fdb4 	bl	800cc54 <_ZN8touchgfx4RectaNERKS0_>
 80170ec:	4638      	mov	r0, r7
 80170ee:	f7f5 fdf4 	bl	800ccda <_ZNK8touchgfx4Rect7isEmptyEv>
 80170f2:	b138      	cbz	r0, 8017104 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 80170f4:	4623      	mov	r3, r4
 80170f6:	9600      	str	r6, [sp, #0]
 80170f8:	aa02      	add	r2, sp, #8
 80170fa:	4649      	mov	r1, r9
 80170fc:	4628      	mov	r0, r5
 80170fe:	f7ff fdc3 	bl	8016c88 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8017102:	e731      	b.n	8016f68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8017104:	f8da 3000 	ldr.w	r3, [sl]
 8017108:	aa02      	add	r2, sp, #8
 801710a:	4629      	mov	r1, r5
 801710c:	e9cd 6000 	strd	r6, r0, [sp]
 8017110:	4650      	mov	r0, sl
 8017112:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8017116:	463b      	mov	r3, r7
 8017118:	47d8      	blx	fp
 801711a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801711e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017122:	4293      	cmp	r3, r2
 8017124:	dd13      	ble.n	801714e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 8017126:	f9b4 0000 	ldrsh.w	r0, [r4]
 801712a:	1a9b      	subs	r3, r3, r2
 801712c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017130:	f8ad 0018 	strh.w	r0, [sp, #24]
 8017134:	4628      	mov	r0, r5
 8017136:	f8ad 201a 	strh.w	r2, [sp, #26]
 801713a:	aa02      	add	r2, sp, #8
 801713c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017140:	4649      	mov	r1, r9
 8017142:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017146:	4643      	mov	r3, r8
 8017148:	9600      	str	r6, [sp, #0]
 801714a:	f7ff fd9d 	bl	8016c88 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801714e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8017152:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017156:	4293      	cmp	r3, r2
 8017158:	dd13      	ble.n	8017182 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 801715a:	1a9b      	subs	r3, r3, r2
 801715c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8017160:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8017164:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017168:	aa02      	add	r2, sp, #8
 801716a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801716e:	4628      	mov	r0, r5
 8017170:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017174:	4643      	mov	r3, r8
 8017176:	f8ad 101e 	strh.w	r1, [sp, #30]
 801717a:	4649      	mov	r1, r9
 801717c:	9600      	str	r6, [sp, #0]
 801717e:	f7ff fd83 	bl	8016c88 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8017182:	88a2      	ldrh	r2, [r4, #4]
 8017184:	8823      	ldrh	r3, [r4, #0]
 8017186:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801718a:	4413      	add	r3, r2
 801718c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017190:	440a      	add	r2, r1
 8017192:	b29b      	uxth	r3, r3
 8017194:	b292      	uxth	r2, r2
 8017196:	b218      	sxth	r0, r3
 8017198:	b211      	sxth	r1, r2
 801719a:	4288      	cmp	r0, r1
 801719c:	dd13      	ble.n	80171c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 801719e:	1a9b      	subs	r3, r3, r2
 80171a0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80171a4:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 80171a8:	aa02      	add	r2, sp, #8
 80171aa:	f8ad 1018 	strh.w	r1, [sp, #24]
 80171ae:	4649      	mov	r1, r9
 80171b0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80171b4:	4643      	mov	r3, r8
 80171b6:	f8ad 001e 	strh.w	r0, [sp, #30]
 80171ba:	4628      	mov	r0, r5
 80171bc:	9600      	str	r6, [sp, #0]
 80171be:	f8ad 701a 	strh.w	r7, [sp, #26]
 80171c2:	f7ff fd61 	bl	8016c88 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80171c6:	88e2      	ldrh	r2, [r4, #6]
 80171c8:	8863      	ldrh	r3, [r4, #2]
 80171ca:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80171ce:	4413      	add	r3, r2
 80171d0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80171d4:	440a      	add	r2, r1
 80171d6:	b29b      	uxth	r3, r3
 80171d8:	b292      	uxth	r2, r2
 80171da:	b218      	sxth	r0, r3
 80171dc:	b211      	sxth	r1, r2
 80171de:	4288      	cmp	r0, r1
 80171e0:	f77f aec2 	ble.w	8016f68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80171e4:	f9b4 7000 	ldrsh.w	r7, [r4]
 80171e8:	1a9b      	subs	r3, r3, r2
 80171ea:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80171ee:	f8ad 301e 	strh.w	r3, [sp, #30]
 80171f2:	4643      	mov	r3, r8
 80171f4:	f8ad 7018 	strh.w	r7, [sp, #24]
 80171f8:	f8ad 101a 	strh.w	r1, [sp, #26]
 80171fc:	f8ad 001c 	strh.w	r0, [sp, #28]
 8017200:	9600      	str	r6, [sp, #0]
 8017202:	e779      	b.n	80170f8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8017204:	4b03      	ldr	r3, [pc, #12]	; (8017214 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 8017206:	21b4      	movs	r1, #180	; 0xb4
 8017208:	4a03      	ldr	r2, [pc, #12]	; (8017218 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 801720a:	4804      	ldr	r0, [pc, #16]	; (801721c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 801720c:	f007 ff44 	bl	801f098 <__assert_func>
 8017210:	20009f94 	.word	0x20009f94
 8017214:	08023307 	.word	0x08023307
 8017218:	08023a0f 	.word	0x08023a0f
 801721c:	0802343d 	.word	0x0802343d

08017220 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8017220:	b508      	push	{r3, lr}
 8017222:	b180      	cbz	r0, 8017246 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8017224:	2902      	cmp	r1, #2
 8017226:	d014      	beq.n	8017252 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8017228:	2903      	cmp	r1, #3
 801722a:	d01d      	beq.n	8017268 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801722c:	2901      	cmp	r1, #1
 801722e:	d101      	bne.n	8017234 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8017230:	2001      	movs	r0, #1
 8017232:	bd08      	pop	{r3, pc}
 8017234:	4b0e      	ldr	r3, [pc, #56]	; (8017270 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8017236:	8818      	ldrh	r0, [r3, #0]
 8017238:	b990      	cbnz	r0, 8017260 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801723a:	4b0e      	ldr	r3, [pc, #56]	; (8017274 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801723c:	2150      	movs	r1, #80	; 0x50
 801723e:	4a0e      	ldr	r2, [pc, #56]	; (8017278 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8017240:	480e      	ldr	r0, [pc, #56]	; (801727c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8017242:	f007 ff29 	bl	801f098 <__assert_func>
 8017246:	2902      	cmp	r1, #2
 8017248:	d00e      	beq.n	8017268 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801724a:	2903      	cmp	r1, #3
 801724c:	d0f2      	beq.n	8017234 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801724e:	2901      	cmp	r1, #1
 8017250:	d1ee      	bne.n	8017230 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8017252:	4b07      	ldr	r3, [pc, #28]	; (8017270 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8017254:	8818      	ldrh	r0, [r3, #0]
 8017256:	2800      	cmp	r0, #0
 8017258:	d0ef      	beq.n	801723a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801725a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801725e:	e7e8      	b.n	8017232 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8017260:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8017264:	4240      	negs	r0, r0
 8017266:	e7e4      	b.n	8017232 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8017268:	f04f 30ff 	mov.w	r0, #4294967295
 801726c:	e7e1      	b.n	8017232 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801726e:	bf00      	nop
 8017270:	20009f8e 	.word	0x20009f8e
 8017274:	08023593 	.word	0x08023593
 8017278:	08023b8c 	.word	0x08023b8c
 801727c:	080235d5 	.word	0x080235d5

08017280 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8017280:	b508      	push	{r3, lr}
 8017282:	b180      	cbz	r0, 80172a6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8017284:	2902      	cmp	r1, #2
 8017286:	d014      	beq.n	80172b2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8017288:	2903      	cmp	r1, #3
 801728a:	d018      	beq.n	80172be <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801728c:	2901      	cmp	r1, #1
 801728e:	d001      	beq.n	8017294 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8017290:	2001      	movs	r0, #1
 8017292:	e013      	b.n	80172bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8017294:	4b0e      	ldr	r3, [pc, #56]	; (80172d0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8017296:	8818      	ldrh	r0, [r3, #0]
 8017298:	b970      	cbnz	r0, 80172b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801729a:	4b0e      	ldr	r3, [pc, #56]	; (80172d4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801729c:	2150      	movs	r1, #80	; 0x50
 801729e:	4a0e      	ldr	r2, [pc, #56]	; (80172d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 80172a0:	480e      	ldr	r0, [pc, #56]	; (80172dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 80172a2:	f007 fef9 	bl	801f098 <__assert_func>
 80172a6:	2902      	cmp	r1, #2
 80172a8:	d009      	beq.n	80172be <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80172aa:	2903      	cmp	r1, #3
 80172ac:	d0f0      	beq.n	8017290 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 80172ae:	2901      	cmp	r1, #1
 80172b0:	d1f0      	bne.n	8017294 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80172b2:	f04f 30ff 	mov.w	r0, #4294967295
 80172b6:	e001      	b.n	80172bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80172b8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80172bc:	bd08      	pop	{r3, pc}
 80172be:	4b04      	ldr	r3, [pc, #16]	; (80172d0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80172c0:	8818      	ldrh	r0, [r3, #0]
 80172c2:	2800      	cmp	r0, #0
 80172c4:	d0e9      	beq.n	801729a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 80172c6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80172ca:	4240      	negs	r0, r0
 80172cc:	e7f6      	b.n	80172bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80172ce:	bf00      	nop
 80172d0:	20009f8e 	.word	0x20009f8e
 80172d4:	08023593 	.word	0x08023593
 80172d8:	08023b8c 	.word	0x08023b8c
 80172dc:	080235d5 	.word	0x080235d5

080172e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80172e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172e4:	b099      	sub	sp, #100	; 0x64
 80172e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80172e8:	a914      	add	r1, sp, #80	; 0x50
 80172ea:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 80172ee:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 80172f2:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 80172f6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 80172fa:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 80172fe:	e881 000c 	stmia.w	r1, {r2, r3}
 8017302:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8017306:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801730a:	930a      	str	r3, [sp, #40]	; 0x28
 801730c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8017310:	f891 900d 	ldrb.w	r9, [r1, #13]
 8017314:	9311      	str	r3, [sp, #68]	; 0x44
 8017316:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801731a:	7988      	ldrb	r0, [r1, #6]
 801731c:	930c      	str	r3, [sp, #48]	; 0x30
 801731e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8017322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017326:	4303      	orrs	r3, r0
 8017328:	9309      	str	r3, [sp, #36]	; 0x24
 801732a:	f000 81a1 	beq.w	8017670 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801732e:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8017332:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8017336:	f891 9007 	ldrb.w	r9, [r1, #7]
 801733a:	ea59 0903 	orrs.w	r9, r9, r3
 801733e:	f000 8197 	beq.w	8017670 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8017342:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8017346:	b29b      	uxth	r3, r3
 8017348:	2e00      	cmp	r6, #0
 801734a:	f000 813a 	beq.w	80175c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801734e:	1af6      	subs	r6, r6, r3
 8017350:	b2b6      	uxth	r6, r6
 8017352:	0433      	lsls	r3, r6, #16
 8017354:	d502      	bpl.n	801735c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8017356:	1bad      	subs	r5, r5, r6
 8017358:	2600      	movs	r6, #0
 801735a:	b22d      	sxth	r5, r5
 801735c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017360:	a814      	add	r0, sp, #80	; 0x50
 8017362:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8017366:	428d      	cmp	r5, r1
 8017368:	b28b      	uxth	r3, r1
 801736a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801736e:	bfbf      	itttt	lt
 8017370:	18f6      	addlt	r6, r6, r3
 8017372:	1b75      	sublt	r5, r6, r5
 8017374:	b2ae      	uxthlt	r6, r5
 8017376:	460d      	movlt	r5, r1
 8017378:	8891      	ldrh	r1, [r2, #4]
 801737a:	440b      	add	r3, r1
 801737c:	4629      	mov	r1, r5
 801737e:	b21b      	sxth	r3, r3
 8017380:	9310      	str	r3, [sp, #64]	; 0x40
 8017382:	88d3      	ldrh	r3, [r2, #6]
 8017384:	8852      	ldrh	r2, [r2, #2]
 8017386:	4413      	add	r3, r2
 8017388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801738a:	b21b      	sxth	r3, r3
 801738c:	930f      	str	r3, [sp, #60]	; 0x3c
 801738e:	4bbd      	ldr	r3, [pc, #756]	; (8017684 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8017390:	f893 b000 	ldrb.w	fp, [r3]
 8017394:	f10b 3cff 	add.w	ip, fp, #4294967295
 8017398:	f1dc 0300 	rsbs	r3, ip, #0
 801739c:	eb43 030c 	adc.w	r3, r3, ip
 80173a0:	930e      	str	r3, [sp, #56]	; 0x38
 80173a2:	4653      	mov	r3, sl
 80173a4:	f7f8 fafe 	bl	800f9a4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80173a8:	4629      	mov	r1, r5
 80173aa:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 80173ae:	4653      	mov	r3, sl
 80173b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173b2:	a814      	add	r0, sp, #80	; 0x50
 80173b4:	f7f8 fb0e 	bl	800f9d4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80173b8:	a918      	add	r1, sp, #96	; 0x60
 80173ba:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80173be:	a817      	add	r0, sp, #92	; 0x5c
 80173c0:	f7f8 fc2a 	bl	800fc18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80173c4:	f1ba 0f00 	cmp.w	sl, #0
 80173c8:	f040 80fe 	bne.w	80175c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 80173cc:	f1bb 0f01 	cmp.w	fp, #1
 80173d0:	f040 8102 	bne.w	80175d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 80173d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80173d6:	b153      	cbz	r3, 80173ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80173d8:	2408      	movs	r4, #8
 80173da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80173dc:	fb94 f3f8 	sdiv	r3, r4, r8
 80173e0:	1e5c      	subs	r4, r3, #1
 80173e2:	4414      	add	r4, r2
 80173e4:	fb94 f4f3 	sdiv	r4, r4, r3
 80173e8:	fb14 f403 	smulbb	r4, r4, r3
 80173ec:	b2a4      	uxth	r4, r4
 80173ee:	b906      	cbnz	r6, 80173f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 80173f0:	b16f      	cbz	r7, 801740e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 80173f2:	fb07 6304 	mla	r3, r7, r4, r6
 80173f6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80173f8:	463a      	mov	r2, r7
 80173fa:	fb08 f303 	mul.w	r3, r8, r3
 80173fe:	f003 0707 	and.w	r7, r3, #7
 8017402:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8017406:	9328      	str	r3, [sp, #160]	; 0xa0
 8017408:	eba9 0302 	sub.w	r3, r9, r2
 801740c:	930d      	str	r3, [sp, #52]	; 0x34
 801740e:	4651      	mov	r1, sl
 8017410:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017412:	f7ff ff05 	bl	8017220 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8017416:	4651      	mov	r1, sl
 8017418:	4681      	mov	r9, r0
 801741a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801741c:	f7ff ff30 	bl	8017280 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8017420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017424:	4683      	mov	fp, r0
 8017426:	eba3 0a02 	sub.w	sl, r3, r2
 801742a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801742c:	459a      	cmp	sl, r3
 801742e:	bfa8      	it	ge
 8017430:	469a      	movge	sl, r3
 8017432:	f1ba 0f00 	cmp.w	sl, #0
 8017436:	f340 811b 	ble.w	8017670 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801743a:	1bad      	subs	r5, r5, r6
 801743c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801743e:	1b5d      	subs	r5, r3, r5
 8017440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017442:	429d      	cmp	r5, r3
 8017444:	bfd4      	ite	le
 8017446:	ebc6 0605 	rsble	r6, r6, r5
 801744a:	ebc6 0603 	rsbgt	r6, r6, r3
 801744e:	2e00      	cmp	r6, #0
 8017450:	f340 810e 	ble.w	8017670 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8017454:	1ba4      	subs	r4, r4, r6
 8017456:	fb08 f304 	mul.w	r3, r8, r4
 801745a:	930f      	str	r3, [sp, #60]	; 0x3c
 801745c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801745e:	2b00      	cmp	r3, #0
 8017460:	f040 810b 	bne.w	801767a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8017464:	4b88      	ldr	r3, [pc, #544]	; (8017688 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8017466:	6818      	ldr	r0, [r3, #0]
 8017468:	6803      	ldr	r3, [r0, #0]
 801746a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801746c:	4798      	blx	r3
 801746e:	2301      	movs	r3, #1
 8017470:	4a86      	ldr	r2, [pc, #536]	; (801768c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8017472:	fa03 f308 	lsl.w	r3, r3, r8
 8017476:	8811      	ldrh	r1, [r2, #0]
 8017478:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801747c:	3b01      	subs	r3, #1
 801747e:	b2db      	uxtb	r3, r3
 8017480:	930e      	str	r3, [sp, #56]	; 0x38
 8017482:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8017486:	fb01 2303 	mla	r3, r1, r3, r2
 801748a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801748e:	930a      	str	r3, [sp, #40]	; 0x28
 8017490:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017492:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8017496:	9313      	str	r3, [sp, #76]	; 0x4c
 8017498:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801749a:	0a19      	lsrs	r1, r3, #8
 801749c:	b2cb      	uxtb	r3, r1
 801749e:	9312      	str	r3, [sp, #72]	; 0x48
 80174a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80174a2:	b2db      	uxtb	r3, r3
 80174a4:	9311      	str	r3, [sp, #68]	; 0x44
 80174a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80174a8:	095a      	lsrs	r2, r3, #5
 80174aa:	4b79      	ldr	r3, [pc, #484]	; (8017690 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 80174ac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80174b0:	400b      	ands	r3, r1
 80174b2:	4313      	orrs	r3, r2
 80174b4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80174b6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80174ba:	4313      	orrs	r3, r2
 80174bc:	b29b      	uxth	r3, r3
 80174be:	9310      	str	r3, [sp, #64]	; 0x40
 80174c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80174c2:	781a      	ldrb	r2, [r3, #0]
 80174c4:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80174c8:	fb06 b919 	mls	r9, r6, r9, fp
 80174cc:	413a      	asrs	r2, r7
 80174ce:	fb03 fb06 	mul.w	fp, r3, r6
 80174d2:	930d      	str	r3, [sp, #52]	; 0x34
 80174d4:	b2d2      	uxtb	r2, r2
 80174d6:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 80174da:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80174de:	f0c0 80ea 	bcc.w	80176b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 80174e2:	46b6      	mov	lr, r6
 80174e4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80174e8:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80174ec:	f0c0 80d2 	bcc.w	8017694 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 80174f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174f2:	4013      	ands	r3, r2
 80174f4:	d055      	beq.n	80175a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 80174f6:	20ff      	movs	r0, #255	; 0xff
 80174f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80174fa:	fb90 f1f1 	sdiv	r1, r0, r1
 80174fe:	434b      	muls	r3, r1
 8017500:	2bfe      	cmp	r3, #254	; 0xfe
 8017502:	dd03      	ble.n	801750c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 8017504:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017506:	4281      	cmp	r1, r0
 8017508:	f000 80b9 	beq.w	801767e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801750c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801750e:	f8bc 4000 	ldrh.w	r4, [ip]
 8017512:	fb11 f303 	smulbb	r3, r1, r3
 8017516:	1220      	asrs	r0, r4, #8
 8017518:	b29b      	uxth	r3, r3
 801751a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801751e:	1c59      	adds	r1, r3, #1
 8017520:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8017524:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8017528:	10e1      	asrs	r1, r4, #3
 801752a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801752e:	00e4      	lsls	r4, r4, #3
 8017530:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8017534:	b29d      	uxth	r5, r3
 8017536:	43db      	mvns	r3, r3
 8017538:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801753c:	b2db      	uxtb	r3, r3
 801753e:	b2e4      	uxtb	r4, r4
 8017540:	9309      	str	r3, [sp, #36]	; 0x24
 8017542:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017544:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8017548:	fb13 f905 	smulbb	r9, r3, r5
 801754c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801754e:	fb00 9003 	mla	r0, r0, r3, r9
 8017552:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017554:	fb13 f905 	smulbb	r9, r3, r5
 8017558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801755a:	b280      	uxth	r0, r0
 801755c:	fb01 9103 	mla	r1, r1, r3, r9
 8017560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017562:	fb13 f505 	smulbb	r5, r3, r5
 8017566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017568:	b289      	uxth	r1, r1
 801756a:	fb04 5403 	mla	r4, r4, r3, r5
 801756e:	1c43      	adds	r3, r0, #1
 8017570:	b2a4      	uxth	r4, r4
 8017572:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8017576:	f104 0901 	add.w	r9, r4, #1
 801757a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801757e:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8017582:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8017586:	ea49 0000 	orr.w	r0, r9, r0
 801758a:	f101 0901 	add.w	r9, r1, #1
 801758e:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8017592:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8017596:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801759a:	ea40 0009 	orr.w	r0, r0, r9
 801759e:	f8ac 0000 	strh.w	r0, [ip]
 80175a2:	4447      	add	r7, r8
 80175a4:	b2bf      	uxth	r7, r7
 80175a6:	2f07      	cmp	r7, #7
 80175a8:	bf89      	itett	hi
 80175aa:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 80175ac:	fa42 f208 	asrls.w	r2, r2, r8
 80175b0:	2700      	movhi	r7, #0
 80175b2:	785a      	ldrbhi	r2, [r3, #1]
 80175b4:	bf8a      	itet	hi
 80175b6:	3301      	addhi	r3, #1
 80175b8:	b2d2      	uxtbls	r2, r2
 80175ba:	9328      	strhi	r3, [sp, #160]	; 0xa0
 80175bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175be:	449c      	add	ip, r3
 80175c0:	e792      	b.n	80174e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 80175c2:	441d      	add	r5, r3
 80175c4:	b22d      	sxth	r5, r5
 80175c6:	e6c9      	b.n	801735c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 80175c8:	f1ba 0f01 	cmp.w	sl, #1
 80175cc:	f47f af02 	bne.w	80173d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80175d0:	f1bb 0f01 	cmp.w	fp, #1
 80175d4:	f47f aefe 	bne.w	80173d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80175d8:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8017688 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 80175dc:	f8db 0000 	ldr.w	r0, [fp]
 80175e0:	6803      	ldr	r3, [r0, #0]
 80175e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175e4:	4798      	blx	r3
 80175e6:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80175ea:	465a      	mov	r2, fp
 80175ec:	d006      	beq.n	80175fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 80175ee:	f1b8 0f04 	cmp.w	r8, #4
 80175f2:	d140      	bne.n	8017676 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 80175f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175f6:	3300      	adds	r3, #0
 80175f8:	bf18      	it	ne
 80175fa:	2301      	movne	r3, #1
 80175fc:	0580      	lsls	r0, r0, #22
 80175fe:	d563      	bpl.n	80176c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8017600:	f1b8 0f08 	cmp.w	r8, #8
 8017604:	d160      	bne.n	80176c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8017606:	2b00      	cmp	r3, #0
 8017608:	bf0c      	ite	eq
 801760a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801760e:	f44f 7180 	movne.w	r1, #256	; 0x100
 8017612:	2e00      	cmp	r6, #0
 8017614:	f47f aede 	bne.w	80173d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8017618:	2f00      	cmp	r7, #0
 801761a:	f47f aedb 	bne.w	80173d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801761e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017620:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017622:	18eb      	adds	r3, r5, r3
 8017624:	4283      	cmp	r3, r0
 8017626:	f73f aed5 	bgt.w	80173d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 801762a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801762c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801762e:	444b      	add	r3, r9
 8017630:	4283      	cmp	r3, r0
 8017632:	f73f aecf 	bgt.w	80173d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8017636:	f1b8 0f08 	cmp.w	r8, #8
 801763a:	6810      	ldr	r0, [r2, #0]
 801763c:	f04f 0600 	mov.w	r6, #0
 8017640:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8017644:	bf18      	it	ne
 8017646:	3401      	addne	r4, #1
 8017648:	6805      	ldr	r5, [r0, #0]
 801764a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801764e:	bf18      	it	ne
 8017650:	f024 0401 	bicne.w	r4, r4, #1
 8017654:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8017658:	990c      	ldr	r1, [sp, #48]	; 0x30
 801765a:	bf18      	it	ne
 801765c:	b2a4      	uxthne	r4, r4
 801765e:	9104      	str	r1, [sp, #16]
 8017660:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8017662:	e9cd 4900 	strd	r4, r9, [sp]
 8017666:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801766a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801766c:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 801766e:	47a0      	blx	r4
 8017670:	b019      	add	sp, #100	; 0x64
 8017672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017676:	2300      	movs	r3, #0
 8017678:	e7c0      	b.n	80175fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 801767a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801767c:	e6f7      	b.n	801746e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 801767e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017680:	e78d      	b.n	801759e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 8017682:	bf00      	nop
 8017684:	20009f8c 	.word	0x20009f8c
 8017688:	20009f94 	.word	0x20009f94
 801768c:	20009f8e 	.word	0x20009f8e
 8017690:	00fff800 	.word	0x00fff800
 8017694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017696:	b153      	cbz	r3, 80176ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 8017698:	441f      	add	r7, r3
 801769a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801769c:	b2bf      	uxth	r7, r7
 801769e:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 80176a2:	f007 0707 	and.w	r7, r7, #7
 80176a6:	781a      	ldrb	r2, [r3, #0]
 80176a8:	9328      	str	r3, [sp, #160]	; 0xa0
 80176aa:	413a      	asrs	r2, r7
 80176ac:	b2d2      	uxtb	r2, r2
 80176ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176b0:	445b      	add	r3, fp
 80176b2:	930a      	str	r3, [sp, #40]	; 0x28
 80176b4:	e711      	b.n	80174da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 80176b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d1d9      	bne.n	8017670 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80176bc:	4b05      	ldr	r3, [pc, #20]	; (80176d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 80176be:	6818      	ldr	r0, [r3, #0]
 80176c0:	6803      	ldr	r3, [r0, #0]
 80176c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176c4:	4798      	blx	r3
 80176c6:	e7d3      	b.n	8017670 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	f43f ae83 	beq.w	80173d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80176ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80176d2:	e79e      	b.n	8017612 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 80176d4:	20009f94 	.word	0x20009f94

080176d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80176d8:	b538      	push	{r3, r4, r5, lr}
 80176da:	4c15      	ldr	r4, [pc, #84]	; (8017730 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80176dc:	4605      	mov	r5, r0
 80176de:	7823      	ldrb	r3, [r4, #0]
 80176e0:	f3bf 8f5b 	dmb	ish
 80176e4:	07da      	lsls	r2, r3, #31
 80176e6:	d40b      	bmi.n	8017700 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80176e8:	4620      	mov	r0, r4
 80176ea:	f007 fca8 	bl	801f03e <__cxa_guard_acquire>
 80176ee:	b138      	cbz	r0, 8017700 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80176f0:	4620      	mov	r0, r4
 80176f2:	f007 fcb0 	bl	801f056 <__cxa_guard_release>
 80176f6:	4a0f      	ldr	r2, [pc, #60]	; (8017734 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80176f8:	490f      	ldr	r1, [pc, #60]	; (8017738 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80176fa:	4810      	ldr	r0, [pc, #64]	; (801773c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80176fc:	f007 fc98 	bl	801f030 <__aeabi_atexit>
 8017700:	4c0f      	ldr	r4, [pc, #60]	; (8017740 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8017702:	7823      	ldrb	r3, [r4, #0]
 8017704:	f3bf 8f5b 	dmb	ish
 8017708:	07db      	lsls	r3, r3, #31
 801770a:	d40b      	bmi.n	8017724 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801770c:	4620      	mov	r0, r4
 801770e:	f007 fc96 	bl	801f03e <__cxa_guard_acquire>
 8017712:	b138      	cbz	r0, 8017724 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8017714:	4620      	mov	r0, r4
 8017716:	f007 fc9e 	bl	801f056 <__cxa_guard_release>
 801771a:	4a06      	ldr	r2, [pc, #24]	; (8017734 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801771c:	4909      	ldr	r1, [pc, #36]	; (8017744 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801771e:	480a      	ldr	r0, [pc, #40]	; (8017748 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8017720:	f007 fc86 	bl	801f030 <__aeabi_atexit>
 8017724:	4b05      	ldr	r3, [pc, #20]	; (801773c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8017726:	612b      	str	r3, [r5, #16]
 8017728:	4b07      	ldr	r3, [pc, #28]	; (8017748 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801772a:	616b      	str	r3, [r5, #20]
 801772c:	bd38      	pop	{r3, r4, r5, pc}
 801772e:	bf00      	nop
 8017730:	2000a060 	.word	0x2000a060
 8017734:	20000000 	.word	0x20000000
 8017738:	080158d7 	.word	0x080158d7
 801773c:	20000060 	.word	0x20000060
 8017740:	2000a064 	.word	0x2000a064
 8017744:	080158d5 	.word	0x080158d5
 8017748:	20000064 	.word	0x20000064

0801774c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801774c:	b538      	push	{r3, r4, r5, lr}
 801774e:	4c15      	ldr	r4, [pc, #84]	; (80177a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8017750:	4605      	mov	r5, r0
 8017752:	7823      	ldrb	r3, [r4, #0]
 8017754:	f3bf 8f5b 	dmb	ish
 8017758:	07da      	lsls	r2, r3, #31
 801775a:	d40b      	bmi.n	8017774 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801775c:	4620      	mov	r0, r4
 801775e:	f007 fc6e 	bl	801f03e <__cxa_guard_acquire>
 8017762:	b138      	cbz	r0, 8017774 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8017764:	4620      	mov	r0, r4
 8017766:	f007 fc76 	bl	801f056 <__cxa_guard_release>
 801776a:	4a0f      	ldr	r2, [pc, #60]	; (80177a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801776c:	490f      	ldr	r1, [pc, #60]	; (80177ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801776e:	4810      	ldr	r0, [pc, #64]	; (80177b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8017770:	f007 fc5e 	bl	801f030 <__aeabi_atexit>
 8017774:	4c0f      	ldr	r4, [pc, #60]	; (80177b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8017776:	7823      	ldrb	r3, [r4, #0]
 8017778:	f3bf 8f5b 	dmb	ish
 801777c:	07db      	lsls	r3, r3, #31
 801777e:	d40b      	bmi.n	8017798 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8017780:	4620      	mov	r0, r4
 8017782:	f007 fc5c 	bl	801f03e <__cxa_guard_acquire>
 8017786:	b138      	cbz	r0, 8017798 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8017788:	4620      	mov	r0, r4
 801778a:	f007 fc64 	bl	801f056 <__cxa_guard_release>
 801778e:	4a06      	ldr	r2, [pc, #24]	; (80177a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8017790:	4909      	ldr	r1, [pc, #36]	; (80177b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8017792:	480a      	ldr	r0, [pc, #40]	; (80177bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8017794:	f007 fc4c 	bl	801f030 <__aeabi_atexit>
 8017798:	4b05      	ldr	r3, [pc, #20]	; (80177b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801779a:	60ab      	str	r3, [r5, #8]
 801779c:	4b07      	ldr	r3, [pc, #28]	; (80177bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801779e:	60eb      	str	r3, [r5, #12]
 80177a0:	bd38      	pop	{r3, r4, r5, pc}
 80177a2:	bf00      	nop
 80177a4:	2000a038 	.word	0x2000a038
 80177a8:	20000000 	.word	0x20000000
 80177ac:	080158db 	.word	0x080158db
 80177b0:	20000038 	.word	0x20000038
 80177b4:	2000a03c 	.word	0x2000a03c
 80177b8:	080158d9 	.word	0x080158d9
 80177bc:	2000003c 	.word	0x2000003c

080177c0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80177c0:	b510      	push	{r4, lr}
 80177c2:	4604      	mov	r4, r0
 80177c4:	f7ff ff88 	bl	80176d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80177c8:	4620      	mov	r0, r4
 80177ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177ce:	f7ff bfbd 	b.w	801774c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080177d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80177d4:	b538      	push	{r3, r4, r5, lr}
 80177d6:	4c15      	ldr	r4, [pc, #84]	; (801782c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80177d8:	4605      	mov	r5, r0
 80177da:	7823      	ldrb	r3, [r4, #0]
 80177dc:	f3bf 8f5b 	dmb	ish
 80177e0:	07da      	lsls	r2, r3, #31
 80177e2:	d40b      	bmi.n	80177fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80177e4:	4620      	mov	r0, r4
 80177e6:	f007 fc2a 	bl	801f03e <__cxa_guard_acquire>
 80177ea:	b138      	cbz	r0, 80177fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80177ec:	4620      	mov	r0, r4
 80177ee:	f007 fc32 	bl	801f056 <__cxa_guard_release>
 80177f2:	4a0f      	ldr	r2, [pc, #60]	; (8017830 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80177f4:	490f      	ldr	r1, [pc, #60]	; (8017834 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80177f6:	4810      	ldr	r0, [pc, #64]	; (8017838 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80177f8:	f007 fc1a 	bl	801f030 <__aeabi_atexit>
 80177fc:	4c0f      	ldr	r4, [pc, #60]	; (801783c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80177fe:	7823      	ldrb	r3, [r4, #0]
 8017800:	f3bf 8f5b 	dmb	ish
 8017804:	07db      	lsls	r3, r3, #31
 8017806:	d40b      	bmi.n	8017820 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8017808:	4620      	mov	r0, r4
 801780a:	f007 fc18 	bl	801f03e <__cxa_guard_acquire>
 801780e:	b138      	cbz	r0, 8017820 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8017810:	4620      	mov	r0, r4
 8017812:	f007 fc20 	bl	801f056 <__cxa_guard_release>
 8017816:	4a06      	ldr	r2, [pc, #24]	; (8017830 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8017818:	4909      	ldr	r1, [pc, #36]	; (8017840 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801781a:	480a      	ldr	r0, [pc, #40]	; (8017844 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801781c:	f007 fc08 	bl	801f030 <__aeabi_atexit>
 8017820:	4b05      	ldr	r3, [pc, #20]	; (8017838 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8017822:	622b      	str	r3, [r5, #32]
 8017824:	4b07      	ldr	r3, [pc, #28]	; (8017844 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8017826:	626b      	str	r3, [r5, #36]	; 0x24
 8017828:	bd38      	pop	{r3, r4, r5, pc}
 801782a:	bf00      	nop
 801782c:	2000a068 	.word	0x2000a068
 8017830:	20000000 	.word	0x20000000
 8017834:	080158cf 	.word	0x080158cf
 8017838:	20000068 	.word	0x20000068
 801783c:	2000a06c 	.word	0x2000a06c
 8017840:	080158cd 	.word	0x080158cd
 8017844:	2000006c 	.word	0x2000006c

08017848 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8017848:	b538      	push	{r3, r4, r5, lr}
 801784a:	4c15      	ldr	r4, [pc, #84]	; (80178a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801784c:	4605      	mov	r5, r0
 801784e:	7823      	ldrb	r3, [r4, #0]
 8017850:	f3bf 8f5b 	dmb	ish
 8017854:	07da      	lsls	r2, r3, #31
 8017856:	d40b      	bmi.n	8017870 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8017858:	4620      	mov	r0, r4
 801785a:	f007 fbf0 	bl	801f03e <__cxa_guard_acquire>
 801785e:	b138      	cbz	r0, 8017870 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8017860:	4620      	mov	r0, r4
 8017862:	f007 fbf8 	bl	801f056 <__cxa_guard_release>
 8017866:	4a0f      	ldr	r2, [pc, #60]	; (80178a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8017868:	490f      	ldr	r1, [pc, #60]	; (80178a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801786a:	4810      	ldr	r0, [pc, #64]	; (80178ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801786c:	f007 fbe0 	bl	801f030 <__aeabi_atexit>
 8017870:	4c0f      	ldr	r4, [pc, #60]	; (80178b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8017872:	7823      	ldrb	r3, [r4, #0]
 8017874:	f3bf 8f5b 	dmb	ish
 8017878:	07db      	lsls	r3, r3, #31
 801787a:	d40b      	bmi.n	8017894 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801787c:	4620      	mov	r0, r4
 801787e:	f007 fbde 	bl	801f03e <__cxa_guard_acquire>
 8017882:	b138      	cbz	r0, 8017894 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8017884:	4620      	mov	r0, r4
 8017886:	f007 fbe6 	bl	801f056 <__cxa_guard_release>
 801788a:	4a06      	ldr	r2, [pc, #24]	; (80178a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801788c:	4909      	ldr	r1, [pc, #36]	; (80178b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801788e:	480a      	ldr	r0, [pc, #40]	; (80178b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8017890:	f007 fbce 	bl	801f030 <__aeabi_atexit>
 8017894:	4b05      	ldr	r3, [pc, #20]	; (80178ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8017896:	61ab      	str	r3, [r5, #24]
 8017898:	4b07      	ldr	r3, [pc, #28]	; (80178b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801789a:	61eb      	str	r3, [r5, #28]
 801789c:	bd38      	pop	{r3, r4, r5, pc}
 801789e:	bf00      	nop
 80178a0:	2000a040 	.word	0x2000a040
 80178a4:	20000000 	.word	0x20000000
 80178a8:	080158d3 	.word	0x080158d3
 80178ac:	20000040 	.word	0x20000040
 80178b0:	2000a044 	.word	0x2000a044
 80178b4:	080158d1 	.word	0x080158d1
 80178b8:	20000044 	.word	0x20000044

080178bc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80178bc:	b510      	push	{r4, lr}
 80178be:	4604      	mov	r4, r0
 80178c0:	f7ff ff88 	bl	80177d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80178c4:	4620      	mov	r0, r4
 80178c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178ca:	f7ff bfbd 	b.w	8017848 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080178d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80178d0:	b538      	push	{r3, r4, r5, lr}
 80178d2:	4c15      	ldr	r4, [pc, #84]	; (8017928 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80178d4:	4605      	mov	r5, r0
 80178d6:	7823      	ldrb	r3, [r4, #0]
 80178d8:	f3bf 8f5b 	dmb	ish
 80178dc:	07da      	lsls	r2, r3, #31
 80178de:	d40b      	bmi.n	80178f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80178e0:	4620      	mov	r0, r4
 80178e2:	f007 fbac 	bl	801f03e <__cxa_guard_acquire>
 80178e6:	b138      	cbz	r0, 80178f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80178e8:	4620      	mov	r0, r4
 80178ea:	f007 fbb4 	bl	801f056 <__cxa_guard_release>
 80178ee:	4a0f      	ldr	r2, [pc, #60]	; (801792c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80178f0:	490f      	ldr	r1, [pc, #60]	; (8017930 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80178f2:	4810      	ldr	r0, [pc, #64]	; (8017934 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80178f4:	f007 fb9c 	bl	801f030 <__aeabi_atexit>
 80178f8:	4c0f      	ldr	r4, [pc, #60]	; (8017938 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80178fa:	7823      	ldrb	r3, [r4, #0]
 80178fc:	f3bf 8f5b 	dmb	ish
 8017900:	07db      	lsls	r3, r3, #31
 8017902:	d40b      	bmi.n	801791c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8017904:	4620      	mov	r0, r4
 8017906:	f007 fb9a 	bl	801f03e <__cxa_guard_acquire>
 801790a:	b138      	cbz	r0, 801791c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801790c:	4620      	mov	r0, r4
 801790e:	f007 fba2 	bl	801f056 <__cxa_guard_release>
 8017912:	4a06      	ldr	r2, [pc, #24]	; (801792c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8017914:	4909      	ldr	r1, [pc, #36]	; (801793c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8017916:	480a      	ldr	r0, [pc, #40]	; (8017940 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8017918:	f007 fb8a 	bl	801f030 <__aeabi_atexit>
 801791c:	4b05      	ldr	r3, [pc, #20]	; (8017934 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801791e:	632b      	str	r3, [r5, #48]	; 0x30
 8017920:	4b07      	ldr	r3, [pc, #28]	; (8017940 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8017922:	636b      	str	r3, [r5, #52]	; 0x34
 8017924:	bd38      	pop	{r3, r4, r5, pc}
 8017926:	bf00      	nop
 8017928:	2000a078 	.word	0x2000a078
 801792c:	20000000 	.word	0x20000000
 8017930:	080158c7 	.word	0x080158c7
 8017934:	20000078 	.word	0x20000078
 8017938:	2000a07c 	.word	0x2000a07c
 801793c:	080158c5 	.word	0x080158c5
 8017940:	2000007c 	.word	0x2000007c

08017944 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8017944:	b538      	push	{r3, r4, r5, lr}
 8017946:	4c15      	ldr	r4, [pc, #84]	; (801799c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8017948:	4605      	mov	r5, r0
 801794a:	7823      	ldrb	r3, [r4, #0]
 801794c:	f3bf 8f5b 	dmb	ish
 8017950:	07da      	lsls	r2, r3, #31
 8017952:	d40b      	bmi.n	801796c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8017954:	4620      	mov	r0, r4
 8017956:	f007 fb72 	bl	801f03e <__cxa_guard_acquire>
 801795a:	b138      	cbz	r0, 801796c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801795c:	4620      	mov	r0, r4
 801795e:	f007 fb7a 	bl	801f056 <__cxa_guard_release>
 8017962:	4a0f      	ldr	r2, [pc, #60]	; (80179a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8017964:	490f      	ldr	r1, [pc, #60]	; (80179a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8017966:	4810      	ldr	r0, [pc, #64]	; (80179a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8017968:	f007 fb62 	bl	801f030 <__aeabi_atexit>
 801796c:	4c0f      	ldr	r4, [pc, #60]	; (80179ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801796e:	7823      	ldrb	r3, [r4, #0]
 8017970:	f3bf 8f5b 	dmb	ish
 8017974:	07db      	lsls	r3, r3, #31
 8017976:	d40b      	bmi.n	8017990 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8017978:	4620      	mov	r0, r4
 801797a:	f007 fb60 	bl	801f03e <__cxa_guard_acquire>
 801797e:	b138      	cbz	r0, 8017990 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8017980:	4620      	mov	r0, r4
 8017982:	f007 fb68 	bl	801f056 <__cxa_guard_release>
 8017986:	4a06      	ldr	r2, [pc, #24]	; (80179a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8017988:	4909      	ldr	r1, [pc, #36]	; (80179b0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801798a:	480a      	ldr	r0, [pc, #40]	; (80179b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801798c:	f007 fb50 	bl	801f030 <__aeabi_atexit>
 8017990:	4b05      	ldr	r3, [pc, #20]	; (80179a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8017992:	62ab      	str	r3, [r5, #40]	; 0x28
 8017994:	4b07      	ldr	r3, [pc, #28]	; (80179b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8017996:	62eb      	str	r3, [r5, #44]	; 0x2c
 8017998:	bd38      	pop	{r3, r4, r5, pc}
 801799a:	bf00      	nop
 801799c:	2000a048 	.word	0x2000a048
 80179a0:	20000000 	.word	0x20000000
 80179a4:	080158cb 	.word	0x080158cb
 80179a8:	20000048 	.word	0x20000048
 80179ac:	2000a04c 	.word	0x2000a04c
 80179b0:	080158c9 	.word	0x080158c9
 80179b4:	2000004c 	.word	0x2000004c

080179b8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80179b8:	b510      	push	{r4, lr}
 80179ba:	4604      	mov	r4, r0
 80179bc:	f7ff ff88 	bl	80178d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80179c0:	4620      	mov	r0, r4
 80179c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179c6:	f7ff bfbd 	b.w	8017944 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080179cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 80179cc:	b538      	push	{r3, r4, r5, lr}
 80179ce:	4c15      	ldr	r4, [pc, #84]	; (8017a24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80179d0:	4605      	mov	r5, r0
 80179d2:	7823      	ldrb	r3, [r4, #0]
 80179d4:	f3bf 8f5b 	dmb	ish
 80179d8:	07da      	lsls	r2, r3, #31
 80179da:	d40b      	bmi.n	80179f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80179dc:	4620      	mov	r0, r4
 80179de:	f007 fb2e 	bl	801f03e <__cxa_guard_acquire>
 80179e2:	b138      	cbz	r0, 80179f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80179e4:	4620      	mov	r0, r4
 80179e6:	f007 fb36 	bl	801f056 <__cxa_guard_release>
 80179ea:	4a0f      	ldr	r2, [pc, #60]	; (8017a28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80179ec:	490f      	ldr	r1, [pc, #60]	; (8017a2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80179ee:	4810      	ldr	r0, [pc, #64]	; (8017a30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80179f0:	f007 fb1e 	bl	801f030 <__aeabi_atexit>
 80179f4:	4c0f      	ldr	r4, [pc, #60]	; (8017a34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80179f6:	7823      	ldrb	r3, [r4, #0]
 80179f8:	f3bf 8f5b 	dmb	ish
 80179fc:	07db      	lsls	r3, r3, #31
 80179fe:	d40b      	bmi.n	8017a18 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8017a00:	4620      	mov	r0, r4
 8017a02:	f007 fb1c 	bl	801f03e <__cxa_guard_acquire>
 8017a06:	b138      	cbz	r0, 8017a18 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8017a08:	4620      	mov	r0, r4
 8017a0a:	f007 fb24 	bl	801f056 <__cxa_guard_release>
 8017a0e:	4a06      	ldr	r2, [pc, #24]	; (8017a28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8017a10:	4909      	ldr	r1, [pc, #36]	; (8017a38 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8017a12:	480a      	ldr	r0, [pc, #40]	; (8017a3c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8017a14:	f007 fb0c 	bl	801f030 <__aeabi_atexit>
 8017a18:	4b05      	ldr	r3, [pc, #20]	; (8017a30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8017a1a:	652b      	str	r3, [r5, #80]	; 0x50
 8017a1c:	4b07      	ldr	r3, [pc, #28]	; (8017a3c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8017a1e:	656b      	str	r3, [r5, #84]	; 0x54
 8017a20:	bd38      	pop	{r3, r4, r5, pc}
 8017a22:	bf00      	nop
 8017a24:	2000a080 	.word	0x2000a080
 8017a28:	20000000 	.word	0x20000000
 8017a2c:	080158b7 	.word	0x080158b7
 8017a30:	20000080 	.word	0x20000080
 8017a34:	2000a084 	.word	0x2000a084
 8017a38:	080158b5 	.word	0x080158b5
 8017a3c:	20000084 	.word	0x20000084

08017a40 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8017a40:	b538      	push	{r3, r4, r5, lr}
 8017a42:	4c15      	ldr	r4, [pc, #84]	; (8017a98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8017a44:	4605      	mov	r5, r0
 8017a46:	7823      	ldrb	r3, [r4, #0]
 8017a48:	f3bf 8f5b 	dmb	ish
 8017a4c:	07da      	lsls	r2, r3, #31
 8017a4e:	d40b      	bmi.n	8017a68 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8017a50:	4620      	mov	r0, r4
 8017a52:	f007 faf4 	bl	801f03e <__cxa_guard_acquire>
 8017a56:	b138      	cbz	r0, 8017a68 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8017a58:	4620      	mov	r0, r4
 8017a5a:	f007 fafc 	bl	801f056 <__cxa_guard_release>
 8017a5e:	4a0f      	ldr	r2, [pc, #60]	; (8017a9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8017a60:	490f      	ldr	r1, [pc, #60]	; (8017aa0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8017a62:	4810      	ldr	r0, [pc, #64]	; (8017aa4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8017a64:	f007 fae4 	bl	801f030 <__aeabi_atexit>
 8017a68:	4c0f      	ldr	r4, [pc, #60]	; (8017aa8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8017a6a:	7823      	ldrb	r3, [r4, #0]
 8017a6c:	f3bf 8f5b 	dmb	ish
 8017a70:	07db      	lsls	r3, r3, #31
 8017a72:	d40b      	bmi.n	8017a8c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8017a74:	4620      	mov	r0, r4
 8017a76:	f007 fae2 	bl	801f03e <__cxa_guard_acquire>
 8017a7a:	b138      	cbz	r0, 8017a8c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8017a7c:	4620      	mov	r0, r4
 8017a7e:	f007 faea 	bl	801f056 <__cxa_guard_release>
 8017a82:	4a06      	ldr	r2, [pc, #24]	; (8017a9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8017a84:	4909      	ldr	r1, [pc, #36]	; (8017aac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8017a86:	480a      	ldr	r0, [pc, #40]	; (8017ab0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8017a88:	f007 fad2 	bl	801f030 <__aeabi_atexit>
 8017a8c:	4b05      	ldr	r3, [pc, #20]	; (8017aa4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8017a8e:	64ab      	str	r3, [r5, #72]	; 0x48
 8017a90:	4b07      	ldr	r3, [pc, #28]	; (8017ab0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8017a92:	64eb      	str	r3, [r5, #76]	; 0x4c
 8017a94:	bd38      	pop	{r3, r4, r5, pc}
 8017a96:	bf00      	nop
 8017a98:	2000a088 	.word	0x2000a088
 8017a9c:	20000000 	.word	0x20000000
 8017aa0:	080158bb 	.word	0x080158bb
 8017aa4:	20000088 	.word	0x20000088
 8017aa8:	2000a08c 	.word	0x2000a08c
 8017aac:	080158b9 	.word	0x080158b9
 8017ab0:	2000008c 	.word	0x2000008c

08017ab4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8017ab4:	b538      	push	{r3, r4, r5, lr}
 8017ab6:	4c15      	ldr	r4, [pc, #84]	; (8017b0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8017ab8:	4605      	mov	r5, r0
 8017aba:	7823      	ldrb	r3, [r4, #0]
 8017abc:	f3bf 8f5b 	dmb	ish
 8017ac0:	07da      	lsls	r2, r3, #31
 8017ac2:	d40b      	bmi.n	8017adc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8017ac4:	4620      	mov	r0, r4
 8017ac6:	f007 faba 	bl	801f03e <__cxa_guard_acquire>
 8017aca:	b138      	cbz	r0, 8017adc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8017acc:	4620      	mov	r0, r4
 8017ace:	f007 fac2 	bl	801f056 <__cxa_guard_release>
 8017ad2:	4a0f      	ldr	r2, [pc, #60]	; (8017b10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8017ad4:	490f      	ldr	r1, [pc, #60]	; (8017b14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8017ad6:	4810      	ldr	r0, [pc, #64]	; (8017b18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8017ad8:	f007 faaa 	bl	801f030 <__aeabi_atexit>
 8017adc:	4c0f      	ldr	r4, [pc, #60]	; (8017b1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8017ade:	7823      	ldrb	r3, [r4, #0]
 8017ae0:	f3bf 8f5b 	dmb	ish
 8017ae4:	07db      	lsls	r3, r3, #31
 8017ae6:	d40b      	bmi.n	8017b00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8017ae8:	4620      	mov	r0, r4
 8017aea:	f007 faa8 	bl	801f03e <__cxa_guard_acquire>
 8017aee:	b138      	cbz	r0, 8017b00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8017af0:	4620      	mov	r0, r4
 8017af2:	f007 fab0 	bl	801f056 <__cxa_guard_release>
 8017af6:	4a06      	ldr	r2, [pc, #24]	; (8017b10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8017af8:	4909      	ldr	r1, [pc, #36]	; (8017b20 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8017afa:	480a      	ldr	r0, [pc, #40]	; (8017b24 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8017afc:	f007 fa98 	bl	801f030 <__aeabi_atexit>
 8017b00:	4b05      	ldr	r3, [pc, #20]	; (8017b18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8017b02:	642b      	str	r3, [r5, #64]	; 0x40
 8017b04:	4b07      	ldr	r3, [pc, #28]	; (8017b24 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8017b06:	646b      	str	r3, [r5, #68]	; 0x44
 8017b08:	bd38      	pop	{r3, r4, r5, pc}
 8017b0a:	bf00      	nop
 8017b0c:	2000a050 	.word	0x2000a050
 8017b10:	20000000 	.word	0x20000000
 8017b14:	080158bf 	.word	0x080158bf
 8017b18:	20000050 	.word	0x20000050
 8017b1c:	2000a054 	.word	0x2000a054
 8017b20:	080158bd 	.word	0x080158bd
 8017b24:	20000054 	.word	0x20000054

08017b28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8017b28:	b538      	push	{r3, r4, r5, lr}
 8017b2a:	4c15      	ldr	r4, [pc, #84]	; (8017b80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8017b2c:	4605      	mov	r5, r0
 8017b2e:	7823      	ldrb	r3, [r4, #0]
 8017b30:	f3bf 8f5b 	dmb	ish
 8017b34:	07da      	lsls	r2, r3, #31
 8017b36:	d40b      	bmi.n	8017b50 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8017b38:	4620      	mov	r0, r4
 8017b3a:	f007 fa80 	bl	801f03e <__cxa_guard_acquire>
 8017b3e:	b138      	cbz	r0, 8017b50 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8017b40:	4620      	mov	r0, r4
 8017b42:	f007 fa88 	bl	801f056 <__cxa_guard_release>
 8017b46:	4a0f      	ldr	r2, [pc, #60]	; (8017b84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8017b48:	490f      	ldr	r1, [pc, #60]	; (8017b88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8017b4a:	4810      	ldr	r0, [pc, #64]	; (8017b8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8017b4c:	f007 fa70 	bl	801f030 <__aeabi_atexit>
 8017b50:	4c0f      	ldr	r4, [pc, #60]	; (8017b90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8017b52:	7823      	ldrb	r3, [r4, #0]
 8017b54:	f3bf 8f5b 	dmb	ish
 8017b58:	07db      	lsls	r3, r3, #31
 8017b5a:	d40b      	bmi.n	8017b74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8017b5c:	4620      	mov	r0, r4
 8017b5e:	f007 fa6e 	bl	801f03e <__cxa_guard_acquire>
 8017b62:	b138      	cbz	r0, 8017b74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8017b64:	4620      	mov	r0, r4
 8017b66:	f007 fa76 	bl	801f056 <__cxa_guard_release>
 8017b6a:	4a06      	ldr	r2, [pc, #24]	; (8017b84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8017b6c:	4909      	ldr	r1, [pc, #36]	; (8017b94 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8017b6e:	480a      	ldr	r0, [pc, #40]	; (8017b98 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8017b70:	f007 fa5e 	bl	801f030 <__aeabi_atexit>
 8017b74:	4b05      	ldr	r3, [pc, #20]	; (8017b8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8017b76:	63ab      	str	r3, [r5, #56]	; 0x38
 8017b78:	4b07      	ldr	r3, [pc, #28]	; (8017b98 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8017b7a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8017b7c:	bd38      	pop	{r3, r4, r5, pc}
 8017b7e:	bf00      	nop
 8017b80:	2000a070 	.word	0x2000a070
 8017b84:	20000000 	.word	0x20000000
 8017b88:	080158c3 	.word	0x080158c3
 8017b8c:	20000070 	.word	0x20000070
 8017b90:	2000a074 	.word	0x2000a074
 8017b94:	080158c1 	.word	0x080158c1
 8017b98:	20000074 	.word	0x20000074

08017b9c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8017b9c:	b510      	push	{r4, lr}
 8017b9e:	4604      	mov	r4, r0
 8017ba0:	f7ff ff14 	bl	80179cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8017ba4:	4620      	mov	r0, r4
 8017ba6:	f7ff ff85 	bl	8017ab4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8017baa:	4620      	mov	r0, r4
 8017bac:	f7ff ff48 	bl	8017a40 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8017bb0:	4620      	mov	r0, r4
 8017bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bb6:	f7ff bfb7 	b.w	8017b28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08017bbc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8017bbc:	b538      	push	{r3, r4, r5, lr}
 8017bbe:	4c15      	ldr	r4, [pc, #84]	; (8017c14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8017bc0:	4605      	mov	r5, r0
 8017bc2:	7823      	ldrb	r3, [r4, #0]
 8017bc4:	f3bf 8f5b 	dmb	ish
 8017bc8:	07da      	lsls	r2, r3, #31
 8017bca:	d40b      	bmi.n	8017be4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8017bcc:	4620      	mov	r0, r4
 8017bce:	f007 fa36 	bl	801f03e <__cxa_guard_acquire>
 8017bd2:	b138      	cbz	r0, 8017be4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8017bd4:	4620      	mov	r0, r4
 8017bd6:	f007 fa3e 	bl	801f056 <__cxa_guard_release>
 8017bda:	4a0f      	ldr	r2, [pc, #60]	; (8017c18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8017bdc:	490f      	ldr	r1, [pc, #60]	; (8017c1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8017bde:	4810      	ldr	r0, [pc, #64]	; (8017c20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8017be0:	f007 fa26 	bl	801f030 <__aeabi_atexit>
 8017be4:	4c0f      	ldr	r4, [pc, #60]	; (8017c24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8017be6:	7823      	ldrb	r3, [r4, #0]
 8017be8:	f3bf 8f5b 	dmb	ish
 8017bec:	07db      	lsls	r3, r3, #31
 8017bee:	d40b      	bmi.n	8017c08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8017bf0:	4620      	mov	r0, r4
 8017bf2:	f007 fa24 	bl	801f03e <__cxa_guard_acquire>
 8017bf6:	b138      	cbz	r0, 8017c08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8017bf8:	4620      	mov	r0, r4
 8017bfa:	f007 fa2c 	bl	801f056 <__cxa_guard_release>
 8017bfe:	4a06      	ldr	r2, [pc, #24]	; (8017c18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8017c00:	4909      	ldr	r1, [pc, #36]	; (8017c28 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8017c02:	480a      	ldr	r0, [pc, #40]	; (8017c2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8017c04:	f007 fa14 	bl	801f030 <__aeabi_atexit>
 8017c08:	4b05      	ldr	r3, [pc, #20]	; (8017c20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8017c0a:	662b      	str	r3, [r5, #96]	; 0x60
 8017c0c:	4b07      	ldr	r3, [pc, #28]	; (8017c2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8017c0e:	666b      	str	r3, [r5, #100]	; 0x64
 8017c10:	bd38      	pop	{r3, r4, r5, pc}
 8017c12:	bf00      	nop
 8017c14:	2000a058 	.word	0x2000a058
 8017c18:	20000000 	.word	0x20000000
 8017c1c:	080158af 	.word	0x080158af
 8017c20:	20000058 	.word	0x20000058
 8017c24:	2000a05c 	.word	0x2000a05c
 8017c28:	080158ad 	.word	0x080158ad
 8017c2c:	2000005c 	.word	0x2000005c

08017c30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8017c30:	b538      	push	{r3, r4, r5, lr}
 8017c32:	4c15      	ldr	r4, [pc, #84]	; (8017c88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8017c34:	4605      	mov	r5, r0
 8017c36:	7823      	ldrb	r3, [r4, #0]
 8017c38:	f3bf 8f5b 	dmb	ish
 8017c3c:	07da      	lsls	r2, r3, #31
 8017c3e:	d40b      	bmi.n	8017c58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8017c40:	4620      	mov	r0, r4
 8017c42:	f007 f9fc 	bl	801f03e <__cxa_guard_acquire>
 8017c46:	b138      	cbz	r0, 8017c58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8017c48:	4620      	mov	r0, r4
 8017c4a:	f007 fa04 	bl	801f056 <__cxa_guard_release>
 8017c4e:	4a0f      	ldr	r2, [pc, #60]	; (8017c8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8017c50:	490f      	ldr	r1, [pc, #60]	; (8017c90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8017c52:	4810      	ldr	r0, [pc, #64]	; (8017c94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8017c54:	f007 f9ec 	bl	801f030 <__aeabi_atexit>
 8017c58:	4c0f      	ldr	r4, [pc, #60]	; (8017c98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8017c5a:	7823      	ldrb	r3, [r4, #0]
 8017c5c:	f3bf 8f5b 	dmb	ish
 8017c60:	07db      	lsls	r3, r3, #31
 8017c62:	d40b      	bmi.n	8017c7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8017c64:	4620      	mov	r0, r4
 8017c66:	f007 f9ea 	bl	801f03e <__cxa_guard_acquire>
 8017c6a:	b138      	cbz	r0, 8017c7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8017c6c:	4620      	mov	r0, r4
 8017c6e:	f007 f9f2 	bl	801f056 <__cxa_guard_release>
 8017c72:	4a06      	ldr	r2, [pc, #24]	; (8017c8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8017c74:	4909      	ldr	r1, [pc, #36]	; (8017c9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8017c76:	480a      	ldr	r0, [pc, #40]	; (8017ca0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8017c78:	f007 f9da 	bl	801f030 <__aeabi_atexit>
 8017c7c:	4b05      	ldr	r3, [pc, #20]	; (8017c94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8017c7e:	65ab      	str	r3, [r5, #88]	; 0x58
 8017c80:	4b07      	ldr	r3, [pc, #28]	; (8017ca0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8017c82:	65eb      	str	r3, [r5, #92]	; 0x5c
 8017c84:	bd38      	pop	{r3, r4, r5, pc}
 8017c86:	bf00      	nop
 8017c88:	2000a030 	.word	0x2000a030
 8017c8c:	20000000 	.word	0x20000000
 8017c90:	080158b3 	.word	0x080158b3
 8017c94:	20000030 	.word	0x20000030
 8017c98:	2000a034 	.word	0x2000a034
 8017c9c:	080158b1 	.word	0x080158b1
 8017ca0:	20000034 	.word	0x20000034

08017ca4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8017ca4:	b510      	push	{r4, lr}
 8017ca6:	4604      	mov	r4, r0
 8017ca8:	f7ff ff88 	bl	8017bbc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8017cac:	4620      	mov	r0, r4
 8017cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017cb2:	f7ff bfbd 	b.w	8017c30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08017cb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8017cb8:	b538      	push	{r3, r4, r5, lr}
 8017cba:	4c15      	ldr	r4, [pc, #84]	; (8017d10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8017cbc:	4605      	mov	r5, r0
 8017cbe:	7823      	ldrb	r3, [r4, #0]
 8017cc0:	f3bf 8f5b 	dmb	ish
 8017cc4:	07da      	lsls	r2, r3, #31
 8017cc6:	d40b      	bmi.n	8017ce0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8017cc8:	4620      	mov	r0, r4
 8017cca:	f007 f9b8 	bl	801f03e <__cxa_guard_acquire>
 8017cce:	b138      	cbz	r0, 8017ce0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8017cd0:	4620      	mov	r0, r4
 8017cd2:	f007 f9c0 	bl	801f056 <__cxa_guard_release>
 8017cd6:	4a0f      	ldr	r2, [pc, #60]	; (8017d14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8017cd8:	490f      	ldr	r1, [pc, #60]	; (8017d18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8017cda:	4810      	ldr	r0, [pc, #64]	; (8017d1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8017cdc:	f007 f9a8 	bl	801f030 <__aeabi_atexit>
 8017ce0:	4c0f      	ldr	r4, [pc, #60]	; (8017d20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8017ce2:	7823      	ldrb	r3, [r4, #0]
 8017ce4:	f3bf 8f5b 	dmb	ish
 8017ce8:	07db      	lsls	r3, r3, #31
 8017cea:	d40b      	bmi.n	8017d04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8017cec:	4620      	mov	r0, r4
 8017cee:	f007 f9a6 	bl	801f03e <__cxa_guard_acquire>
 8017cf2:	b138      	cbz	r0, 8017d04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8017cf4:	4620      	mov	r0, r4
 8017cf6:	f007 f9ae 	bl	801f056 <__cxa_guard_release>
 8017cfa:	4a06      	ldr	r2, [pc, #24]	; (8017d14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8017cfc:	4909      	ldr	r1, [pc, #36]	; (8017d24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8017cfe:	480a      	ldr	r0, [pc, #40]	; (8017d28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8017d00:	f007 f996 	bl	801f030 <__aeabi_atexit>
 8017d04:	4b05      	ldr	r3, [pc, #20]	; (8017d1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8017d06:	672b      	str	r3, [r5, #112]	; 0x70
 8017d08:	4b07      	ldr	r3, [pc, #28]	; (8017d28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8017d0a:	676b      	str	r3, [r5, #116]	; 0x74
 8017d0c:	bd38      	pop	{r3, r4, r5, pc}
 8017d0e:	bf00      	nop
 8017d10:	2000a028 	.word	0x2000a028
 8017d14:	20000000 	.word	0x20000000
 8017d18:	080158a7 	.word	0x080158a7
 8017d1c:	20000028 	.word	0x20000028
 8017d20:	2000a02c 	.word	0x2000a02c
 8017d24:	080158a5 	.word	0x080158a5
 8017d28:	2000002c 	.word	0x2000002c

08017d2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8017d2c:	b538      	push	{r3, r4, r5, lr}
 8017d2e:	4c15      	ldr	r4, [pc, #84]	; (8017d84 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8017d30:	4605      	mov	r5, r0
 8017d32:	7823      	ldrb	r3, [r4, #0]
 8017d34:	f3bf 8f5b 	dmb	ish
 8017d38:	07da      	lsls	r2, r3, #31
 8017d3a:	d40b      	bmi.n	8017d54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8017d3c:	4620      	mov	r0, r4
 8017d3e:	f007 f97e 	bl	801f03e <__cxa_guard_acquire>
 8017d42:	b138      	cbz	r0, 8017d54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8017d44:	4620      	mov	r0, r4
 8017d46:	f007 f986 	bl	801f056 <__cxa_guard_release>
 8017d4a:	4a0f      	ldr	r2, [pc, #60]	; (8017d88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8017d4c:	490f      	ldr	r1, [pc, #60]	; (8017d8c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8017d4e:	4810      	ldr	r0, [pc, #64]	; (8017d90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8017d50:	f007 f96e 	bl	801f030 <__aeabi_atexit>
 8017d54:	4c0f      	ldr	r4, [pc, #60]	; (8017d94 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8017d56:	7823      	ldrb	r3, [r4, #0]
 8017d58:	f3bf 8f5b 	dmb	ish
 8017d5c:	07db      	lsls	r3, r3, #31
 8017d5e:	d40b      	bmi.n	8017d78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8017d60:	4620      	mov	r0, r4
 8017d62:	f007 f96c 	bl	801f03e <__cxa_guard_acquire>
 8017d66:	b138      	cbz	r0, 8017d78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8017d68:	4620      	mov	r0, r4
 8017d6a:	f007 f974 	bl	801f056 <__cxa_guard_release>
 8017d6e:	4a06      	ldr	r2, [pc, #24]	; (8017d88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8017d70:	4909      	ldr	r1, [pc, #36]	; (8017d98 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8017d72:	480a      	ldr	r0, [pc, #40]	; (8017d9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8017d74:	f007 f95c 	bl	801f030 <__aeabi_atexit>
 8017d78:	4b05      	ldr	r3, [pc, #20]	; (8017d90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8017d7a:	66ab      	str	r3, [r5, #104]	; 0x68
 8017d7c:	4b07      	ldr	r3, [pc, #28]	; (8017d9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8017d7e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8017d80:	bd38      	pop	{r3, r4, r5, pc}
 8017d82:	bf00      	nop
 8017d84:	2000a020 	.word	0x2000a020
 8017d88:	20000000 	.word	0x20000000
 8017d8c:	080158ab 	.word	0x080158ab
 8017d90:	20000020 	.word	0x20000020
 8017d94:	2000a024 	.word	0x2000a024
 8017d98:	080158a9 	.word	0x080158a9
 8017d9c:	20000024 	.word	0x20000024

08017da0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8017da0:	b510      	push	{r4, lr}
 8017da2:	4604      	mov	r4, r0
 8017da4:	f7ff ff88 	bl	8017cb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8017da8:	4620      	mov	r0, r4
 8017daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017dae:	f7ff bfbd 	b.w	8017d2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08017db2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8017db2:	b510      	push	{r4, lr}
 8017db4:	4604      	mov	r4, r0
 8017db6:	f7ff fff3 	bl	8017da0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8017dba:	4620      	mov	r0, r4
 8017dbc:	f7ff ff72 	bl	8017ca4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	f7ff fdf9 	bl	80179b8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8017dc6:	4620      	mov	r0, r4
 8017dc8:	f7ff fcfa 	bl	80177c0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8017dcc:	4620      	mov	r0, r4
 8017dce:	f7ff fd75 	bl	80178bc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8017dd2:	4620      	mov	r0, r4
 8017dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017dd8:	f7ff bee0 	b.w	8017b9c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08017ddc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8017ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017de0:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8017de4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8017de8:	f1be 0f00 	cmp.w	lr, #0
 8017dec:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8017df0:	fb0e 4708 	mla	r7, lr, r8, r4
 8017df4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8017df8:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8017dfc:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8017e00:	eb02 0a07 	add.w	sl, r2, r7
 8017e04:	8808      	ldrh	r0, [r1, #0]
 8017e06:	db37      	blt.n	8017e78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8017e08:	45f3      	cmp	fp, lr
 8017e0a:	dd35      	ble.n	8017e78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8017e0c:	2c00      	cmp	r4, #0
 8017e0e:	db31      	blt.n	8017e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8017e10:	45a0      	cmp	r8, r4
 8017e12:	dd2f      	ble.n	8017e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8017e14:	5dd2      	ldrb	r2, [r2, r7]
 8017e16:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8017e1a:	1c62      	adds	r2, r4, #1
 8017e1c:	d42f      	bmi.n	8017e7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8017e1e:	4590      	cmp	r8, r2
 8017e20:	dd2d      	ble.n	8017e7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8017e22:	b366      	cbz	r6, 8017e7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8017e24:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8017e28:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8017e2c:	f11e 0e01 	adds.w	lr, lr, #1
 8017e30:	d429      	bmi.n	8017e86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8017e32:	45f3      	cmp	fp, lr
 8017e34:	dd27      	ble.n	8017e86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8017e36:	f1bc 0f00 	cmp.w	ip, #0
 8017e3a:	f000 80a1 	beq.w	8017f80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 8017e3e:	2c00      	cmp	r4, #0
 8017e40:	db1f      	blt.n	8017e82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8017e42:	45a0      	cmp	r8, r4
 8017e44:	dd1d      	ble.n	8017e82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8017e46:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8017e4a:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8017e4e:	3401      	adds	r4, #1
 8017e50:	d41c      	bmi.n	8017e8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8017e52:	45a0      	cmp	r8, r4
 8017e54:	dd1a      	ble.n	8017e8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8017e56:	b1de      	cbz	r6, 8017e90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8017e58:	44d0      	add	r8, sl
 8017e5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017e5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017e62:	2e0f      	cmp	r6, #15
 8017e64:	d915      	bls.n	8017e92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8017e66:	4b49      	ldr	r3, [pc, #292]	; (8017f8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8017e68:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8017e6c:	4a48      	ldr	r2, [pc, #288]	; (8017f90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8017e6e:	4849      	ldr	r0, [pc, #292]	; (8017f94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8017e70:	f007 f912 	bl	801f098 <__assert_func>
 8017e74:	4681      	mov	r9, r0
 8017e76:	e7d0      	b.n	8017e1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8017e78:	4607      	mov	r7, r0
 8017e7a:	4681      	mov	r9, r0
 8017e7c:	e7d6      	b.n	8017e2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8017e7e:	4607      	mov	r7, r0
 8017e80:	e7d4      	b.n	8017e2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8017e82:	4686      	mov	lr, r0
 8017e84:	e7e3      	b.n	8017e4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8017e86:	4603      	mov	r3, r0
 8017e88:	4686      	mov	lr, r0
 8017e8a:	e7ea      	b.n	8017e62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8017e8c:	4603      	mov	r3, r0
 8017e8e:	e7e8      	b.n	8017e62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8017e90:	4603      	mov	r3, r0
 8017e92:	f1bc 0f0f 	cmp.w	ip, #15
 8017e96:	d8e6      	bhi.n	8017e66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8017e98:	fb16 f80c 	smulbb	r8, r6, ip
 8017e9c:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8017ea0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8017ea4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8017ea8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8017eac:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8017eb0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8017eb4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8017eb8:	ea44 0909 	orr.w	r9, r4, r9
 8017ebc:	f1cc 0410 	rsb	r4, ip, #16
 8017ec0:	041a      	lsls	r2, r3, #16
 8017ec2:	ea4a 0707 	orr.w	r7, sl, r7
 8017ec6:	1ba4      	subs	r4, r4, r6
 8017ec8:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8017ecc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8017ed0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8017ed4:	4377      	muls	r7, r6
 8017ed6:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8017eda:	4313      	orrs	r3, r2
 8017edc:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8017ee0:	fb04 7409 	mla	r4, r4, r9, r7
 8017ee4:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8017ee8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8017eec:	b2af      	uxth	r7, r5
 8017eee:	fb08 4303 	mla	r3, r8, r3, r4
 8017ef2:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8017ef6:	43ed      	mvns	r5, r5
 8017ef8:	10c6      	asrs	r6, r0, #3
 8017efa:	4322      	orrs	r2, r4
 8017efc:	b2ed      	uxtb	r5, r5
 8017efe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f06:	fb16 f605 	smulbb	r6, r6, r5
 8017f0a:	0d53      	lsrs	r3, r2, #21
 8017f0c:	0952      	lsrs	r2, r2, #5
 8017f0e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8017f12:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8017f16:	431a      	orrs	r2, r3
 8017f18:	b293      	uxth	r3, r2
 8017f1a:	1202      	asrs	r2, r0, #8
 8017f1c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8017f20:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8017f24:	00dc      	lsls	r4, r3, #3
 8017f26:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017f2a:	fb12 f205 	smulbb	r2, r2, r5
 8017f2e:	b2e4      	uxtb	r4, r4
 8017f30:	fb0c 2c07 	mla	ip, ip, r7, r2
 8017f34:	10da      	asrs	r2, r3, #3
 8017f36:	00c3      	lsls	r3, r0, #3
 8017f38:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8017f3c:	fa1f fc8c 	uxth.w	ip, ip
 8017f40:	b2db      	uxtb	r3, r3
 8017f42:	fb02 6207 	mla	r2, r2, r7, r6
 8017f46:	fb13 f305 	smulbb	r3, r3, r5
 8017f4a:	b296      	uxth	r6, r2
 8017f4c:	fb04 3307 	mla	r3, r4, r7, r3
 8017f50:	b29a      	uxth	r2, r3
 8017f52:	f10c 0301 	add.w	r3, ip, #1
 8017f56:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8017f5a:	1c53      	adds	r3, r2, #1
 8017f5c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8017f60:	1c72      	adds	r2, r6, #1
 8017f62:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017f66:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8017f6a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8017f6e:	0952      	lsrs	r2, r2, #5
 8017f70:	ea43 030c 	orr.w	r3, r3, ip
 8017f74:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017f78:	4313      	orrs	r3, r2
 8017f7a:	800b      	strh	r3, [r1, #0]
 8017f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f80:	2e0f      	cmp	r6, #15
 8017f82:	f63f af70 	bhi.w	8017e66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8017f86:	4603      	mov	r3, r0
 8017f88:	4686      	mov	lr, r0
 8017f8a:	e785      	b.n	8017e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8017f8c:	08023551 	.word	0x08023551
 8017f90:	08023bc7 	.word	0x08023bc7
 8017f94:	080235d5 	.word	0x080235d5

08017f98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f9c:	ed2d 8b08 	vpush	{d8-d11}
 8017fa0:	b099      	sub	sp, #100	; 0x64
 8017fa2:	eeb0 aa40 	vmov.f32	s20, s0
 8017fa6:	eef0 9a60 	vmov.f32	s19, s1
 8017faa:	9215      	str	r2, [sp, #84]	; 0x54
 8017fac:	eeb0 9a41 	vmov.f32	s18, s2
 8017fb0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017fb2:	eeb0 8a62 	vmov.f32	s16, s5
 8017fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8017fb8:	eef0 8a43 	vmov.f32	s17, s6
 8017fbc:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8017fc0:	eef0 ba44 	vmov.f32	s23, s8
 8017fc4:	9016      	str	r0, [sp, #88]	; 0x58
 8017fc6:	eeb0 ba64 	vmov.f32	s22, s9
 8017fca:	930d      	str	r3, [sp, #52]	; 0x34
 8017fcc:	eef0 aa45 	vmov.f32	s21, s10
 8017fd0:	6850      	ldr	r0, [r2, #4]
 8017fd2:	910c      	str	r1, [sp, #48]	; 0x30
 8017fd4:	6812      	ldr	r2, [r2, #0]
 8017fd6:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8017fda:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 8017fde:	fb00 1303 	mla	r3, r0, r3, r1
 8017fe2:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8017fe6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	930b      	str	r3, [sp, #44]	; 0x2c
 8017fec:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017fee:	685e      	ldr	r6, [r3, #4]
 8017ff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ff2:	3604      	adds	r6, #4
 8017ff4:	43db      	mvns	r3, r3
 8017ff6:	b2db      	uxtb	r3, r3
 8017ff8:	930a      	str	r3, [sp, #40]	; 0x28
 8017ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	dc03      	bgt.n	8018008 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018000:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018002:	2b00      	cmp	r3, #0
 8018004:	f340 8225 	ble.w	8018452 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8018008:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801800a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801800e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018012:	1e48      	subs	r0, r1, #1
 8018014:	1e57      	subs	r7, r2, #1
 8018016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018018:	2b00      	cmp	r3, #0
 801801a:	f340 80e3 	ble.w	80181e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 801801e:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8018022:	ea4f 4325 	mov.w	r3, r5, asr #16
 8018026:	d406      	bmi.n	8018036 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018028:	4584      	cmp	ip, r0
 801802a:	da04      	bge.n	8018036 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801802c:	2b00      	cmp	r3, #0
 801802e:	db02      	blt.n	8018036 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018030:	42bb      	cmp	r3, r7
 8018032:	f2c0 80d8 	blt.w	80181e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8018036:	f11c 0c01 	adds.w	ip, ip, #1
 801803a:	f100 80c9 	bmi.w	80181d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801803e:	4561      	cmp	r1, ip
 8018040:	f2c0 80c6 	blt.w	80181d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8018044:	3301      	adds	r3, #1
 8018046:	f100 80c3 	bmi.w	80181d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801804a:	429a      	cmp	r2, r3
 801804c:	f2c0 80c0 	blt.w	80181d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8018050:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8018054:	4647      	mov	r7, r8
 8018056:	f1bb 0f00 	cmp.w	fp, #0
 801805a:	f340 80e3 	ble.w	8018224 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801805e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8018060:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018064:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018066:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801806a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801806e:	ea5f 422a 	movs.w	r2, sl, asr #16
 8018072:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8018076:	689b      	ldr	r3, [r3, #8]
 8018078:	f100 8121 	bmi.w	80182be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801807c:	f103 39ff 	add.w	r9, r3, #4294967295
 8018080:	454a      	cmp	r2, r9
 8018082:	f280 811c 	bge.w	80182be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8018086:	f1bc 0f00 	cmp.w	ip, #0
 801808a:	f2c0 8118 	blt.w	80182be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801808e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8018092:	45cc      	cmp	ip, r9
 8018094:	f280 8113 	bge.w	80182be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8018098:	b21b      	sxth	r3, r3
 801809a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801809c:	fb0c 2203 	mla	r2, ip, r3, r2
 80180a0:	eb04 0902 	add.w	r9, r4, r2
 80180a4:	5ca2      	ldrb	r2, [r4, r2]
 80180a6:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 80180aa:	2800      	cmp	r0, #0
 80180ac:	f000 80fe 	beq.w	80182ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80180b0:	f899 2001 	ldrb.w	r2, [r9, #1]
 80180b4:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80180b8:	9211      	str	r2, [sp, #68]	; 0x44
 80180ba:	b151      	cbz	r1, 80180d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80180bc:	eb09 0203 	add.w	r2, r9, r3
 80180c0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80180c4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80180c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80180ca:	7853      	ldrb	r3, [r2, #1]
 80180cc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80180d0:	9312      	str	r3, [sp, #72]	; 0x48
 80180d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80180d4:	fb10 f201 	smulbb	r2, r0, r1
 80180d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80180da:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80180de:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80180e2:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80180e6:	10d2      	asrs	r2, r2, #3
 80180e8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80180ec:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 80180f0:	ea4c 0c03 	orr.w	ip, ip, r3
 80180f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80180f6:	041b      	lsls	r3, r3, #16
 80180f8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80180fc:	4323      	orrs	r3, r4
 80180fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018100:	4353      	muls	r3, r2
 8018102:	fb09 330c 	mla	r3, r9, ip, r3
 8018106:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801810a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801810e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8018112:	ea4c 0e0e 	orr.w	lr, ip, lr
 8018116:	f1c1 0c10 	rsb	ip, r1, #16
 801811a:	ebac 0c00 	sub.w	ip, ip, r0
 801811e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8018122:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8018126:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801812a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801812c:	0418      	lsls	r0, r3, #16
 801812e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8018132:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8018136:	4318      	orrs	r0, r3
 8018138:	fb02 c200 	mla	r2, r2, r0, ip
 801813c:	8838      	ldrh	r0, [r7, #0]
 801813e:	0d53      	lsrs	r3, r2, #21
 8018140:	0952      	lsrs	r2, r2, #5
 8018142:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018146:	1201      	asrs	r1, r0, #8
 8018148:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801814c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8018150:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8018154:	00c0      	lsls	r0, r0, #3
 8018156:	431a      	orrs	r2, r3
 8018158:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801815c:	fb11 f104 	smulbb	r1, r1, r4
 8018160:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8018164:	b292      	uxth	r2, r2
 8018166:	fb1e fe04 	smulbb	lr, lr, r4
 801816a:	b2c0      	uxtb	r0, r0
 801816c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8018170:	fb10 f004 	smulbb	r0, r0, r4
 8018174:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018178:	fb0c 1c03 	mla	ip, ip, r3, r1
 801817c:	10d1      	asrs	r1, r2, #3
 801817e:	00d2      	lsls	r2, r2, #3
 8018180:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8018184:	fa1f fc8c 	uxth.w	ip, ip
 8018188:	b2d2      	uxtb	r2, r2
 801818a:	fb01 e103 	mla	r1, r1, r3, lr
 801818e:	fb02 0303 	mla	r3, r2, r3, r0
 8018192:	b289      	uxth	r1, r1
 8018194:	b29a      	uxth	r2, r3
 8018196:	f10c 0301 	add.w	r3, ip, #1
 801819a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801819e:	1c53      	adds	r3, r2, #1
 80181a0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80181a4:	1c4a      	adds	r2, r1, #1
 80181a6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80181aa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80181ae:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80181b2:	0949      	lsrs	r1, r1, #5
 80181b4:	ea43 030c 	orr.w	r3, r3, ip
 80181b8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80181bc:	430b      	orrs	r3, r1
 80181be:	803b      	strh	r3, [r7, #0]
 80181c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80181c2:	3702      	adds	r7, #2
 80181c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80181c8:	449a      	add	sl, r3
 80181ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80181cc:	441d      	add	r5, r3
 80181ce:	e742      	b.n	8018056 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80181d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80181d2:	f108 0802 	add.w	r8, r8, #2
 80181d6:	449a      	add	sl, r3
 80181d8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80181da:	441d      	add	r5, r3
 80181dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181de:	3b01      	subs	r3, #1
 80181e0:	9309      	str	r3, [sp, #36]	; 0x24
 80181e2:	e718      	b.n	8018016 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80181e4:	d023      	beq.n	801822e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80181e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181e8:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80181ea:	3b01      	subs	r3, #1
 80181ec:	fb00 a003 	mla	r0, r0, r3, sl
 80181f0:	1400      	asrs	r0, r0, #16
 80181f2:	f53f af2d 	bmi.w	8018050 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80181f6:	3901      	subs	r1, #1
 80181f8:	4288      	cmp	r0, r1
 80181fa:	f6bf af29 	bge.w	8018050 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80181fe:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8018200:	fb01 5303 	mla	r3, r1, r3, r5
 8018204:	141b      	asrs	r3, r3, #16
 8018206:	f53f af23 	bmi.w	8018050 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801820a:	3a01      	subs	r2, #1
 801820c:	4293      	cmp	r3, r2
 801820e:	f6bf af1f 	bge.w	8018050 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8018212:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8018216:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801821a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801821e:	f1be 0f00 	cmp.w	lr, #0
 8018222:	dc6c      	bgt.n	80182fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8018224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018226:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801822a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801822e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018230:	2b00      	cmp	r3, #0
 8018232:	f340 810e 	ble.w	8018452 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8018236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801823a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801823c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018240:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8018244:	eef0 6a48 	vmov.f32	s13, s16
 8018248:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801824c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018250:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018254:	ee16 aa90 	vmov	sl, s13
 8018258:	eef0 6a68 	vmov.f32	s13, s17
 801825c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018260:	ee16 5a90 	vmov	r5, s13
 8018264:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018268:	ee69 7a27 	vmul.f32	s15, s18, s15
 801826c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018270:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018274:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018278:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801827c:	ee18 2a10 	vmov	r2, s16
 8018280:	eeb0 8a47 	vmov.f32	s16, s14
 8018284:	fb92 f3f3 	sdiv	r3, r2, r3
 8018288:	ee18 2a90 	vmov	r2, s17
 801828c:	932d      	str	r3, [sp, #180]	; 0xb4
 801828e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018290:	eef0 8a67 	vmov.f32	s17, s15
 8018294:	fb92 f3f3 	sdiv	r3, r2, r3
 8018298:	932e      	str	r3, [sp, #184]	; 0xb8
 801829a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801829c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801829e:	3b01      	subs	r3, #1
 80182a0:	930c      	str	r3, [sp, #48]	; 0x30
 80182a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80182a4:	bf08      	it	eq
 80182a6:	4613      	moveq	r3, r2
 80182a8:	9309      	str	r3, [sp, #36]	; 0x24
 80182aa:	e6a6      	b.n	8017ffa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80182ac:	2900      	cmp	r1, #0
 80182ae:	f43f af10 	beq.w	80180d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80182b2:	f819 3003 	ldrb.w	r3, [r9, r3]
 80182b6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80182ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80182bc:	e709      	b.n	80180d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80182be:	f112 0901 	adds.w	r9, r2, #1
 80182c2:	f53f af7d 	bmi.w	80181c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80182c6:	454b      	cmp	r3, r9
 80182c8:	f6ff af7a 	blt.w	80181c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80182cc:	f11c 0901 	adds.w	r9, ip, #1
 80182d0:	f53f af76 	bmi.w	80181c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80182d4:	45ce      	cmp	lr, r9
 80182d6:	f6ff af73 	blt.w	80181c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80182da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80182dc:	b21b      	sxth	r3, r3
 80182de:	9202      	str	r2, [sp, #8]
 80182e0:	fa0f f28e 	sxth.w	r2, lr
 80182e4:	9300      	str	r3, [sp, #0]
 80182e6:	4633      	mov	r3, r6
 80182e8:	9201      	str	r2, [sp, #4]
 80182ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80182ec:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80182f0:	e9cd c003 	strd	ip, r0, [sp, #12]
 80182f4:	4639      	mov	r1, r7
 80182f6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80182f8:	f7ff fd70 	bl	8017ddc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 80182fc:	e760      	b.n	80181c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80182fe:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018300:	ea4f 422a 	mov.w	r2, sl, asr #16
 8018304:	1429      	asrs	r1, r5, #16
 8018306:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018308:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801830c:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8018310:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018314:	fb03 2101 	mla	r1, r3, r1, r2
 8018318:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801831a:	440a      	add	r2, r1
 801831c:	5c61      	ldrb	r1, [r4, r1]
 801831e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8018322:	f1bc 0f00 	cmp.w	ip, #0
 8018326:	f000 808c 	beq.w	8018442 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 801832a:	7857      	ldrb	r7, [r2, #1]
 801832c:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8018330:	9413      	str	r4, [sp, #76]	; 0x4c
 8018332:	b140      	cbz	r0, 8018346 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8018334:	18d7      	adds	r7, r2, r3
 8018336:	5cd3      	ldrb	r3, [r2, r3]
 8018338:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801833c:	9310      	str	r3, [sp, #64]	; 0x40
 801833e:	787b      	ldrb	r3, [r7, #1]
 8018340:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8018344:	9314      	str	r3, [sp, #80]	; 0x50
 8018346:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018348:	fb1c f200 	smulbb	r2, ip, r0
 801834c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801834e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018352:	041f      	lsls	r7, r3, #16
 8018354:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8018358:	10d2      	asrs	r2, r2, #3
 801835a:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801835e:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8018362:	431f      	orrs	r7, r3
 8018364:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8018368:	9317      	str	r3, [sp, #92]	; 0x5c
 801836a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801836c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801836e:	041b      	lsls	r3, r3, #16
 8018370:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8018374:	ea43 030b 	orr.w	r3, r3, fp
 8018378:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801837c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8018380:	4353      	muls	r3, r2
 8018382:	fb04 3707 	mla	r7, r4, r7, r3
 8018386:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801838a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801838c:	ea43 0b01 	orr.w	fp, r3, r1
 8018390:	f1c0 0110 	rsb	r1, r0, #16
 8018394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018396:	eba1 0c0c 	sub.w	ip, r1, ip
 801839a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801839e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80183a2:	fb0c 770b 	mla	r7, ip, fp, r7
 80183a6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80183aa:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 80183ae:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80183b2:	ea4c 0c0b 	orr.w	ip, ip, fp
 80183b6:	fb02 770c 	mla	r7, r2, ip, r7
 80183ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80183bc:	0d79      	lsrs	r1, r7, #21
 80183be:	8812      	ldrh	r2, [r2, #0]
 80183c0:	097f      	lsrs	r7, r7, #5
 80183c2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80183c6:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80183ca:	430f      	orrs	r7, r1
 80183cc:	1211      	asrs	r1, r2, #8
 80183ce:	b2bb      	uxth	r3, r7
 80183d0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80183d4:	10d7      	asrs	r7, r2, #3
 80183d6:	fb11 f104 	smulbb	r1, r1, r4
 80183da:	1218      	asrs	r0, r3, #8
 80183dc:	00d2      	lsls	r2, r2, #3
 80183de:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80183e2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80183e6:	fb17 f704 	smulbb	r7, r7, r4
 80183ea:	b2d2      	uxtb	r2, r2
 80183ec:	fb00 1009 	mla	r0, r0, r9, r1
 80183f0:	10d9      	asrs	r1, r3, #3
 80183f2:	fb12 f204 	smulbb	r2, r2, r4
 80183f6:	00db      	lsls	r3, r3, #3
 80183f8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80183fc:	b280      	uxth	r0, r0
 80183fe:	b2db      	uxtb	r3, r3
 8018400:	fb01 7109 	mla	r1, r1, r9, r7
 8018404:	fb03 2309 	mla	r3, r3, r9, r2
 8018408:	1c42      	adds	r2, r0, #1
 801840a:	b289      	uxth	r1, r1
 801840c:	b29b      	uxth	r3, r3
 801840e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8018412:	1c4f      	adds	r7, r1, #1
 8018414:	1c5a      	adds	r2, r3, #1
 8018416:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801841a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801841e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8018422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018424:	0949      	lsrs	r1, r1, #5
 8018426:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801842a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801842e:	4310      	orrs	r0, r2
 8018430:	4308      	orrs	r0, r1
 8018432:	f823 0b02 	strh.w	r0, [r3], #2
 8018436:	930e      	str	r3, [sp, #56]	; 0x38
 8018438:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801843a:	449a      	add	sl, r3
 801843c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801843e:	441d      	add	r5, r3
 8018440:	e6ed      	b.n	801821e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8018442:	2800      	cmp	r0, #0
 8018444:	f43f af7f 	beq.w	8018346 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8018448:	5cd3      	ldrb	r3, [r2, r3]
 801844a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801844e:	9310      	str	r3, [sp, #64]	; 0x40
 8018450:	e779      	b.n	8018346 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8018452:	b019      	add	sp, #100	; 0x64
 8018454:	ecbd 8b08 	vpop	{d8-d11}
 8018458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801845c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801845c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018460:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8018464:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8018468:	2e00      	cmp	r6, #0
 801846a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801846e:	fb06 570e 	mla	r7, r6, lr, r5
 8018472:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8018476:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801847a:	eb02 0807 	add.w	r8, r2, r7
 801847e:	8808      	ldrh	r0, [r1, #0]
 8018480:	db38      	blt.n	80184f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8018482:	45b1      	cmp	r9, r6
 8018484:	dd36      	ble.n	80184f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8018486:	2d00      	cmp	r5, #0
 8018488:	db32      	blt.n	80184f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801848a:	45ae      	cmp	lr, r5
 801848c:	dd30      	ble.n	80184f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801848e:	5dd2      	ldrb	r2, [r2, r7]
 8018490:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8018494:	1c6a      	adds	r2, r5, #1
 8018496:	d430      	bmi.n	80184fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8018498:	4596      	cmp	lr, r2
 801849a:	dd2e      	ble.n	80184fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801849c:	b36c      	cbz	r4, 80184fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801849e:	f898 2001 	ldrb.w	r2, [r8, #1]
 80184a2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80184a6:	3601      	adds	r6, #1
 80184a8:	d42b      	bmi.n	8018502 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80184aa:	45b1      	cmp	r9, r6
 80184ac:	dd29      	ble.n	8018502 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80184ae:	f1bc 0f00 	cmp.w	ip, #0
 80184b2:	d028      	beq.n	8018506 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 80184b4:	2d00      	cmp	r5, #0
 80184b6:	db22      	blt.n	80184fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 80184b8:	45ae      	cmp	lr, r5
 80184ba:	dd20      	ble.n	80184fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 80184bc:	f818 600e 	ldrb.w	r6, [r8, lr]
 80184c0:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 80184c4:	3501      	adds	r5, #1
 80184c6:	d407      	bmi.n	80184d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80184c8:	45ae      	cmp	lr, r5
 80184ca:	dd05      	ble.n	80184d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80184cc:	b134      	cbz	r4, 80184dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80184ce:	44c6      	add	lr, r8
 80184d0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80184d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80184d8:	2c0f      	cmp	r4, #15
 80184da:	d802      	bhi.n	80184e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80184dc:	f1bc 0f0f 	cmp.w	ip, #15
 80184e0:	d914      	bls.n	801850c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 80184e2:	4b26      	ldr	r3, [pc, #152]	; (801857c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 80184e4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80184e8:	4a25      	ldr	r2, [pc, #148]	; (8018580 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 80184ea:	4826      	ldr	r0, [pc, #152]	; (8018584 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 80184ec:	f006 fdd4 	bl	801f098 <__assert_func>
 80184f0:	4607      	mov	r7, r0
 80184f2:	e7cf      	b.n	8018494 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 80184f4:	4602      	mov	r2, r0
 80184f6:	4607      	mov	r7, r0
 80184f8:	e7d5      	b.n	80184a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80184fa:	4602      	mov	r2, r0
 80184fc:	e7d3      	b.n	80184a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80184fe:	4606      	mov	r6, r0
 8018500:	e7e0      	b.n	80184c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8018502:	4606      	mov	r6, r0
 8018504:	e7e8      	b.n	80184d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8018506:	2c0f      	cmp	r4, #15
 8018508:	d8eb      	bhi.n	80184e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801850a:	4606      	mov	r6, r0
 801850c:	fb14 f30c 	smulbb	r3, r4, ip
 8018510:	043d      	lsls	r5, r7, #16
 8018512:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8018516:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801851a:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801851e:	10db      	asrs	r3, r3, #3
 8018520:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8018524:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8018528:	432f      	orrs	r7, r5
 801852a:	f1cc 0510 	rsb	r5, ip, #16
 801852e:	ea4e 0202 	orr.w	r2, lr, r2
 8018532:	1b2d      	subs	r5, r5, r4
 8018534:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8018538:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801853c:	4354      	muls	r4, r2
 801853e:	fb05 4507 	mla	r5, r5, r7, r4
 8018542:	0404      	lsls	r4, r0, #16
 8018544:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8018548:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801854c:	4320      	orrs	r0, r4
 801854e:	fb03 5400 	mla	r4, r3, r0, r5
 8018552:	0430      	lsls	r0, r6, #16
 8018554:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8018558:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801855c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8018560:	4330      	orrs	r0, r6
 8018562:	fb03 4000 	mla	r0, r3, r0, r4
 8018566:	0d43      	lsrs	r3, r0, #21
 8018568:	0940      	lsrs	r0, r0, #5
 801856a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801856e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8018572:	4318      	orrs	r0, r3
 8018574:	8008      	strh	r0, [r1, #0]
 8018576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801857a:	bf00      	nop
 801857c:	08023551 	.word	0x08023551
 8018580:	08023bc7 	.word	0x08023bc7
 8018584:	080235d5 	.word	0x080235d5

08018588 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801858c:	ed2d 8b0a 	vpush	{d8-d12}
 8018590:	b093      	sub	sp, #76	; 0x4c
 8018592:	eeb0 aa40 	vmov.f32	s20, s0
 8018596:	eef0 9a60 	vmov.f32	s19, s1
 801859a:	920f      	str	r2, [sp, #60]	; 0x3c
 801859c:	eeb0 9a41 	vmov.f32	s18, s2
 80185a0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80185a2:	eeb0 8a62 	vmov.f32	s16, s5
 80185a6:	9010      	str	r0, [sp, #64]	; 0x40
 80185a8:	eef0 8a43 	vmov.f32	s17, s6
 80185ac:	6850      	ldr	r0, [r2, #4]
 80185ae:	eeb0 ca44 	vmov.f32	s24, s8
 80185b2:	9108      	str	r1, [sp, #32]
 80185b4:	eef0 ba64 	vmov.f32	s23, s9
 80185b8:	9306      	str	r3, [sp, #24]
 80185ba:	eeb0 ba45 	vmov.f32	s22, s10
 80185be:	6812      	ldr	r2, [r2, #0]
 80185c0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80185c4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80185c8:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80185cc:	fb00 1303 	mla	r3, r0, r3, r1
 80185d0:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80185d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	9307      	str	r3, [sp, #28]
 80185da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80185dc:	685f      	ldr	r7, [r3, #4]
 80185de:	3704      	adds	r7, #4
 80185e0:	9b08      	ldr	r3, [sp, #32]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	dc03      	bgt.n	80185ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80185e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	f340 81b2 	ble.w	8018952 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80185ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80185f0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80185f4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80185f8:	1e48      	subs	r0, r1, #1
 80185fa:	f102 3cff 	add.w	ip, r2, #4294967295
 80185fe:	9b06      	ldr	r3, [sp, #24]
 8018600:	2b00      	cmp	r3, #0
 8018602:	f340 80a9 	ble.w	8018758 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8018606:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801860a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801860e:	d406      	bmi.n	801861e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018610:	4586      	cmp	lr, r0
 8018612:	da04      	bge.n	801861e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018614:	2b00      	cmp	r3, #0
 8018616:	db02      	blt.n	801861e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018618:	4563      	cmp	r3, ip
 801861a:	f2c0 809e 	blt.w	801875a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801861e:	f11e 0e01 	adds.w	lr, lr, #1
 8018622:	f100 808f 	bmi.w	8018744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8018626:	4571      	cmp	r1, lr
 8018628:	f2c0 808c 	blt.w	8018744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801862c:	3301      	adds	r3, #1
 801862e:	f100 8089 	bmi.w	8018744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8018632:	429a      	cmp	r2, r3
 8018634:	f2c0 8086 	blt.w	8018744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8018638:	f8dd b018 	ldr.w	fp, [sp, #24]
 801863c:	46c8      	mov	r8, r9
 801863e:	f1bb 0f00 	cmp.w	fp, #0
 8018642:	f340 80a6 	ble.w	8018792 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8018646:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8018648:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801864c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801864e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8018652:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8018656:	1422      	asrs	r2, r4, #16
 8018658:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801865c:	689b      	ldr	r3, [r3, #8]
 801865e:	f100 80e3 	bmi.w	8018828 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8018662:	f103 3aff 	add.w	sl, r3, #4294967295
 8018666:	4552      	cmp	r2, sl
 8018668:	f280 80de 	bge.w	8018828 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801866c:	f1bc 0f00 	cmp.w	ip, #0
 8018670:	f2c0 80da 	blt.w	8018828 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8018674:	f10e 3aff 	add.w	sl, lr, #4294967295
 8018678:	45d4      	cmp	ip, sl
 801867a:	f280 80d5 	bge.w	8018828 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801867e:	b21b      	sxth	r3, r3
 8018680:	9d07      	ldr	r5, [sp, #28]
 8018682:	fb0c 2203 	mla	r2, ip, r3, r2
 8018686:	eb05 0a02 	add.w	sl, r5, r2
 801868a:	5caa      	ldrb	r2, [r5, r2]
 801868c:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8018690:	2800      	cmp	r0, #0
 8018692:	f000 80c0 	beq.w	8018816 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8018696:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801869a:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801869e:	920b      	str	r2, [sp, #44]	; 0x2c
 80186a0:	b151      	cbz	r1, 80186b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80186a2:	eb0a 0203 	add.w	r2, sl, r3
 80186a6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80186aa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80186ae:	9309      	str	r3, [sp, #36]	; 0x24
 80186b0:	7853      	ldrb	r3, [r2, #1]
 80186b2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80186b6:	930c      	str	r3, [sp, #48]	; 0x30
 80186b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186ba:	fb10 f201 	smulbb	r2, r0, r1
 80186be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80186c0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80186c4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80186c8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80186cc:	10d2      	asrs	r2, r2, #3
 80186ce:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80186d2:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80186d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80186da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80186dc:	041b      	lsls	r3, r3, #16
 80186de:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80186e2:	432b      	orrs	r3, r5
 80186e4:	4353      	muls	r3, r2
 80186e6:	fb0a 330c 	mla	r3, sl, ip, r3
 80186ea:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80186ee:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80186f2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80186f6:	ea4c 0e0e 	orr.w	lr, ip, lr
 80186fa:	f1c1 0c10 	rsb	ip, r1, #16
 80186fe:	ebac 0c00 	sub.w	ip, ip, r0
 8018702:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8018706:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801870a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801870e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018710:	0418      	lsls	r0, r3, #16
 8018712:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8018716:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801871a:	4318      	orrs	r0, r3
 801871c:	fb02 c200 	mla	r2, r2, r0, ip
 8018720:	0d53      	lsrs	r3, r2, #21
 8018722:	0952      	lsrs	r2, r2, #5
 8018724:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018728:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801872c:	431a      	orrs	r2, r3
 801872e:	f8a8 2000 	strh.w	r2, [r8]
 8018732:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018734:	f108 0802 	add.w	r8, r8, #2
 8018738:	f10b 3bff 	add.w	fp, fp, #4294967295
 801873c:	441c      	add	r4, r3
 801873e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018740:	441e      	add	r6, r3
 8018742:	e77c      	b.n	801863e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8018744:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018746:	f109 0902 	add.w	r9, r9, #2
 801874a:	441c      	add	r4, r3
 801874c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801874e:	441e      	add	r6, r3
 8018750:	9b06      	ldr	r3, [sp, #24]
 8018752:	3b01      	subs	r3, #1
 8018754:	9306      	str	r3, [sp, #24]
 8018756:	e752      	b.n	80185fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018758:	d020      	beq.n	801879c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801875a:	9b06      	ldr	r3, [sp, #24]
 801875c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801875e:	3b01      	subs	r3, #1
 8018760:	fb00 4003 	mla	r0, r0, r3, r4
 8018764:	1400      	asrs	r0, r0, #16
 8018766:	f53f af67 	bmi.w	8018638 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801876a:	3901      	subs	r1, #1
 801876c:	4288      	cmp	r0, r1
 801876e:	f6bf af63 	bge.w	8018638 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018772:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8018774:	fb01 6303 	mla	r3, r1, r3, r6
 8018778:	141b      	asrs	r3, r3, #16
 801877a:	f53f af5d 	bmi.w	8018638 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801877e:	3a01      	subs	r2, #1
 8018780:	4293      	cmp	r3, r2
 8018782:	f6bf af59 	bge.w	8018638 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018786:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801878a:	46ca      	mov	sl, r9
 801878c:	f1b8 0f00 	cmp.w	r8, #0
 8018790:	dc67      	bgt.n	8018862 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8018792:	9b06      	ldr	r3, [sp, #24]
 8018794:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8018798:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801879c:	9b08      	ldr	r3, [sp, #32]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	f340 80d7 	ble.w	8018952 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80187a4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80187a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80187aa:	ee79 9aab 	vadd.f32	s19, s19, s23
 80187ae:	eef0 6a48 	vmov.f32	s13, s16
 80187b2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80187b6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80187ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80187be:	ee16 4a90 	vmov	r4, s13
 80187c2:	eef0 6a68 	vmov.f32	s13, s17
 80187c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80187ca:	ee16 6a90 	vmov	r6, s13
 80187ce:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80187d2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80187d6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80187da:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80187de:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80187e2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80187e6:	ee18 2a10 	vmov	r2, s16
 80187ea:	eeb0 8a47 	vmov.f32	s16, s14
 80187ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80187f2:	ee18 2a90 	vmov	r2, s17
 80187f6:	9329      	str	r3, [sp, #164]	; 0xa4
 80187f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80187fa:	eef0 8a67 	vmov.f32	s17, s15
 80187fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8018802:	932a      	str	r3, [sp, #168]	; 0xa8
 8018804:	9b08      	ldr	r3, [sp, #32]
 8018806:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018808:	3b01      	subs	r3, #1
 801880a:	9308      	str	r3, [sp, #32]
 801880c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801880e:	bf08      	it	eq
 8018810:	4613      	moveq	r3, r2
 8018812:	9306      	str	r3, [sp, #24]
 8018814:	e6e4      	b.n	80185e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8018816:	2900      	cmp	r1, #0
 8018818:	f43f af4e 	beq.w	80186b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801881c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8018820:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8018824:	9309      	str	r3, [sp, #36]	; 0x24
 8018826:	e747      	b.n	80186b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8018828:	f112 0a01 	adds.w	sl, r2, #1
 801882c:	d481      	bmi.n	8018732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801882e:	4553      	cmp	r3, sl
 8018830:	f6ff af7f 	blt.w	8018732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8018834:	f11c 0a01 	adds.w	sl, ip, #1
 8018838:	f53f af7b 	bmi.w	8018732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801883c:	45d6      	cmp	lr, sl
 801883e:	f6ff af78 	blt.w	8018732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8018842:	b21b      	sxth	r3, r3
 8018844:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8018848:	fa0f f28e 	sxth.w	r2, lr
 801884c:	9300      	str	r3, [sp, #0]
 801884e:	463b      	mov	r3, r7
 8018850:	9201      	str	r2, [sp, #4]
 8018852:	9a07      	ldr	r2, [sp, #28]
 8018854:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018858:	4641      	mov	r1, r8
 801885a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801885c:	f7ff fdfe 	bl	801845c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8018860:	e767      	b.n	8018732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8018862:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018864:	1422      	asrs	r2, r4, #16
 8018866:	1431      	asrs	r1, r6, #16
 8018868:	9d07      	ldr	r5, [sp, #28]
 801886a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801886e:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8018872:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8018876:	fb03 2101 	mla	r1, r3, r1, r2
 801887a:	9a07      	ldr	r2, [sp, #28]
 801887c:	440a      	add	r2, r1
 801887e:	5c69      	ldrb	r1, [r5, r1]
 8018880:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8018884:	f1be 0f00 	cmp.w	lr, #0
 8018888:	d05c      	beq.n	8018944 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 801888a:	f892 c001 	ldrb.w	ip, [r2, #1]
 801888e:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8018892:	950d      	str	r5, [sp, #52]	; 0x34
 8018894:	b150      	cbz	r0, 80188ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8018896:	eb02 0c03 	add.w	ip, r2, r3
 801889a:	5cd3      	ldrb	r3, [r2, r3]
 801889c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80188a0:	930a      	str	r3, [sp, #40]	; 0x28
 80188a2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80188a6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80188aa:	930e      	str	r3, [sp, #56]	; 0x38
 80188ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80188ae:	fb1e f200 	smulbb	r2, lr, r0
 80188b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80188b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80188b8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80188bc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80188c0:	10d2      	asrs	r2, r2, #3
 80188c2:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 80188c6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80188ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80188ce:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80188d2:	9311      	str	r3, [sp, #68]	; 0x44
 80188d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188d6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80188d8:	041b      	lsls	r3, r3, #16
 80188da:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80188de:	ea43 030b 	orr.w	r3, r3, fp
 80188e2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80188e6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80188ea:	4353      	muls	r3, r2
 80188ec:	fb05 3c0c 	mla	ip, r5, ip, r3
 80188f0:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80188f4:	ea43 0b01 	orr.w	fp, r3, r1
 80188f8:	f1c0 0110 	rsb	r1, r0, #16
 80188fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188fe:	eba1 0e0e 	sub.w	lr, r1, lr
 8018902:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8018906:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801890a:	fb0e cc0b 	mla	ip, lr, fp, ip
 801890e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8018912:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8018916:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801891a:	ea4b 0e0e 	orr.w	lr, fp, lr
 801891e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8018922:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8018926:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801892a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801892e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8018932:	ea43 0c0c 	orr.w	ip, r3, ip
 8018936:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018938:	441c      	add	r4, r3
 801893a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801893c:	f82a cb02 	strh.w	ip, [sl], #2
 8018940:	441e      	add	r6, r3
 8018942:	e723      	b.n	801878c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8018944:	2800      	cmp	r0, #0
 8018946:	d0b1      	beq.n	80188ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8018948:	5cd3      	ldrb	r3, [r2, r3]
 801894a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801894e:	930a      	str	r3, [sp, #40]	; 0x28
 8018950:	e7ac      	b.n	80188ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8018952:	b013      	add	sp, #76	; 0x4c
 8018954:	ecbd 8b0a 	vpop	{d8-d12}
 8018958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801895c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801895c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018960:	468b      	mov	fp, r1
 8018962:	8809      	ldrh	r1, [r1, #0]
 8018964:	b089      	sub	sp, #36	; 0x24
 8018966:	10cd      	asrs	r5, r1, #3
 8018968:	ea4f 2921 	mov.w	r9, r1, asr #8
 801896c:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8018970:	00c9      	lsls	r1, r1, #3
 8018972:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8018976:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801897a:	9202      	str	r2, [sp, #8]
 801897c:	b2c9      	uxtb	r1, r1
 801897e:	9500      	str	r5, [sp, #0]
 8018980:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8018984:	9101      	str	r1, [sp, #4]
 8018986:	9900      	ldr	r1, [sp, #0]
 8018988:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801898c:	0209      	lsls	r1, r1, #8
 801898e:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8018992:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8018996:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 801899a:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 801899e:	fb04 650e 	mla	r5, r4, lr, r6
 80189a2:	2c00      	cmp	r4, #0
 80189a4:	eb02 0805 	add.w	r8, r2, r5
 80189a8:	9a01      	ldr	r2, [sp, #4]
 80189aa:	ea41 0102 	orr.w	r1, r1, r2
 80189ae:	9107      	str	r1, [sp, #28]
 80189b0:	db43      	blt.n	8018a3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 80189b2:	45a2      	cmp	sl, r4
 80189b4:	dd41      	ble.n	8018a3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 80189b6:	2e00      	cmp	r6, #0
 80189b8:	db3d      	blt.n	8018a36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 80189ba:	45b6      	cmp	lr, r6
 80189bc:	dd3b      	ble.n	8018a36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 80189be:	9a02      	ldr	r2, [sp, #8]
 80189c0:	5d55      	ldrb	r5, [r2, r5]
 80189c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80189c6:	441d      	add	r5, r3
 80189c8:	1c72      	adds	r2, r6, #1
 80189ca:	d439      	bmi.n	8018a40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 80189cc:	4596      	cmp	lr, r2
 80189ce:	dd37      	ble.n	8018a40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 80189d0:	2f00      	cmp	r7, #0
 80189d2:	d035      	beq.n	8018a40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 80189d4:	f898 1001 	ldrb.w	r1, [r8, #1]
 80189d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80189dc:	4419      	add	r1, r3
 80189de:	3401      	adds	r4, #1
 80189e0:	d432      	bmi.n	8018a48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 80189e2:	45a2      	cmp	sl, r4
 80189e4:	dd30      	ble.n	8018a48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 80189e6:	b378      	cbz	r0, 8018a48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 80189e8:	2e00      	cmp	r6, #0
 80189ea:	db2b      	blt.n	8018a44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 80189ec:	45b6      	cmp	lr, r6
 80189ee:	dd29      	ble.n	8018a44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 80189f0:	f818 400e 	ldrb.w	r4, [r8, lr]
 80189f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80189f8:	441c      	add	r4, r3
 80189fa:	3601      	adds	r6, #1
 80189fc:	d427      	bmi.n	8018a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 80189fe:	45b6      	cmp	lr, r6
 8018a00:	dd25      	ble.n	8018a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8018a02:	b327      	cbz	r7, 8018a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8018a04:	44c6      	add	lr, r8
 8018a06:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8018a0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018a0e:	4413      	add	r3, r2
 8018a10:	782a      	ldrb	r2, [r5, #0]
 8018a12:	2f0f      	cmp	r7, #15
 8018a14:	9202      	str	r2, [sp, #8]
 8018a16:	780a      	ldrb	r2, [r1, #0]
 8018a18:	9203      	str	r2, [sp, #12]
 8018a1a:	7822      	ldrb	r2, [r4, #0]
 8018a1c:	9204      	str	r2, [sp, #16]
 8018a1e:	781a      	ldrb	r2, [r3, #0]
 8018a20:	9205      	str	r2, [sp, #20]
 8018a22:	d801      	bhi.n	8018a28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 8018a24:	280f      	cmp	r0, #15
 8018a26:	d914      	bls.n	8018a52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 8018a28:	4b3f      	ldr	r3, [pc, #252]	; (8018b28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8018a2a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8018a2e:	4a3f      	ldr	r2, [pc, #252]	; (8018b2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8018a30:	483f      	ldr	r0, [pc, #252]	; (8018b30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 8018a32:	f006 fb31 	bl	801f098 <__assert_func>
 8018a36:	ad07      	add	r5, sp, #28
 8018a38:	e7c6      	b.n	80189c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 8018a3a:	a907      	add	r1, sp, #28
 8018a3c:	460d      	mov	r5, r1
 8018a3e:	e7ce      	b.n	80189de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8018a40:	a907      	add	r1, sp, #28
 8018a42:	e7cc      	b.n	80189de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8018a44:	ac07      	add	r4, sp, #28
 8018a46:	e7d8      	b.n	80189fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 8018a48:	ab07      	add	r3, sp, #28
 8018a4a:	461c      	mov	r4, r3
 8018a4c:	e7e0      	b.n	8018a10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8018a4e:	ab07      	add	r3, sp, #28
 8018a50:	e7de      	b.n	8018a10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8018a52:	b2ba      	uxth	r2, r7
 8018a54:	f891 8002 	ldrb.w	r8, [r1, #2]
 8018a58:	b280      	uxth	r0, r0
 8018a5a:	7849      	ldrb	r1, [r1, #1]
 8018a5c:	78ae      	ldrb	r6, [r5, #2]
 8018a5e:	fa1f f78c 	uxth.w	r7, ip
 8018a62:	fb02 fa00 	mul.w	sl, r2, r0
 8018a66:	0112      	lsls	r2, r2, #4
 8018a68:	786d      	ldrb	r5, [r5, #1]
 8018a6a:	ea6f 0c0c 	mvn.w	ip, ip
 8018a6e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8018a72:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8018a76:	eba2 020a 	sub.w	r2, r2, sl
 8018a7a:	fa5f fc8c 	uxtb.w	ip, ip
 8018a7e:	b280      	uxth	r0, r0
 8018a80:	fb19 f90c 	smulbb	r9, r9, ip
 8018a84:	b292      	uxth	r2, r2
 8018a86:	ebae 0e00 	sub.w	lr, lr, r0
 8018a8a:	4351      	muls	r1, r2
 8018a8c:	fa1f fe8e 	uxth.w	lr, lr
 8018a90:	fb02 f808 	mul.w	r8, r2, r8
 8018a94:	fb0e 1505 	mla	r5, lr, r5, r1
 8018a98:	7861      	ldrb	r1, [r4, #1]
 8018a9a:	fb0e 8806 	mla	r8, lr, r6, r8
 8018a9e:	78a6      	ldrb	r6, [r4, #2]
 8018aa0:	fb00 5501 	mla	r5, r0, r1, r5
 8018aa4:	7859      	ldrb	r1, [r3, #1]
 8018aa6:	fb00 8806 	mla	r8, r0, r6, r8
 8018aaa:	789e      	ldrb	r6, [r3, #2]
 8018aac:	9b00      	ldr	r3, [sp, #0]
 8018aae:	fb0a 5101 	mla	r1, sl, r1, r5
 8018ab2:	fb0a 8606 	mla	r6, sl, r6, r8
 8018ab6:	fb13 f50c 	smulbb	r5, r3, ip
 8018aba:	9b03      	ldr	r3, [sp, #12]
 8018abc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8018ac0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018ac4:	435a      	muls	r2, r3
 8018ac6:	9b02      	ldr	r3, [sp, #8]
 8018ac8:	fb06 9607 	mla	r6, r6, r7, r9
 8018acc:	fb0e 2203 	mla	r2, lr, r3, r2
 8018ad0:	9b04      	ldr	r3, [sp, #16]
 8018ad2:	b2b6      	uxth	r6, r6
 8018ad4:	fb01 5107 	mla	r1, r1, r7, r5
 8018ad8:	fb00 2003 	mla	r0, r0, r3, r2
 8018adc:	9b05      	ldr	r3, [sp, #20]
 8018ade:	f106 0901 	add.w	r9, r6, #1
 8018ae2:	b289      	uxth	r1, r1
 8018ae4:	fb0a 0a03 	mla	sl, sl, r3, r0
 8018ae8:	9b01      	ldr	r3, [sp, #4]
 8018aea:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8018aee:	1c4d      	adds	r5, r1, #1
 8018af0:	fb13 fc0c 	smulbb	ip, r3, ip
 8018af4:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8018af8:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 8018afc:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8018b00:	fb0a c707 	mla	r7, sl, r7, ip
 8018b04:	0949      	lsrs	r1, r1, #5
 8018b06:	b2bf      	uxth	r7, r7
 8018b08:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8018b0c:	1c7e      	adds	r6, r7, #1
 8018b0e:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8018b12:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8018b16:	ea46 0609 	orr.w	r6, r6, r9
 8018b1a:	430e      	orrs	r6, r1
 8018b1c:	f8ab 6000 	strh.w	r6, [fp]
 8018b20:	b009      	add	sp, #36	; 0x24
 8018b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b26:	bf00      	nop
 8018b28:	08023551 	.word	0x08023551
 8018b2c:	08023b1e 	.word	0x08023b1e
 8018b30:	080235d5 	.word	0x080235d5

08018b34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b38:	ed2d 8b08 	vpush	{d8-d11}
 8018b3c:	b095      	sub	sp, #84	; 0x54
 8018b3e:	eeb0 aa40 	vmov.f32	s20, s0
 8018b42:	eef0 9a60 	vmov.f32	s19, s1
 8018b46:	9212      	str	r2, [sp, #72]	; 0x48
 8018b48:	eeb0 9a41 	vmov.f32	s18, s2
 8018b4c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018b4e:	eeb0 8a62 	vmov.f32	s16, s5
 8018b52:	9309      	str	r3, [sp, #36]	; 0x24
 8018b54:	eef0 8a43 	vmov.f32	s17, s6
 8018b58:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8018b5c:	eef0 ba44 	vmov.f32	s23, s8
 8018b60:	9013      	str	r0, [sp, #76]	; 0x4c
 8018b62:	eeb0 ba64 	vmov.f32	s22, s9
 8018b66:	930f      	str	r3, [sp, #60]	; 0x3c
 8018b68:	eef0 aa45 	vmov.f32	s21, s10
 8018b6c:	6850      	ldr	r0, [r2, #4]
 8018b6e:	910e      	str	r1, [sp, #56]	; 0x38
 8018b70:	6812      	ldr	r2, [r2, #0]
 8018b72:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8018b76:	fb00 1303 	mla	r3, r0, r3, r1
 8018b7a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8018b80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	930d      	str	r3, [sp, #52]	; 0x34
 8018b86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018b88:	685c      	ldr	r4, [r3, #4]
 8018b8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b8c:	3404      	adds	r4, #4
 8018b8e:	43db      	mvns	r3, r3
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	930b      	str	r3, [sp, #44]	; 0x2c
 8018b94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	dc03      	bgt.n	8018ba2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018b9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	f340 8255 	ble.w	801904c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8018ba2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018ba4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018ba8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018bac:	1e48      	subs	r0, r1, #1
 8018bae:	1e55      	subs	r5, r2, #1
 8018bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	f340 80f9 	ble.w	8018daa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8018bb8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8018bba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018bbc:	1436      	asrs	r6, r6, #16
 8018bbe:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018bc2:	d406      	bmi.n	8018bd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018bc4:	4286      	cmp	r6, r0
 8018bc6:	da04      	bge.n	8018bd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	db02      	blt.n	8018bd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018bcc:	42ab      	cmp	r3, r5
 8018bce:	f2c0 80ed 	blt.w	8018dac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8018bd2:	3601      	adds	r6, #1
 8018bd4:	f100 80da 	bmi.w	8018d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8018bd8:	42b1      	cmp	r1, r6
 8018bda:	f2c0 80d7 	blt.w	8018d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8018bde:	3301      	adds	r3, #1
 8018be0:	f100 80d4 	bmi.w	8018d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8018be4:	429a      	cmp	r2, r3
 8018be6:	f2c0 80d1 	blt.w	8018d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8018bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bec:	9311      	str	r3, [sp, #68]	; 0x44
 8018bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018bf0:	930c      	str	r3, [sp, #48]	; 0x30
 8018bf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	f340 80fa 	ble.w	8018dee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8018bfa:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8018bfc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018bfe:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8018c00:	68c6      	ldr	r6, [r0, #12]
 8018c02:	141d      	asrs	r5, r3, #16
 8018c04:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8018c06:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018c0a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018c0c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8018c0e:	1400      	asrs	r0, r0, #16
 8018c10:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8018c14:	6892      	ldr	r2, [r2, #8]
 8018c16:	f100 813e 	bmi.w	8018e96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8018c1a:	1e57      	subs	r7, r2, #1
 8018c1c:	42b8      	cmp	r0, r7
 8018c1e:	f280 813a 	bge.w	8018e96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8018c22:	2d00      	cmp	r5, #0
 8018c24:	f2c0 8137 	blt.w	8018e96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8018c28:	1e77      	subs	r7, r6, #1
 8018c2a:	42bd      	cmp	r5, r7
 8018c2c:	f280 8133 	bge.w	8018e96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8018c30:	b212      	sxth	r2, r2
 8018c32:	fb05 0002 	mla	r0, r5, r2, r0
 8018c36:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018c38:	f815 a000 	ldrb.w	sl, [r5, r0]
 8018c3c:	182e      	adds	r6, r5, r0
 8018c3e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8018c42:	eb04 050a 	add.w	r5, r4, sl
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	f000 8117 	beq.w	8018e7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8018c4c:	f896 c001 	ldrb.w	ip, [r6, #1]
 8018c50:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8018c54:	44a4      	add	ip, r4
 8018c56:	2900      	cmp	r1, #0
 8018c58:	f000 8117 	beq.w	8018e8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8018c5c:	18b0      	adds	r0, r6, r2
 8018c5e:	5cb2      	ldrb	r2, [r6, r2]
 8018c60:	7840      	ldrb	r0, [r0, #1]
 8018c62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018c66:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018c6a:	4422      	add	r2, r4
 8018c6c:	4420      	add	r0, r4
 8018c6e:	b29b      	uxth	r3, r3
 8018c70:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8018c74:	b289      	uxth	r1, r1
 8018c76:	f895 b002 	ldrb.w	fp, [r5, #2]
 8018c7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018c7c:	fb03 f901 	mul.w	r9, r3, r1
 8018c80:	011b      	lsls	r3, r3, #4
 8018c82:	f8b6 e000 	ldrh.w	lr, [r6]
 8018c86:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018c8a:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8018c8e:	eba3 0309 	sub.w	r3, r3, r9
 8018c92:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8018c96:	b289      	uxth	r1, r1
 8018c98:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8018c9c:	b29b      	uxth	r3, r3
 8018c9e:	eba8 0801 	sub.w	r8, r8, r1
 8018ca2:	435f      	muls	r7, r3
 8018ca4:	fa1f f888 	uxth.w	r8, r8
 8018ca8:	9310      	str	r3, [sp, #64]	; 0x40
 8018caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018cac:	fb08 770b 	mla	r7, r8, fp, r7
 8018cb0:	f892 b002 	ldrb.w	fp, [r2, #2]
 8018cb4:	fb01 770b 	mla	r7, r1, fp, r7
 8018cb8:	f890 b002 	ldrb.w	fp, [r0, #2]
 8018cbc:	fb09 770b 	mla	r7, r9, fp, r7
 8018cc0:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8018cc4:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8018cc8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8018ccc:	fb1b fb03 	smulbb	fp, fp, r3
 8018cd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018cd2:	fb07 b706 	mla	r7, r7, r6, fp
 8018cd6:	f895 b001 	ldrb.w	fp, [r5, #1]
 8018cda:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8018cde:	f89c c000 	ldrb.w	ip, [ip]
 8018ce2:	b2bf      	uxth	r7, r7
 8018ce4:	435d      	muls	r5, r3
 8018ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ce8:	fb08 550b 	mla	r5, r8, fp, r5
 8018cec:	f892 b001 	ldrb.w	fp, [r2, #1]
 8018cf0:	fb01 550b 	mla	r5, r1, fp, r5
 8018cf4:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018cf8:	fb09 550b 	mla	r5, r9, fp, r5
 8018cfc:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8018d00:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018d04:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8018d08:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8018d0c:	fa5f fe8e 	uxtb.w	lr, lr
 8018d10:	fb1b fb03 	smulbb	fp, fp, r3
 8018d14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018d16:	fb03 f30c 	mul.w	r3, r3, ip
 8018d1a:	f892 c000 	ldrb.w	ip, [r2]
 8018d1e:	fb05 b506 	mla	r5, r5, r6, fp
 8018d22:	fb08 330a 	mla	r3, r8, sl, r3
 8018d26:	b2ad      	uxth	r5, r5
 8018d28:	fb01 330c 	mla	r3, r1, ip, r3
 8018d2c:	f890 c000 	ldrb.w	ip, [r0]
 8018d30:	f105 0b01 	add.w	fp, r5, #1
 8018d34:	fb09 3c0c 	mla	ip, r9, ip, r3
 8018d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d3a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8018d3e:	fb1e fe03 	smulbb	lr, lr, r3
 8018d42:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8018d46:	1c7b      	adds	r3, r7, #1
 8018d48:	096d      	lsrs	r5, r5, #5
 8018d4a:	fb0c e606 	mla	r6, ip, r6, lr
 8018d4e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8018d52:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018d56:	b2b6      	uxth	r6, r6
 8018d58:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8018d5c:	1c77      	adds	r7, r6, #1
 8018d5e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8018d62:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8018d66:	431f      	orrs	r7, r3
 8018d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d6a:	433d      	orrs	r5, r7
 8018d6c:	801d      	strh	r5, [r3, #0]
 8018d6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d70:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018d72:	3302      	adds	r3, #2
 8018d74:	930c      	str	r3, [sp, #48]	; 0x30
 8018d76:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018d78:	4413      	add	r3, r2
 8018d7a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8018d7c:	9327      	str	r3, [sp, #156]	; 0x9c
 8018d7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018d80:	4413      	add	r3, r2
 8018d82:	9328      	str	r3, [sp, #160]	; 0xa0
 8018d84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018d86:	3b01      	subs	r3, #1
 8018d88:	9311      	str	r3, [sp, #68]	; 0x44
 8018d8a:	e732      	b.n	8018bf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8018d8c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018d8e:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8018d90:	4433      	add	r3, r6
 8018d92:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8018d94:	9327      	str	r3, [sp, #156]	; 0x9c
 8018d96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018d98:	4433      	add	r3, r6
 8018d9a:	9328      	str	r3, [sp, #160]	; 0xa0
 8018d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d9e:	3b01      	subs	r3, #1
 8018da0:	9309      	str	r3, [sp, #36]	; 0x24
 8018da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018da4:	3302      	adds	r3, #2
 8018da6:	930a      	str	r3, [sp, #40]	; 0x28
 8018da8:	e702      	b.n	8018bb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018daa:	d027      	beq.n	8018dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8018dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dae:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8018db0:	3b01      	subs	r3, #1
 8018db2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8018db4:	fb00 5003 	mla	r0, r0, r3, r5
 8018db8:	1400      	asrs	r0, r0, #16
 8018dba:	f53f af16 	bmi.w	8018bea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8018dbe:	3901      	subs	r1, #1
 8018dc0:	4288      	cmp	r0, r1
 8018dc2:	f6bf af12 	bge.w	8018bea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8018dc6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8018dc8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8018dca:	fb01 0303 	mla	r3, r1, r3, r0
 8018dce:	141b      	asrs	r3, r3, #16
 8018dd0:	f53f af0b 	bmi.w	8018bea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8018dd4:	3a01      	subs	r2, #1
 8018dd6:	4293      	cmp	r3, r2
 8018dd8:	f6bf af07 	bge.w	8018bea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8018ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dde:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8018de2:	9311      	str	r3, [sp, #68]	; 0x44
 8018de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018de6:	930c      	str	r3, [sp, #48]	; 0x30
 8018de8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	dc70      	bgt.n	8018ed0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8018dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018df2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018df6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8018dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	f340 8124 	ble.w	801904c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8018e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018e08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018e0a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018e0e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8018e12:	eef0 6a48 	vmov.f32	s13, s16
 8018e16:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018e1a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018e1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018e22:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8018e26:	eef0 6a68 	vmov.f32	s13, s17
 8018e2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018e2e:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8018e32:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018e36:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018e3a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018e3e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018e42:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018e46:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018e4a:	ee18 2a10 	vmov	r2, s16
 8018e4e:	eeb0 8a47 	vmov.f32	s16, s14
 8018e52:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e56:	ee18 2a90 	vmov	r2, s17
 8018e5a:	9329      	str	r3, [sp, #164]	; 0xa4
 8018e5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018e5e:	eef0 8a67 	vmov.f32	s17, s15
 8018e62:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e66:	932a      	str	r3, [sp, #168]	; 0xa8
 8018e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018e6c:	3b01      	subs	r3, #1
 8018e6e:	930e      	str	r3, [sp, #56]	; 0x38
 8018e70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018e72:	bf08      	it	eq
 8018e74:	4613      	moveq	r3, r2
 8018e76:	9309      	str	r3, [sp, #36]	; 0x24
 8018e78:	e68c      	b.n	8018b94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018e7a:	b149      	cbz	r1, 8018e90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8018e7c:	5cb2      	ldrb	r2, [r6, r2]
 8018e7e:	4628      	mov	r0, r5
 8018e80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018e84:	4422      	add	r2, r4
 8018e86:	46ac      	mov	ip, r5
 8018e88:	e6f1      	b.n	8018c6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018e8a:	4628      	mov	r0, r5
 8018e8c:	462a      	mov	r2, r5
 8018e8e:	e6ee      	b.n	8018c6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018e90:	4628      	mov	r0, r5
 8018e92:	462a      	mov	r2, r5
 8018e94:	e7f7      	b.n	8018e86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8018e96:	1c47      	adds	r7, r0, #1
 8018e98:	f53f af69 	bmi.w	8018d6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8018e9c:	42ba      	cmp	r2, r7
 8018e9e:	f6ff af66 	blt.w	8018d6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8018ea2:	1c6f      	adds	r7, r5, #1
 8018ea4:	f53f af63 	bmi.w	8018d6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8018ea8:	42be      	cmp	r6, r7
 8018eaa:	f6ff af60 	blt.w	8018d6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8018eae:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018eb0:	b236      	sxth	r6, r6
 8018eb2:	b212      	sxth	r2, r2
 8018eb4:	9002      	str	r0, [sp, #8]
 8018eb6:	9601      	str	r6, [sp, #4]
 8018eb8:	9200      	str	r2, [sp, #0]
 8018eba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018ebc:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8018ec0:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8018ec4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8018ec8:	4623      	mov	r3, r4
 8018eca:	f7ff fd47 	bl	801895c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8018ece:	e74e      	b.n	8018d6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8018ed0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8018ed2:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8018ed4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018ed8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8018eda:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8018edc:	1400      	asrs	r0, r0, #16
 8018ede:	142d      	asrs	r5, r5, #16
 8018ee0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018ee2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8018ee6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8018eea:	fb02 5000 	mla	r0, r2, r0, r5
 8018eee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018ef0:	f815 9000 	ldrb.w	r9, [r5, r0]
 8018ef4:	182e      	adds	r6, r5, r0
 8018ef6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018efa:	eb04 0509 	add.w	r5, r4, r9
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	f000 8096 	beq.w	8019030 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8018f04:	7877      	ldrb	r7, [r6, #1]
 8018f06:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018f0a:	4427      	add	r7, r4
 8018f0c:	2900      	cmp	r1, #0
 8018f0e:	f000 8097 	beq.w	8019040 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8018f12:	18b0      	adds	r0, r6, r2
 8018f14:	5cb2      	ldrb	r2, [r6, r2]
 8018f16:	7840      	ldrb	r0, [r0, #1]
 8018f18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018f1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018f20:	4422      	add	r2, r4
 8018f22:	4420      	add	r0, r4
 8018f24:	b29b      	uxth	r3, r3
 8018f26:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018f28:	b289      	uxth	r1, r1
 8018f2a:	f895 b002 	ldrb.w	fp, [r5, #2]
 8018f2e:	f8b6 c000 	ldrh.w	ip, [r6]
 8018f32:	fb03 f801 	mul.w	r8, r3, r1
 8018f36:	011b      	lsls	r3, r3, #4
 8018f38:	78be      	ldrb	r6, [r7, #2]
 8018f3a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8018f3e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8018f42:	eba3 0308 	sub.w	r3, r3, r8
 8018f46:	f814 9009 	ldrb.w	r9, [r4, r9]
 8018f4a:	b289      	uxth	r1, r1
 8018f4c:	b29b      	uxth	r3, r3
 8018f4e:	ebae 0e01 	sub.w	lr, lr, r1
 8018f52:	435e      	muls	r6, r3
 8018f54:	fa1f fe8e 	uxth.w	lr, lr
 8018f58:	9310      	str	r3, [sp, #64]	; 0x40
 8018f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f5c:	fb0e 660b 	mla	r6, lr, fp, r6
 8018f60:	f892 b002 	ldrb.w	fp, [r2, #2]
 8018f64:	fb01 660b 	mla	r6, r1, fp, r6
 8018f68:	f890 b002 	ldrb.w	fp, [r0, #2]
 8018f6c:	fb08 660b 	mla	r6, r8, fp, r6
 8018f70:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8018f74:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8018f78:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8018f7c:	fb1b fb03 	smulbb	fp, fp, r3
 8018f80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018f82:	fb06 b60a 	mla	r6, r6, sl, fp
 8018f86:	f895 b001 	ldrb.w	fp, [r5, #1]
 8018f8a:	787d      	ldrb	r5, [r7, #1]
 8018f8c:	783f      	ldrb	r7, [r7, #0]
 8018f8e:	b2b6      	uxth	r6, r6
 8018f90:	435d      	muls	r5, r3
 8018f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f94:	fb0e 550b 	mla	r5, lr, fp, r5
 8018f98:	f892 b001 	ldrb.w	fp, [r2, #1]
 8018f9c:	fb01 550b 	mla	r5, r1, fp, r5
 8018fa0:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018fa4:	fb08 550b 	mla	r5, r8, fp, r5
 8018fa8:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8018fac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018fb0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8018fb4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8018fb8:	fa5f fc8c 	uxtb.w	ip, ip
 8018fbc:	fb1b fb03 	smulbb	fp, fp, r3
 8018fc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018fc2:	437b      	muls	r3, r7
 8018fc4:	7817      	ldrb	r7, [r2, #0]
 8018fc6:	fb05 b50a 	mla	r5, r5, sl, fp
 8018fca:	fb0e 3309 	mla	r3, lr, r9, r3
 8018fce:	b2ad      	uxth	r5, r5
 8018fd0:	fb01 3307 	mla	r3, r1, r7, r3
 8018fd4:	7807      	ldrb	r7, [r0, #0]
 8018fd6:	f105 0b01 	add.w	fp, r5, #1
 8018fda:	fb08 3707 	mla	r7, r8, r7, r3
 8018fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018fe0:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8018fe4:	fb1c fc03 	smulbb	ip, ip, r3
 8018fe8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8018fec:	1c73      	adds	r3, r6, #1
 8018fee:	096d      	lsrs	r5, r5, #5
 8018ff0:	fb07 c70a 	mla	r7, r7, sl, ip
 8018ff4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8018ff8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018ffc:	b2bf      	uxth	r7, r7
 8018ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019000:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8019004:	1c7a      	adds	r2, r7, #1
 8019006:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801900a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801900e:	4316      	orrs	r6, r2
 8019010:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019012:	432e      	orrs	r6, r5
 8019014:	f823 6b02 	strh.w	r6, [r3], #2
 8019018:	930c      	str	r3, [sp, #48]	; 0x30
 801901a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801901c:	4413      	add	r3, r2
 801901e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8019020:	9327      	str	r3, [sp, #156]	; 0x9c
 8019022:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019024:	4413      	add	r3, r2
 8019026:	9328      	str	r3, [sp, #160]	; 0xa0
 8019028:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801902a:	3b01      	subs	r3, #1
 801902c:	9311      	str	r3, [sp, #68]	; 0x44
 801902e:	e6db      	b.n	8018de8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8019030:	b149      	cbz	r1, 8019046 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8019032:	5cb2      	ldrb	r2, [r6, r2]
 8019034:	4628      	mov	r0, r5
 8019036:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801903a:	4422      	add	r2, r4
 801903c:	462f      	mov	r7, r5
 801903e:	e771      	b.n	8018f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8019040:	4628      	mov	r0, r5
 8019042:	462a      	mov	r2, r5
 8019044:	e76e      	b.n	8018f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8019046:	4628      	mov	r0, r5
 8019048:	462a      	mov	r2, r5
 801904a:	e7f7      	b.n	801903c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 801904c:	b015      	add	sp, #84	; 0x54
 801904e:	ecbd 8b08 	vpop	{d8-d11}
 8019052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019058 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8019058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801905c:	880e      	ldrh	r6, [r1, #0]
 801905e:	b085      	sub	sp, #20
 8019060:	4691      	mov	r9, r2
 8019062:	0230      	lsls	r0, r6, #8
 8019064:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8019068:	9101      	str	r1, [sp, #4]
 801906a:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 801906e:	0170      	lsls	r0, r6, #5
 8019070:	00f6      	lsls	r6, r6, #3
 8019072:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8019076:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 801907a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801907e:	b2f6      	uxtb	r6, r6
 8019080:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8019084:	ea4b 0000 	orr.w	r0, fp, r0
 8019088:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801908c:	4306      	orrs	r6, r0
 801908e:	fb05 7a0c 	mla	sl, r5, ip, r7
 8019092:	2d00      	cmp	r5, #0
 8019094:	9603      	str	r6, [sp, #12]
 8019096:	eb09 0e0a 	add.w	lr, r9, sl
 801909a:	db42      	blt.n	8019122 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 801909c:	45a8      	cmp	r8, r5
 801909e:	dd40      	ble.n	8019122 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 80190a0:	2f00      	cmp	r7, #0
 80190a2:	db3c      	blt.n	801911e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 80190a4:	45bc      	cmp	ip, r7
 80190a6:	dd3a      	ble.n	801911e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 80190a8:	f819 600a 	ldrb.w	r6, [r9, sl]
 80190ac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80190b0:	441e      	add	r6, r3
 80190b2:	1c78      	adds	r0, r7, #1
 80190b4:	d438      	bmi.n	8019128 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80190b6:	4584      	cmp	ip, r0
 80190b8:	dd36      	ble.n	8019128 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80190ba:	b3aa      	cbz	r2, 8019128 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80190bc:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80190c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80190c4:	4418      	add	r0, r3
 80190c6:	3501      	adds	r5, #1
 80190c8:	d432      	bmi.n	8019130 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 80190ca:	45a8      	cmp	r8, r5
 80190cc:	dd30      	ble.n	8019130 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 80190ce:	b37c      	cbz	r4, 8019130 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 80190d0:	2f00      	cmp	r7, #0
 80190d2:	db2b      	blt.n	801912c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 80190d4:	45bc      	cmp	ip, r7
 80190d6:	dd29      	ble.n	801912c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 80190d8:	f81e 500c 	ldrb.w	r5, [lr, ip]
 80190dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80190e0:	441d      	add	r5, r3
 80190e2:	3701      	adds	r7, #1
 80190e4:	d427      	bmi.n	8019136 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80190e6:	45bc      	cmp	ip, r7
 80190e8:	dd25      	ble.n	8019136 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80190ea:	b322      	cbz	r2, 8019136 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 80190ec:	44f4      	add	ip, lr
 80190ee:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80190f2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80190f6:	443b      	add	r3, r7
 80190f8:	781f      	ldrb	r7, [r3, #0]
 80190fa:	2a0f      	cmp	r2, #15
 80190fc:	f896 9000 	ldrb.w	r9, [r6]
 8019100:	f890 a000 	ldrb.w	sl, [r0]
 8019104:	4639      	mov	r1, r7
 8019106:	f895 8000 	ldrb.w	r8, [r5]
 801910a:	d801      	bhi.n	8019110 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 801910c:	2c0f      	cmp	r4, #15
 801910e:	d914      	bls.n	801913a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 8019110:	4b2c      	ldr	r3, [pc, #176]	; (80191c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8019112:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8019116:	4a2c      	ldr	r2, [pc, #176]	; (80191c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8019118:	482c      	ldr	r0, [pc, #176]	; (80191cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 801911a:	f005 ffbd 	bl	801f098 <__assert_func>
 801911e:	ae03      	add	r6, sp, #12
 8019120:	e7c7      	b.n	80190b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8019122:	a803      	add	r0, sp, #12
 8019124:	4606      	mov	r6, r0
 8019126:	e7ce      	b.n	80190c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8019128:	a803      	add	r0, sp, #12
 801912a:	e7cc      	b.n	80190c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801912c:	ad03      	add	r5, sp, #12
 801912e:	e7d8      	b.n	80190e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 8019130:	ab03      	add	r3, sp, #12
 8019132:	461d      	mov	r5, r3
 8019134:	e7e0      	b.n	80190f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8019136:	ab03      	add	r3, sp, #12
 8019138:	e7de      	b.n	80190f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 801913a:	b292      	uxth	r2, r2
 801913c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8019140:	b2a4      	uxth	r4, r4
 8019142:	f896 b002 	ldrb.w	fp, [r6, #2]
 8019146:	7840      	ldrb	r0, [r0, #1]
 8019148:	fb02 fe04 	mul.w	lr, r2, r4
 801914c:	0112      	lsls	r2, r2, #4
 801914e:	7876      	ldrb	r6, [r6, #1]
 8019150:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8019154:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8019158:	eba2 020e 	sub.w	r2, r2, lr
 801915c:	b2a4      	uxth	r4, r4
 801915e:	b292      	uxth	r2, r2
 8019160:	1b3f      	subs	r7, r7, r4
 8019162:	fb02 fc0c 	mul.w	ip, r2, ip
 8019166:	b2bf      	uxth	r7, r7
 8019168:	fb07 cc0b 	mla	ip, r7, fp, ip
 801916c:	f895 b002 	ldrb.w	fp, [r5, #2]
 8019170:	fb04 cc0b 	mla	ip, r4, fp, ip
 8019174:	f893 b002 	ldrb.w	fp, [r3, #2]
 8019178:	785b      	ldrb	r3, [r3, #1]
 801917a:	fb0e cc0b 	mla	ip, lr, fp, ip
 801917e:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8019182:	fb02 fc0a 	mul.w	ip, r2, sl
 8019186:	4342      	muls	r2, r0
 8019188:	7868      	ldrb	r0, [r5, #1]
 801918a:	fb07 cc09 	mla	ip, r7, r9, ip
 801918e:	fb07 2206 	mla	r2, r7, r6, r2
 8019192:	fb04 cc08 	mla	ip, r4, r8, ip
 8019196:	fb04 2400 	mla	r4, r4, r0, r2
 801919a:	fb0e cc01 	mla	ip, lr, r1, ip
 801919e:	fb0e 4e03 	mla	lr, lr, r3, r4
 80191a2:	9b01      	ldr	r3, [sp, #4]
 80191a4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80191a8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80191ac:	ea4c 0c0b 	orr.w	ip, ip, fp
 80191b0:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80191b4:	ea4c 0c0e 	orr.w	ip, ip, lr
 80191b8:	f8a3 c000 	strh.w	ip, [r3]
 80191bc:	b005      	add	sp, #20
 80191be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191c2:	bf00      	nop
 80191c4:	08023551 	.word	0x08023551
 80191c8:	08023b1e 	.word	0x08023b1e
 80191cc:	080235d5 	.word	0x080235d5

080191d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80191d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191d4:	ed2d 8b08 	vpush	{d8-d11}
 80191d8:	b08f      	sub	sp, #60	; 0x3c
 80191da:	eeb0 aa40 	vmov.f32	s20, s0
 80191de:	eef0 9a60 	vmov.f32	s19, s1
 80191e2:	920c      	str	r2, [sp, #48]	; 0x30
 80191e4:	eeb0 9a41 	vmov.f32	s18, s2
 80191e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80191ea:	eeb0 8a62 	vmov.f32	s16, s5
 80191ee:	900d      	str	r0, [sp, #52]	; 0x34
 80191f0:	eef0 8a43 	vmov.f32	s17, s6
 80191f4:	6850      	ldr	r0, [r2, #4]
 80191f6:	eef0 ba44 	vmov.f32	s23, s8
 80191fa:	910a      	str	r1, [sp, #40]	; 0x28
 80191fc:	eeb0 ba64 	vmov.f32	s22, s9
 8019200:	9306      	str	r3, [sp, #24]
 8019202:	eef0 aa45 	vmov.f32	s21, s10
 8019206:	6812      	ldr	r2, [r2, #0]
 8019208:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801920c:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8019210:	fb00 1303 	mla	r3, r0, r3, r1
 8019214:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8019218:	9307      	str	r3, [sp, #28]
 801921a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	9308      	str	r3, [sp, #32]
 8019220:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019222:	685c      	ldr	r4, [r3, #4]
 8019224:	3404      	adds	r4, #4
 8019226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019228:	2b00      	cmp	r3, #0
 801922a:	dc03      	bgt.n	8019234 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801922c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801922e:	2b00      	cmp	r3, #0
 8019230:	f340 81d5 	ble.w	80195de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8019234:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019236:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801923a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801923e:	1e48      	subs	r0, r1, #1
 8019240:	1e56      	subs	r6, r2, #1
 8019242:	9b06      	ldr	r3, [sp, #24]
 8019244:	2b00      	cmp	r3, #0
 8019246:	f340 80b6 	ble.w	80193b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801924a:	ea5f 472b 	movs.w	r7, fp, asr #16
 801924e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8019252:	d406      	bmi.n	8019262 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019254:	4287      	cmp	r7, r0
 8019256:	da04      	bge.n	8019262 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019258:	2b00      	cmp	r3, #0
 801925a:	db02      	blt.n	8019262 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801925c:	42b3      	cmp	r3, r6
 801925e:	f2c0 80ab 	blt.w	80193b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8019262:	3701      	adds	r7, #1
 8019264:	f100 809c 	bmi.w	80193a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8019268:	42b9      	cmp	r1, r7
 801926a:	f2c0 8099 	blt.w	80193a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801926e:	3301      	adds	r3, #1
 8019270:	f100 8096 	bmi.w	80193a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8019274:	429a      	cmp	r2, r3
 8019276:	f2c0 8093 	blt.w	80193a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801927a:	9b06      	ldr	r3, [sp, #24]
 801927c:	930b      	str	r3, [sp, #44]	; 0x2c
 801927e:	9b07      	ldr	r3, [sp, #28]
 8019280:	9309      	str	r3, [sp, #36]	; 0x24
 8019282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019284:	2b00      	cmp	r3, #0
 8019286:	f340 80b4 	ble.w	80193f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 801928a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801928c:	142e      	asrs	r6, r5, #16
 801928e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8019290:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8019294:	68c7      	ldr	r7, [r0, #12]
 8019296:	ea5f 402b 	movs.w	r0, fp, asr #16
 801929a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801929e:	6892      	ldr	r2, [r2, #8]
 80192a0:	f100 80fb 	bmi.w	801949a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80192a4:	f102 3cff 	add.w	ip, r2, #4294967295
 80192a8:	4560      	cmp	r0, ip
 80192aa:	f280 80f6 	bge.w	801949a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80192ae:	2e00      	cmp	r6, #0
 80192b0:	f2c0 80f3 	blt.w	801949a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80192b4:	f107 3cff 	add.w	ip, r7, #4294967295
 80192b8:	4566      	cmp	r6, ip
 80192ba:	f280 80ee 	bge.w	801949a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80192be:	b212      	sxth	r2, r2
 80192c0:	fb06 0002 	mla	r0, r6, r2, r0
 80192c4:	9e08      	ldr	r6, [sp, #32]
 80192c6:	1837      	adds	r7, r6, r0
 80192c8:	5c30      	ldrb	r0, [r6, r0]
 80192ca:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80192ce:	eb04 0c08 	add.w	ip, r4, r8
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	f000 80d3 	beq.w	801947e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80192d8:	787e      	ldrb	r6, [r7, #1]
 80192da:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80192de:	4426      	add	r6, r4
 80192e0:	2900      	cmp	r1, #0
 80192e2:	f000 80d4 	beq.w	801948e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 80192e6:	18b8      	adds	r0, r7, r2
 80192e8:	5cba      	ldrb	r2, [r7, r2]
 80192ea:	7840      	ldrb	r0, [r0, #1]
 80192ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80192f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80192f4:	4422      	add	r2, r4
 80192f6:	4420      	add	r0, r4
 80192f8:	b29b      	uxth	r3, r3
 80192fa:	78b7      	ldrb	r7, [r6, #2]
 80192fc:	b289      	uxth	r1, r1
 80192fe:	f89c a002 	ldrb.w	sl, [ip, #2]
 8019302:	f89c c001 	ldrb.w	ip, [ip, #1]
 8019306:	fb03 f901 	mul.w	r9, r3, r1
 801930a:	011b      	lsls	r3, r3, #4
 801930c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019310:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8019314:	eba3 0309 	sub.w	r3, r3, r9
 8019318:	b289      	uxth	r1, r1
 801931a:	b29b      	uxth	r3, r3
 801931c:	ebae 0e01 	sub.w	lr, lr, r1
 8019320:	435f      	muls	r7, r3
 8019322:	fa1f fe8e 	uxth.w	lr, lr
 8019326:	fb0e 770a 	mla	r7, lr, sl, r7
 801932a:	f892 a002 	ldrb.w	sl, [r2, #2]
 801932e:	fb01 770a 	mla	r7, r1, sl, r7
 8019332:	f890 a002 	ldrb.w	sl, [r0, #2]
 8019336:	fb09 7a0a 	mla	sl, r9, sl, r7
 801933a:	f814 7008 	ldrb.w	r7, [r4, r8]
 801933e:	f896 8000 	ldrb.w	r8, [r6]
 8019342:	7876      	ldrb	r6, [r6, #1]
 8019344:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8019348:	fb03 f808 	mul.w	r8, r3, r8
 801934c:	4373      	muls	r3, r6
 801934e:	fb0e 8807 	mla	r8, lr, r7, r8
 8019352:	7817      	ldrb	r7, [r2, #0]
 8019354:	fb0e 330c 	mla	r3, lr, ip, r3
 8019358:	fb01 8807 	mla	r8, r1, r7, r8
 801935c:	7807      	ldrb	r7, [r0, #0]
 801935e:	fb09 8707 	mla	r7, r9, r7, r8
 8019362:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8019366:	ea47 070a 	orr.w	r7, r7, sl
 801936a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801936e:	fb01 310a 	mla	r1, r1, sl, r3
 8019372:	f890 a001 	ldrb.w	sl, [r0, #1]
 8019376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019378:	fb09 1a0a 	mla	sl, r9, sl, r1
 801937c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019380:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019384:	ea47 070a 	orr.w	r7, r7, sl
 8019388:	801f      	strh	r7, [r3, #0]
 801938a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801938c:	3302      	adds	r3, #2
 801938e:	9309      	str	r3, [sp, #36]	; 0x24
 8019390:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019392:	449b      	add	fp, r3
 8019394:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019396:	441d      	add	r5, r3
 8019398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801939a:	3b01      	subs	r3, #1
 801939c:	930b      	str	r3, [sp, #44]	; 0x2c
 801939e:	e770      	b.n	8019282 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80193a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80193a2:	449b      	add	fp, r3
 80193a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80193a6:	441d      	add	r5, r3
 80193a8:	9b06      	ldr	r3, [sp, #24]
 80193aa:	3b01      	subs	r3, #1
 80193ac:	9306      	str	r3, [sp, #24]
 80193ae:	9b07      	ldr	r3, [sp, #28]
 80193b0:	3302      	adds	r3, #2
 80193b2:	9307      	str	r3, [sp, #28]
 80193b4:	e745      	b.n	8019242 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80193b6:	d023      	beq.n	8019400 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80193b8:	9b06      	ldr	r3, [sp, #24]
 80193ba:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80193bc:	3b01      	subs	r3, #1
 80193be:	fb00 b003 	mla	r0, r0, r3, fp
 80193c2:	1400      	asrs	r0, r0, #16
 80193c4:	f53f af59 	bmi.w	801927a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80193c8:	3901      	subs	r1, #1
 80193ca:	4288      	cmp	r0, r1
 80193cc:	f6bf af55 	bge.w	801927a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80193d0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80193d2:	fb01 5303 	mla	r3, r1, r3, r5
 80193d6:	141b      	asrs	r3, r3, #16
 80193d8:	f53f af4f 	bmi.w	801927a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80193dc:	3a01      	subs	r2, #1
 80193de:	4293      	cmp	r3, r2
 80193e0:	f6bf af4b 	bge.w	801927a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80193e4:	9b06      	ldr	r3, [sp, #24]
 80193e6:	9309      	str	r3, [sp, #36]	; 0x24
 80193e8:	9b07      	ldr	r3, [sp, #28]
 80193ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80193ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	dc70      	bgt.n	80194d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80193f2:	9b06      	ldr	r3, [sp, #24]
 80193f4:	9a07      	ldr	r2, [sp, #28]
 80193f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80193fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80193fe:	9307      	str	r3, [sp, #28]
 8019400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019402:	2b00      	cmp	r3, #0
 8019404:	f340 80eb 	ble.w	80195de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8019408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801940c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801940e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019412:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019416:	eef0 6a48 	vmov.f32	s13, s16
 801941a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801941e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019422:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019426:	ee16 ba90 	vmov	fp, s13
 801942a:	eef0 6a68 	vmov.f32	s13, s17
 801942e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019432:	ee16 5a90 	vmov	r5, s13
 8019436:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801943a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801943e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019442:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019446:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801944a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801944e:	ee18 2a10 	vmov	r2, s16
 8019452:	eeb0 8a47 	vmov.f32	s16, s14
 8019456:	fb92 f3f3 	sdiv	r3, r2, r3
 801945a:	ee18 2a90 	vmov	r2, s17
 801945e:	9323      	str	r3, [sp, #140]	; 0x8c
 8019460:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019462:	eef0 8a67 	vmov.f32	s17, s15
 8019466:	fb92 f3f3 	sdiv	r3, r2, r3
 801946a:	9324      	str	r3, [sp, #144]	; 0x90
 801946c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801946e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019470:	3b01      	subs	r3, #1
 8019472:	930a      	str	r3, [sp, #40]	; 0x28
 8019474:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019476:	bf08      	it	eq
 8019478:	4613      	moveq	r3, r2
 801947a:	9306      	str	r3, [sp, #24]
 801947c:	e6d3      	b.n	8019226 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801947e:	b149      	cbz	r1, 8019494 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8019480:	5cba      	ldrb	r2, [r7, r2]
 8019482:	4660      	mov	r0, ip
 8019484:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019488:	4422      	add	r2, r4
 801948a:	4666      	mov	r6, ip
 801948c:	e734      	b.n	80192f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801948e:	4660      	mov	r0, ip
 8019490:	4662      	mov	r2, ip
 8019492:	e731      	b.n	80192f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019494:	4660      	mov	r0, ip
 8019496:	4662      	mov	r2, ip
 8019498:	e7f7      	b.n	801948a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801949a:	f110 0c01 	adds.w	ip, r0, #1
 801949e:	f53f af74 	bmi.w	801938a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80194a2:	4562      	cmp	r2, ip
 80194a4:	f6ff af71 	blt.w	801938a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80194a8:	f116 0c01 	adds.w	ip, r6, #1
 80194ac:	f53f af6d 	bmi.w	801938a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80194b0:	4567      	cmp	r7, ip
 80194b2:	f6ff af6a 	blt.w	801938a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80194b6:	b23f      	sxth	r7, r7
 80194b8:	b212      	sxth	r2, r2
 80194ba:	9701      	str	r7, [sp, #4]
 80194bc:	9200      	str	r2, [sp, #0]
 80194be:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80194c2:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80194c6:	4623      	mov	r3, r4
 80194c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80194ca:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80194ce:	f7ff fdc3 	bl	8019058 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80194d2:	e75a      	b.n	801938a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80194d4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80194d6:	ea4f 462b 	mov.w	r6, fp, asr #16
 80194da:	1428      	asrs	r0, r5, #16
 80194dc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80194e0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80194e4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80194e8:	fb02 6000 	mla	r0, r2, r0, r6
 80194ec:	9e08      	ldr	r6, [sp, #32]
 80194ee:	f816 8000 	ldrb.w	r8, [r6, r0]
 80194f2:	1837      	adds	r7, r6, r0
 80194f4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80194f8:	eb04 0c08 	add.w	ip, r4, r8
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d060      	beq.n	80195c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8019500:	787e      	ldrb	r6, [r7, #1]
 8019502:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019506:	4426      	add	r6, r4
 8019508:	2900      	cmp	r1, #0
 801950a:	d062      	beq.n	80195d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 801950c:	18b8      	adds	r0, r7, r2
 801950e:	5cba      	ldrb	r2, [r7, r2]
 8019510:	7840      	ldrb	r0, [r0, #1]
 8019512:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019516:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801951a:	4422      	add	r2, r4
 801951c:	4420      	add	r0, r4
 801951e:	b29b      	uxth	r3, r3
 8019520:	78b7      	ldrb	r7, [r6, #2]
 8019522:	b289      	uxth	r1, r1
 8019524:	f89c a002 	ldrb.w	sl, [ip, #2]
 8019528:	f89c c001 	ldrb.w	ip, [ip, #1]
 801952c:	fb03 f901 	mul.w	r9, r3, r1
 8019530:	011b      	lsls	r3, r3, #4
 8019532:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019536:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801953a:	eba3 0309 	sub.w	r3, r3, r9
 801953e:	b289      	uxth	r1, r1
 8019540:	b29b      	uxth	r3, r3
 8019542:	ebae 0e01 	sub.w	lr, lr, r1
 8019546:	435f      	muls	r7, r3
 8019548:	fa1f fe8e 	uxth.w	lr, lr
 801954c:	fb0e 770a 	mla	r7, lr, sl, r7
 8019550:	f892 a002 	ldrb.w	sl, [r2, #2]
 8019554:	fb01 770a 	mla	r7, r1, sl, r7
 8019558:	f890 a002 	ldrb.w	sl, [r0, #2]
 801955c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8019560:	f814 7008 	ldrb.w	r7, [r4, r8]
 8019564:	f896 8000 	ldrb.w	r8, [r6]
 8019568:	7876      	ldrb	r6, [r6, #1]
 801956a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801956e:	fb03 f808 	mul.w	r8, r3, r8
 8019572:	4373      	muls	r3, r6
 8019574:	7856      	ldrb	r6, [r2, #1]
 8019576:	fb0e 8807 	mla	r8, lr, r7, r8
 801957a:	7817      	ldrb	r7, [r2, #0]
 801957c:	fb0e 330c 	mla	r3, lr, ip, r3
 8019580:	fb01 8807 	mla	r8, r1, r7, r8
 8019584:	7807      	ldrb	r7, [r0, #0]
 8019586:	fb01 3306 	mla	r3, r1, r6, r3
 801958a:	fb09 8707 	mla	r7, r9, r7, r8
 801958e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8019592:	ea47 070a 	orr.w	r7, r7, sl
 8019596:	f890 a001 	ldrb.w	sl, [r0, #1]
 801959a:	fb09 3a0a 	mla	sl, r9, sl, r3
 801959e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80195a0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80195a4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80195a8:	ea47 070a 	orr.w	r7, r7, sl
 80195ac:	f823 7b02 	strh.w	r7, [r3], #2
 80195b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80195b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80195b4:	449b      	add	fp, r3
 80195b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80195b8:	441d      	add	r5, r3
 80195ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195bc:	3b01      	subs	r3, #1
 80195be:	9309      	str	r3, [sp, #36]	; 0x24
 80195c0:	e714      	b.n	80193ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 80195c2:	b149      	cbz	r1, 80195d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 80195c4:	5cba      	ldrb	r2, [r7, r2]
 80195c6:	4660      	mov	r0, ip
 80195c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80195cc:	4422      	add	r2, r4
 80195ce:	4666      	mov	r6, ip
 80195d0:	e7a5      	b.n	801951e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80195d2:	4660      	mov	r0, ip
 80195d4:	4662      	mov	r2, ip
 80195d6:	e7a2      	b.n	801951e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80195d8:	4660      	mov	r0, ip
 80195da:	4662      	mov	r2, ip
 80195dc:	e7f7      	b.n	80195ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 80195de:	b00f      	add	sp, #60	; 0x3c
 80195e0:	ecbd 8b08 	vpop	{d8-d11}
 80195e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080195e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80195e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195ec:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 80195f0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80195f4:	2c00      	cmp	r4, #0
 80195f6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80195fa:	fb04 560c 	mla	r6, r4, ip, r5
 80195fe:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8019602:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8019606:	eb02 0e06 	add.w	lr, r2, r6
 801960a:	db3d      	blt.n	8019688 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 801960c:	45a0      	cmp	r8, r4
 801960e:	dd3b      	ble.n	8019688 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8019610:	2d00      	cmp	r5, #0
 8019612:	db37      	blt.n	8019684 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8019614:	45ac      	cmp	ip, r5
 8019616:	dd35      	ble.n	8019684 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8019618:	5d92      	ldrb	r2, [r2, r6]
 801961a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801961e:	1c6e      	adds	r6, r5, #1
 8019620:	d435      	bmi.n	801968e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8019622:	45b4      	cmp	ip, r6
 8019624:	dd33      	ble.n	801968e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8019626:	b3a0      	cbz	r0, 8019692 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8019628:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801962c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8019630:	3401      	adds	r4, #1
 8019632:	d432      	bmi.n	801969a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8019634:	45a0      	cmp	r8, r4
 8019636:	dd30      	ble.n	801969a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8019638:	b397      	cbz	r7, 80196a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 801963a:	2d00      	cmp	r5, #0
 801963c:	db2b      	blt.n	8019696 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 801963e:	45ac      	cmp	ip, r5
 8019640:	dd29      	ble.n	8019696 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8019642:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8019646:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801964a:	3501      	adds	r5, #1
 801964c:	d42b      	bmi.n	80196a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801964e:	45ac      	cmp	ip, r5
 8019650:	dd29      	ble.n	80196a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8019652:	b350      	cbz	r0, 80196aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8019654:	44f4      	add	ip, lr
 8019656:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801965a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801965e:	280f      	cmp	r0, #15
 8019660:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8019664:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8019668:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801966c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8019670:	d801      	bhi.n	8019676 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 8019672:	2f0f      	cmp	r7, #15
 8019674:	d91b      	bls.n	80196ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 8019676:	4b8d      	ldr	r3, [pc, #564]	; (80198ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8019678:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801967c:	4a8c      	ldr	r2, [pc, #560]	; (80198b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 801967e:	488d      	ldr	r0, [pc, #564]	; (80198b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8019680:	f005 fd0a 	bl	801f098 <__assert_func>
 8019684:	2200      	movs	r2, #0
 8019686:	e7ca      	b.n	801961e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 8019688:	2600      	movs	r6, #0
 801968a:	4632      	mov	r2, r6
 801968c:	e7d0      	b.n	8019630 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 801968e:	2600      	movs	r6, #0
 8019690:	e7ce      	b.n	8019630 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8019692:	4606      	mov	r6, r0
 8019694:	e7cc      	b.n	8019630 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8019696:	2400      	movs	r4, #0
 8019698:	e7d7      	b.n	801964a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 801969a:	2300      	movs	r3, #0
 801969c:	461c      	mov	r4, r3
 801969e:	e7de      	b.n	801965e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80196a0:	463b      	mov	r3, r7
 80196a2:	463c      	mov	r4, r7
 80196a4:	e7db      	b.n	801965e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80196a6:	2300      	movs	r3, #0
 80196a8:	e7d9      	b.n	801965e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80196aa:	4603      	mov	r3, r0
 80196ac:	e7d7      	b.n	801965e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80196ae:	b280      	uxth	r0, r0
 80196b0:	b2bf      	uxth	r7, r7
 80196b2:	fb07 fe00 	mul.w	lr, r7, r0
 80196b6:	0100      	lsls	r0, r0, #4
 80196b8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80196bc:	eba0 0c0e 	sub.w	ip, r0, lr
 80196c0:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80196c4:	b2bf      	uxth	r7, r7
 80196c6:	fa1f fc8c 	uxth.w	ip, ip
 80196ca:	1bed      	subs	r5, r5, r7
 80196cc:	fb0a f00c 	mul.w	r0, sl, ip
 80196d0:	b2ad      	uxth	r5, r5
 80196d2:	fb0b 0005 	mla	r0, fp, r5, r0
 80196d6:	fb07 0009 	mla	r0, r7, r9, r0
 80196da:	fb0e 0008 	mla	r0, lr, r8, r0
 80196de:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80196e2:	9001      	str	r0, [sp, #4]
 80196e4:	2800      	cmp	r0, #0
 80196e6:	f000 80de 	beq.w	80198a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 80196ea:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80196ee:	d018      	beq.n	8019722 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 80196f0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80196f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80196f8:	fb0b f000 	mul.w	r0, fp, r0
 80196fc:	fb0b fb02 	mul.w	fp, fp, r2
 8019700:	0a02      	lsrs	r2, r0, #8
 8019702:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8019706:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801970a:	4402      	add	r2, r0
 801970c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8019710:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8019714:	0a12      	lsrs	r2, r2, #8
 8019716:	0a00      	lsrs	r0, r0, #8
 8019718:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801971c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019720:	4302      	orrs	r2, r0
 8019722:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8019726:	d01a      	beq.n	801975e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8019728:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801972c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019730:	fb0a f000 	mul.w	r0, sl, r0
 8019734:	fb0a fa06 	mul.w	sl, sl, r6
 8019738:	0a06      	lsrs	r6, r0, #8
 801973a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801973e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019742:	4406      	add	r6, r0
 8019744:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019748:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801974c:	0a36      	lsrs	r6, r6, #8
 801974e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019752:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019756:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801975a:	ea46 060a 	orr.w	r6, r6, sl
 801975e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019762:	d01b      	beq.n	801979c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 8019764:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8019768:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801976c:	fb09 fa0a 	mul.w	sl, r9, sl
 8019770:	fb09 f004 	mul.w	r0, r9, r4
 8019774:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8019778:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801977c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8019780:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019784:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8019788:	4454      	add	r4, sl
 801978a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801978e:	0a24      	lsrs	r4, r4, #8
 8019790:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019794:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019798:	ea44 0409 	orr.w	r4, r4, r9
 801979c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80197a0:	d01b      	beq.n	80197da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 80197a2:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80197a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80197aa:	fb08 f909 	mul.w	r9, r8, r9
 80197ae:	fb08 f003 	mul.w	r0, r8, r3
 80197b2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80197b6:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80197ba:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80197be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80197c2:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80197c6:	444b      	add	r3, r9
 80197c8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80197cc:	0a1b      	lsrs	r3, r3, #8
 80197ce:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80197d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80197d6:	ea43 0308 	orr.w	r3, r3, r8
 80197da:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80197de:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80197e2:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 80197e6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80197ea:	fb0c f808 	mul.w	r8, ip, r8
 80197ee:	8808      	ldrh	r0, [r1, #0]
 80197f0:	fb0c f606 	mul.w	r6, ip, r6
 80197f4:	fb05 8909 	mla	r9, r5, r9, r8
 80197f8:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 80197fc:	fb05 6502 	mla	r5, r5, r2, r6
 8019800:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019804:	fb07 9908 	mla	r9, r7, r8, r9
 8019808:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801980c:	fb07 5704 	mla	r7, r7, r4, r5
 8019810:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8019814:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019818:	b2b6      	uxth	r6, r6
 801981a:	fb0e 9808 	mla	r8, lr, r8, r9
 801981e:	9a01      	ldr	r2, [sp, #4]
 8019820:	fb0e 7e03 	mla	lr, lr, r3, r7
 8019824:	1205      	asrs	r5, r0, #8
 8019826:	4372      	muls	r2, r6
 8019828:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801982c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019830:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8019834:	1c53      	adds	r3, r2, #1
 8019836:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 801983a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801983e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019842:	ea48 0e0e 	orr.w	lr, r8, lr
 8019846:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801984a:	ea4f 421e 	mov.w	r2, lr, lsr #16
 801984e:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8019852:	b2db      	uxtb	r3, r3
 8019854:	fb12 f206 	smulbb	r2, r2, r6
 8019858:	fa5f fe8e 	uxtb.w	lr, lr
 801985c:	fb14 f406 	smulbb	r4, r4, r6
 8019860:	fb05 2503 	mla	r5, r5, r3, r2
 8019864:	10c2      	asrs	r2, r0, #3
 8019866:	fb1e fe06 	smulbb	lr, lr, r6
 801986a:	00c0      	lsls	r0, r0, #3
 801986c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8019870:	b2ad      	uxth	r5, r5
 8019872:	b2c0      	uxtb	r0, r0
 8019874:	fb02 4203 	mla	r2, r2, r3, r4
 8019878:	fb00 e303 	mla	r3, r0, r3, lr
 801987c:	b294      	uxth	r4, r2
 801987e:	b298      	uxth	r0, r3
 8019880:	1c6b      	adds	r3, r5, #1
 8019882:	1c62      	adds	r2, r4, #1
 8019884:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8019888:	1c43      	adds	r3, r0, #1
 801988a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801988e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8019892:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8019896:	0952      	lsrs	r2, r2, #5
 8019898:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801989c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80198a0:	432b      	orrs	r3, r5
 80198a2:	4313      	orrs	r3, r2
 80198a4:	800b      	strh	r3, [r1, #0]
 80198a6:	b003      	add	sp, #12
 80198a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198ac:	08023551 	.word	0x08023551
 80198b0:	08023b1e 	.word	0x08023b1e
 80198b4:	080235d5 	.word	0x080235d5

080198b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80198b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198bc:	ed2d 8b08 	vpush	{d8-d11}
 80198c0:	b09f      	sub	sp, #124	; 0x7c
 80198c2:	eeb0 aa40 	vmov.f32	s20, s0
 80198c6:	eef0 9a60 	vmov.f32	s19, s1
 80198ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80198cc:	eeb0 9a41 	vmov.f32	s18, s2
 80198d0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80198d2:	eeb0 8a62 	vmov.f32	s16, s5
 80198d6:	9309      	str	r3, [sp, #36]	; 0x24
 80198d8:	eef0 8a43 	vmov.f32	s17, s6
 80198dc:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80198e0:	eef0 ba44 	vmov.f32	s23, s8
 80198e4:	901d      	str	r0, [sp, #116]	; 0x74
 80198e6:	eeb0 ba64 	vmov.f32	s22, s9
 80198ea:	931c      	str	r3, [sp, #112]	; 0x70
 80198ec:	eef0 aa45 	vmov.f32	s21, s10
 80198f0:	6850      	ldr	r0, [r2, #4]
 80198f2:	9119      	str	r1, [sp, #100]	; 0x64
 80198f4:	6812      	ldr	r2, [r2, #0]
 80198f6:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 80198f8:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80198fc:	fb00 1303 	mla	r3, r0, r3, r1
 8019900:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8019904:	930c      	str	r3, [sp, #48]	; 0x30
 8019906:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	9312      	str	r3, [sp, #72]	; 0x48
 801990c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801990e:	685e      	ldr	r6, [r3, #4]
 8019910:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8019914:	3604      	adds	r6, #4
 8019916:	930d      	str	r3, [sp, #52]	; 0x34
 8019918:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801991a:	2b00      	cmp	r3, #0
 801991c:	dc03      	bgt.n	8019926 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801991e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019920:	2b00      	cmp	r3, #0
 8019922:	f340 8387 	ble.w	801a034 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8019926:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019928:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801992c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019930:	1e48      	subs	r0, r1, #1
 8019932:	1e57      	subs	r7, r2, #1
 8019934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019936:	2b00      	cmp	r3, #0
 8019938:	f340 8194 	ble.w	8019c64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 801993c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801993e:	142b      	asrs	r3, r5, #16
 8019940:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8019944:	d406      	bmi.n	8019954 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019946:	4584      	cmp	ip, r0
 8019948:	da04      	bge.n	8019954 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801994a:	2b00      	cmp	r3, #0
 801994c:	db02      	blt.n	8019954 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801994e:	42bb      	cmp	r3, r7
 8019950:	f2c0 8189 	blt.w	8019c66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8019954:	f11c 0c01 	adds.w	ip, ip, #1
 8019958:	f100 8177 	bmi.w	8019c4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801995c:	4561      	cmp	r1, ip
 801995e:	f2c0 8174 	blt.w	8019c4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8019962:	3301      	adds	r3, #1
 8019964:	f100 8171 	bmi.w	8019c4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8019968:	429a      	cmp	r2, r3
 801996a:	f2c0 816e 	blt.w	8019c4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801996e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019970:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019972:	931a      	str	r3, [sp, #104]	; 0x68
 8019974:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019976:	2b00      	cmp	r3, #0
 8019978:	f340 8193 	ble.w	8019ca2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801997c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801997e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8019982:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019986:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801998a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801998c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8019990:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019992:	141b      	asrs	r3, r3, #16
 8019994:	f100 81d6 	bmi.w	8019d44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8019998:	f100 38ff 	add.w	r8, r0, #4294967295
 801999c:	4543      	cmp	r3, r8
 801999e:	f280 81d1 	bge.w	8019d44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80199a2:	f1bc 0f00 	cmp.w	ip, #0
 80199a6:	f2c0 81cd 	blt.w	8019d44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80199aa:	f10e 38ff 	add.w	r8, lr, #4294967295
 80199ae:	45c4      	cmp	ip, r8
 80199b0:	f280 81c8 	bge.w	8019d44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80199b4:	b200      	sxth	r0, r0
 80199b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80199b8:	fb0c 3300 	mla	r3, ip, r0, r3
 80199bc:	eb04 0803 	add.w	r8, r4, r3
 80199c0:	5ce3      	ldrb	r3, [r4, r3]
 80199c2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80199c6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80199ca:	2a00      	cmp	r2, #0
 80199cc:	f000 81af 	beq.w	8019d2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80199d0:	f898 c001 	ldrb.w	ip, [r8, #1]
 80199d4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80199d8:	940e      	str	r4, [sp, #56]	; 0x38
 80199da:	0e24      	lsrs	r4, r4, #24
 80199dc:	9415      	str	r4, [sp, #84]	; 0x54
 80199de:	b179      	cbz	r1, 8019a00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80199e0:	eb08 0c00 	add.w	ip, r8, r0
 80199e4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80199e8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80199ec:	900a      	str	r0, [sp, #40]	; 0x28
 80199ee:	0e00      	lsrs	r0, r0, #24
 80199f0:	9013      	str	r0, [sp, #76]	; 0x4c
 80199f2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80199f6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80199fa:	900f      	str	r0, [sp, #60]	; 0x3c
 80199fc:	0e00      	lsrs	r0, r0, #24
 80199fe:	9016      	str	r0, [sp, #88]	; 0x58
 8019a00:	b292      	uxth	r2, r2
 8019a02:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019a04:	b289      	uxth	r1, r1
 8019a06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019a08:	fb02 f901 	mul.w	r9, r2, r1
 8019a0c:	0112      	lsls	r2, r2, #4
 8019a0e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019a12:	eba2 0809 	sub.w	r8, r2, r9
 8019a16:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019a1a:	b289      	uxth	r1, r1
 8019a1c:	fa1f f888 	uxth.w	r8, r8
 8019a20:	1a52      	subs	r2, r2, r1
 8019a22:	fb08 f000 	mul.w	r0, r8, r0
 8019a26:	b292      	uxth	r2, r2
 8019a28:	fb02 000e 	mla	r0, r2, lr, r0
 8019a2c:	fb01 0004 	mla	r0, r1, r4, r0
 8019a30:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019a32:	fb09 0004 	mla	r0, r9, r4, r0
 8019a36:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019a3a:	2800      	cmp	r0, #0
 8019a3c:	f000 80fa 	beq.w	8019c34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8019a40:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019a44:	d01b      	beq.n	8019a7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8019a46:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019a4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019a4e:	fb0e fa0a 	mul.w	sl, lr, sl
 8019a52:	fb0e fe03 	mul.w	lr, lr, r3
 8019a56:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019a5a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019a5e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019a62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019a66:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019a6a:	4453      	add	r3, sl
 8019a6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a70:	0a1b      	lsrs	r3, r3, #8
 8019a72:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019a76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019a7a:	ea43 030c 	orr.w	r3, r3, ip
 8019a7e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019a80:	2cff      	cmp	r4, #255	; 0xff
 8019a82:	d021      	beq.n	8019ac8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8019a84:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019a86:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019a8a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019a8c:	fb04 fb0b 	mul.w	fp, r4, fp
 8019a90:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019a92:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019a96:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019a98:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019a9c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019aa0:	fb04 fa0a 	mul.w	sl, r4, sl
 8019aa4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019aa8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019aac:	44de      	add	lr, fp
 8019aae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019ab2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019ab6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019aba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019abe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019ac2:	ea4e 040a 	orr.w	r4, lr, sl
 8019ac6:	940e      	str	r4, [sp, #56]	; 0x38
 8019ac8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019aca:	2cff      	cmp	r4, #255	; 0xff
 8019acc:	d021      	beq.n	8019b12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8019ace:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019ad0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019ad4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019ad6:	fb04 fb0b 	mul.w	fp, r4, fp
 8019ada:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019adc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019ae0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019ae2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019ae6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019aea:	fb04 fa0a 	mul.w	sl, r4, sl
 8019aee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019af2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019af6:	44de      	add	lr, fp
 8019af8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019afc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019b00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019b04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019b08:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019b0c:	ea4e 040a 	orr.w	r4, lr, sl
 8019b10:	940a      	str	r4, [sp, #40]	; 0x28
 8019b12:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019b14:	2cff      	cmp	r4, #255	; 0xff
 8019b16:	d021      	beq.n	8019b5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8019b18:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019b1a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019b1e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019b20:	fb04 fb0b 	mul.w	fp, r4, fp
 8019b24:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019b26:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019b2a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019b2c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019b30:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019b34:	fb04 fa0a 	mul.w	sl, r4, sl
 8019b38:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019b3c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019b40:	44de      	add	lr, fp
 8019b42:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019b46:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019b4a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019b4e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019b52:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019b56:	ea4e 040a 	orr.w	r4, lr, sl
 8019b5a:	940f      	str	r4, [sp, #60]	; 0x3c
 8019b5c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019b5e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8019b62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019b66:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019b6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019b6c:	fb08 fc0c 	mul.w	ip, r8, ip
 8019b70:	fb02 cc0e 	mla	ip, r2, lr, ip
 8019b74:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019b78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019b7a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8019b7e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019b82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019b84:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019b88:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019b8c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019b8e:	fb08 f80e 	mul.w	r8, r8, lr
 8019b92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019b96:	fb02 8303 	mla	r3, r2, r3, r8
 8019b9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019b9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019ba0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8019ba4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019ba6:	fb01 330a 	mla	r3, r1, sl, r3
 8019baa:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8019bae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019bb0:	fb09 3901 	mla	r9, r9, r1, r3
 8019bb4:	883b      	ldrh	r3, [r7, #0]
 8019bb6:	4342      	muls	r2, r0
 8019bb8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019bbc:	1c50      	adds	r0, r2, #1
 8019bbe:	1219      	asrs	r1, r3, #8
 8019bc0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019bc4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8019bc8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8019bcc:	ea4c 0c09 	orr.w	ip, ip, r9
 8019bd0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8019bd4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8019bd8:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8019bdc:	b2c0      	uxtb	r0, r0
 8019bde:	fb12 f204 	smulbb	r2, r2, r4
 8019be2:	fa5f fc8c 	uxtb.w	ip, ip
 8019be6:	fb1e fe04 	smulbb	lr, lr, r4
 8019bea:	fb01 2100 	mla	r1, r1, r0, r2
 8019bee:	10da      	asrs	r2, r3, #3
 8019bf0:	fb1c fc04 	smulbb	ip, ip, r4
 8019bf4:	00db      	lsls	r3, r3, #3
 8019bf6:	b289      	uxth	r1, r1
 8019bf8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8019bfc:	b2db      	uxtb	r3, r3
 8019bfe:	fb02 e200 	mla	r2, r2, r0, lr
 8019c02:	fb03 c300 	mla	r3, r3, r0, ip
 8019c06:	b292      	uxth	r2, r2
 8019c08:	fa1f fc83 	uxth.w	ip, r3
 8019c0c:	1c4b      	adds	r3, r1, #1
 8019c0e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8019c12:	f10c 0301 	add.w	r3, ip, #1
 8019c16:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8019c1a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8019c1e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8019c22:	430b      	orrs	r3, r1
 8019c24:	1c51      	adds	r1, r2, #1
 8019c26:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019c2a:	0952      	lsrs	r2, r2, #5
 8019c2c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019c30:	4313      	orrs	r3, r2
 8019c32:	803b      	strh	r3, [r7, #0]
 8019c34:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8019c36:	3702      	adds	r7, #2
 8019c38:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8019c3a:	441a      	add	r2, r3
 8019c3c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8019c3e:	441d      	add	r5, r3
 8019c40:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019c42:	9231      	str	r2, [sp, #196]	; 0xc4
 8019c44:	3b01      	subs	r3, #1
 8019c46:	931a      	str	r3, [sp, #104]	; 0x68
 8019c48:	e694      	b.n	8019974 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8019c4a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8019c4c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8019c4e:	441c      	add	r4, r3
 8019c50:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8019c52:	441d      	add	r5, r3
 8019c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c56:	9431      	str	r4, [sp, #196]	; 0xc4
 8019c58:	3b01      	subs	r3, #1
 8019c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8019c5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019c5e:	3302      	adds	r3, #2
 8019c60:	930c      	str	r3, [sp, #48]	; 0x30
 8019c62:	e667      	b.n	8019934 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019c64:	d024      	beq.n	8019cb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8019c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c68:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8019c6a:	3b01      	subs	r3, #1
 8019c6c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8019c6e:	fb00 4003 	mla	r0, r0, r3, r4
 8019c72:	1400      	asrs	r0, r0, #16
 8019c74:	f53f ae7b 	bmi.w	801996e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8019c78:	3901      	subs	r1, #1
 8019c7a:	4288      	cmp	r0, r1
 8019c7c:	f6bf ae77 	bge.w	801996e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8019c80:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8019c82:	fb01 5303 	mla	r3, r1, r3, r5
 8019c86:	141b      	asrs	r3, r3, #16
 8019c88:	f53f ae71 	bmi.w	801996e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8019c8c:	3a01      	subs	r2, #1
 8019c8e:	4293      	cmp	r3, r2
 8019c90:	f6bf ae6d 	bge.w	801996e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8019c94:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8019c98:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8019c9c:	f1bb 0f00 	cmp.w	fp, #0
 8019ca0:	dc70      	bgt.n	8019d84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 8019ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ca4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019caa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8019cae:	930c      	str	r3, [sp, #48]	; 0x30
 8019cb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	f340 81be 	ble.w	801a034 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8019cb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019cbc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019cbe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019cc2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019cc6:	eef0 6a48 	vmov.f32	s13, s16
 8019cca:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019cce:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019cd2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019cd6:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8019cda:	eef0 6a68 	vmov.f32	s13, s17
 8019cde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019ce2:	ee16 5a90 	vmov	r5, s13
 8019ce6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019cea:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019cee:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019cf2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019cf6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019cfa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019cfe:	ee18 2a10 	vmov	r2, s16
 8019d02:	eeb0 8a47 	vmov.f32	s16, s14
 8019d06:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d0a:	ee18 2a90 	vmov	r2, s17
 8019d0e:	9333      	str	r3, [sp, #204]	; 0xcc
 8019d10:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019d12:	eef0 8a67 	vmov.f32	s17, s15
 8019d16:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d1a:	9334      	str	r3, [sp, #208]	; 0xd0
 8019d1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019d1e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019d20:	3b01      	subs	r3, #1
 8019d22:	9319      	str	r3, [sp, #100]	; 0x64
 8019d24:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019d26:	bf08      	it	eq
 8019d28:	4613      	moveq	r3, r2
 8019d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8019d2c:	e5f4      	b.n	8019918 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019d2e:	2900      	cmp	r1, #0
 8019d30:	f43f ae66 	beq.w	8019a00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8019d34:	f818 0000 	ldrb.w	r0, [r8, r0]
 8019d38:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8019d3c:	900a      	str	r0, [sp, #40]	; 0x28
 8019d3e:	0e00      	lsrs	r0, r0, #24
 8019d40:	9013      	str	r0, [sp, #76]	; 0x4c
 8019d42:	e65d      	b.n	8019a00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8019d44:	f113 0801 	adds.w	r8, r3, #1
 8019d48:	f53f af74 	bmi.w	8019c34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8019d4c:	4540      	cmp	r0, r8
 8019d4e:	f6ff af71 	blt.w	8019c34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8019d52:	f11c 0801 	adds.w	r8, ip, #1
 8019d56:	f53f af6d 	bmi.w	8019c34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8019d5a:	45c6      	cmp	lr, r8
 8019d5c:	f6ff af6a 	blt.w	8019c34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8019d60:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8019d62:	b200      	sxth	r0, r0
 8019d64:	9302      	str	r3, [sp, #8]
 8019d66:	fa0f f38e 	sxth.w	r3, lr
 8019d6a:	9000      	str	r0, [sp, #0]
 8019d6c:	9301      	str	r3, [sp, #4]
 8019d6e:	4633      	mov	r3, r6
 8019d70:	981d      	ldr	r0, [sp, #116]	; 0x74
 8019d72:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8019d76:	e9cd c203 	strd	ip, r2, [sp, #12]
 8019d7a:	4639      	mov	r1, r7
 8019d7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019d7e:	f7ff fc33 	bl	80195e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8019d82:	e757      	b.n	8019c34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8019d84:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019d86:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8019d8a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8019d8c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019d90:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019d92:	1427      	asrs	r7, r4, #16
 8019d94:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019d96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019d9a:	142b      	asrs	r3, r5, #16
 8019d9c:	fb01 7303 	mla	r3, r1, r3, r7
 8019da0:	18e7      	adds	r7, r4, r3
 8019da2:	5ce3      	ldrb	r3, [r4, r3]
 8019da4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019da8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8019dac:	2a00      	cmp	r2, #0
 8019dae:	f000 8137 	beq.w	801a020 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 8019db2:	f897 e001 	ldrb.w	lr, [r7, #1]
 8019db6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8019dba:	9410      	str	r4, [sp, #64]	; 0x40
 8019dbc:	0e24      	lsrs	r4, r4, #24
 8019dbe:	9417      	str	r4, [sp, #92]	; 0x5c
 8019dc0:	b170      	cbz	r0, 8019de0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8019dc2:	eb07 0e01 	add.w	lr, r7, r1
 8019dc6:	5c79      	ldrb	r1, [r7, r1]
 8019dc8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019dcc:	910b      	str	r1, [sp, #44]	; 0x2c
 8019dce:	0e09      	lsrs	r1, r1, #24
 8019dd0:	9114      	str	r1, [sp, #80]	; 0x50
 8019dd2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8019dd6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019dda:	9111      	str	r1, [sp, #68]	; 0x44
 8019ddc:	0e09      	lsrs	r1, r1, #24
 8019dde:	9118      	str	r1, [sp, #96]	; 0x60
 8019de0:	b292      	uxth	r2, r2
 8019de2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8019de4:	b280      	uxth	r0, r0
 8019de6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019de8:	fb02 f800 	mul.w	r8, r2, r0
 8019dec:	0112      	lsls	r2, r2, #4
 8019dee:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8019df2:	eba2 0e08 	sub.w	lr, r2, r8
 8019df6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019dfa:	b280      	uxth	r0, r0
 8019dfc:	fa1f fe8e 	uxth.w	lr, lr
 8019e00:	1a12      	subs	r2, r2, r0
 8019e02:	fb0e f101 	mul.w	r1, lr, r1
 8019e06:	b292      	uxth	r2, r2
 8019e08:	fb02 110c 	mla	r1, r2, ip, r1
 8019e0c:	fb00 1104 	mla	r1, r0, r4, r1
 8019e10:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019e12:	fb08 1104 	mla	r1, r8, r4, r1
 8019e16:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019e1a:	2900      	cmp	r1, #0
 8019e1c:	f000 80f5 	beq.w	801a00a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8019e20:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019e24:	d019      	beq.n	8019e5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8019e26:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019e2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019e2e:	fb0c fa0a 	mul.w	sl, ip, sl
 8019e32:	fb0c fc03 	mul.w	ip, ip, r3
 8019e36:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019e3a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019e3e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8019e42:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019e46:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8019e4a:	4453      	add	r3, sl
 8019e4c:	0a3f      	lsrs	r7, r7, #8
 8019e4e:	0a1b      	lsrs	r3, r3, #8
 8019e50:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019e54:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019e58:	433b      	orrs	r3, r7
 8019e5a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8019e5c:	2cff      	cmp	r4, #255	; 0xff
 8019e5e:	d020      	beq.n	8019ea2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 8019e60:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019e62:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019e66:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8019e68:	4367      	muls	r7, r4
 8019e6a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019e6c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019e70:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019e74:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8019e76:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019e7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019e7e:	fb04 fa0a 	mul.w	sl, r4, sl
 8019e82:	44bc      	add	ip, r7
 8019e84:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019e88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019e8c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019e90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019e94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019e98:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019e9c:	ea4c 040a 	orr.w	r4, ip, sl
 8019ea0:	9410      	str	r4, [sp, #64]	; 0x40
 8019ea2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019ea4:	2cff      	cmp	r4, #255	; 0xff
 8019ea6:	d020      	beq.n	8019eea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8019ea8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019eaa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019eae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019eb0:	4367      	muls	r7, r4
 8019eb2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019eb4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019eb8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019ebc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019ebe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019ec2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019ec6:	fb04 fa0a 	mul.w	sl, r4, sl
 8019eca:	44bc      	add	ip, r7
 8019ecc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019ed0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019ed4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019ed8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019edc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019ee0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019ee4:	ea4c 040a 	orr.w	r4, ip, sl
 8019ee8:	940b      	str	r4, [sp, #44]	; 0x2c
 8019eea:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019eec:	2cff      	cmp	r4, #255	; 0xff
 8019eee:	d020      	beq.n	8019f32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 8019ef0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019ef2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019ef6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019ef8:	4367      	muls	r7, r4
 8019efa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019efc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019f00:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019f04:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019f06:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019f0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019f0e:	fb04 fa0a 	mul.w	sl, r4, sl
 8019f12:	44bc      	add	ip, r7
 8019f14:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019f18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019f1c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019f20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019f24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019f28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019f2c:	ea4c 040a 	orr.w	r4, ip, sl
 8019f30:	9411      	str	r4, [sp, #68]	; 0x44
 8019f32:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019f34:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8019f38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019f3c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019f40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019f42:	fb0e f707 	mul.w	r7, lr, r7
 8019f46:	fb02 770c 	mla	r7, r2, ip, r7
 8019f4a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019f4e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019f50:	fb00 770c 	mla	r7, r0, ip, r7
 8019f54:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019f58:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019f5a:	fb08 770c 	mla	r7, r8, ip, r7
 8019f5e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8019f62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019f64:	fb0e fe0c 	mul.w	lr, lr, ip
 8019f68:	0a3f      	lsrs	r7, r7, #8
 8019f6a:	fb02 e303 	mla	r3, r2, r3, lr
 8019f6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019f70:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019f74:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8019f78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019f7a:	fb00 330a 	mla	r3, r0, sl, r3
 8019f7e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019f82:	f8b9 0000 	ldrh.w	r0, [r9]
 8019f86:	fb08 3c0c 	mla	ip, r8, ip, r3
 8019f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019f8c:	1202      	asrs	r2, r0, #8
 8019f8e:	434b      	muls	r3, r1
 8019f90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019f94:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8019f98:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019f9c:	1c59      	adds	r1, r3, #1
 8019f9e:	ea47 070c 	orr.w	r7, r7, ip
 8019fa2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019fa6:	0c3b      	lsrs	r3, r7, #16
 8019fa8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8019fac:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8019fb0:	b2ff      	uxtb	r7, r7
 8019fb2:	fb13 f304 	smulbb	r3, r3, r4
 8019fb6:	b2c9      	uxtb	r1, r1
 8019fb8:	fb1c fc04 	smulbb	ip, ip, r4
 8019fbc:	fb02 3201 	mla	r2, r2, r1, r3
 8019fc0:	10c3      	asrs	r3, r0, #3
 8019fc2:	fb17 f704 	smulbb	r7, r7, r4
 8019fc6:	00c0      	lsls	r0, r0, #3
 8019fc8:	b292      	uxth	r2, r2
 8019fca:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8019fce:	b2c0      	uxtb	r0, r0
 8019fd0:	fb03 c301 	mla	r3, r3, r1, ip
 8019fd4:	f102 0c01 	add.w	ip, r2, #1
 8019fd8:	fb00 7001 	mla	r0, r0, r1, r7
 8019fdc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8019fe0:	b280      	uxth	r0, r0
 8019fe2:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8019fe6:	b29b      	uxth	r3, r3
 8019fe8:	1c42      	adds	r2, r0, #1
 8019fea:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8019fee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019ff2:	ea42 020c 	orr.w	r2, r2, ip
 8019ff6:	f103 0c01 	add.w	ip, r3, #1
 8019ffa:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8019ffe:	095b      	lsrs	r3, r3, #5
 801a000:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a004:	431a      	orrs	r2, r3
 801a006:	f8a9 2000 	strh.w	r2, [r9]
 801a00a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801a00c:	f109 0902 	add.w	r9, r9, #2
 801a010:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801a012:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a016:	441a      	add	r2, r3
 801a018:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a01a:	9231      	str	r2, [sp, #196]	; 0xc4
 801a01c:	441d      	add	r5, r3
 801a01e:	e63d      	b.n	8019c9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801a020:	2800      	cmp	r0, #0
 801a022:	f43f aedd 	beq.w	8019de0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 801a026:	5c79      	ldrb	r1, [r7, r1]
 801a028:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a02c:	910b      	str	r1, [sp, #44]	; 0x2c
 801a02e:	0e09      	lsrs	r1, r1, #24
 801a030:	9114      	str	r1, [sp, #80]	; 0x50
 801a032:	e6d5      	b.n	8019de0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 801a034:	b01f      	add	sp, #124	; 0x7c
 801a036:	ecbd 8b08 	vpop	{d8-d11}
 801a03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a040 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a044:	880e      	ldrh	r6, [r1, #0]
 801a046:	b085      	sub	sp, #20
 801a048:	4691      	mov	r9, r2
 801a04a:	ea4f 2826 	mov.w	r8, r6, asr #8
 801a04e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801a052:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 801a056:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 801a05a:	ea4f 08e6 	mov.w	r8, r6, asr #3
 801a05e:	00f6      	lsls	r6, r6, #3
 801a060:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801a064:	9200      	str	r2, [sp, #0]
 801a066:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 801a06a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801a06e:	9201      	str	r2, [sp, #4]
 801a070:	b2f2      	uxtb	r2, r6
 801a072:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801a076:	9202      	str	r2, [sp, #8]
 801a078:	fb04 560c 	mla	r6, r4, ip, r5
 801a07c:	2c00      	cmp	r4, #0
 801a07e:	eb09 0806 	add.w	r8, r9, r6
 801a082:	db3f      	blt.n	801a104 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 801a084:	45a6      	cmp	lr, r4
 801a086:	dd3d      	ble.n	801a104 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 801a088:	2d00      	cmp	r5, #0
 801a08a:	db39      	blt.n	801a100 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 801a08c:	45ac      	cmp	ip, r5
 801a08e:	dd37      	ble.n	801a100 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 801a090:	f819 2006 	ldrb.w	r2, [r9, r6]
 801a094:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a098:	1c6e      	adds	r6, r5, #1
 801a09a:	d436      	bmi.n	801a10a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 801a09c:	45b4      	cmp	ip, r6
 801a09e:	dd34      	ble.n	801a10a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 801a0a0:	b3a8      	cbz	r0, 801a10e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 801a0a2:	f898 6001 	ldrb.w	r6, [r8, #1]
 801a0a6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801a0aa:	3401      	adds	r4, #1
 801a0ac:	d433      	bmi.n	801a116 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801a0ae:	45a6      	cmp	lr, r4
 801a0b0:	dd31      	ble.n	801a116 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801a0b2:	b39f      	cbz	r7, 801a11c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 801a0b4:	2d00      	cmp	r5, #0
 801a0b6:	eb08 0e0c 	add.w	lr, r8, ip
 801a0ba:	db2a      	blt.n	801a112 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 801a0bc:	45ac      	cmp	ip, r5
 801a0be:	dd28      	ble.n	801a112 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 801a0c0:	f818 400c 	ldrb.w	r4, [r8, ip]
 801a0c4:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801a0c8:	3501      	adds	r5, #1
 801a0ca:	d42a      	bmi.n	801a122 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 801a0cc:	45ac      	cmp	ip, r5
 801a0ce:	dd28      	ble.n	801a122 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 801a0d0:	b348      	cbz	r0, 801a126 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 801a0d2:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801a0d6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a0da:	280f      	cmp	r0, #15
 801a0dc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801a0e0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a0e4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801a0e8:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801a0ec:	d801      	bhi.n	801a0f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 801a0ee:	2f0f      	cmp	r7, #15
 801a0f0:	d91b      	bls.n	801a12a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 801a0f2:	4b7e      	ldr	r3, [pc, #504]	; (801a2ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 801a0f4:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801a0f8:	4a7d      	ldr	r2, [pc, #500]	; (801a2f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 801a0fa:	487e      	ldr	r0, [pc, #504]	; (801a2f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 801a0fc:	f004 ffcc 	bl	801f098 <__assert_func>
 801a100:	2200      	movs	r2, #0
 801a102:	e7c9      	b.n	801a098 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 801a104:	2600      	movs	r6, #0
 801a106:	4632      	mov	r2, r6
 801a108:	e7cf      	b.n	801a0aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801a10a:	2600      	movs	r6, #0
 801a10c:	e7cd      	b.n	801a0aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801a10e:	4606      	mov	r6, r0
 801a110:	e7cb      	b.n	801a0aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801a112:	2400      	movs	r4, #0
 801a114:	e7d8      	b.n	801a0c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 801a116:	2300      	movs	r3, #0
 801a118:	461c      	mov	r4, r3
 801a11a:	e7de      	b.n	801a0da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801a11c:	463b      	mov	r3, r7
 801a11e:	463c      	mov	r4, r7
 801a120:	e7db      	b.n	801a0da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801a122:	2300      	movs	r3, #0
 801a124:	e7d9      	b.n	801a0da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801a126:	4603      	mov	r3, r0
 801a128:	e7d7      	b.n	801a0da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 801a12a:	b280      	uxth	r0, r0
 801a12c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a130:	b2bf      	uxth	r7, r7
 801a132:	fb00 fe07 	mul.w	lr, r0, r7
 801a136:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801a13a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801a13e:	eba0 0c0e 	sub.w	ip, r0, lr
 801a142:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801a146:	b2bf      	uxth	r7, r7
 801a148:	fa1f fc8c 	uxth.w	ip, ip
 801a14c:	eba5 0507 	sub.w	r5, r5, r7
 801a150:	fb0c f00a 	mul.w	r0, ip, sl
 801a154:	b2ad      	uxth	r5, r5
 801a156:	fb05 000b 	mla	r0, r5, fp, r0
 801a15a:	fb07 0009 	mla	r0, r7, r9, r0
 801a15e:	fb0e 0008 	mla	r0, lr, r8, r0
 801a162:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a166:	9003      	str	r0, [sp, #12]
 801a168:	d018      	beq.n	801a19c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 801a16a:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801a16e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a172:	fb0b f000 	mul.w	r0, fp, r0
 801a176:	fb0b fb02 	mul.w	fp, fp, r2
 801a17a:	0a02      	lsrs	r2, r0, #8
 801a17c:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a180:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a184:	4402      	add	r2, r0
 801a186:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801a18a:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801a18e:	0a12      	lsrs	r2, r2, #8
 801a190:	0a00      	lsrs	r0, r0, #8
 801a192:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a196:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a19a:	4302      	orrs	r2, r0
 801a19c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a1a0:	d019      	beq.n	801a1d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 801a1a2:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801a1a6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a1aa:	fb0a fb0b 	mul.w	fp, sl, fp
 801a1ae:	fb0a fa06 	mul.w	sl, sl, r6
 801a1b2:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801a1b6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a1ba:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801a1be:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a1c2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801a1c6:	445e      	add	r6, fp
 801a1c8:	0a00      	lsrs	r0, r0, #8
 801a1ca:	0a36      	lsrs	r6, r6, #8
 801a1cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a1d0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a1d4:	4306      	orrs	r6, r0
 801a1d6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a1da:	d019      	beq.n	801a210 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 801a1dc:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801a1e0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a1e4:	fb09 fa0a 	mul.w	sl, r9, sl
 801a1e8:	fb09 f904 	mul.w	r9, r9, r4
 801a1ec:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801a1f0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a1f4:	f509 7080 	add.w	r0, r9, #256	; 0x100
 801a1f8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a1fc:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 801a200:	4454      	add	r4, sl
 801a202:	0a00      	lsrs	r0, r0, #8
 801a204:	0a24      	lsrs	r4, r4, #8
 801a206:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a20a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a20e:	4304      	orrs	r4, r0
 801a210:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a214:	d019      	beq.n	801a24a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 801a216:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801a21a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a21e:	fb08 f909 	mul.w	r9, r8, r9
 801a222:	fb08 f803 	mul.w	r8, r8, r3
 801a226:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801a22a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801a22e:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801a232:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a236:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801a23a:	444b      	add	r3, r9
 801a23c:	0a00      	lsrs	r0, r0, #8
 801a23e:	0a1b      	lsrs	r3, r3, #8
 801a240:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a244:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a248:	4303      	orrs	r3, r0
 801a24a:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801a24e:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801a252:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a256:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a25a:	fb0c f808 	mul.w	r8, ip, r8
 801a25e:	fb0c f606 	mul.w	r6, ip, r6
 801a262:	fb05 8800 	mla	r8, r5, r0, r8
 801a266:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801a26a:	fb05 6202 	mla	r2, r5, r2, r6
 801a26e:	9d00      	ldr	r5, [sp, #0]
 801a270:	fb07 8800 	mla	r8, r7, r0, r8
 801a274:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801a278:	fb0e 8000 	mla	r0, lr, r0, r8
 801a27c:	0a00      	lsrs	r0, r0, #8
 801a27e:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 801a282:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 801a286:	fb07 2700 	mla	r7, r7, r0, r2
 801a28a:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801a28e:	9b03      	ldr	r3, [sp, #12]
 801a290:	fb0e 7000 	mla	r0, lr, r0, r7
 801a294:	9a02      	ldr	r2, [sp, #8]
 801a296:	43dc      	mvns	r4, r3
 801a298:	9b01      	ldr	r3, [sp, #4]
 801a29a:	0a00      	lsrs	r0, r0, #8
 801a29c:	b2e4      	uxtb	r4, r4
 801a29e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a2a2:	4363      	muls	r3, r4
 801a2a4:	4365      	muls	r5, r4
 801a2a6:	ea48 0000 	orr.w	r0, r8, r0
 801a2aa:	4362      	muls	r2, r4
 801a2ac:	1c5e      	adds	r6, r3, #1
 801a2ae:	4614      	mov	r4, r2
 801a2b0:	1c6a      	adds	r2, r5, #1
 801a2b2:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 801a2b6:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801a2ba:	0a03      	lsrs	r3, r0, #8
 801a2bc:	0c02      	lsrs	r2, r0, #16
 801a2be:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801a2c2:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801a2c6:	00db      	lsls	r3, r3, #3
 801a2c8:	0212      	lsls	r2, r2, #8
 801a2ca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a2ce:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801a2d2:	4313      	orrs	r3, r2
 801a2d4:	1c62      	adds	r2, r4, #1
 801a2d6:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801a2da:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801a2de:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a2e2:	4318      	orrs	r0, r3
 801a2e4:	8008      	strh	r0, [r1, #0]
 801a2e6:	b005      	add	sp, #20
 801a2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ec:	08023551 	.word	0x08023551
 801a2f0:	08023b1e 	.word	0x08023b1e
 801a2f4:	080235d5 	.word	0x080235d5

0801a2f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2fc:	ed2d 8b08 	vpush	{d8-d11}
 801a300:	b09b      	sub	sp, #108	; 0x6c
 801a302:	eeb0 aa40 	vmov.f32	s20, s0
 801a306:	eef0 9a60 	vmov.f32	s19, s1
 801a30a:	9218      	str	r2, [sp, #96]	; 0x60
 801a30c:	eeb0 9a41 	vmov.f32	s18, s2
 801a310:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801a312:	eeb0 8a62 	vmov.f32	s16, s5
 801a316:	9019      	str	r0, [sp, #100]	; 0x64
 801a318:	eef0 8a43 	vmov.f32	s17, s6
 801a31c:	6850      	ldr	r0, [r2, #4]
 801a31e:	eef0 ba44 	vmov.f32	s23, s8
 801a322:	9116      	str	r1, [sp, #88]	; 0x58
 801a324:	eeb0 ba64 	vmov.f32	s22, s9
 801a328:	9307      	str	r3, [sp, #28]
 801a32a:	eef0 aa45 	vmov.f32	s21, s10
 801a32e:	6812      	ldr	r2, [r2, #0]
 801a330:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 801a332:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801a336:	fb00 1303 	mla	r3, r0, r3, r1
 801a33a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a33e:	930a      	str	r3, [sp, #40]	; 0x28
 801a340:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	930f      	str	r3, [sp, #60]	; 0x3c
 801a346:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a348:	685e      	ldr	r6, [r3, #4]
 801a34a:	3604      	adds	r6, #4
 801a34c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a34e:	2b00      	cmp	r3, #0
 801a350:	dc03      	bgt.n	801a35a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a352:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a354:	2b00      	cmp	r3, #0
 801a356:	f340 8373 	ble.w	801aa40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 801a35a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a35c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a360:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a364:	1e48      	subs	r0, r1, #1
 801a366:	1e57      	subs	r7, r2, #1
 801a368:	9b07      	ldr	r3, [sp, #28]
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	f340 818f 	ble.w	801a68e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 801a370:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801a372:	142b      	asrs	r3, r5, #16
 801a374:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801a378:	d406      	bmi.n	801a388 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a37a:	4584      	cmp	ip, r0
 801a37c:	da04      	bge.n	801a388 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a37e:	2b00      	cmp	r3, #0
 801a380:	db02      	blt.n	801a388 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a382:	42bb      	cmp	r3, r7
 801a384:	f2c0 8184 	blt.w	801a690 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801a388:	f11c 0c01 	adds.w	ip, ip, #1
 801a38c:	f100 8172 	bmi.w	801a674 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801a390:	4561      	cmp	r1, ip
 801a392:	f2c0 816f 	blt.w	801a674 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801a396:	3301      	adds	r3, #1
 801a398:	f100 816c 	bmi.w	801a674 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801a39c:	429a      	cmp	r2, r3
 801a39e:	f2c0 8169 	blt.w	801a674 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801a3a2:	9b07      	ldr	r3, [sp, #28]
 801a3a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a3a6:	9317      	str	r3, [sp, #92]	; 0x5c
 801a3a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	f340 818e 	ble.w	801a6cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801a3b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a3b2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801a3b6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a3ba:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a3be:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a3c0:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801a3c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a3c6:	141b      	asrs	r3, r3, #16
 801a3c8:	f100 81d1 	bmi.w	801a76e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801a3cc:	f101 38ff 	add.w	r8, r1, #4294967295
 801a3d0:	4543      	cmp	r3, r8
 801a3d2:	f280 81cc 	bge.w	801a76e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801a3d6:	f1bc 0f00 	cmp.w	ip, #0
 801a3da:	f2c0 81c8 	blt.w	801a76e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801a3de:	f10e 38ff 	add.w	r8, lr, #4294967295
 801a3e2:	45c4      	cmp	ip, r8
 801a3e4:	f280 81c3 	bge.w	801a76e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801a3e8:	b209      	sxth	r1, r1
 801a3ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a3ec:	fb0c 3301 	mla	r3, ip, r1, r3
 801a3f0:	eb04 0803 	add.w	r8, r4, r3
 801a3f4:	5ce3      	ldrb	r3, [r4, r3]
 801a3f6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a3fa:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801a3fe:	2a00      	cmp	r2, #0
 801a400:	f000 81aa 	beq.w	801a758 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 801a404:	f898 c001 	ldrb.w	ip, [r8, #1]
 801a408:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801a40c:	940b      	str	r4, [sp, #44]	; 0x2c
 801a40e:	0e24      	lsrs	r4, r4, #24
 801a410:	9412      	str	r4, [sp, #72]	; 0x48
 801a412:	b178      	cbz	r0, 801a434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801a414:	eb08 0c01 	add.w	ip, r8, r1
 801a418:	f818 1001 	ldrb.w	r1, [r8, r1]
 801a41c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a420:	9108      	str	r1, [sp, #32]
 801a422:	0e09      	lsrs	r1, r1, #24
 801a424:	9110      	str	r1, [sp, #64]	; 0x40
 801a426:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801a42a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a42e:	910c      	str	r1, [sp, #48]	; 0x30
 801a430:	0e09      	lsrs	r1, r1, #24
 801a432:	9113      	str	r1, [sp, #76]	; 0x4c
 801a434:	b292      	uxth	r2, r2
 801a436:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a438:	b280      	uxth	r0, r0
 801a43a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a43c:	fb02 f900 	mul.w	r9, r2, r0
 801a440:	0112      	lsls	r2, r2, #4
 801a442:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a446:	eba2 0809 	sub.w	r8, r2, r9
 801a44a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a44e:	b280      	uxth	r0, r0
 801a450:	fa1f f888 	uxth.w	r8, r8
 801a454:	1a12      	subs	r2, r2, r0
 801a456:	fb08 f101 	mul.w	r1, r8, r1
 801a45a:	b292      	uxth	r2, r2
 801a45c:	fb02 110e 	mla	r1, r2, lr, r1
 801a460:	fb00 1104 	mla	r1, r0, r4, r1
 801a464:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a466:	fb09 1104 	mla	r1, r9, r4, r1
 801a46a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a46e:	2900      	cmp	r1, #0
 801a470:	f000 80f5 	beq.w	801a65e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801a474:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a478:	d01b      	beq.n	801a4b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801a47a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a47e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a482:	fb0e fa0a 	mul.w	sl, lr, sl
 801a486:	fb0e fe03 	mul.w	lr, lr, r3
 801a48a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a48e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a492:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a496:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a49a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a49e:	4453      	add	r3, sl
 801a4a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a4a4:	0a1b      	lsrs	r3, r3, #8
 801a4a6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a4aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a4ae:	ea43 030c 	orr.w	r3, r3, ip
 801a4b2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a4b4:	2cff      	cmp	r4, #255	; 0xff
 801a4b6:	d021      	beq.n	801a4fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801a4b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a4ba:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a4be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a4c0:	fb04 fb0b 	mul.w	fp, r4, fp
 801a4c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a4c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a4ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a4cc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a4d0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a4d4:	fb04 fa0a 	mul.w	sl, r4, sl
 801a4d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a4dc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a4e0:	44de      	add	lr, fp
 801a4e2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a4e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a4ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a4ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a4f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a4f6:	ea4e 040a 	orr.w	r4, lr, sl
 801a4fa:	940b      	str	r4, [sp, #44]	; 0x2c
 801a4fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a4fe:	2cff      	cmp	r4, #255	; 0xff
 801a500:	d021      	beq.n	801a546 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801a502:	9c08      	ldr	r4, [sp, #32]
 801a504:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a508:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a50a:	fb04 fb0b 	mul.w	fp, r4, fp
 801a50e:	9c08      	ldr	r4, [sp, #32]
 801a510:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a514:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a516:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a51a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a51e:	fb04 fa0a 	mul.w	sl, r4, sl
 801a522:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a526:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a52a:	44de      	add	lr, fp
 801a52c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a530:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a534:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a538:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a53c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a540:	ea4e 040a 	orr.w	r4, lr, sl
 801a544:	9408      	str	r4, [sp, #32]
 801a546:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a548:	2cff      	cmp	r4, #255	; 0xff
 801a54a:	d021      	beq.n	801a590 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801a54c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a54e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a552:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a554:	fb04 fb0b 	mul.w	fp, r4, fp
 801a558:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a55a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a55e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a560:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a564:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a568:	fb04 fa0a 	mul.w	sl, r4, sl
 801a56c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a570:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a574:	44de      	add	lr, fp
 801a576:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a57a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a57e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a582:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a586:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a58a:	ea4e 040a 	orr.w	r4, lr, sl
 801a58e:	940c      	str	r4, [sp, #48]	; 0x30
 801a590:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a592:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a596:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a59a:	43c9      	mvns	r1, r1
 801a59c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a5a0:	9c08      	ldr	r4, [sp, #32]
 801a5a2:	fb08 fc0c 	mul.w	ip, r8, ip
 801a5a6:	fb02 cc0e 	mla	ip, r2, lr, ip
 801a5aa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a5ae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a5b0:	fb00 cc0e 	mla	ip, r0, lr, ip
 801a5b4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a5b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a5ba:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a5be:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a5c2:	fb08 f80e 	mul.w	r8, r8, lr
 801a5c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a5ca:	fa5f fe81 	uxtb.w	lr, r1
 801a5ce:	fb02 8303 	mla	r3, r2, r3, r8
 801a5d2:	9a08      	ldr	r2, [sp, #32]
 801a5d4:	f8b7 8000 	ldrh.w	r8, [r7]
 801a5d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a5dc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a5e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a5e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801a5e6:	fb00 330a 	mla	r3, r0, sl, r3
 801a5ea:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801a5ee:	ea4f 2228 	mov.w	r2, r8, asr #8
 801a5f2:	fb09 3900 	mla	r9, r9, r0, r3
 801a5f6:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801a5fa:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801a5fe:	b2c9      	uxtb	r1, r1
 801a600:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a604:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801a608:	fb02 f20e 	mul.w	r2, r2, lr
 801a60c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a610:	fb00 f00e 	mul.w	r0, r0, lr
 801a614:	1c53      	adds	r3, r2, #1
 801a616:	fb01 f10e 	mul.w	r1, r1, lr
 801a61a:	ea4c 0c09 	orr.w	ip, ip, r9
 801a61e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801a622:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801a626:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a62a:	4a60      	ldr	r2, [pc, #384]	; (801a7ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 801a62c:	b2db      	uxtb	r3, r3
 801a62e:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801a632:	1c43      	adds	r3, r0, #1
 801a634:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801a638:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801a63c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801a640:	00db      	lsls	r3, r3, #3
 801a642:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a646:	4313      	orrs	r3, r2
 801a648:	1c4a      	adds	r2, r1, #1
 801a64a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801a64e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801a652:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801a656:	ea4c 0c03 	orr.w	ip, ip, r3
 801a65a:	f8a7 c000 	strh.w	ip, [r7]
 801a65e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801a660:	3702      	adds	r7, #2
 801a662:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a664:	441a      	add	r2, r3
 801a666:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a668:	441d      	add	r5, r3
 801a66a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a66c:	922d      	str	r2, [sp, #180]	; 0xb4
 801a66e:	3b01      	subs	r3, #1
 801a670:	9317      	str	r3, [sp, #92]	; 0x5c
 801a672:	e699      	b.n	801a3a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801a674:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801a676:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801a678:	441c      	add	r4, r3
 801a67a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a67c:	441d      	add	r5, r3
 801a67e:	9b07      	ldr	r3, [sp, #28]
 801a680:	942d      	str	r4, [sp, #180]	; 0xb4
 801a682:	3b01      	subs	r3, #1
 801a684:	9307      	str	r3, [sp, #28]
 801a686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a688:	3302      	adds	r3, #2
 801a68a:	930a      	str	r3, [sp, #40]	; 0x28
 801a68c:	e66c      	b.n	801a368 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a68e:	d024      	beq.n	801a6da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 801a690:	9b07      	ldr	r3, [sp, #28]
 801a692:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801a694:	3b01      	subs	r3, #1
 801a696:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801a698:	fb00 4003 	mla	r0, r0, r3, r4
 801a69c:	1400      	asrs	r0, r0, #16
 801a69e:	f53f ae80 	bmi.w	801a3a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801a6a2:	3901      	subs	r1, #1
 801a6a4:	4288      	cmp	r0, r1
 801a6a6:	f6bf ae7c 	bge.w	801a3a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801a6aa:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801a6ac:	fb01 5303 	mla	r3, r1, r3, r5
 801a6b0:	141b      	asrs	r3, r3, #16
 801a6b2:	f53f ae76 	bmi.w	801a3a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801a6b6:	3a01      	subs	r2, #1
 801a6b8:	4293      	cmp	r3, r2
 801a6ba:	f6bf ae72 	bge.w	801a3a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801a6be:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a6c2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801a6c6:	f1bb 0f00 	cmp.w	fp, #0
 801a6ca:	dc71      	bgt.n	801a7b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801a6cc:	9b07      	ldr	r3, [sp, #28]
 801a6ce:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a6d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6d4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801a6d8:	930a      	str	r3, [sp, #40]	; 0x28
 801a6da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	f340 81af 	ble.w	801aa40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 801a6e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a6e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a6e8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a6ec:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a6f0:	eef0 6a48 	vmov.f32	s13, s16
 801a6f4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a6f8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a6fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a700:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801a704:	eef0 6a68 	vmov.f32	s13, s17
 801a708:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a70c:	ee16 5a90 	vmov	r5, s13
 801a710:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a714:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a718:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a71c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a720:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a724:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a728:	ee18 2a10 	vmov	r2, s16
 801a72c:	eeb0 8a47 	vmov.f32	s16, s14
 801a730:	fb92 f3f3 	sdiv	r3, r2, r3
 801a734:	ee18 2a90 	vmov	r2, s17
 801a738:	932f      	str	r3, [sp, #188]	; 0xbc
 801a73a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a73c:	eef0 8a67 	vmov.f32	s17, s15
 801a740:	fb92 f3f3 	sdiv	r3, r2, r3
 801a744:	9330      	str	r3, [sp, #192]	; 0xc0
 801a746:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a748:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a74a:	3b01      	subs	r3, #1
 801a74c:	9316      	str	r3, [sp, #88]	; 0x58
 801a74e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a750:	bf08      	it	eq
 801a752:	4613      	moveq	r3, r2
 801a754:	9307      	str	r3, [sp, #28]
 801a756:	e5f9      	b.n	801a34c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a758:	2800      	cmp	r0, #0
 801a75a:	f43f ae6b 	beq.w	801a434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801a75e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801a762:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a766:	9108      	str	r1, [sp, #32]
 801a768:	0e09      	lsrs	r1, r1, #24
 801a76a:	9110      	str	r1, [sp, #64]	; 0x40
 801a76c:	e662      	b.n	801a434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801a76e:	f113 0801 	adds.w	r8, r3, #1
 801a772:	f53f af74 	bmi.w	801a65e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801a776:	4541      	cmp	r1, r8
 801a778:	f6ff af71 	blt.w	801a65e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801a77c:	f11c 0801 	adds.w	r8, ip, #1
 801a780:	f53f af6d 	bmi.w	801a65e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801a784:	45c6      	cmp	lr, r8
 801a786:	f6ff af6a 	blt.w	801a65e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801a78a:	b209      	sxth	r1, r1
 801a78c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801a790:	fa0f f38e 	sxth.w	r3, lr
 801a794:	9100      	str	r1, [sp, #0]
 801a796:	4639      	mov	r1, r7
 801a798:	9301      	str	r3, [sp, #4]
 801a79a:	4633      	mov	r3, r6
 801a79c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801a7a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a7a2:	9819      	ldr	r0, [sp, #100]	; 0x64
 801a7a4:	f7ff fc4c 	bl	801a040 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801a7a8:	e759      	b.n	801a65e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 801a7aa:	bf00      	nop
 801a7ac:	fffff800 	.word	0xfffff800
 801a7b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a7b2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a7b6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801a7b8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a7bc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a7be:	1427      	asrs	r7, r4, #16
 801a7c0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a7c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a7c6:	142b      	asrs	r3, r5, #16
 801a7c8:	fb01 7303 	mla	r3, r1, r3, r7
 801a7cc:	18e7      	adds	r7, r4, r3
 801a7ce:	5ce3      	ldrb	r3, [r4, r3]
 801a7d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a7d4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a7d8:	2a00      	cmp	r2, #0
 801a7da:	f000 8127 	beq.w	801aa2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 801a7de:	f897 e001 	ldrb.w	lr, [r7, #1]
 801a7e2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801a7e6:	940d      	str	r4, [sp, #52]	; 0x34
 801a7e8:	0e24      	lsrs	r4, r4, #24
 801a7ea:	9414      	str	r4, [sp, #80]	; 0x50
 801a7ec:	b170      	cbz	r0, 801a80c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 801a7ee:	eb07 0e01 	add.w	lr, r7, r1
 801a7f2:	5c79      	ldrb	r1, [r7, r1]
 801a7f4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a7f8:	9109      	str	r1, [sp, #36]	; 0x24
 801a7fa:	0e09      	lsrs	r1, r1, #24
 801a7fc:	9111      	str	r1, [sp, #68]	; 0x44
 801a7fe:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801a802:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a806:	910e      	str	r1, [sp, #56]	; 0x38
 801a808:	0e09      	lsrs	r1, r1, #24
 801a80a:	9115      	str	r1, [sp, #84]	; 0x54
 801a80c:	b292      	uxth	r2, r2
 801a80e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a810:	b280      	uxth	r0, r0
 801a812:	fb02 f800 	mul.w	r8, r2, r0
 801a816:	0112      	lsls	r2, r2, #4
 801a818:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801a81c:	eba2 0e08 	sub.w	lr, r2, r8
 801a820:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801a824:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a826:	b280      	uxth	r0, r0
 801a828:	fa1f fe8e 	uxth.w	lr, lr
 801a82c:	1a09      	subs	r1, r1, r0
 801a82e:	fb0e f202 	mul.w	r2, lr, r2
 801a832:	b289      	uxth	r1, r1
 801a834:	fb01 220c 	mla	r2, r1, ip, r2
 801a838:	fb00 2204 	mla	r2, r0, r4, r2
 801a83c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a83e:	fb08 2204 	mla	r2, r8, r4, r2
 801a842:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a846:	2a00      	cmp	r2, #0
 801a848:	f000 80e5 	beq.w	801aa16 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 801a84c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a850:	d019      	beq.n	801a886 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 801a852:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a856:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a85a:	fb0c fa0a 	mul.w	sl, ip, sl
 801a85e:	fb0c fc03 	mul.w	ip, ip, r3
 801a862:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a866:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a86a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a86e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a872:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a876:	4453      	add	r3, sl
 801a878:	0a3f      	lsrs	r7, r7, #8
 801a87a:	0a1b      	lsrs	r3, r3, #8
 801a87c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a880:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a884:	433b      	orrs	r3, r7
 801a886:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a888:	2cff      	cmp	r4, #255	; 0xff
 801a88a:	d020      	beq.n	801a8ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 801a88c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a88e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a892:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a894:	4367      	muls	r7, r4
 801a896:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a898:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a89c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a8a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a8a2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a8a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a8aa:	fb04 fa0a 	mul.w	sl, r4, sl
 801a8ae:	44bc      	add	ip, r7
 801a8b0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a8b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a8b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a8bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a8c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a8c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a8c8:	ea4c 040a 	orr.w	r4, ip, sl
 801a8cc:	940d      	str	r4, [sp, #52]	; 0x34
 801a8ce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a8d0:	2cff      	cmp	r4, #255	; 0xff
 801a8d2:	d020      	beq.n	801a916 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 801a8d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a8d6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a8da:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a8dc:	4367      	muls	r7, r4
 801a8de:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a8e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a8e4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a8e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a8ea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a8ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a8f2:	fb04 fa0a 	mul.w	sl, r4, sl
 801a8f6:	44bc      	add	ip, r7
 801a8f8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a8fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a900:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a904:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a908:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a90c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a910:	ea4c 040a 	orr.w	r4, ip, sl
 801a914:	9409      	str	r4, [sp, #36]	; 0x24
 801a916:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a918:	2cff      	cmp	r4, #255	; 0xff
 801a91a:	d020      	beq.n	801a95e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 801a91c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a91e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a922:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a924:	4367      	muls	r7, r4
 801a926:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a928:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a92c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a930:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a932:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a936:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a93a:	fb04 fa0a 	mul.w	sl, r4, sl
 801a93e:	44bc      	add	ip, r7
 801a940:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a944:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a948:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a94c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a950:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a954:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a958:	ea4c 040a 	orr.w	r4, ip, sl
 801a95c:	940e      	str	r4, [sp, #56]	; 0x38
 801a95e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a960:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a964:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a968:	43d2      	mvns	r2, r2
 801a96a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a96e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a970:	b2d2      	uxtb	r2, r2
 801a972:	fb0e f707 	mul.w	r7, lr, r7
 801a976:	fb01 770c 	mla	r7, r1, ip, r7
 801a97a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a97e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a980:	fb00 770c 	mla	r7, r0, ip, r7
 801a984:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a988:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a98a:	fb08 770c 	mla	r7, r8, ip, r7
 801a98e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a992:	fb0e fe0c 	mul.w	lr, lr, ip
 801a996:	0a3f      	lsrs	r7, r7, #8
 801a998:	fb01 e303 	mla	r3, r1, r3, lr
 801a99c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a99e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a9a2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801a9a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a9a8:	fb00 330a 	mla	r3, r0, sl, r3
 801a9ac:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801a9b0:	fb08 3c0c 	mla	ip, r8, ip, r3
 801a9b4:	f8b9 3000 	ldrh.w	r3, [r9]
 801a9b8:	1218      	asrs	r0, r3, #8
 801a9ba:	10d9      	asrs	r1, r3, #3
 801a9bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a9c0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a9c4:	00db      	lsls	r3, r3, #3
 801a9c6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a9ca:	4350      	muls	r0, r2
 801a9cc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a9d0:	b2db      	uxtb	r3, r3
 801a9d2:	4351      	muls	r1, r2
 801a9d4:	ea47 070c 	orr.w	r7, r7, ip
 801a9d8:	4353      	muls	r3, r2
 801a9da:	1c42      	adds	r2, r0, #1
 801a9dc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801a9e0:	0c3a      	lsrs	r2, r7, #16
 801a9e2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801a9e6:	4a19      	ldr	r2, [pc, #100]	; (801aa4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 801a9e8:	b2c0      	uxtb	r0, r0
 801a9ea:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801a9ee:	1c4a      	adds	r2, r1, #1
 801a9f0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801a9f4:	0a3a      	lsrs	r2, r7, #8
 801a9f6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801a9fa:	00c9      	lsls	r1, r1, #3
 801a9fc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801aa00:	4301      	orrs	r1, r0
 801aa02:	1c58      	adds	r0, r3, #1
 801aa04:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801aa08:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801aa0c:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801aa10:	4308      	orrs	r0, r1
 801aa12:	f8a9 0000 	strh.w	r0, [r9]
 801aa16:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801aa18:	f109 0902 	add.w	r9, r9, #2
 801aa1c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801aa1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aa22:	441a      	add	r2, r3
 801aa24:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801aa26:	922d      	str	r2, [sp, #180]	; 0xb4
 801aa28:	441d      	add	r5, r3
 801aa2a:	e64c      	b.n	801a6c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801aa2c:	2800      	cmp	r0, #0
 801aa2e:	f43f aeed 	beq.w	801a80c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 801aa32:	5c79      	ldrb	r1, [r7, r1]
 801aa34:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801aa38:	9109      	str	r1, [sp, #36]	; 0x24
 801aa3a:	0e09      	lsrs	r1, r1, #24
 801aa3c:	9111      	str	r1, [sp, #68]	; 0x44
 801aa3e:	e6e5      	b.n	801a80c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 801aa40:	b01b      	add	sp, #108	; 0x6c
 801aa42:	ecbd 8b08 	vpop	{d8-d11}
 801aa46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa4a:	bf00      	nop
 801aa4c:	fffff800 	.word	0xfffff800

0801aa50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa54:	b085      	sub	sp, #20
 801aa56:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801aa5a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801aa5e:	9103      	str	r1, [sp, #12]
 801aa60:	2d00      	cmp	r5, #0
 801aa62:	fb05 7106 	mla	r1, r5, r6, r7
 801aa66:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801aa6a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801aa6e:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 801aa72:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801aa76:	eb03 0901 	add.w	r9, r3, r1
 801aa7a:	9401      	str	r4, [sp, #4]
 801aa7c:	f2c0 80c0 	blt.w	801ac00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801aa80:	45a8      	cmp	r8, r5
 801aa82:	f340 80bd 	ble.w	801ac00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801aa86:	2f00      	cmp	r7, #0
 801aa88:	f2c0 80b6 	blt.w	801abf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 801aa8c:	42be      	cmp	r6, r7
 801aa8e:	f340 80b3 	ble.w	801abf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 801aa92:	f813 c001 	ldrb.w	ip, [r3, r1]
 801aa96:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 801aa9a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801aa9e:	d019      	beq.n	801aad4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 801aaa0:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 801aaa4:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801aaa8:	435a      	muls	r2, r3
 801aaaa:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 801aaae:	f64f 011f 	movw	r1, #63519	; 0xf81f
 801aab2:	fb0c f403 	mul.w	r4, ip, r3
 801aab6:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 801aaba:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801aabe:	441a      	add	r2, r3
 801aac0:	f104 0320 	add.w	r3, r4, #32
 801aac4:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801aac8:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 801aacc:	0a1b      	lsrs	r3, r3, #8
 801aace:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801aad2:	4319      	orrs	r1, r3
 801aad4:	b289      	uxth	r1, r1
 801aad6:	1c7b      	adds	r3, r7, #1
 801aad8:	f100 8097 	bmi.w	801ac0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 801aadc:	429e      	cmp	r6, r3
 801aade:	f340 8094 	ble.w	801ac0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 801aae2:	2800      	cmp	r0, #0
 801aae4:	f000 8094 	beq.w	801ac10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 801aae8:	f899 4001 	ldrb.w	r4, [r9, #1]
 801aaec:	9b01      	ldr	r3, [sp, #4]
 801aaee:	2cff      	cmp	r4, #255	; 0xff
 801aaf0:	885b      	ldrh	r3, [r3, #2]
 801aaf2:	d01b      	beq.n	801ab2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 801aaf4:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 801aaf8:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801aafc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ab00:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801ab04:	fb0a f202 	mul.w	r2, sl, r2
 801ab08:	fb04 fa03 	mul.w	sl, r4, r3
 801ab0c:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801ab10:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801ab14:	441a      	add	r2, r3
 801ab16:	f10a 0320 	add.w	r3, sl, #32
 801ab1a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801ab1e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801ab22:	0a1b      	lsrs	r3, r3, #8
 801ab24:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ab28:	ea4b 0303 	orr.w	r3, fp, r3
 801ab2c:	b29b      	uxth	r3, r3
 801ab2e:	3501      	adds	r5, #1
 801ab30:	d474      	bmi.n	801ac1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 801ab32:	45a8      	cmp	r8, r5
 801ab34:	dd72      	ble.n	801ac1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 801ab36:	f1be 0f00 	cmp.w	lr, #0
 801ab3a:	f000 8120 	beq.w	801ad7e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 801ab3e:	2f00      	cmp	r7, #0
 801ab40:	db69      	blt.n	801ac16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 801ab42:	42be      	cmp	r6, r7
 801ab44:	dd67      	ble.n	801ac16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 801ab46:	f819 5006 	ldrb.w	r5, [r9, r6]
 801ab4a:	9a01      	ldr	r2, [sp, #4]
 801ab4c:	2dff      	cmp	r5, #255	; 0xff
 801ab4e:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 801ab52:	d01c      	beq.n	801ab8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 801ab54:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 801ab58:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801ab5c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ab60:	fb08 f802 	mul.w	r8, r8, r2
 801ab64:	fb05 fa0b 	mul.w	sl, r5, fp
 801ab68:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801ab6c:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 801ab70:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ab74:	4490      	add	r8, r2
 801ab76:	f10a 0220 	add.w	r2, sl, #32
 801ab7a:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 801ab7e:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 801ab82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ab86:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ab8a:	ea4b 0b0a 	orr.w	fp, fp, sl
 801ab8e:	fa1f fb8b 	uxth.w	fp, fp
 801ab92:	3701      	adds	r7, #1
 801ab94:	d447      	bmi.n	801ac26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 801ab96:	42be      	cmp	r6, r7
 801ab98:	dd45      	ble.n	801ac26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 801ab9a:	2800      	cmp	r0, #0
 801ab9c:	d046      	beq.n	801ac2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 801ab9e:	3601      	adds	r6, #1
 801aba0:	9a01      	ldr	r2, [sp, #4]
 801aba2:	f819 7006 	ldrb.w	r7, [r9, r6]
 801aba6:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 801abaa:	2fff      	cmp	r7, #255	; 0xff
 801abac:	d01a      	beq.n	801abe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 801abae:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 801abb2:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801abb6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801abba:	fb08 f806 	mul.w	r8, r8, r6
 801abbe:	fb07 f902 	mul.w	r9, r7, r2
 801abc2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801abc6:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 801abca:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801abce:	44b0      	add	r8, r6
 801abd0:	f109 0620 	add.w	r6, r9, #32
 801abd4:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 801abd8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801abdc:	0a36      	lsrs	r6, r6, #8
 801abde:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801abe2:	4332      	orrs	r2, r6
 801abe4:	b292      	uxth	r2, r2
 801abe6:	280f      	cmp	r0, #15
 801abe8:	d922      	bls.n	801ac30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 801abea:	4b69      	ldr	r3, [pc, #420]	; (801ad90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 801abec:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801abf0:	4a68      	ldr	r2, [pc, #416]	; (801ad94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 801abf2:	4869      	ldr	r0, [pc, #420]	; (801ad98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 801abf4:	f004 fa50 	bl	801f098 <__assert_func>
 801abf8:	f04f 0c00 	mov.w	ip, #0
 801abfc:	4661      	mov	r1, ip
 801abfe:	e76a      	b.n	801aad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 801ac00:	2400      	movs	r4, #0
 801ac02:	46a4      	mov	ip, r4
 801ac04:	4623      	mov	r3, r4
 801ac06:	4621      	mov	r1, r4
 801ac08:	e791      	b.n	801ab2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801ac0a:	2400      	movs	r4, #0
 801ac0c:	4623      	mov	r3, r4
 801ac0e:	e78e      	b.n	801ab2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801ac10:	4604      	mov	r4, r0
 801ac12:	4603      	mov	r3, r0
 801ac14:	e78b      	b.n	801ab2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801ac16:	2500      	movs	r5, #0
 801ac18:	46ab      	mov	fp, r5
 801ac1a:	e7ba      	b.n	801ab92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 801ac1c:	2700      	movs	r7, #0
 801ac1e:	463d      	mov	r5, r7
 801ac20:	463a      	mov	r2, r7
 801ac22:	46bb      	mov	fp, r7
 801ac24:	e7df      	b.n	801abe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 801ac26:	2700      	movs	r7, #0
 801ac28:	463a      	mov	r2, r7
 801ac2a:	e7dc      	b.n	801abe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 801ac2c:	4607      	mov	r7, r0
 801ac2e:	4602      	mov	r2, r0
 801ac30:	f1be 0f0f 	cmp.w	lr, #15
 801ac34:	d8d9      	bhi.n	801abea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 801ac36:	b286      	uxth	r6, r0
 801ac38:	fa1f f98e 	uxth.w	r9, lr
 801ac3c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801ac40:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ac44:	fb06 f809 	mul.w	r8, r6, r9
 801ac48:	0136      	lsls	r6, r6, #4
 801ac4a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ac4e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801ac52:	9601      	str	r6, [sp, #4]
 801ac54:	ea4a 0101 	orr.w	r1, sl, r1
 801ac58:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 801ac5c:	fa1f f689 	uxth.w	r6, r9
 801ac60:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ac64:	fb10 f90e 	smulbb	r9, r0, lr
 801ac68:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ac6c:	9602      	str	r6, [sp, #8]
 801ac6e:	460e      	mov	r6, r1
 801ac70:	ea4f 09e9 	mov.w	r9, r9, asr #3
 801ac74:	f1ce 0110 	rsb	r1, lr, #16
 801ac78:	ea4a 0303 	orr.w	r3, sl, r3
 801ac7c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801ac80:	1a09      	subs	r1, r1, r0
 801ac82:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 801ac86:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ac8a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ac8e:	4343      	muls	r3, r0
 801ac90:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 801ac94:	9801      	ldr	r0, [sp, #4]
 801ac96:	ea4a 0202 	orr.w	r2, sl, r2
 801ac9a:	fb01 3106 	mla	r1, r1, r6, r3
 801ac9e:	9e02      	ldr	r6, [sp, #8]
 801aca0:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801aca4:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 801aca8:	fb09 1302 	mla	r3, r9, r2, r1
 801acac:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801acb0:	1b80      	subs	r0, r0, r6
 801acb2:	9e01      	ldr	r6, [sp, #4]
 801acb4:	9a03      	ldr	r2, [sp, #12]
 801acb6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801acba:	eba6 0608 	sub.w	r6, r6, r8
 801acbe:	b280      	uxth	r0, r0
 801acc0:	8811      	ldrh	r1, [r2, #0]
 801acc2:	ea4a 0b0b 	orr.w	fp, sl, fp
 801acc6:	b2b6      	uxth	r6, r6
 801acc8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801accc:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801acd0:	4374      	muls	r4, r6
 801acd2:	b292      	uxth	r2, r2
 801acd4:	fb0e 3e0b 	mla	lr, lr, fp, r3
 801acd8:	fb0c 4400 	mla	r4, ip, r0, r4
 801acdc:	9802      	ldr	r0, [sp, #8]
 801acde:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801ace2:	fb00 4505 	mla	r5, r0, r5, r4
 801ace6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801acea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801acee:	1208      	asrs	r0, r1, #8
 801acf0:	fb08 5707 	mla	r7, r8, r7, r5
 801acf4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801acf8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801acfc:	10cd      	asrs	r5, r1, #3
 801acfe:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ad02:	ea43 0e0e 	orr.w	lr, r3, lr
 801ad06:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ad0a:	4357      	muls	r7, r2
 801ad0c:	fa1f f38e 	uxth.w	r3, lr
 801ad10:	f107 0801 	add.w	r8, r7, #1
 801ad14:	121c      	asrs	r4, r3, #8
 801ad16:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801ad1a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801ad1e:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801ad22:	b2ff      	uxtb	r7, r7
 801ad24:	fb10 f007 	smulbb	r0, r0, r7
 801ad28:	fb15 f507 	smulbb	r5, r5, r7
 801ad2c:	fb04 0402 	mla	r4, r4, r2, r0
 801ad30:	10d8      	asrs	r0, r3, #3
 801ad32:	00db      	lsls	r3, r3, #3
 801ad34:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ad38:	b2a4      	uxth	r4, r4
 801ad3a:	fb00 5002 	mla	r0, r0, r2, r5
 801ad3e:	b2dd      	uxtb	r5, r3
 801ad40:	00cb      	lsls	r3, r1, #3
 801ad42:	b280      	uxth	r0, r0
 801ad44:	b2db      	uxtb	r3, r3
 801ad46:	fb13 f307 	smulbb	r3, r3, r7
 801ad4a:	fb05 3202 	mla	r2, r5, r2, r3
 801ad4e:	1c63      	adds	r3, r4, #1
 801ad50:	b292      	uxth	r2, r2
 801ad52:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801ad56:	1c53      	adds	r3, r2, #1
 801ad58:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801ad5c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ad60:	1c42      	adds	r2, r0, #1
 801ad62:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ad66:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ad6a:	9a03      	ldr	r2, [sp, #12]
 801ad6c:	0940      	lsrs	r0, r0, #5
 801ad6e:	4323      	orrs	r3, r4
 801ad70:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ad74:	4303      	orrs	r3, r0
 801ad76:	8013      	strh	r3, [r2, #0]
 801ad78:	b005      	add	sp, #20
 801ad7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad7e:	280f      	cmp	r0, #15
 801ad80:	f63f af33 	bhi.w	801abea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 801ad84:	4677      	mov	r7, lr
 801ad86:	4675      	mov	r5, lr
 801ad88:	4672      	mov	r2, lr
 801ad8a:	46f3      	mov	fp, lr
 801ad8c:	e753      	b.n	801ac36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 801ad8e:	bf00      	nop
 801ad90:	08023551 	.word	0x08023551
 801ad94:	08023b1e 	.word	0x08023b1e
 801ad98:	080235d5 	.word	0x080235d5

0801ad9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ad9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ada0:	ed2d 8b08 	vpush	{d8-d11}
 801ada4:	b097      	sub	sp, #92	; 0x5c
 801ada6:	eeb0 aa40 	vmov.f32	s20, s0
 801adaa:	eef0 9a60 	vmov.f32	s19, s1
 801adae:	9214      	str	r2, [sp, #80]	; 0x50
 801adb0:	eeb0 9a41 	vmov.f32	s18, s2
 801adb4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801adb6:	eeb0 8a62 	vmov.f32	s16, s5
 801adba:	9308      	str	r3, [sp, #32]
 801adbc:	eef0 8a43 	vmov.f32	s17, s6
 801adc0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801adc4:	eef0 ba44 	vmov.f32	s23, s8
 801adc8:	9015      	str	r0, [sp, #84]	; 0x54
 801adca:	eeb0 ba64 	vmov.f32	s22, s9
 801adce:	9312      	str	r3, [sp, #72]	; 0x48
 801add0:	eef0 aa45 	vmov.f32	s21, s10
 801add4:	6850      	ldr	r0, [r2, #4]
 801add6:	9111      	str	r1, [sp, #68]	; 0x44
 801add8:	6812      	ldr	r2, [r2, #0]
 801adda:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801adde:	fb00 1303 	mla	r3, r0, r3, r1
 801ade2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ade6:	9309      	str	r3, [sp, #36]	; 0x24
 801ade8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	930b      	str	r3, [sp, #44]	; 0x2c
 801adee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801adf0:	685b      	ldr	r3, [r3, #4]
 801adf2:	930c      	str	r3, [sp, #48]	; 0x30
 801adf4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801adf8:	930a      	str	r3, [sp, #40]	; 0x28
 801adfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	dc03      	bgt.n	801ae08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ae00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	f340 83cd 	ble.w	801b5a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 801ae08:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ae0a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ae0e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ae12:	1e48      	subs	r0, r1, #1
 801ae14:	1e55      	subs	r5, r2, #1
 801ae16:	9b08      	ldr	r3, [sp, #32]
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	f340 81a5 	ble.w	801b168 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801ae1e:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 801ae20:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ae22:	1436      	asrs	r6, r6, #16
 801ae24:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ae28:	d406      	bmi.n	801ae38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ae2a:	4286      	cmp	r6, r0
 801ae2c:	da04      	bge.n	801ae38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	db02      	blt.n	801ae38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ae32:	42ab      	cmp	r3, r5
 801ae34:	f2c0 8199 	blt.w	801b16a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801ae38:	3601      	adds	r6, #1
 801ae3a:	f100 8186 	bmi.w	801b14a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ae3e:	42b1      	cmp	r1, r6
 801ae40:	f2c0 8183 	blt.w	801b14a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ae44:	3301      	adds	r3, #1
 801ae46:	f100 8180 	bmi.w	801b14a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ae4a:	429a      	cmp	r2, r3
 801ae4c:	f2c0 817d 	blt.w	801b14a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801ae50:	9b08      	ldr	r3, [sp, #32]
 801ae52:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801ae56:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ae58:	9313      	str	r3, [sp, #76]	; 0x4c
 801ae5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	f340 81a6 	ble.w	801b1ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801ae62:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ae64:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 801ae66:	1418      	asrs	r0, r3, #16
 801ae68:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ae6a:	142d      	asrs	r5, r5, #16
 801ae6c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801ae70:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ae72:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801ae76:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ae78:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801ae7c:	f100 81fa 	bmi.w	801b274 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801ae80:	f102 3eff 	add.w	lr, r2, #4294967295
 801ae84:	4575      	cmp	r5, lr
 801ae86:	f280 81f5 	bge.w	801b274 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801ae8a:	2800      	cmp	r0, #0
 801ae8c:	f2c0 81f2 	blt.w	801b274 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801ae90:	f103 3eff 	add.w	lr, r3, #4294967295
 801ae94:	4570      	cmp	r0, lr
 801ae96:	f280 81ed 	bge.w	801b274 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801ae9a:	b212      	sxth	r2, r2
 801ae9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae9e:	fa1f fe81 	uxth.w	lr, r1
 801aea2:	fb00 5002 	mla	r0, r0, r2, r5
 801aea6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801aeaa:	eb03 0a00 	add.w	sl, r3, r0
 801aeae:	f813 9000 	ldrb.w	r9, [r3, r0]
 801aeb2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801aeb6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801aeba:	b29b      	uxth	r3, r3
 801aebc:	f1bc 0f00 	cmp.w	ip, #0
 801aec0:	f000 81bb 	beq.w	801b23a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801aec4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801aec8:	eb0a 0b02 	add.w	fp, sl, r2
 801aecc:	fa1f fa8c 	uxth.w	sl, ip
 801aed0:	940d      	str	r4, [sp, #52]	; 0x34
 801aed2:	fb0a fe0e 	mul.w	lr, sl, lr
 801aed6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801aeda:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801aede:	eba5 050e 	sub.w	r5, r5, lr
 801aee2:	940e      	str	r4, [sp, #56]	; 0x38
 801aee4:	fa1f fa8a 	uxth.w	sl, sl
 801aee8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801aeea:	b2ad      	uxth	r5, r5
 801aeec:	eba3 030a 	sub.w	r3, r3, sl
 801aef0:	fb08 f505 	mul.w	r5, r8, r5
 801aef4:	b29b      	uxth	r3, r3
 801aef6:	fb09 5303 	mla	r3, r9, r3, r5
 801aefa:	fb0a 3304 	mla	r3, sl, r4, r3
 801aefe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801af00:	fb0e 3304 	mla	r3, lr, r4, r3
 801af04:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801af08:	2b00      	cmp	r3, #0
 801af0a:	f000 8111 	beq.w	801b130 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801af0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801af10:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801af14:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801af18:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801af1c:	f000 8192 	beq.w	801b244 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801af20:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801af24:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801af28:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801af2c:	fb0a fe0e 	mul.w	lr, sl, lr
 801af30:	fb09 f000 	mul.w	r0, r9, r0
 801af34:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801af38:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801af3c:	f100 0b20 	add.w	fp, r0, #32
 801af40:	44ce      	add	lr, r9
 801af42:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801af46:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801af4a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801af4e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801af52:	ea4e 0909 	orr.w	r9, lr, r9
 801af56:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801af5a:	8868      	ldrh	r0, [r5, #2]
 801af5c:	d019      	beq.n	801af92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801af5e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801af62:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801af66:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801af6a:	fb0a fe0e 	mul.w	lr, sl, lr
 801af6e:	fb08 f800 	mul.w	r8, r8, r0
 801af72:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801af76:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801af7a:	f108 0b20 	add.w	fp, r8, #32
 801af7e:	4486      	add	lr, r0
 801af80:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801af84:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801af88:	0a00      	lsrs	r0, r0, #8
 801af8a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801af8e:	ea4e 0000 	orr.w	r0, lr, r0
 801af92:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801af96:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801af9a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801af9e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801afa2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801afa6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801afaa:	ea4e 0909 	orr.w	r9, lr, r9
 801afae:	ea4a 0000 	orr.w	r0, sl, r0
 801afb2:	f1bc 0f00 	cmp.w	ip, #0
 801afb6:	f000 8147 	beq.w	801b248 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801afba:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801afbe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801afc0:	3a01      	subs	r2, #1
 801afc2:	2cff      	cmp	r4, #255	; 0xff
 801afc4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801afc8:	f102 0202 	add.w	r2, r2, #2
 801afcc:	eb05 0e02 	add.w	lr, r5, r2
 801afd0:	5aaa      	ldrh	r2, [r5, r2]
 801afd2:	d018      	beq.n	801b006 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801afd4:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801afd8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801afdc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801afe0:	fb04 fa02 	mul.w	sl, r4, r2
 801afe4:	fb08 f805 	mul.w	r8, r8, r5
 801afe8:	f10a 0520 	add.w	r5, sl, #32
 801afec:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801aff0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801aff4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801aff8:	4442      	add	r2, r8
 801affa:	0a2d      	lsrs	r5, r5, #8
 801affc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801b000:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b004:	432a      	orrs	r2, r5
 801b006:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b008:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801b00c:	2cff      	cmp	r4, #255	; 0xff
 801b00e:	d01a      	beq.n	801b046 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 801b010:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801b014:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b018:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801b01c:	fb04 fa05 	mul.w	sl, r4, r5
 801b020:	fb08 f80e 	mul.w	r8, r8, lr
 801b024:	f10a 0e20 	add.w	lr, sl, #32
 801b028:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801b02c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801b030:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801b034:	4445      	add	r5, r8
 801b036:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b03a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801b03e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801b042:	ea45 050e 	orr.w	r5, r5, lr
 801b046:	fb1c fe01 	smulbb	lr, ip, r1
 801b04a:	f1cc 0810 	rsb	r8, ip, #16
 801b04e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801b052:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b056:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801b05a:	eba8 0801 	sub.w	r8, r8, r1
 801b05e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801b062:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b066:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801b06a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801b06e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801b072:	ea4a 0202 	orr.w	r2, sl, r2
 801b076:	4341      	muls	r1, r0
 801b078:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801b07c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801b080:	fb09 1108 	mla	r1, r9, r8, r1
 801b084:	ea4b 0505 	orr.w	r5, fp, r5
 801b088:	fb0c 1102 	mla	r1, ip, r2, r1
 801b08c:	fb0e 1e05 	mla	lr, lr, r5, r1
 801b090:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801b094:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801b098:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b09c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801b0a0:	ea42 0e0e 	orr.w	lr, r2, lr
 801b0a4:	fa1f f28e 	uxth.w	r2, lr
 801b0a8:	2bff      	cmp	r3, #255	; 0xff
 801b0aa:	d103      	bne.n	801b0b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801b0ac:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b0ae:	29ff      	cmp	r1, #255	; 0xff
 801b0b0:	f000 80de 	beq.w	801b270 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 801b0b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b0b6:	1215      	asrs	r5, r2, #8
 801b0b8:	8838      	ldrh	r0, [r7, #0]
 801b0ba:	434b      	muls	r3, r1
 801b0bc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801b0c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b0c2:	f103 0c01 	add.w	ip, r3, #1
 801b0c6:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801b0ca:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801b0ce:	fa5f fc83 	uxtb.w	ip, r3
 801b0d2:	1203      	asrs	r3, r0, #8
 801b0d4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801b0d8:	fb13 f30c 	smulbb	r3, r3, ip
 801b0dc:	fb05 3501 	mla	r5, r5, r1, r3
 801b0e0:	10c3      	asrs	r3, r0, #3
 801b0e2:	10d1      	asrs	r1, r2, #3
 801b0e4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801b0e8:	00d2      	lsls	r2, r2, #3
 801b0ea:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b0ee:	b2ad      	uxth	r5, r5
 801b0f0:	fb13 f30c 	smulbb	r3, r3, ip
 801b0f4:	b2d2      	uxtb	r2, r2
 801b0f6:	fb01 3104 	mla	r1, r1, r4, r3
 801b0fa:	00c3      	lsls	r3, r0, #3
 801b0fc:	b2db      	uxtb	r3, r3
 801b0fe:	b289      	uxth	r1, r1
 801b100:	fb13 f30c 	smulbb	r3, r3, ip
 801b104:	fb02 3304 	mla	r3, r2, r4, r3
 801b108:	b29a      	uxth	r2, r3
 801b10a:	1c6b      	adds	r3, r5, #1
 801b10c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801b110:	1c53      	adds	r3, r2, #1
 801b112:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b116:	1c4a      	adds	r2, r1, #1
 801b118:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801b11c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801b120:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801b124:	0949      	lsrs	r1, r1, #5
 801b126:	432b      	orrs	r3, r5
 801b128:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b12c:	430b      	orrs	r3, r1
 801b12e:	803b      	strh	r3, [r7, #0]
 801b130:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b132:	3702      	adds	r7, #2
 801b134:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b136:	4413      	add	r3, r2
 801b138:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b13a:	9329      	str	r3, [sp, #164]	; 0xa4
 801b13c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b13e:	441a      	add	r2, r3
 801b140:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b142:	3b01      	subs	r3, #1
 801b144:	922a      	str	r2, [sp, #168]	; 0xa8
 801b146:	9313      	str	r3, [sp, #76]	; 0x4c
 801b148:	e687      	b.n	801ae5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801b14a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b14c:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 801b14e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801b150:	4433      	add	r3, r6
 801b152:	9329      	str	r3, [sp, #164]	; 0xa4
 801b154:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b156:	441c      	add	r4, r3
 801b158:	9b08      	ldr	r3, [sp, #32]
 801b15a:	3b01      	subs	r3, #1
 801b15c:	942a      	str	r4, [sp, #168]	; 0xa8
 801b15e:	9308      	str	r3, [sp, #32]
 801b160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b162:	3302      	adds	r3, #2
 801b164:	9309      	str	r3, [sp, #36]	; 0x24
 801b166:	e656      	b.n	801ae16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b168:	d028      	beq.n	801b1bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 801b16a:	9b08      	ldr	r3, [sp, #32]
 801b16c:	982b      	ldr	r0, [sp, #172]	; 0xac
 801b16e:	3b01      	subs	r3, #1
 801b170:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 801b172:	fb00 5003 	mla	r0, r0, r3, r5
 801b176:	1400      	asrs	r0, r0, #16
 801b178:	f53f ae6a 	bmi.w	801ae50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b17c:	3901      	subs	r1, #1
 801b17e:	4288      	cmp	r0, r1
 801b180:	f6bf ae66 	bge.w	801ae50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b184:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801b186:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801b188:	fb01 0303 	mla	r3, r1, r3, r0
 801b18c:	141b      	asrs	r3, r3, #16
 801b18e:	f53f ae5f 	bmi.w	801ae50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b192:	3a01      	subs	r2, #1
 801b194:	4293      	cmp	r3, r2
 801b196:	f6bf ae5b 	bge.w	801ae50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b19a:	9b08      	ldr	r3, [sp, #32]
 801b19c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801b1a0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801b1a4:	9313      	str	r3, [sp, #76]	; 0x4c
 801b1a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	f300 8082 	bgt.w	801b2b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 801b1ae:	9b08      	ldr	r3, [sp, #32]
 801b1b0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1b6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801b1ba:	9309      	str	r3, [sp, #36]	; 0x24
 801b1bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	f340 81ef 	ble.w	801b5a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 801b1c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b1c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b1ca:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b1ce:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b1d2:	eef0 6a48 	vmov.f32	s13, s16
 801b1d6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b1da:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b1de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b1e2:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801b1e6:	eef0 6a68 	vmov.f32	s13, s17
 801b1ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b1ee:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801b1f2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b1f6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b1fa:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b1fe:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b202:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b206:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b20a:	ee18 2a10 	vmov	r2, s16
 801b20e:	eeb0 8a47 	vmov.f32	s16, s14
 801b212:	fb92 f3f3 	sdiv	r3, r2, r3
 801b216:	ee18 2a90 	vmov	r2, s17
 801b21a:	932b      	str	r3, [sp, #172]	; 0xac
 801b21c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b21e:	eef0 8a67 	vmov.f32	s17, s15
 801b222:	fb92 f3f3 	sdiv	r3, r2, r3
 801b226:	932c      	str	r3, [sp, #176]	; 0xb0
 801b228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b22a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b22c:	3b01      	subs	r3, #1
 801b22e:	9311      	str	r3, [sp, #68]	; 0x44
 801b230:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b232:	bf08      	it	eq
 801b234:	4613      	moveq	r3, r2
 801b236:	9308      	str	r3, [sp, #32]
 801b238:	e5df      	b.n	801adfa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b23a:	fb08 f505 	mul.w	r5, r8, r5
 801b23e:	fb09 5303 	mla	r3, r9, r3, r5
 801b242:	e65f      	b.n	801af04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 801b244:	4681      	mov	r9, r0
 801b246:	e686      	b.n	801af56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801b248:	f1c1 0210 	rsb	r2, r1, #16
 801b24c:	4341      	muls	r1, r0
 801b24e:	fb09 1902 	mla	r9, r9, r2, r1
 801b252:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801b256:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801b25a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b25e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b262:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801b266:	ea42 0909 	orr.w	r9, r2, r9
 801b26a:	fa1f f289 	uxth.w	r2, r9
 801b26e:	e71b      	b.n	801b0a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801b270:	803a      	strh	r2, [r7, #0]
 801b272:	e75d      	b.n	801b130 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801b274:	f115 0e01 	adds.w	lr, r5, #1
 801b278:	f53f af5a 	bmi.w	801b130 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801b27c:	4572      	cmp	r2, lr
 801b27e:	f6ff af57 	blt.w	801b130 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801b282:	f110 0e01 	adds.w	lr, r0, #1
 801b286:	f53f af53 	bmi.w	801b130 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801b28a:	4573      	cmp	r3, lr
 801b28c:	f6ff af50 	blt.w	801b130 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801b290:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b292:	b21b      	sxth	r3, r3
 801b294:	b212      	sxth	r2, r2
 801b296:	9502      	str	r5, [sp, #8]
 801b298:	9301      	str	r3, [sp, #4]
 801b29a:	9200      	str	r2, [sp, #0]
 801b29c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801b2a0:	e9cd c405 	strd	ip, r4, [sp, #20]
 801b2a4:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 801b2a8:	4639      	mov	r1, r7
 801b2aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b2ac:	f7ff fbd0 	bl	801aa50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801b2b0:	e73e      	b.n	801b130 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801b2b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b2b4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b2b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b2ba:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801b2be:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b2c0:	fa1f fc82 	uxth.w	ip, r2
 801b2c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b2c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b2ca:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801b2ce:	141f      	asrs	r7, r3, #16
 801b2d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b2d2:	141b      	asrs	r3, r3, #16
 801b2d4:	fb01 3707 	mla	r7, r1, r7, r3
 801b2d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b2da:	eb03 0a07 	add.w	sl, r3, r7
 801b2de:	f813 9007 	ldrb.w	r9, [r3, r7]
 801b2e2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801b2e6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801b2ea:	b29b      	uxth	r3, r3
 801b2ec:	2d00      	cmp	r5, #0
 801b2ee:	f000 813d 	beq.w	801b56c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 801b2f2:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801b2f6:	eb0a 0b01 	add.w	fp, sl, r1
 801b2fa:	fa1f fa85 	uxth.w	sl, r5
 801b2fe:	940f      	str	r4, [sp, #60]	; 0x3c
 801b300:	fb0a fc0c 	mul.w	ip, sl, ip
 801b304:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801b308:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801b30c:	eba0 000c 	sub.w	r0, r0, ip
 801b310:	9410      	str	r4, [sp, #64]	; 0x40
 801b312:	fa1f fa8a 	uxth.w	sl, sl
 801b316:	b280      	uxth	r0, r0
 801b318:	eba3 030a 	sub.w	r3, r3, sl
 801b31c:	fb08 f000 	mul.w	r0, r8, r0
 801b320:	b29b      	uxth	r3, r3
 801b322:	fb09 0303 	mla	r3, r9, r3, r0
 801b326:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b328:	fb0a 3300 	mla	r3, sl, r0, r3
 801b32c:	fb0c 3304 	mla	r3, ip, r4, r3
 801b330:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b334:	2b00      	cmp	r3, #0
 801b336:	f000 810b 	beq.w	801b550 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 801b33a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b33c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b340:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b342:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801b346:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801b34a:	f000 8114 	beq.w	801b576 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 801b34e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801b352:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801b356:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b35a:	fb0a fc0c 	mul.w	ip, sl, ip
 801b35e:	fb09 f707 	mul.w	r7, r9, r7
 801b362:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801b366:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801b36a:	f107 0b20 	add.w	fp, r7, #32
 801b36e:	44cc      	add	ip, r9
 801b370:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801b374:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801b378:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b37c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b380:	ea4c 0909 	orr.w	r9, ip, r9
 801b384:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b388:	8847      	ldrh	r7, [r0, #2]
 801b38a:	d019      	beq.n	801b3c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 801b38c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801b390:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801b394:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b398:	fb0a fc0c 	mul.w	ip, sl, ip
 801b39c:	fb08 f807 	mul.w	r8, r8, r7
 801b3a0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801b3a4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801b3a8:	f108 0b20 	add.w	fp, r8, #32
 801b3ac:	44bc      	add	ip, r7
 801b3ae:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801b3b2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801b3b6:	0a3f      	lsrs	r7, r7, #8
 801b3b8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b3bc:	ea4c 0707 	orr.w	r7, ip, r7
 801b3c0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801b3c4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801b3c8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801b3cc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801b3d0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801b3d4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b3d8:	ea4c 0909 	orr.w	r9, ip, r9
 801b3dc:	ea4a 0707 	orr.w	r7, sl, r7
 801b3e0:	2d00      	cmp	r5, #0
 801b3e2:	f000 80ca 	beq.w	801b57a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 801b3e6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801b3ea:	3901      	subs	r1, #1
 801b3ec:	0049      	lsls	r1, r1, #1
 801b3ee:	3102      	adds	r1, #2
 801b3f0:	eb00 0c01 	add.w	ip, r0, r1
 801b3f4:	5a41      	ldrh	r1, [r0, r1]
 801b3f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b3f8:	28ff      	cmp	r0, #255	; 0xff
 801b3fa:	d019      	beq.n	801b430 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 801b3fc:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801b400:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b402:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b406:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801b40a:	fb04 fa01 	mul.w	sl, r4, r1
 801b40e:	fb08 f800 	mul.w	r8, r8, r0
 801b412:	f10a 0020 	add.w	r0, sl, #32
 801b416:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801b41a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801b41e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801b422:	4441      	add	r1, r8
 801b424:	0a00      	lsrs	r0, r0, #8
 801b426:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801b42a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b42e:	4301      	orrs	r1, r0
 801b430:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b432:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801b436:	2cff      	cmp	r4, #255	; 0xff
 801b438:	d01a      	beq.n	801b470 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 801b43a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801b43e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b442:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801b446:	fb04 fa00 	mul.w	sl, r4, r0
 801b44a:	fb08 f80c 	mul.w	r8, r8, ip
 801b44e:	f10a 0c20 	add.w	ip, sl, #32
 801b452:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801b456:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801b45a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801b45e:	4440      	add	r0, r8
 801b460:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b464:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801b468:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801b46c:	ea40 000c 	orr.w	r0, r0, ip
 801b470:	fb15 fc02 	smulbb	ip, r5, r2
 801b474:	f1c5 0810 	rsb	r8, r5, #16
 801b478:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801b47c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801b480:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801b484:	eba8 0802 	sub.w	r8, r8, r2
 801b488:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801b48c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b490:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801b494:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801b498:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801b49c:	ea4a 0101 	orr.w	r1, sl, r1
 801b4a0:	437a      	muls	r2, r7
 801b4a2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801b4a6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801b4aa:	fb09 2208 	mla	r2, r9, r8, r2
 801b4ae:	ea4b 0000 	orr.w	r0, fp, r0
 801b4b2:	fb05 2201 	mla	r2, r5, r1, r2
 801b4b6:	fb0c 2200 	mla	r2, ip, r0, r2
 801b4ba:	0d57      	lsrs	r7, r2, #21
 801b4bc:	0952      	lsrs	r2, r2, #5
 801b4be:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b4c2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b4c6:	433a      	orrs	r2, r7
 801b4c8:	2bff      	cmp	r3, #255	; 0xff
 801b4ca:	b292      	uxth	r2, r2
 801b4cc:	d102      	bne.n	801b4d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 801b4ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b4d0:	29ff      	cmp	r1, #255	; 0xff
 801b4d2:	d063      	beq.n	801b59c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 801b4d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b4d6:	1215      	asrs	r5, r2, #8
 801b4d8:	f8be 1000 	ldrh.w	r1, [lr]
 801b4dc:	4343      	muls	r3, r0
 801b4de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b4e0:	10cf      	asrs	r7, r1, #3
 801b4e2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801b4e6:	1c58      	adds	r0, r3, #1
 801b4e8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b4ec:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801b4f0:	1208      	asrs	r0, r1, #8
 801b4f2:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801b4f6:	00c9      	lsls	r1, r1, #3
 801b4f8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b4fc:	b2db      	uxtb	r3, r3
 801b4fe:	b2c9      	uxtb	r1, r1
 801b500:	fb10 f003 	smulbb	r0, r0, r3
 801b504:	fb11 f103 	smulbb	r1, r1, r3
 801b508:	fb05 0504 	mla	r5, r5, r4, r0
 801b50c:	10d0      	asrs	r0, r2, #3
 801b50e:	fb17 f703 	smulbb	r7, r7, r3
 801b512:	00d2      	lsls	r2, r2, #3
 801b514:	b2ad      	uxth	r5, r5
 801b516:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801b51a:	b2d2      	uxtb	r2, r2
 801b51c:	fb00 7004 	mla	r0, r0, r4, r7
 801b520:	1c6b      	adds	r3, r5, #1
 801b522:	fb02 1204 	mla	r2, r2, r4, r1
 801b526:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801b52a:	b292      	uxth	r2, r2
 801b52c:	b280      	uxth	r0, r0
 801b52e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801b532:	1c57      	adds	r7, r2, #1
 801b534:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801b538:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801b53c:	433d      	orrs	r5, r7
 801b53e:	1c47      	adds	r7, r0, #1
 801b540:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801b544:	097f      	lsrs	r7, r7, #5
 801b546:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b54a:	433d      	orrs	r5, r7
 801b54c:	f8ae 5000 	strh.w	r5, [lr]
 801b550:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b552:	f10e 0e02 	add.w	lr, lr, #2
 801b556:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b558:	4413      	add	r3, r2
 801b55a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b55c:	9329      	str	r3, [sp, #164]	; 0xa4
 801b55e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b560:	441a      	add	r2, r3
 801b562:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b564:	3b01      	subs	r3, #1
 801b566:	922a      	str	r2, [sp, #168]	; 0xa8
 801b568:	9313      	str	r3, [sp, #76]	; 0x4c
 801b56a:	e61c      	b.n	801b1a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801b56c:	fb08 f000 	mul.w	r0, r8, r0
 801b570:	fb09 0303 	mla	r3, r9, r3, r0
 801b574:	e6dc      	b.n	801b330 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 801b576:	46b9      	mov	r9, r7
 801b578:	e704      	b.n	801b384 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 801b57a:	f1c2 0110 	rsb	r1, r2, #16
 801b57e:	437a      	muls	r2, r7
 801b580:	fb09 2901 	mla	r9, r9, r1, r2
 801b584:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801b588:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801b58c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801b590:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b594:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b598:	4302      	orrs	r2, r0
 801b59a:	e795      	b.n	801b4c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 801b59c:	f8ae 2000 	strh.w	r2, [lr]
 801b5a0:	e7d6      	b.n	801b550 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 801b5a2:	b017      	add	sp, #92	; 0x5c
 801b5a4:	ecbd 8b08 	vpop	{d8-d11}
 801b5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b5ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5b0:	b085      	sub	sp, #20
 801b5b2:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801b5b6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801b5ba:	9103      	str	r1, [sp, #12]
 801b5bc:	2d00      	cmp	r5, #0
 801b5be:	fb05 7106 	mla	r1, r5, r6, r7
 801b5c2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801b5c6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801b5ca:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 801b5ce:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801b5d2:	eb02 0901 	add.w	r9, r2, r1
 801b5d6:	9401      	str	r4, [sp, #4]
 801b5d8:	f2c0 80c0 	blt.w	801b75c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801b5dc:	45a8      	cmp	r8, r5
 801b5de:	f340 80bd 	ble.w	801b75c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801b5e2:	2f00      	cmp	r7, #0
 801b5e4:	f2c0 80b6 	blt.w	801b754 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 801b5e8:	42be      	cmp	r6, r7
 801b5ea:	f340 80b3 	ble.w	801b754 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 801b5ee:	f812 c001 	ldrb.w	ip, [r2, r1]
 801b5f2:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 801b5f6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b5fa:	d019      	beq.n	801b630 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 801b5fc:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 801b600:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801b604:	435a      	muls	r2, r3
 801b606:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 801b60a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 801b60e:	fb0c f403 	mul.w	r4, ip, r3
 801b612:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 801b616:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801b61a:	441a      	add	r2, r3
 801b61c:	f104 0320 	add.w	r3, r4, #32
 801b620:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801b624:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 801b628:	0a1b      	lsrs	r3, r3, #8
 801b62a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b62e:	4319      	orrs	r1, r3
 801b630:	b289      	uxth	r1, r1
 801b632:	1c7b      	adds	r3, r7, #1
 801b634:	f100 8097 	bmi.w	801b766 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 801b638:	429e      	cmp	r6, r3
 801b63a:	f340 8094 	ble.w	801b766 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 801b63e:	2800      	cmp	r0, #0
 801b640:	f000 8094 	beq.w	801b76c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 801b644:	f899 4001 	ldrb.w	r4, [r9, #1]
 801b648:	9b01      	ldr	r3, [sp, #4]
 801b64a:	2cff      	cmp	r4, #255	; 0xff
 801b64c:	885b      	ldrh	r3, [r3, #2]
 801b64e:	d01b      	beq.n	801b688 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 801b650:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 801b654:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801b658:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b65c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801b660:	fb0a f202 	mul.w	r2, sl, r2
 801b664:	fb04 fa03 	mul.w	sl, r4, r3
 801b668:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801b66c:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801b670:	441a      	add	r2, r3
 801b672:	f10a 0320 	add.w	r3, sl, #32
 801b676:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801b67a:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801b67e:	0a1b      	lsrs	r3, r3, #8
 801b680:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b684:	ea4b 0303 	orr.w	r3, fp, r3
 801b688:	b29b      	uxth	r3, r3
 801b68a:	3501      	adds	r5, #1
 801b68c:	d474      	bmi.n	801b778 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 801b68e:	45a8      	cmp	r8, r5
 801b690:	dd72      	ble.n	801b778 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 801b692:	f1be 0f00 	cmp.w	lr, #0
 801b696:	f000 8110 	beq.w	801b8ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 801b69a:	2f00      	cmp	r7, #0
 801b69c:	db69      	blt.n	801b772 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 801b69e:	42be      	cmp	r6, r7
 801b6a0:	dd67      	ble.n	801b772 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 801b6a2:	f819 5006 	ldrb.w	r5, [r9, r6]
 801b6a6:	9a01      	ldr	r2, [sp, #4]
 801b6a8:	2dff      	cmp	r5, #255	; 0xff
 801b6aa:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 801b6ae:	d01c      	beq.n	801b6ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 801b6b0:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 801b6b4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b6b8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801b6bc:	fb08 f802 	mul.w	r8, r8, r2
 801b6c0:	fb05 fa0b 	mul.w	sl, r5, fp
 801b6c4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801b6c8:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 801b6cc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801b6d0:	4490      	add	r8, r2
 801b6d2:	f10a 0220 	add.w	r2, sl, #32
 801b6d6:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 801b6da:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 801b6de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b6e2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b6e6:	ea4b 0b0a 	orr.w	fp, fp, sl
 801b6ea:	fa1f fb8b 	uxth.w	fp, fp
 801b6ee:	3701      	adds	r7, #1
 801b6f0:	d447      	bmi.n	801b782 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 801b6f2:	42be      	cmp	r6, r7
 801b6f4:	dd45      	ble.n	801b782 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 801b6f6:	2800      	cmp	r0, #0
 801b6f8:	d046      	beq.n	801b788 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 801b6fa:	3601      	adds	r6, #1
 801b6fc:	9a01      	ldr	r2, [sp, #4]
 801b6fe:	f819 7006 	ldrb.w	r7, [r9, r6]
 801b702:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 801b706:	2fff      	cmp	r7, #255	; 0xff
 801b708:	d01a      	beq.n	801b740 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 801b70a:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 801b70e:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801b712:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b716:	fb08 f806 	mul.w	r8, r8, r6
 801b71a:	fb07 f902 	mul.w	r9, r7, r2
 801b71e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801b722:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 801b726:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801b72a:	44b0      	add	r8, r6
 801b72c:	f109 0620 	add.w	r6, r9, #32
 801b730:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 801b734:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801b738:	0a36      	lsrs	r6, r6, #8
 801b73a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b73e:	4332      	orrs	r2, r6
 801b740:	b292      	uxth	r2, r2
 801b742:	280f      	cmp	r0, #15
 801b744:	d922      	bls.n	801b78c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 801b746:	4b61      	ldr	r3, [pc, #388]	; (801b8cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 801b748:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801b74c:	4a60      	ldr	r2, [pc, #384]	; (801b8d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 801b74e:	4861      	ldr	r0, [pc, #388]	; (801b8d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 801b750:	f003 fca2 	bl	801f098 <__assert_func>
 801b754:	f04f 0c00 	mov.w	ip, #0
 801b758:	4661      	mov	r1, ip
 801b75a:	e76a      	b.n	801b632 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801b75c:	2400      	movs	r4, #0
 801b75e:	46a4      	mov	ip, r4
 801b760:	4623      	mov	r3, r4
 801b762:	4621      	mov	r1, r4
 801b764:	e791      	b.n	801b68a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 801b766:	2400      	movs	r4, #0
 801b768:	4623      	mov	r3, r4
 801b76a:	e78e      	b.n	801b68a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 801b76c:	4604      	mov	r4, r0
 801b76e:	4603      	mov	r3, r0
 801b770:	e78b      	b.n	801b68a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 801b772:	2500      	movs	r5, #0
 801b774:	46ab      	mov	fp, r5
 801b776:	e7ba      	b.n	801b6ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 801b778:	2700      	movs	r7, #0
 801b77a:	463d      	mov	r5, r7
 801b77c:	463a      	mov	r2, r7
 801b77e:	46bb      	mov	fp, r7
 801b780:	e7df      	b.n	801b742 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 801b782:	2700      	movs	r7, #0
 801b784:	463a      	mov	r2, r7
 801b786:	e7dc      	b.n	801b742 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 801b788:	4607      	mov	r7, r0
 801b78a:	4602      	mov	r2, r0
 801b78c:	f1be 0f0f 	cmp.w	lr, #15
 801b790:	d8d9      	bhi.n	801b746 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 801b792:	b286      	uxth	r6, r0
 801b794:	fa1f f98e 	uxth.w	r9, lr
 801b798:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801b79c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801b7a0:	fb06 f809 	mul.w	r8, r6, r9
 801b7a4:	0136      	lsls	r6, r6, #4
 801b7a6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b7aa:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801b7ae:	9601      	str	r6, [sp, #4]
 801b7b0:	ea4a 0101 	orr.w	r1, sl, r1
 801b7b4:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 801b7b8:	fa1f f689 	uxth.w	r6, r9
 801b7bc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b7c0:	fb10 f90e 	smulbb	r9, r0, lr
 801b7c4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b7c8:	9602      	str	r6, [sp, #8]
 801b7ca:	460e      	mov	r6, r1
 801b7cc:	ea4f 09e9 	mov.w	r9, r9, asr #3
 801b7d0:	f1ce 0110 	rsb	r1, lr, #16
 801b7d4:	ea4a 0303 	orr.w	r3, sl, r3
 801b7d8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801b7dc:	1a09      	subs	r1, r1, r0
 801b7de:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 801b7e2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b7e6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b7ea:	4343      	muls	r3, r0
 801b7ec:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 801b7f0:	ea4a 0202 	orr.w	r2, sl, r2
 801b7f4:	9802      	ldr	r0, [sp, #8]
 801b7f6:	fb01 3106 	mla	r1, r1, r6, r3
 801b7fa:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 801b7fe:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801b802:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801b806:	fb09 1302 	mla	r3, r9, r2, r1
 801b80a:	9a03      	ldr	r2, [sp, #12]
 801b80c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b810:	8811      	ldrh	r1, [r2, #0]
 801b812:	9a01      	ldr	r2, [sp, #4]
 801b814:	ea4a 0b0b 	orr.w	fp, sl, fp
 801b818:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801b81c:	fb0e 3e0b 	mla	lr, lr, fp, r3
 801b820:	1a12      	subs	r2, r2, r0
 801b822:	9801      	ldr	r0, [sp, #4]
 801b824:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801b828:	eba0 0608 	sub.w	r6, r0, r8
 801b82c:	b292      	uxth	r2, r2
 801b82e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801b832:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b836:	b2b6      	uxth	r6, r6
 801b838:	10c8      	asrs	r0, r1, #3
 801b83a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801b83e:	4374      	muls	r4, r6
 801b840:	ea43 0e0e 	orr.w	lr, r3, lr
 801b844:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801b848:	fb0c 4402 	mla	r4, ip, r2, r4
 801b84c:	9a02      	ldr	r2, [sp, #8]
 801b84e:	fa1f f38e 	uxth.w	r3, lr
 801b852:	fb02 4505 	mla	r5, r2, r5, r4
 801b856:	120a      	asrs	r2, r1, #8
 801b858:	00c9      	lsls	r1, r1, #3
 801b85a:	fb08 5707 	mla	r7, r8, r7, r5
 801b85e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801b862:	b2c9      	uxtb	r1, r1
 801b864:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801b868:	b2ff      	uxtb	r7, r7
 801b86a:	437a      	muls	r2, r7
 801b86c:	4378      	muls	r0, r7
 801b86e:	434f      	muls	r7, r1
 801b870:	1c51      	adds	r1, r2, #1
 801b872:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801b876:	121a      	asrs	r2, r3, #8
 801b878:	f022 0207 	bic.w	r2, r2, #7
 801b87c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801b880:	1c41      	adds	r1, r0, #1
 801b882:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801b886:	10d9      	asrs	r1, r3, #3
 801b888:	0212      	lsls	r2, r2, #8
 801b88a:	f021 0103 	bic.w	r1, r1, #3
 801b88e:	00db      	lsls	r3, r3, #3
 801b890:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801b894:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801b898:	00c9      	lsls	r1, r1, #3
 801b89a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b89e:	430a      	orrs	r2, r1
 801b8a0:	1c79      	adds	r1, r7, #1
 801b8a2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801b8a6:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801b8aa:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801b8ae:	4313      	orrs	r3, r2
 801b8b0:	9a03      	ldr	r2, [sp, #12]
 801b8b2:	8013      	strh	r3, [r2, #0]
 801b8b4:	b005      	add	sp, #20
 801b8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8ba:	280f      	cmp	r0, #15
 801b8bc:	f63f af43 	bhi.w	801b746 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 801b8c0:	4677      	mov	r7, lr
 801b8c2:	4675      	mov	r5, lr
 801b8c4:	4672      	mov	r2, lr
 801b8c6:	46f3      	mov	fp, lr
 801b8c8:	e763      	b.n	801b792 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 801b8ca:	bf00      	nop
 801b8cc:	08023551 	.word	0x08023551
 801b8d0:	08023b1e 	.word	0x08023b1e
 801b8d4:	080235d5 	.word	0x080235d5

0801b8d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8dc:	ed2d 8b08 	vpush	{d8-d11}
 801b8e0:	b093      	sub	sp, #76	; 0x4c
 801b8e2:	eeb0 aa40 	vmov.f32	s20, s0
 801b8e6:	eef0 9a60 	vmov.f32	s19, s1
 801b8ea:	9210      	str	r2, [sp, #64]	; 0x40
 801b8ec:	eeb0 9a41 	vmov.f32	s18, s2
 801b8f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b8f2:	eeb0 8a62 	vmov.f32	s16, s5
 801b8f6:	9011      	str	r0, [sp, #68]	; 0x44
 801b8f8:	eef0 8a43 	vmov.f32	s17, s6
 801b8fc:	6850      	ldr	r0, [r2, #4]
 801b8fe:	eef0 ba44 	vmov.f32	s23, s8
 801b902:	910e      	str	r1, [sp, #56]	; 0x38
 801b904:	eeb0 ba64 	vmov.f32	s22, s9
 801b908:	9306      	str	r3, [sp, #24]
 801b90a:	eef0 aa45 	vmov.f32	s21, s10
 801b90e:	6812      	ldr	r2, [r2, #0]
 801b910:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801b914:	fb00 1303 	mla	r3, r0, r3, r1
 801b918:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b91c:	9307      	str	r3, [sp, #28]
 801b91e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	9308      	str	r3, [sp, #32]
 801b924:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b926:	685b      	ldr	r3, [r3, #4]
 801b928:	9309      	str	r3, [sp, #36]	; 0x24
 801b92a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	dc03      	bgt.n	801b938 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b930:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b932:	2b00      	cmp	r3, #0
 801b934:	f340 83b6 	ble.w	801c0a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 801b938:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b93a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b93e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b942:	1e48      	subs	r0, r1, #1
 801b944:	1e55      	subs	r5, r2, #1
 801b946:	9b06      	ldr	r3, [sp, #24]
 801b948:	2b00      	cmp	r3, #0
 801b94a:	f340 8165 	ble.w	801bc18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 801b94e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801b950:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b952:	1436      	asrs	r6, r6, #16
 801b954:	ea4f 4323 	mov.w	r3, r3, asr #16
 801b958:	d406      	bmi.n	801b968 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b95a:	4286      	cmp	r6, r0
 801b95c:	da04      	bge.n	801b968 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b95e:	2b00      	cmp	r3, #0
 801b960:	db02      	blt.n	801b968 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b962:	42ab      	cmp	r3, r5
 801b964:	f2c0 8159 	blt.w	801bc1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801b968:	3601      	adds	r6, #1
 801b96a:	f100 8146 	bmi.w	801bbfa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b96e:	42b1      	cmp	r1, r6
 801b970:	f2c0 8143 	blt.w	801bbfa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b974:	3301      	adds	r3, #1
 801b976:	f100 8140 	bmi.w	801bbfa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b97a:	429a      	cmp	r2, r3
 801b97c:	f2c0 813d 	blt.w	801bbfa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b980:	9b06      	ldr	r3, [sp, #24]
 801b982:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801b986:	9f07      	ldr	r7, [sp, #28]
 801b988:	930f      	str	r3, [sp, #60]	; 0x3c
 801b98a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	f340 8166 	ble.w	801bc5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801b992:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b994:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801b996:	1418      	asrs	r0, r3, #16
 801b998:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b99a:	142d      	asrs	r5, r5, #16
 801b99c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801b9a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b9a2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801b9a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b9a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801b9ac:	f100 81f0 	bmi.w	801bd90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801b9b0:	f102 3eff 	add.w	lr, r2, #4294967295
 801b9b4:	4575      	cmp	r5, lr
 801b9b6:	f280 81eb 	bge.w	801bd90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801b9ba:	2800      	cmp	r0, #0
 801b9bc:	f2c0 81e8 	blt.w	801bd90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801b9c0:	f103 3eff 	add.w	lr, r3, #4294967295
 801b9c4:	4570      	cmp	r0, lr
 801b9c6:	f280 81e3 	bge.w	801bd90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 801b9ca:	b212      	sxth	r2, r2
 801b9cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9ce:	fa1f fe81 	uxth.w	lr, r1
 801b9d2:	fb00 5002 	mla	r0, r0, r2, r5
 801b9d6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801b9da:	eb03 0a00 	add.w	sl, r3, r0
 801b9de:	f813 9000 	ldrb.w	r9, [r3, r0]
 801b9e2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801b9e6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801b9ea:	b29b      	uxth	r3, r3
 801b9ec:	f1bc 0f00 	cmp.w	ip, #0
 801b9f0:	f000 817b 	beq.w	801bcea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801b9f4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801b9f8:	eb0a 0b02 	add.w	fp, sl, r2
 801b9fc:	fa1f fa8c 	uxth.w	sl, ip
 801ba00:	940a      	str	r4, [sp, #40]	; 0x28
 801ba02:	fb0a fe0e 	mul.w	lr, sl, lr
 801ba06:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801ba0a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801ba0e:	eba5 050e 	sub.w	r5, r5, lr
 801ba12:	940b      	str	r4, [sp, #44]	; 0x2c
 801ba14:	fa1f fa8a 	uxth.w	sl, sl
 801ba18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ba1a:	b2ad      	uxth	r5, r5
 801ba1c:	eba3 030a 	sub.w	r3, r3, sl
 801ba20:	fb08 f505 	mul.w	r5, r8, r5
 801ba24:	b29b      	uxth	r3, r3
 801ba26:	fb09 5303 	mla	r3, r9, r3, r5
 801ba2a:	fb0a 3304 	mla	r3, sl, r4, r3
 801ba2e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ba30:	fb0e 3304 	mla	r3, lr, r4, r3
 801ba34:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	f000 80d1 	beq.w	801bbe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801ba3e:	9c08      	ldr	r4, [sp, #32]
 801ba40:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ba44:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801ba48:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801ba4c:	f000 8152 	beq.w	801bcf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 801ba50:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801ba54:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801ba58:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ba5c:	fb0a fe0e 	mul.w	lr, sl, lr
 801ba60:	fb09 f000 	mul.w	r0, r9, r0
 801ba64:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801ba68:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801ba6c:	f100 0b20 	add.w	fp, r0, #32
 801ba70:	44ce      	add	lr, r9
 801ba72:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801ba76:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801ba7a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ba7e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ba82:	ea4e 0909 	orr.w	r9, lr, r9
 801ba86:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ba8a:	8868      	ldrh	r0, [r5, #2]
 801ba8c:	d019      	beq.n	801bac2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ba8e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801ba92:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801ba96:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ba9a:	fb0a fe0e 	mul.w	lr, sl, lr
 801ba9e:	fb08 f800 	mul.w	r8, r8, r0
 801baa2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801baa6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801baaa:	f108 0b20 	add.w	fp, r8, #32
 801baae:	4486      	add	lr, r0
 801bab0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801bab4:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801bab8:	0a00      	lsrs	r0, r0, #8
 801baba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801babe:	ea4e 0000 	orr.w	r0, lr, r0
 801bac2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801bac6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801baca:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801bace:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801bad2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801bad6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801bada:	ea4e 0909 	orr.w	r9, lr, r9
 801bade:	ea4a 0000 	orr.w	r0, sl, r0
 801bae2:	f1bc 0f00 	cmp.w	ip, #0
 801bae6:	f000 8107 	beq.w	801bcf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 801baea:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801baee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801baf0:	3a01      	subs	r2, #1
 801baf2:	2cff      	cmp	r4, #255	; 0xff
 801baf4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801baf8:	f102 0202 	add.w	r2, r2, #2
 801bafc:	eb05 0e02 	add.w	lr, r5, r2
 801bb00:	5aaa      	ldrh	r2, [r5, r2]
 801bb02:	d018      	beq.n	801bb36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801bb04:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801bb08:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bb0c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801bb10:	fb04 fa02 	mul.w	sl, r4, r2
 801bb14:	fb08 f805 	mul.w	r8, r8, r5
 801bb18:	f10a 0520 	add.w	r5, sl, #32
 801bb1c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801bb20:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801bb24:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801bb28:	4442      	add	r2, r8
 801bb2a:	0a2d      	lsrs	r5, r5, #8
 801bb2c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801bb30:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bb34:	432a      	orrs	r2, r5
 801bb36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bb38:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801bb3c:	2cff      	cmp	r4, #255	; 0xff
 801bb3e:	d01a      	beq.n	801bb76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801bb40:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801bb44:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bb48:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801bb4c:	fb04 fa05 	mul.w	sl, r4, r5
 801bb50:	fb08 f80e 	mul.w	r8, r8, lr
 801bb54:	f10a 0e20 	add.w	lr, sl, #32
 801bb58:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801bb5c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801bb60:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801bb64:	4445      	add	r5, r8
 801bb66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bb6a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801bb6e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801bb72:	ea45 050e 	orr.w	r5, r5, lr
 801bb76:	fb1c fe01 	smulbb	lr, ip, r1
 801bb7a:	f1cc 0810 	rsb	r8, ip, #16
 801bb7e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801bb82:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801bb86:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801bb8a:	eba8 0801 	sub.w	r8, r8, r1
 801bb8e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801bb92:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801bb96:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801bb9a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801bb9e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801bba2:	ea4a 0202 	orr.w	r2, sl, r2
 801bba6:	4341      	muls	r1, r0
 801bba8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801bbac:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801bbb0:	fb09 1108 	mla	r1, r9, r8, r1
 801bbb4:	ea4b 0505 	orr.w	r5, fp, r5
 801bbb8:	fb0c 1102 	mla	r1, ip, r2, r1
 801bbbc:	fb0e 1e05 	mla	lr, lr, r5, r1
 801bbc0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801bbc4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801bbc8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bbcc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801bbd0:	ea42 0e0e 	orr.w	lr, r2, lr
 801bbd4:	fa1f f28e 	uxth.w	r2, lr
 801bbd8:	2bff      	cmp	r3, #255	; 0xff
 801bbda:	f040 80a1 	bne.w	801bd20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801bbde:	803a      	strh	r2, [r7, #0]
 801bbe0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801bbe2:	3702      	adds	r7, #2
 801bbe4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801bbe6:	4413      	add	r3, r2
 801bbe8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bbea:	9325      	str	r3, [sp, #148]	; 0x94
 801bbec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bbee:	441a      	add	r2, r3
 801bbf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bbf2:	3b01      	subs	r3, #1
 801bbf4:	9226      	str	r2, [sp, #152]	; 0x98
 801bbf6:	930f      	str	r3, [sp, #60]	; 0x3c
 801bbf8:	e6c7      	b.n	801b98a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bbfa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801bbfc:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801bbfe:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801bc00:	4433      	add	r3, r6
 801bc02:	9325      	str	r3, [sp, #148]	; 0x94
 801bc04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bc06:	441c      	add	r4, r3
 801bc08:	9b06      	ldr	r3, [sp, #24]
 801bc0a:	3b01      	subs	r3, #1
 801bc0c:	9426      	str	r4, [sp, #152]	; 0x98
 801bc0e:	9306      	str	r3, [sp, #24]
 801bc10:	9b07      	ldr	r3, [sp, #28]
 801bc12:	3302      	adds	r3, #2
 801bc14:	9307      	str	r3, [sp, #28]
 801bc16:	e696      	b.n	801b946 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bc18:	d028      	beq.n	801bc6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801bc1a:	9b06      	ldr	r3, [sp, #24]
 801bc1c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801bc1e:	3b01      	subs	r3, #1
 801bc20:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801bc22:	fb00 5003 	mla	r0, r0, r3, r5
 801bc26:	1400      	asrs	r0, r0, #16
 801bc28:	f53f aeaa 	bmi.w	801b980 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801bc2c:	3901      	subs	r1, #1
 801bc2e:	4288      	cmp	r0, r1
 801bc30:	f6bf aea6 	bge.w	801b980 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801bc34:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801bc36:	9826      	ldr	r0, [sp, #152]	; 0x98
 801bc38:	fb01 0303 	mla	r3, r1, r3, r0
 801bc3c:	141b      	asrs	r3, r3, #16
 801bc3e:	f53f ae9f 	bmi.w	801b980 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801bc42:	3a01      	subs	r2, #1
 801bc44:	4293      	cmp	r3, r2
 801bc46:	f6bf ae9b 	bge.w	801b980 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801bc4a:	9b06      	ldr	r3, [sp, #24]
 801bc4c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801bc50:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801bc54:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	f300 80b6 	bgt.w	801bdca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801bc5e:	9b06      	ldr	r3, [sp, #24]
 801bc60:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801bc64:	9b07      	ldr	r3, [sp, #28]
 801bc66:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801bc6a:	9307      	str	r3, [sp, #28]
 801bc6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	f340 8218 	ble.w	801c0a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 801bc74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bc78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc7a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801bc7e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801bc82:	eef0 6a48 	vmov.f32	s13, s16
 801bc86:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801bc8a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801bc8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc92:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801bc96:	eef0 6a68 	vmov.f32	s13, s17
 801bc9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc9e:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 801bca2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801bca6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801bcaa:	ee37 8a48 	vsub.f32	s16, s14, s16
 801bcae:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801bcb2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801bcb6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801bcba:	ee18 2a10 	vmov	r2, s16
 801bcbe:	eeb0 8a47 	vmov.f32	s16, s14
 801bcc2:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcc6:	ee18 2a90 	vmov	r2, s17
 801bcca:	9327      	str	r3, [sp, #156]	; 0x9c
 801bccc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bcce:	eef0 8a67 	vmov.f32	s17, s15
 801bcd2:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcd6:	9328      	str	r3, [sp, #160]	; 0xa0
 801bcd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bcda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bcdc:	3b01      	subs	r3, #1
 801bcde:	930e      	str	r3, [sp, #56]	; 0x38
 801bce0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bce2:	bf08      	it	eq
 801bce4:	4613      	moveq	r3, r2
 801bce6:	9306      	str	r3, [sp, #24]
 801bce8:	e61f      	b.n	801b92a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801bcea:	fb08 f505 	mul.w	r5, r8, r5
 801bcee:	fb09 5303 	mla	r3, r9, r3, r5
 801bcf2:	e69f      	b.n	801ba34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801bcf4:	4681      	mov	r9, r0
 801bcf6:	e6c6      	b.n	801ba86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801bcf8:	f1c1 0210 	rsb	r2, r1, #16
 801bcfc:	4341      	muls	r1, r0
 801bcfe:	fb09 1902 	mla	r9, r9, r2, r1
 801bd02:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801bd06:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801bd0a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801bd0e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bd12:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801bd16:	ea42 0909 	orr.w	r9, r2, r9
 801bd1a:	fa1f f289 	uxth.w	r2, r9
 801bd1e:	e75b      	b.n	801bbd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801bd20:	f8b7 c000 	ldrh.w	ip, [r7]
 801bd24:	43db      	mvns	r3, r3
 801bd26:	ea4f 202c 	mov.w	r0, ip, asr #8
 801bd2a:	fa5f fe83 	uxtb.w	lr, r3
 801bd2e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801bd32:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801bd36:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801bd3a:	fb00 f00e 	mul.w	r0, r0, lr
 801bd3e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801bd42:	b2db      	uxtb	r3, r3
 801bd44:	1c41      	adds	r1, r0, #1
 801bd46:	fb05 f50e 	mul.w	r5, r5, lr
 801bd4a:	fb03 f30e 	mul.w	r3, r3, lr
 801bd4e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801bd52:	1211      	asrs	r1, r2, #8
 801bd54:	f021 0107 	bic.w	r1, r1, #7
 801bd58:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801bd5c:	48d4      	ldr	r0, [pc, #848]	; (801c0b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 801bd5e:	b2c9      	uxtb	r1, r1
 801bd60:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 801bd64:	1c69      	adds	r1, r5, #1
 801bd66:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801bd6a:	10d1      	asrs	r1, r2, #3
 801bd6c:	00d2      	lsls	r2, r2, #3
 801bd6e:	f021 0103 	bic.w	r1, r1, #3
 801bd72:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801bd76:	00c9      	lsls	r1, r1, #3
 801bd78:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801bd7c:	4301      	orrs	r1, r0
 801bd7e:	1c58      	adds	r0, r3, #1
 801bd80:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801bd84:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801bd88:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801bd8c:	430a      	orrs	r2, r1
 801bd8e:	e726      	b.n	801bbde <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801bd90:	f115 0e01 	adds.w	lr, r5, #1
 801bd94:	f53f af24 	bmi.w	801bbe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801bd98:	4572      	cmp	r2, lr
 801bd9a:	f6ff af21 	blt.w	801bbe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801bd9e:	f110 0e01 	adds.w	lr, r0, #1
 801bda2:	f53f af1d 	bmi.w	801bbe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801bda6:	4573      	cmp	r3, lr
 801bda8:	f6ff af1a 	blt.w	801bbe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801bdac:	b21b      	sxth	r3, r3
 801bdae:	b212      	sxth	r2, r2
 801bdb0:	9301      	str	r3, [sp, #4]
 801bdb2:	9200      	str	r2, [sp, #0]
 801bdb4:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801bdb8:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801bdbc:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801bdc0:	4639      	mov	r1, r7
 801bdc2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bdc4:	f7ff fbf2 	bl	801b5ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801bdc8:	e70a      	b.n	801bbe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801bdca:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801bdcc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801bdd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bdd2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801bdd6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801bdd8:	fa1f fc82 	uxth.w	ip, r2
 801bddc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bde0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bde2:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801bde6:	141f      	asrs	r7, r3, #16
 801bde8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801bdea:	141b      	asrs	r3, r3, #16
 801bdec:	fb01 3707 	mla	r7, r1, r7, r3
 801bdf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdf2:	eb03 0a07 	add.w	sl, r3, r7
 801bdf6:	f813 9007 	ldrb.w	r9, [r3, r7]
 801bdfa:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801bdfe:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801be02:	b29b      	uxth	r3, r3
 801be04:	2d00      	cmp	r5, #0
 801be06:	f000 80fe 	beq.w	801c006 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801be0a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801be0e:	eb0a 0b01 	add.w	fp, sl, r1
 801be12:	fa1f fa85 	uxth.w	sl, r5
 801be16:	940c      	str	r4, [sp, #48]	; 0x30
 801be18:	fb0a fc0c 	mul.w	ip, sl, ip
 801be1c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801be20:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801be24:	eba0 000c 	sub.w	r0, r0, ip
 801be28:	940d      	str	r4, [sp, #52]	; 0x34
 801be2a:	fa1f fa8a 	uxth.w	sl, sl
 801be2e:	b280      	uxth	r0, r0
 801be30:	eba3 030a 	sub.w	r3, r3, sl
 801be34:	fb08 f000 	mul.w	r0, r8, r0
 801be38:	b29b      	uxth	r3, r3
 801be3a:	fb09 0303 	mla	r3, r9, r3, r0
 801be3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801be40:	fb0a 3300 	mla	r3, sl, r0, r3
 801be44:	fb0c 3304 	mla	r3, ip, r4, r3
 801be48:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	f000 80cc 	beq.w	801bfea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801be52:	9808      	ldr	r0, [sp, #32]
 801be54:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801be58:	9c08      	ldr	r4, [sp, #32]
 801be5a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801be5e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801be62:	f000 80d5 	beq.w	801c010 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 801be66:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801be6a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801be6e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801be72:	fb0a fc0c 	mul.w	ip, sl, ip
 801be76:	fb09 f707 	mul.w	r7, r9, r7
 801be7a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801be7e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801be82:	f107 0b20 	add.w	fp, r7, #32
 801be86:	44cc      	add	ip, r9
 801be88:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801be8c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801be90:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801be94:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801be98:	ea4c 0909 	orr.w	r9, ip, r9
 801be9c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801bea0:	8847      	ldrh	r7, [r0, #2]
 801bea2:	d019      	beq.n	801bed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 801bea4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801bea8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801beac:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801beb0:	fb0a fc0c 	mul.w	ip, sl, ip
 801beb4:	fb08 f807 	mul.w	r8, r8, r7
 801beb8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801bebc:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801bec0:	f108 0b20 	add.w	fp, r8, #32
 801bec4:	44bc      	add	ip, r7
 801bec6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801beca:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801bece:	0a3f      	lsrs	r7, r7, #8
 801bed0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801bed4:	ea4c 0707 	orr.w	r7, ip, r7
 801bed8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801bedc:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801bee0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801bee4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801bee8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801beec:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801bef0:	ea4c 0909 	orr.w	r9, ip, r9
 801bef4:	ea4a 0707 	orr.w	r7, sl, r7
 801bef8:	2d00      	cmp	r5, #0
 801befa:	f000 808b 	beq.w	801c014 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801befe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801bf02:	3901      	subs	r1, #1
 801bf04:	0049      	lsls	r1, r1, #1
 801bf06:	3102      	adds	r1, #2
 801bf08:	eb00 0c01 	add.w	ip, r0, r1
 801bf0c:	5a41      	ldrh	r1, [r0, r1]
 801bf0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801bf10:	28ff      	cmp	r0, #255	; 0xff
 801bf12:	d019      	beq.n	801bf48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801bf14:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801bf18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bf1a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801bf1e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801bf22:	fb04 fa01 	mul.w	sl, r4, r1
 801bf26:	fb08 f800 	mul.w	r8, r8, r0
 801bf2a:	f10a 0020 	add.w	r0, sl, #32
 801bf2e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801bf32:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801bf36:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801bf3a:	4441      	add	r1, r8
 801bf3c:	0a00      	lsrs	r0, r0, #8
 801bf3e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801bf42:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801bf46:	4301      	orrs	r1, r0
 801bf48:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bf4a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801bf4e:	2cff      	cmp	r4, #255	; 0xff
 801bf50:	d01a      	beq.n	801bf88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 801bf52:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801bf56:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801bf5a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801bf5e:	fb04 fa00 	mul.w	sl, r4, r0
 801bf62:	fb08 f80c 	mul.w	r8, r8, ip
 801bf66:	f10a 0c20 	add.w	ip, sl, #32
 801bf6a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801bf6e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801bf72:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801bf76:	4440      	add	r0, r8
 801bf78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bf7c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801bf80:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801bf84:	ea40 000c 	orr.w	r0, r0, ip
 801bf88:	fb15 fc02 	smulbb	ip, r5, r2
 801bf8c:	f1c5 0810 	rsb	r8, r5, #16
 801bf90:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801bf94:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801bf98:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801bf9c:	eba8 0802 	sub.w	r8, r8, r2
 801bfa0:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801bfa4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801bfa8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801bfac:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801bfb0:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801bfb4:	ea4a 0101 	orr.w	r1, sl, r1
 801bfb8:	437a      	muls	r2, r7
 801bfba:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801bfbe:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801bfc2:	fb09 2208 	mla	r2, r9, r8, r2
 801bfc6:	ea4b 0000 	orr.w	r0, fp, r0
 801bfca:	fb05 2201 	mla	r2, r5, r1, r2
 801bfce:	fb0c 2200 	mla	r2, ip, r0, r2
 801bfd2:	0d57      	lsrs	r7, r2, #21
 801bfd4:	0952      	lsrs	r2, r2, #5
 801bfd6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801bfda:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801bfde:	433a      	orrs	r2, r7
 801bfe0:	2bff      	cmp	r3, #255	; 0xff
 801bfe2:	b292      	uxth	r2, r2
 801bfe4:	d127      	bne.n	801c036 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 801bfe6:	f8ae 2000 	strh.w	r2, [lr]
 801bfea:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801bfec:	f10e 0e02 	add.w	lr, lr, #2
 801bff0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801bff2:	4413      	add	r3, r2
 801bff4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bff6:	9325      	str	r3, [sp, #148]	; 0x94
 801bff8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bffa:	441a      	add	r2, r3
 801bffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bffe:	3b01      	subs	r3, #1
 801c000:	9226      	str	r2, [sp, #152]	; 0x98
 801c002:	930f      	str	r3, [sp, #60]	; 0x3c
 801c004:	e627      	b.n	801bc56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801c006:	fb08 f000 	mul.w	r0, r8, r0
 801c00a:	fb09 0303 	mla	r3, r9, r3, r0
 801c00e:	e71b      	b.n	801be48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 801c010:	46b9      	mov	r9, r7
 801c012:	e743      	b.n	801be9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 801c014:	f1c2 0110 	rsb	r1, r2, #16
 801c018:	437a      	muls	r2, r7
 801c01a:	fb09 2901 	mla	r9, r9, r1, r2
 801c01e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801c022:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801c026:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801c02a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c02e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c032:	4302      	orrs	r2, r0
 801c034:	e7d4      	b.n	801bfe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 801c036:	f8be 7000 	ldrh.w	r7, [lr]
 801c03a:	43db      	mvns	r3, r3
 801c03c:	4c1c      	ldr	r4, [pc, #112]	; (801c0b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 801c03e:	1238      	asrs	r0, r7, #8
 801c040:	fa5f fc83 	uxtb.w	ip, r3
 801c044:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c048:	10fd      	asrs	r5, r7, #3
 801c04a:	00fb      	lsls	r3, r7, #3
 801c04c:	fb00 f00c 	mul.w	r0, r0, ip
 801c050:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c054:	b2db      	uxtb	r3, r3
 801c056:	fb05 f10c 	mul.w	r1, r5, ip
 801c05a:	1c45      	adds	r5, r0, #1
 801c05c:	fb03 f30c 	mul.w	r3, r3, ip
 801c060:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801c064:	1215      	asrs	r5, r2, #8
 801c066:	f025 0507 	bic.w	r5, r5, #7
 801c06a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801c06e:	1c4d      	adds	r5, r1, #1
 801c070:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801c074:	10d1      	asrs	r1, r2, #3
 801c076:	b2c0      	uxtb	r0, r0
 801c078:	f021 0103 	bic.w	r1, r1, #3
 801c07c:	00d2      	lsls	r2, r2, #3
 801c07e:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801c082:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801c086:	00c9      	lsls	r1, r1, #3
 801c088:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c08c:	4308      	orrs	r0, r1
 801c08e:	1c59      	adds	r1, r3, #1
 801c090:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801c094:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c098:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801c09c:	4318      	orrs	r0, r3
 801c09e:	f8ae 0000 	strh.w	r0, [lr]
 801c0a2:	e7a2      	b.n	801bfea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801c0a4:	b013      	add	sp, #76	; 0x4c
 801c0a6:	ecbd 8b08 	vpop	{d8-d11}
 801c0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0ae:	bf00      	nop
 801c0b0:	fffff800 	.word	0xfffff800

0801c0b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801c0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c0b8:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 801c0bc:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801c0c0:	fb0c 4e03 	mla	lr, ip, r3, r4
 801c0c4:	f1bc 0f00 	cmp.w	ip, #0
 801c0c8:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 801c0cc:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 801c0d0:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 801c0d4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801c0d8:	8808      	ldrh	r0, [r1, #0]
 801c0da:	db2f      	blt.n	801c13c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 801c0dc:	45e2      	cmp	sl, ip
 801c0de:	dd2d      	ble.n	801c13c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 801c0e0:	2c00      	cmp	r4, #0
 801c0e2:	db29      	blt.n	801c138 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 801c0e4:	42a3      	cmp	r3, r4
 801c0e6:	dd27      	ble.n	801c138 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 801c0e8:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 801c0ec:	1c62      	adds	r2, r4, #1
 801c0ee:	d428      	bmi.n	801c142 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801c0f0:	4293      	cmp	r3, r2
 801c0f2:	dd26      	ble.n	801c142 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801c0f4:	b32f      	cbz	r7, 801c142 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801c0f6:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 801c0fa:	f11c 0c01 	adds.w	ip, ip, #1
 801c0fe:	d424      	bmi.n	801c14a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 801c100:	45e2      	cmp	sl, ip
 801c102:	dd22      	ble.n	801c14a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 801c104:	2e00      	cmp	r6, #0
 801c106:	f000 809d 	beq.w	801c244 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 801c10a:	2c00      	cmp	r4, #0
 801c10c:	db1b      	blt.n	801c146 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 801c10e:	42a3      	cmp	r3, r4
 801c110:	dd19      	ble.n	801c146 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 801c112:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 801c116:	3401      	adds	r4, #1
 801c118:	d41a      	bmi.n	801c150 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 801c11a:	42a3      	cmp	r3, r4
 801c11c:	dd18      	ble.n	801c150 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 801c11e:	b1cf      	cbz	r7, 801c154 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 801c120:	3301      	adds	r3, #1
 801c122:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 801c126:	2f0f      	cmp	r7, #15
 801c128:	d915      	bls.n	801c156 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 801c12a:	4b49      	ldr	r3, [pc, #292]	; (801c250 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 801c12c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 801c130:	4a48      	ldr	r2, [pc, #288]	; (801c254 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 801c132:	4849      	ldr	r0, [pc, #292]	; (801c258 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 801c134:	f002 ffb0 	bl	801f098 <__assert_func>
 801c138:	4681      	mov	r9, r0
 801c13a:	e7d7      	b.n	801c0ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 801c13c:	4686      	mov	lr, r0
 801c13e:	4681      	mov	r9, r0
 801c140:	e7db      	b.n	801c0fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 801c142:	4686      	mov	lr, r0
 801c144:	e7d9      	b.n	801c0fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 801c146:	4684      	mov	ip, r0
 801c148:	e7e5      	b.n	801c116 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 801c14a:	4603      	mov	r3, r0
 801c14c:	4684      	mov	ip, r0
 801c14e:	e7ea      	b.n	801c126 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 801c150:	4603      	mov	r3, r0
 801c152:	e7e8      	b.n	801c126 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 801c154:	4603      	mov	r3, r0
 801c156:	2e0f      	cmp	r6, #15
 801c158:	d8e7      	bhi.n	801c12a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 801c15a:	fb17 f806 	smulbb	r8, r7, r6
 801c15e:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801c162:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 801c166:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801c16a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c16e:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801c172:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801c176:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c17a:	ea44 0909 	orr.w	r9, r4, r9
 801c17e:	f1c6 0410 	rsb	r4, r6, #16
 801c182:	041a      	lsls	r2, r3, #16
 801c184:	ea4a 0e0e 	orr.w	lr, sl, lr
 801c188:	1be4      	subs	r4, r4, r7
 801c18a:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 801c18e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c192:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c196:	fb07 fe0e 	mul.w	lr, r7, lr
 801c19a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801c19e:	4313      	orrs	r3, r2
 801c1a0:	ea4f 420c 	mov.w	r2, ip, lsl #16
 801c1a4:	fb04 e409 	mla	r4, r4, r9, lr
 801c1a8:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801c1ac:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c1b0:	b2af      	uxth	r7, r5
 801c1b2:	fb08 4303 	mla	r3, r8, r3, r4
 801c1b6:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 801c1ba:	43ed      	mvns	r5, r5
 801c1bc:	4322      	orrs	r2, r4
 801c1be:	b2ed      	uxtb	r5, r5
 801c1c0:	fb06 3202 	mla	r2, r6, r2, r3
 801c1c4:	10c6      	asrs	r6, r0, #3
 801c1c6:	0d53      	lsrs	r3, r2, #21
 801c1c8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c1cc:	0952      	lsrs	r2, r2, #5
 801c1ce:	fb16 f605 	smulbb	r6, r6, r5
 801c1d2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c1d6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c1da:	431a      	orrs	r2, r3
 801c1dc:	b293      	uxth	r3, r2
 801c1de:	1202      	asrs	r2, r0, #8
 801c1e0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c1e4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801c1e8:	00dc      	lsls	r4, r3, #3
 801c1ea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c1ee:	fb12 f205 	smulbb	r2, r2, r5
 801c1f2:	b2e4      	uxtb	r4, r4
 801c1f4:	fb0c 2c07 	mla	ip, ip, r7, r2
 801c1f8:	10da      	asrs	r2, r3, #3
 801c1fa:	00c3      	lsls	r3, r0, #3
 801c1fc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c200:	fa1f fc8c 	uxth.w	ip, ip
 801c204:	b2db      	uxtb	r3, r3
 801c206:	fb02 6207 	mla	r2, r2, r7, r6
 801c20a:	fb13 f305 	smulbb	r3, r3, r5
 801c20e:	b296      	uxth	r6, r2
 801c210:	fb04 3307 	mla	r3, r4, r7, r3
 801c214:	b29a      	uxth	r2, r3
 801c216:	f10c 0301 	add.w	r3, ip, #1
 801c21a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c21e:	1c53      	adds	r3, r2, #1
 801c220:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c224:	1c72      	adds	r2, r6, #1
 801c226:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c22a:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801c22e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c232:	0952      	lsrs	r2, r2, #5
 801c234:	ea43 030c 	orr.w	r3, r3, ip
 801c238:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c23c:	4313      	orrs	r3, r2
 801c23e:	800b      	strh	r3, [r1, #0]
 801c240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c244:	2f0f      	cmp	r7, #15
 801c246:	f63f af70 	bhi.w	801c12a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 801c24a:	4603      	mov	r3, r0
 801c24c:	4684      	mov	ip, r0
 801c24e:	e784      	b.n	801c15a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 801c250:	08023551 	.word	0x08023551
 801c254:	08023bc7 	.word	0x08023bc7
 801c258:	080235d5 	.word	0x080235d5

0801c25c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c260:	ed2d 8b08 	vpush	{d8-d11}
 801c264:	b093      	sub	sp, #76	; 0x4c
 801c266:	461d      	mov	r5, r3
 801c268:	eeb0 aa40 	vmov.f32	s20, s0
 801c26c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c26e:	eef0 9a60 	vmov.f32	s19, s1
 801c272:	9210      	str	r2, [sp, #64]	; 0x40
 801c274:	eeb0 9a41 	vmov.f32	s18, s2
 801c278:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 801c27c:	eeb0 8a62 	vmov.f32	s16, s5
 801c280:	910a      	str	r1, [sp, #40]	; 0x28
 801c282:	eef0 8a43 	vmov.f32	s17, s6
 801c286:	920b      	str	r2, [sp, #44]	; 0x2c
 801c288:	eef0 ba44 	vmov.f32	s23, s8
 801c28c:	6859      	ldr	r1, [r3, #4]
 801c28e:	eeb0 ba64 	vmov.f32	s22, s9
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	eef0 aa45 	vmov.f32	s21, s10
 801c298:	9011      	str	r0, [sp, #68]	; 0x44
 801c29a:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 801c29e:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 801c2a2:	fb01 2707 	mla	r7, r1, r7, r2
 801c2a6:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801c2aa:	9307      	str	r3, [sp, #28]
 801c2ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	9309      	str	r3, [sp, #36]	; 0x24
 801c2b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c2b4:	43db      	mvns	r3, r3
 801c2b6:	b2db      	uxtb	r3, r3
 801c2b8:	9308      	str	r3, [sp, #32]
 801c2ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	dc03      	bgt.n	801c2c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c2c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	f340 8205 	ble.w	801c6d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801c2c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c2ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c2ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c2d2:	1e48      	subs	r0, r1, #1
 801c2d4:	f102 3cff 	add.w	ip, r2, #4294967295
 801c2d8:	2d00      	cmp	r5, #0
 801c2da:	f340 80da 	ble.w	801c492 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801c2de:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801c2e2:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c2e6:	d406      	bmi.n	801c2f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c2e8:	4586      	cmp	lr, r0
 801c2ea:	da04      	bge.n	801c2f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	db02      	blt.n	801c2f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c2f0:	4563      	cmp	r3, ip
 801c2f2:	f2c0 80cf 	blt.w	801c494 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801c2f6:	f11e 0e01 	adds.w	lr, lr, #1
 801c2fa:	f100 80c1 	bmi.w	801c480 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801c2fe:	4571      	cmp	r1, lr
 801c300:	f2c0 80be 	blt.w	801c480 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801c304:	3301      	adds	r3, #1
 801c306:	f100 80bb 	bmi.w	801c480 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801c30a:	429a      	cmp	r2, r3
 801c30c:	f2c0 80b8 	blt.w	801c480 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801c310:	46a9      	mov	r9, r5
 801c312:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801c316:	f1b9 0f00 	cmp.w	r9, #0
 801c31a:	f340 80d8 	ble.w	801c4ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801c31e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c320:	1421      	asrs	r1, r4, #16
 801c322:	ea4f 4026 	mov.w	r0, r6, asr #16
 801c326:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801c32a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801c32e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801c332:	f100 8112 	bmi.w	801c55a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801c336:	f10e 3aff 	add.w	sl, lr, #4294967295
 801c33a:	4551      	cmp	r1, sl
 801c33c:	f280 810d 	bge.w	801c55a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801c340:	2800      	cmp	r0, #0
 801c342:	f2c0 810a 	blt.w	801c55a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801c346:	f103 3aff 	add.w	sl, r3, #4294967295
 801c34a:	4550      	cmp	r0, sl
 801c34c:	f280 8105 	bge.w	801c55a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801c350:	fa0f f38e 	sxth.w	r3, lr
 801c354:	fb00 1103 	mla	r1, r0, r3, r1
 801c358:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c35a:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 801c35e:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801c362:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 801c366:	f1bc 0f00 	cmp.w	ip, #0
 801c36a:	d007      	beq.n	801c37c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801c36c:	005b      	lsls	r3, r3, #1
 801c36e:	eb0a 0003 	add.w	r0, sl, r3
 801c372:	f83a 3003 	ldrh.w	r3, [sl, r3]
 801c376:	930c      	str	r3, [sp, #48]	; 0x30
 801c378:	8843      	ldrh	r3, [r0, #2]
 801c37a:	930d      	str	r3, [sp, #52]	; 0x34
 801c37c:	ea4f 400e 	mov.w	r0, lr, lsl #16
 801c380:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c384:	fb12 f30c 	smulbb	r3, r2, ip
 801c388:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801c38c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c390:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c394:	10db      	asrs	r3, r3, #3
 801c396:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801c39a:	ea40 000e 	orr.w	r0, r0, lr
 801c39e:	f1cc 0e10 	rsb	lr, ip, #16
 801c3a2:	ea4a 0101 	orr.w	r1, sl, r1
 801c3a6:	9f08      	ldr	r7, [sp, #32]
 801c3a8:	ebae 0e02 	sub.w	lr, lr, r2
 801c3ac:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801c3b0:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801c3b4:	4351      	muls	r1, r2
 801c3b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c3b8:	fb0e 1e00 	mla	lr, lr, r0, r1
 801c3bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c3be:	0410      	lsls	r0, r2, #16
 801c3c0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c3c4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c3c8:	4310      	orrs	r0, r2
 801c3ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c3cc:	0412      	lsls	r2, r2, #16
 801c3ce:	fb03 e000 	mla	r0, r3, r0, lr
 801c3d2:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801c3d6:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801c3da:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c3de:	ea42 020e 	orr.w	r2, r2, lr
 801c3e2:	fb03 0302 	mla	r3, r3, r2, r0
 801c3e6:	f8b8 0000 	ldrh.w	r0, [r8]
 801c3ea:	0d5a      	lsrs	r2, r3, #21
 801c3ec:	095b      	lsrs	r3, r3, #5
 801c3ee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c3f2:	1201      	asrs	r1, r0, #8
 801c3f4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c3f8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801c3fc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c400:	00c0      	lsls	r0, r0, #3
 801c402:	4313      	orrs	r3, r2
 801c404:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801c408:	fb11 f107 	smulbb	r1, r1, r7
 801c40c:	b2c0      	uxtb	r0, r0
 801c40e:	b29b      	uxth	r3, r3
 801c410:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801c414:	fb10 f007 	smulbb	r0, r0, r7
 801c418:	fb1e fe07 	smulbb	lr, lr, r7
 801c41c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c420:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c424:	fb0c 1c02 	mla	ip, ip, r2, r1
 801c428:	10d9      	asrs	r1, r3, #3
 801c42a:	00db      	lsls	r3, r3, #3
 801c42c:	fa1f fc8c 	uxth.w	ip, ip
 801c430:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c434:	b2db      	uxtb	r3, r3
 801c436:	fb01 e102 	mla	r1, r1, r2, lr
 801c43a:	fb03 0302 	mla	r3, r3, r2, r0
 801c43e:	b289      	uxth	r1, r1
 801c440:	b29a      	uxth	r2, r3
 801c442:	f10c 0301 	add.w	r3, ip, #1
 801c446:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c44a:	1c53      	adds	r3, r2, #1
 801c44c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c450:	1c4a      	adds	r2, r1, #1
 801c452:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c456:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c45a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c45e:	0949      	lsrs	r1, r1, #5
 801c460:	ea43 030c 	orr.w	r3, r3, ip
 801c464:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c468:	430b      	orrs	r3, r1
 801c46a:	f8a8 3000 	strh.w	r3, [r8]
 801c46e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c470:	f108 0802 	add.w	r8, r8, #2
 801c474:	f109 39ff 	add.w	r9, r9, #4294967295
 801c478:	441c      	add	r4, r3
 801c47a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c47c:	441e      	add	r6, r3
 801c47e:	e74a      	b.n	801c316 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801c480:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c482:	3d01      	subs	r5, #1
 801c484:	441c      	add	r4, r3
 801c486:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c488:	441e      	add	r6, r3
 801c48a:	9b07      	ldr	r3, [sp, #28]
 801c48c:	3302      	adds	r3, #2
 801c48e:	9307      	str	r3, [sp, #28]
 801c490:	e722      	b.n	801c2d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c492:	d022      	beq.n	801c4da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c494:	1e6b      	subs	r3, r5, #1
 801c496:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801c498:	fb00 4003 	mla	r0, r0, r3, r4
 801c49c:	1400      	asrs	r0, r0, #16
 801c49e:	f53f af37 	bmi.w	801c310 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c4a2:	3901      	subs	r1, #1
 801c4a4:	4288      	cmp	r0, r1
 801c4a6:	f6bf af33 	bge.w	801c310 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c4aa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c4ac:	fb01 6303 	mla	r3, r1, r3, r6
 801c4b0:	141b      	asrs	r3, r3, #16
 801c4b2:	f53f af2d 	bmi.w	801c310 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c4b6:	3a01      	subs	r2, #1
 801c4b8:	4293      	cmp	r3, r2
 801c4ba:	f6bf af29 	bge.w	801c310 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c4be:	46a8      	mov	r8, r5
 801c4c0:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801c4c4:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 801c4c8:	f1b8 0f00 	cmp.w	r8, #0
 801c4cc:	dc60      	bgt.n	801c590 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 801c4ce:	9b07      	ldr	r3, [sp, #28]
 801c4d0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801c4d4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801c4d8:	9307      	str	r3, [sp, #28]
 801c4da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	f340 80f8 	ble.w	801c6d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801c4e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c4e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c4e8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c4ec:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c4f0:	eef0 6a48 	vmov.f32	s13, s16
 801c4f4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c4f8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c4fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c500:	ee16 4a90 	vmov	r4, s13
 801c504:	eef0 6a68 	vmov.f32	s13, s17
 801c508:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c50c:	ee16 6a90 	vmov	r6, s13
 801c510:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c514:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c518:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c51c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c520:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c524:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c528:	ee18 2a10 	vmov	r2, s16
 801c52c:	eeb0 8a47 	vmov.f32	s16, s14
 801c530:	fb92 f3f3 	sdiv	r3, r2, r3
 801c534:	ee18 2a90 	vmov	r2, s17
 801c538:	9327      	str	r3, [sp, #156]	; 0x9c
 801c53a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c53c:	eef0 8a67 	vmov.f32	s17, s15
 801c540:	fb92 f3f3 	sdiv	r3, r2, r3
 801c544:	9328      	str	r3, [sp, #160]	; 0xa0
 801c546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c548:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c54a:	3b01      	subs	r3, #1
 801c54c:	930a      	str	r3, [sp, #40]	; 0x28
 801c54e:	bf08      	it	eq
 801c550:	4615      	moveq	r5, r2
 801c552:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c554:	bf18      	it	ne
 801c556:	461d      	movne	r5, r3
 801c558:	e6af      	b.n	801c2ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c55a:	f111 0a01 	adds.w	sl, r1, #1
 801c55e:	d486      	bmi.n	801c46e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801c560:	45d6      	cmp	lr, sl
 801c562:	db84      	blt.n	801c46e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801c564:	f110 0a01 	adds.w	sl, r0, #1
 801c568:	d481      	bmi.n	801c46e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801c56a:	4553      	cmp	r3, sl
 801c56c:	f6ff af7f 	blt.w	801c46e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801c570:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801c572:	b21b      	sxth	r3, r3
 801c574:	9101      	str	r1, [sp, #4]
 801c576:	4641      	mov	r1, r8
 801c578:	9300      	str	r3, [sp, #0]
 801c57a:	fa0f f38e 	sxth.w	r3, lr
 801c57e:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801c582:	e9cd c704 	strd	ip, r7, [sp, #16]
 801c586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c588:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c58a:	f7ff fd93 	bl	801c0b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801c58e:	e76e      	b.n	801c46e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801c590:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c592:	1430      	asrs	r0, r6, #16
 801c594:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c596:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801c59a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c59e:	1423      	asrs	r3, r4, #16
 801c5a0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801c5a4:	fb01 3000 	mla	r0, r1, r0, r3
 801c5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c5aa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801c5ae:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 801c5b2:	8858      	ldrh	r0, [r3, #2]
 801c5b4:	f1be 0f00 	cmp.w	lr, #0
 801c5b8:	d00b      	beq.n	801c5d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 801c5ba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801c5be:	3901      	subs	r1, #1
 801c5c0:	0049      	lsls	r1, r1, #1
 801c5c2:	3102      	adds	r1, #2
 801c5c4:	eb03 0b01 	add.w	fp, r3, r1
 801c5c8:	5a5b      	ldrh	r3, [r3, r1]
 801c5ca:	930e      	str	r3, [sp, #56]	; 0x38
 801c5cc:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801c5d0:	930f      	str	r3, [sp, #60]	; 0x3c
 801c5d2:	ea4f 410c 	mov.w	r1, ip, lsl #16
 801c5d6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801c5da:	fb12 f30e 	smulbb	r3, r2, lr
 801c5de:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801c5e2:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 801c5e6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801c5ea:	10db      	asrs	r3, r3, #3
 801c5ec:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801c5f0:	ea41 010c 	orr.w	r1, r1, ip
 801c5f4:	f1ce 0c10 	rsb	ip, lr, #16
 801c5f8:	ea4b 0000 	orr.w	r0, fp, r0
 801c5fc:	9f08      	ldr	r7, [sp, #32]
 801c5fe:	ebac 0c02 	sub.w	ip, ip, r2
 801c602:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801c606:	f108 38ff 	add.w	r8, r8, #4294967295
 801c60a:	4350      	muls	r0, r2
 801c60c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801c610:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c612:	fb0c 0c01 	mla	ip, ip, r1, r0
 801c616:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c618:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801c61c:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 801c620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c622:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801c626:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801c62a:	0412      	lsls	r2, r2, #16
 801c62c:	ea4b 0101 	orr.w	r1, fp, r1
 801c630:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c634:	fb03 c101 	mla	r1, r3, r1, ip
 801c638:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801c63c:	4302      	orrs	r2, r0
 801c63e:	fb03 1202 	mla	r2, r3, r2, r1
 801c642:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 801c646:	0952      	lsrs	r2, r2, #5
 801c648:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801c64c:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 801c650:	f8b9 2000 	ldrh.w	r2, [r9]
 801c654:	ea4b 0303 	orr.w	r3, fp, r3
 801c658:	1211      	asrs	r1, r2, #8
 801c65a:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801c65e:	b29b      	uxth	r3, r3
 801c660:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c664:	00d2      	lsls	r2, r2, #3
 801c666:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801c66a:	fb11 f107 	smulbb	r1, r1, r7
 801c66e:	1218      	asrs	r0, r3, #8
 801c670:	fb1c fc07 	smulbb	ip, ip, r7
 801c674:	b2d2      	uxtb	r2, r2
 801c676:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c67a:	fb12 f207 	smulbb	r2, r2, r7
 801c67e:	fb00 100a 	mla	r0, r0, sl, r1
 801c682:	10d9      	asrs	r1, r3, #3
 801c684:	00db      	lsls	r3, r3, #3
 801c686:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c68a:	b280      	uxth	r0, r0
 801c68c:	b2db      	uxtb	r3, r3
 801c68e:	fb01 c10a 	mla	r1, r1, sl, ip
 801c692:	fb03 230a 	mla	r3, r3, sl, r2
 801c696:	1c42      	adds	r2, r0, #1
 801c698:	b289      	uxth	r1, r1
 801c69a:	b29b      	uxth	r3, r3
 801c69c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801c6a0:	f101 0c01 	add.w	ip, r1, #1
 801c6a4:	1c5a      	adds	r2, r3, #1
 801c6a6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801c6aa:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801c6ae:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c6b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c6b4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801c6b8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c6bc:	441c      	add	r4, r3
 801c6be:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801c6c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c6c4:	4310      	orrs	r0, r2
 801c6c6:	441e      	add	r6, r3
 801c6c8:	ea40 000c 	orr.w	r0, r0, ip
 801c6cc:	f829 0b02 	strh.w	r0, [r9], #2
 801c6d0:	e6fa      	b.n	801c4c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801c6d2:	b013      	add	sp, #76	; 0x4c
 801c6d4:	ecbd 8b08 	vpop	{d8-d11}
 801c6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c6dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801c6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c6e0:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 801c6e4:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 801c6e8:	fb06 5c03 	mla	ip, r6, r3, r5
 801c6ec:	2e00      	cmp	r6, #0
 801c6ee:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 801c6f2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801c6f6:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 801c6fa:	8808      	ldrh	r0, [r1, #0]
 801c6fc:	db2e      	blt.n	801c75c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 801c6fe:	45b0      	cmp	r8, r6
 801c700:	dd2c      	ble.n	801c75c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 801c702:	2d00      	cmp	r5, #0
 801c704:	db28      	blt.n	801c758 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 801c706:	42ab      	cmp	r3, r5
 801c708:	dd26      	ble.n	801c758 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 801c70a:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 801c70e:	1c6a      	adds	r2, r5, #1
 801c710:	d427      	bmi.n	801c762 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801c712:	4293      	cmp	r3, r2
 801c714:	dd25      	ble.n	801c762 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801c716:	b324      	cbz	r4, 801c762 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801c718:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c71c:	3601      	adds	r6, #1
 801c71e:	d424      	bmi.n	801c76a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 801c720:	45b0      	cmp	r8, r6
 801c722:	dd22      	ble.n	801c76a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 801c724:	b31f      	cbz	r7, 801c76e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 801c726:	2d00      	cmp	r5, #0
 801c728:	db1d      	blt.n	801c766 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 801c72a:	42ab      	cmp	r3, r5
 801c72c:	dd1b      	ble.n	801c766 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 801c72e:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 801c732:	3501      	adds	r5, #1
 801c734:	d405      	bmi.n	801c742 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801c736:	42ab      	cmp	r3, r5
 801c738:	dd03      	ble.n	801c742 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801c73a:	b124      	cbz	r4, 801c746 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 801c73c:	3301      	adds	r3, #1
 801c73e:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 801c742:	2c0f      	cmp	r4, #15
 801c744:	d801      	bhi.n	801c74a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801c746:	2f0f      	cmp	r7, #15
 801c748:	d914      	bls.n	801c774 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 801c74a:	4b27      	ldr	r3, [pc, #156]	; (801c7e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 801c74c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 801c750:	4a26      	ldr	r2, [pc, #152]	; (801c7ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 801c752:	4827      	ldr	r0, [pc, #156]	; (801c7f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 801c754:	f002 fca0 	bl	801f098 <__assert_func>
 801c758:	4684      	mov	ip, r0
 801c75a:	e7d8      	b.n	801c70e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 801c75c:	4602      	mov	r2, r0
 801c75e:	4684      	mov	ip, r0
 801c760:	e7dc      	b.n	801c71c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 801c762:	4602      	mov	r2, r0
 801c764:	e7da      	b.n	801c71c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 801c766:	4606      	mov	r6, r0
 801c768:	e7e3      	b.n	801c732 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 801c76a:	4606      	mov	r6, r0
 801c76c:	e7e9      	b.n	801c742 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801c76e:	2c0f      	cmp	r4, #15
 801c770:	d8eb      	bhi.n	801c74a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801c772:	4606      	mov	r6, r0
 801c774:	fb14 f307 	smulbb	r3, r4, r7
 801c778:	ea4f 450c 	mov.w	r5, ip, lsl #16
 801c77c:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801c780:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801c784:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801c788:	10db      	asrs	r3, r3, #3
 801c78a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801c78e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c792:	ea45 0c0c 	orr.w	ip, r5, ip
 801c796:	f1c7 0510 	rsb	r5, r7, #16
 801c79a:	ea4e 0202 	orr.w	r2, lr, r2
 801c79e:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 801c7a2:	1b2d      	subs	r5, r5, r4
 801c7a4:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801c7a8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801c7ac:	4354      	muls	r4, r2
 801c7ae:	fb05 450c 	mla	r5, r5, ip, r4
 801c7b2:	0404      	lsls	r4, r0, #16
 801c7b4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801c7b8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c7bc:	4320      	orrs	r0, r4
 801c7be:	fb03 5400 	mla	r4, r3, r0, r5
 801c7c2:	0430      	lsls	r0, r6, #16
 801c7c4:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801c7c8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c7cc:	4330      	orrs	r0, r6
 801c7ce:	fb07 4000 	mla	r0, r7, r0, r4
 801c7d2:	0d43      	lsrs	r3, r0, #21
 801c7d4:	0940      	lsrs	r0, r0, #5
 801c7d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c7da:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801c7de:	4318      	orrs	r0, r3
 801c7e0:	8008      	strh	r0, [r1, #0]
 801c7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7e6:	bf00      	nop
 801c7e8:	08023551 	.word	0x08023551
 801c7ec:	08023bc7 	.word	0x08023bc7
 801c7f0:	080235d5 	.word	0x080235d5

0801c7f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7f8:	ed2d 8b08 	vpush	{d8-d11}
 801c7fc:	b08f      	sub	sp, #60	; 0x3c
 801c7fe:	461d      	mov	r5, r3
 801c800:	eeb0 aa40 	vmov.f32	s20, s0
 801c804:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c806:	eef0 9a60 	vmov.f32	s19, s1
 801c80a:	9107      	str	r1, [sp, #28]
 801c80c:	eeb0 9a41 	vmov.f32	s18, s2
 801c810:	6859      	ldr	r1, [r3, #4]
 801c812:	eeb0 8a62 	vmov.f32	s16, s5
 801c816:	920c      	str	r2, [sp, #48]	; 0x30
 801c818:	eef0 8a43 	vmov.f32	s17, s6
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	eef0 ba44 	vmov.f32	s23, s8
 801c822:	eeb0 ba64 	vmov.f32	s22, s9
 801c826:	900d      	str	r0, [sp, #52]	; 0x34
 801c828:	eef0 aa45 	vmov.f32	s21, s10
 801c82c:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 801c830:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 801c834:	fb01 2707 	mla	r7, r1, r7, r2
 801c838:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801c83c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c83e:	f8d3 8000 	ldr.w	r8, [r3]
 801c842:	9b07      	ldr	r3, [sp, #28]
 801c844:	2b00      	cmp	r3, #0
 801c846:	dc03      	bgt.n	801c850 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	f340 8182 	ble.w	801cb54 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c850:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c852:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c856:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c85a:	1e48      	subs	r0, r1, #1
 801c85c:	f102 3cff 	add.w	ip, r2, #4294967295
 801c860:	2d00      	cmp	r5, #0
 801c862:	f340 809b 	ble.w	801c99c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 801c866:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801c86a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c86e:	d406      	bmi.n	801c87e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c870:	4586      	cmp	lr, r0
 801c872:	da04      	bge.n	801c87e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c874:	2b00      	cmp	r3, #0
 801c876:	db02      	blt.n	801c87e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c878:	4563      	cmp	r3, ip
 801c87a:	f2c0 8090 	blt.w	801c99e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c87e:	f11e 0e01 	adds.w	lr, lr, #1
 801c882:	f100 8084 	bmi.w	801c98e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c886:	4571      	cmp	r1, lr
 801c888:	f2c0 8081 	blt.w	801c98e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c88c:	3301      	adds	r3, #1
 801c88e:	d47e      	bmi.n	801c98e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c890:	429a      	cmp	r2, r3
 801c892:	db7c      	blt.n	801c98e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c894:	46aa      	mov	sl, r5
 801c896:	46b9      	mov	r9, r7
 801c898:	f1ba 0f00 	cmp.w	sl, #0
 801c89c:	f340 8099 	ble.w	801c9d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801c8a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c8a2:	1421      	asrs	r1, r4, #16
 801c8a4:	ea4f 4026 	mov.w	r0, r6, asr #16
 801c8a8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801c8ac:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801c8b0:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801c8b4:	f100 80d1 	bmi.w	801ca5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801c8b8:	f10e 3bff 	add.w	fp, lr, #4294967295
 801c8bc:	4559      	cmp	r1, fp
 801c8be:	f280 80cc 	bge.w	801ca5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801c8c2:	2800      	cmp	r0, #0
 801c8c4:	f2c0 80c9 	blt.w	801ca5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801c8c8:	f103 3bff 	add.w	fp, r3, #4294967295
 801c8cc:	4558      	cmp	r0, fp
 801c8ce:	f280 80c4 	bge.w	801ca5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801c8d2:	fa0f fe8e 	sxth.w	lr, lr
 801c8d6:	fb00 110e 	mla	r1, r0, lr, r1
 801c8da:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801c8de:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 801c8e2:	8841      	ldrh	r1, [r0, #2]
 801c8e4:	f1bc 0f00 	cmp.w	ip, #0
 801c8e8:	d00b      	beq.n	801c902 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801c8ea:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 801c8ee:	3b01      	subs	r3, #1
 801c8f0:	005b      	lsls	r3, r3, #1
 801c8f2:	3302      	adds	r3, #2
 801c8f4:	eb00 0e03 	add.w	lr, r0, r3
 801c8f8:	5ac3      	ldrh	r3, [r0, r3]
 801c8fa:	9308      	str	r3, [sp, #32]
 801c8fc:	f8be 3002 	ldrh.w	r3, [lr, #2]
 801c900:	9309      	str	r3, [sp, #36]	; 0x24
 801c902:	ea4f 400b 	mov.w	r0, fp, lsl #16
 801c906:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801c90a:	fb12 f30c 	smulbb	r3, r2, ip
 801c90e:	f1cc 0e10 	rsb	lr, ip, #16
 801c912:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c916:	10db      	asrs	r3, r3, #3
 801c918:	ebae 0e02 	sub.w	lr, lr, r2
 801c91c:	ea40 000b 	orr.w	r0, r0, fp
 801c920:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801c924:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c928:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801c92c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801c930:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801c934:	ea4b 0101 	orr.w	r1, fp, r1
 801c938:	4351      	muls	r1, r2
 801c93a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c93c:	fb0e 1e00 	mla	lr, lr, r0, r1
 801c940:	0410      	lsls	r0, r2, #16
 801c942:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c946:	9908      	ldr	r1, [sp, #32]
 801c948:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c94c:	4310      	orrs	r0, r2
 801c94e:	9a08      	ldr	r2, [sp, #32]
 801c950:	0412      	lsls	r2, r2, #16
 801c952:	fb03 e000 	mla	r0, r3, r0, lr
 801c956:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801c95a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801c95e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c962:	ea42 020e 	orr.w	r2, r2, lr
 801c966:	fb03 0302 	mla	r3, r3, r2, r0
 801c96a:	0d5a      	lsrs	r2, r3, #21
 801c96c:	095b      	lsrs	r3, r3, #5
 801c96e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c972:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c976:	4313      	orrs	r3, r2
 801c978:	f8a9 3000 	strh.w	r3, [r9]
 801c97c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c97e:	f109 0902 	add.w	r9, r9, #2
 801c982:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c986:	441c      	add	r4, r3
 801c988:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c98a:	441e      	add	r6, r3
 801c98c:	e784      	b.n	801c898 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801c98e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c990:	3d01      	subs	r5, #1
 801c992:	3702      	adds	r7, #2
 801c994:	441c      	add	r4, r3
 801c996:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c998:	441e      	add	r6, r3
 801c99a:	e761      	b.n	801c860 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c99c:	d01d      	beq.n	801c9da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801c99e:	1e6b      	subs	r3, r5, #1
 801c9a0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801c9a2:	fb00 4003 	mla	r0, r0, r3, r4
 801c9a6:	1400      	asrs	r0, r0, #16
 801c9a8:	f53f af74 	bmi.w	801c894 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c9ac:	3901      	subs	r1, #1
 801c9ae:	4288      	cmp	r0, r1
 801c9b0:	f6bf af70 	bge.w	801c894 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c9b4:	9924      	ldr	r1, [sp, #144]	; 0x90
 801c9b6:	fb01 6303 	mla	r3, r1, r3, r6
 801c9ba:	141b      	asrs	r3, r3, #16
 801c9bc:	f53f af6a 	bmi.w	801c894 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c9c0:	3a01      	subs	r2, #1
 801c9c2:	4293      	cmp	r3, r2
 801c9c4:	f6bf af66 	bge.w	801c894 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c9c8:	46a9      	mov	r9, r5
 801c9ca:	46ba      	mov	sl, r7
 801c9cc:	f1b9 0f00 	cmp.w	r9, #0
 801c9d0:	dc5b      	bgt.n	801ca8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c9d2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801c9d6:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 801c9da:	9b07      	ldr	r3, [sp, #28]
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	f340 80b9 	ble.w	801cb54 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c9e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c9e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c9e8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c9ec:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c9f0:	eef0 6a48 	vmov.f32	s13, s16
 801c9f4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c9f8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c9fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ca00:	ee16 4a90 	vmov	r4, s13
 801ca04:	eef0 6a68 	vmov.f32	s13, s17
 801ca08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ca0c:	ee16 6a90 	vmov	r6, s13
 801ca10:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ca14:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ca18:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ca1c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ca20:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ca24:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ca28:	ee18 2a10 	vmov	r2, s16
 801ca2c:	eeb0 8a47 	vmov.f32	s16, s14
 801ca30:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca34:	ee18 2a90 	vmov	r2, s17
 801ca38:	9323      	str	r3, [sp, #140]	; 0x8c
 801ca3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ca3c:	eef0 8a67 	vmov.f32	s17, s15
 801ca40:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca44:	9324      	str	r3, [sp, #144]	; 0x90
 801ca46:	9b07      	ldr	r3, [sp, #28]
 801ca48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ca4a:	3b01      	subs	r3, #1
 801ca4c:	9307      	str	r3, [sp, #28]
 801ca4e:	bf08      	it	eq
 801ca50:	4615      	moveq	r5, r2
 801ca52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ca54:	bf18      	it	ne
 801ca56:	461d      	movne	r5, r3
 801ca58:	e6f3      	b.n	801c842 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801ca5a:	f111 0b01 	adds.w	fp, r1, #1
 801ca5e:	d48d      	bmi.n	801c97c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801ca60:	45de      	cmp	lr, fp
 801ca62:	db8b      	blt.n	801c97c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801ca64:	f110 0b01 	adds.w	fp, r0, #1
 801ca68:	d488      	bmi.n	801c97c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801ca6a:	455b      	cmp	r3, fp
 801ca6c:	db86      	blt.n	801c97c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801ca6e:	b21b      	sxth	r3, r3
 801ca70:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801ca74:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 801ca78:	9300      	str	r3, [sp, #0]
 801ca7a:	4642      	mov	r2, r8
 801ca7c:	fa0f f38e 	sxth.w	r3, lr
 801ca80:	4649      	mov	r1, r9
 801ca82:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ca84:	f7ff fe2a 	bl	801c6dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 801ca88:	e778      	b.n	801c97c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801ca8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ca8c:	1420      	asrs	r0, r4, #16
 801ca8e:	1431      	asrs	r1, r6, #16
 801ca90:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801ca94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ca98:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801ca9c:	fb03 0101 	mla	r1, r3, r1, r0
 801caa0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801caa4:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 801caa8:	8841      	ldrh	r1, [r0, #2]
 801caaa:	f1be 0f00 	cmp.w	lr, #0
 801caae:	d00b      	beq.n	801cac8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801cab0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801cab4:	3b01      	subs	r3, #1
 801cab6:	005b      	lsls	r3, r3, #1
 801cab8:	3302      	adds	r3, #2
 801caba:	eb00 0b03 	add.w	fp, r0, r3
 801cabe:	5ac3      	ldrh	r3, [r0, r3]
 801cac0:	930a      	str	r3, [sp, #40]	; 0x28
 801cac2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801cac6:	930b      	str	r3, [sp, #44]	; 0x2c
 801cac8:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801cacc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801cad0:	fb12 f30e 	smulbb	r3, r2, lr
 801cad4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801cad8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801cadc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801cae0:	10db      	asrs	r3, r3, #3
 801cae2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801cae6:	ea40 000c 	orr.w	r0, r0, ip
 801caea:	f1ce 0c10 	rsb	ip, lr, #16
 801caee:	ea4b 0101 	orr.w	r1, fp, r1
 801caf2:	f109 39ff 	add.w	r9, r9, #4294967295
 801caf6:	ebac 0c02 	sub.w	ip, ip, r2
 801cafa:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801cafe:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801cb02:	4351      	muls	r1, r2
 801cb04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cb06:	fb0c 1c00 	mla	ip, ip, r0, r1
 801cb0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cb0c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801cb10:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 801cb14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cb16:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801cb1a:	0412      	lsls	r2, r2, #16
 801cb1c:	ea4b 0000 	orr.w	r0, fp, r0
 801cb20:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 801cb24:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801cb28:	fb03 c000 	mla	r0, r3, r0, ip
 801cb2c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801cb30:	ea42 0b0b 	orr.w	fp, r2, fp
 801cb34:	fb03 000b 	mla	r0, r3, fp, r0
 801cb38:	0d43      	lsrs	r3, r0, #21
 801cb3a:	0940      	lsrs	r0, r0, #5
 801cb3c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cb40:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801cb44:	4318      	orrs	r0, r3
 801cb46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cb48:	441c      	add	r4, r3
 801cb4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cb4c:	f82a 0b02 	strh.w	r0, [sl], #2
 801cb50:	441e      	add	r6, r3
 801cb52:	e73b      	b.n	801c9cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801cb54:	b00f      	add	sp, #60	; 0x3c
 801cb56:	ecbd 8b08 	vpop	{d8-d11}
 801cb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801cb60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 801cb60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb64:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801cb68:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801cb6c:	fb04 5603 	mla	r6, r4, r3, r5
 801cb70:	2c00      	cmp	r4, #0
 801cb72:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801cb76:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801cb7a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801cb7e:	db36      	blt.n	801cbee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 801cb80:	45a6      	cmp	lr, r4
 801cb82:	dd34      	ble.n	801cbee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 801cb84:	2d00      	cmp	r5, #0
 801cb86:	db30      	blt.n	801cbea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 801cb88:	42ab      	cmp	r3, r5
 801cb8a:	dd2e      	ble.n	801cbea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 801cb8c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801cb90:	1c6e      	adds	r6, r5, #1
 801cb92:	d42f      	bmi.n	801cbf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 801cb94:	42b3      	cmp	r3, r6
 801cb96:	dd2d      	ble.n	801cbf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 801cb98:	b370      	cbz	r0, 801cbf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801cb9a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801cb9e:	3401      	adds	r4, #1
 801cba0:	d42e      	bmi.n	801cc00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 801cba2:	45a6      	cmp	lr, r4
 801cba4:	dd2c      	ble.n	801cc00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 801cba6:	b377      	cbz	r7, 801cc06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 801cba8:	2d00      	cmp	r5, #0
 801cbaa:	db27      	blt.n	801cbfc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 801cbac:	42ab      	cmp	r3, r5
 801cbae:	dd25      	ble.n	801cbfc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 801cbb0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801cbb4:	3501      	adds	r5, #1
 801cbb6:	d429      	bmi.n	801cc0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 801cbb8:	42ab      	cmp	r3, r5
 801cbba:	dd27      	ble.n	801cc0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 801cbbc:	b340      	cbz	r0, 801cc10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 801cbbe:	3301      	adds	r3, #1
 801cbc0:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801cbc4:	280f      	cmp	r0, #15
 801cbc6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801cbca:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801cbce:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801cbd2:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801cbd6:	d801      	bhi.n	801cbdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 801cbd8:	2f0f      	cmp	r7, #15
 801cbda:	d91b      	bls.n	801cc14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 801cbdc:	4b8d      	ldr	r3, [pc, #564]	; (801ce14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 801cbde:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801cbe2:	4a8d      	ldr	r2, [pc, #564]	; (801ce18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 801cbe4:	488d      	ldr	r0, [pc, #564]	; (801ce1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 801cbe6:	f002 fa57 	bl	801f098 <__assert_func>
 801cbea:	2200      	movs	r2, #0
 801cbec:	e7d0      	b.n	801cb90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 801cbee:	2600      	movs	r6, #0
 801cbf0:	4632      	mov	r2, r6
 801cbf2:	e7d4      	b.n	801cb9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 801cbf4:	2600      	movs	r6, #0
 801cbf6:	e7d2      	b.n	801cb9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 801cbf8:	4606      	mov	r6, r0
 801cbfa:	e7d0      	b.n	801cb9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 801cbfc:	2400      	movs	r4, #0
 801cbfe:	e7d9      	b.n	801cbb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 801cc00:	2300      	movs	r3, #0
 801cc02:	461c      	mov	r4, r3
 801cc04:	e7de      	b.n	801cbc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 801cc06:	463b      	mov	r3, r7
 801cc08:	463c      	mov	r4, r7
 801cc0a:	e7db      	b.n	801cbc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 801cc0c:	2300      	movs	r3, #0
 801cc0e:	e7d9      	b.n	801cbc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 801cc10:	4603      	mov	r3, r0
 801cc12:	e7d7      	b.n	801cbc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 801cc14:	b280      	uxth	r0, r0
 801cc16:	b2bf      	uxth	r7, r7
 801cc18:	fb07 fe00 	mul.w	lr, r7, r0
 801cc1c:	0100      	lsls	r0, r0, #4
 801cc1e:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801cc22:	eba0 0c0e 	sub.w	ip, r0, lr
 801cc26:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801cc2a:	b2bf      	uxth	r7, r7
 801cc2c:	fa1f fc8c 	uxth.w	ip, ip
 801cc30:	1bed      	subs	r5, r5, r7
 801cc32:	fb0a f00c 	mul.w	r0, sl, ip
 801cc36:	b2ad      	uxth	r5, r5
 801cc38:	fb0b 0005 	mla	r0, fp, r5, r0
 801cc3c:	fb07 0009 	mla	r0, r7, r9, r0
 801cc40:	fb0e 0008 	mla	r0, lr, r8, r0
 801cc44:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801cc48:	9001      	str	r0, [sp, #4]
 801cc4a:	2800      	cmp	r0, #0
 801cc4c:	f000 80de 	beq.w	801ce0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 801cc50:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801cc54:	d018      	beq.n	801cc88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 801cc56:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801cc5a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801cc5e:	fb0b f000 	mul.w	r0, fp, r0
 801cc62:	fb0b fb02 	mul.w	fp, fp, r2
 801cc66:	0a02      	lsrs	r2, r0, #8
 801cc68:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801cc6c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801cc70:	4402      	add	r2, r0
 801cc72:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801cc76:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801cc7a:	0a12      	lsrs	r2, r2, #8
 801cc7c:	0a00      	lsrs	r0, r0, #8
 801cc7e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801cc82:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801cc86:	4302      	orrs	r2, r0
 801cc88:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801cc8c:	d01a      	beq.n	801ccc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 801cc8e:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801cc92:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801cc96:	fb0a f000 	mul.w	r0, sl, r0
 801cc9a:	fb0a fa06 	mul.w	sl, sl, r6
 801cc9e:	0a06      	lsrs	r6, r0, #8
 801cca0:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801cca4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801cca8:	4406      	add	r6, r0
 801ccaa:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801ccae:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801ccb2:	0a36      	lsrs	r6, r6, #8
 801ccb4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ccb8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ccbc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ccc0:	ea46 060a 	orr.w	r6, r6, sl
 801ccc4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ccc8:	d01b      	beq.n	801cd02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 801ccca:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801ccce:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ccd2:	fb09 fa0a 	mul.w	sl, r9, sl
 801ccd6:	fb09 f004 	mul.w	r0, r9, r4
 801ccda:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801ccde:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801cce2:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801cce6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ccea:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801ccee:	4454      	add	r4, sl
 801ccf0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ccf4:	0a24      	lsrs	r4, r4, #8
 801ccf6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801ccfa:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ccfe:	ea44 0409 	orr.w	r4, r4, r9
 801cd02:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801cd06:	d01b      	beq.n	801cd40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 801cd08:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801cd0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cd10:	fb08 f909 	mul.w	r9, r8, r9
 801cd14:	fb08 f003 	mul.w	r0, r8, r3
 801cd18:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801cd1c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801cd20:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801cd24:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cd28:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801cd2c:	444b      	add	r3, r9
 801cd2e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801cd32:	0a1b      	lsrs	r3, r3, #8
 801cd34:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801cd38:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cd3c:	ea43 0308 	orr.w	r3, r3, r8
 801cd40:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801cd44:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801cd48:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 801cd4c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801cd50:	fb0c f808 	mul.w	r8, ip, r8
 801cd54:	8808      	ldrh	r0, [r1, #0]
 801cd56:	fb0c f606 	mul.w	r6, ip, r6
 801cd5a:	fb05 8909 	mla	r9, r5, r9, r8
 801cd5e:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 801cd62:	fb05 6502 	mla	r5, r5, r2, r6
 801cd66:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801cd6a:	fb07 9908 	mla	r9, r7, r8, r9
 801cd6e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801cd72:	fb07 5704 	mla	r7, r7, r4, r5
 801cd76:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801cd7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cd7e:	b2b6      	uxth	r6, r6
 801cd80:	fb0e 9808 	mla	r8, lr, r8, r9
 801cd84:	9a01      	ldr	r2, [sp, #4]
 801cd86:	fb0e 7e03 	mla	lr, lr, r3, r7
 801cd8a:	1205      	asrs	r5, r0, #8
 801cd8c:	4372      	muls	r2, r6
 801cd8e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801cd92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cd96:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801cd9a:	1c53      	adds	r3, r2, #1
 801cd9c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 801cda0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801cda4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801cda8:	ea48 0e0e 	orr.w	lr, r8, lr
 801cdac:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801cdb0:	ea4f 421e 	mov.w	r2, lr, lsr #16
 801cdb4:	f3ce 2407 	ubfx	r4, lr, #8, #8
 801cdb8:	b2db      	uxtb	r3, r3
 801cdba:	fb12 f206 	smulbb	r2, r2, r6
 801cdbe:	fa5f fe8e 	uxtb.w	lr, lr
 801cdc2:	fb14 f406 	smulbb	r4, r4, r6
 801cdc6:	fb05 2503 	mla	r5, r5, r3, r2
 801cdca:	10c2      	asrs	r2, r0, #3
 801cdcc:	fb1e fe06 	smulbb	lr, lr, r6
 801cdd0:	00c0      	lsls	r0, r0, #3
 801cdd2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801cdd6:	b2ad      	uxth	r5, r5
 801cdd8:	b2c0      	uxtb	r0, r0
 801cdda:	fb02 4203 	mla	r2, r2, r3, r4
 801cdde:	fb00 e303 	mla	r3, r0, r3, lr
 801cde2:	b294      	uxth	r4, r2
 801cde4:	b298      	uxth	r0, r3
 801cde6:	1c6b      	adds	r3, r5, #1
 801cde8:	1c62      	adds	r2, r4, #1
 801cdea:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801cdee:	1c43      	adds	r3, r0, #1
 801cdf0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801cdf4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801cdf8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801cdfc:	0952      	lsrs	r2, r2, #5
 801cdfe:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ce02:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ce06:	432b      	orrs	r3, r5
 801ce08:	4313      	orrs	r3, r2
 801ce0a:	800b      	strh	r3, [r1, #0]
 801ce0c:	b003      	add	sp, #12
 801ce0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce12:	bf00      	nop
 801ce14:	08023551 	.word	0x08023551
 801ce18:	08023b1e 	.word	0x08023b1e
 801ce1c:	080235d5 	.word	0x080235d5

0801ce20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce24:	ed2d 8b08 	vpush	{d8-d11}
 801ce28:	b09d      	sub	sp, #116	; 0x74
 801ce2a:	eeb0 aa40 	vmov.f32	s20, s0
 801ce2e:	eef0 9a60 	vmov.f32	s19, s1
 801ce32:	9219      	str	r2, [sp, #100]	; 0x64
 801ce34:	eeb0 9a41 	vmov.f32	s18, s2
 801ce38:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801ce3a:	eeb0 8a62 	vmov.f32	s16, s5
 801ce3e:	9307      	str	r3, [sp, #28]
 801ce40:	eef0 8a43 	vmov.f32	s17, s6
 801ce44:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801ce48:	eef0 ba44 	vmov.f32	s23, s8
 801ce4c:	901b      	str	r0, [sp, #108]	; 0x6c
 801ce4e:	eeb0 ba64 	vmov.f32	s22, s9
 801ce52:	931a      	str	r3, [sp, #104]	; 0x68
 801ce54:	eef0 aa45 	vmov.f32	s21, s10
 801ce58:	6850      	ldr	r0, [r2, #4]
 801ce5a:	9117      	str	r1, [sp, #92]	; 0x5c
 801ce5c:	6812      	ldr	r2, [r2, #0]
 801ce5e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801ce62:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 801ce66:	fb00 1303 	mla	r3, r0, r3, r1
 801ce6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ce6e:	930a      	str	r3, [sp, #40]	; 0x28
 801ce70:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	9310      	str	r3, [sp, #64]	; 0x40
 801ce76:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801ce7a:	930b      	str	r3, [sp, #44]	; 0x2c
 801ce7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	dc03      	bgt.n	801ce8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ce82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	f340 8375 	ble.w	801d574 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 801ce8a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801ce8c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ce90:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ce94:	1e48      	subs	r0, r1, #1
 801ce96:	1e57      	subs	r7, r2, #1
 801ce98:	9b07      	ldr	r3, [sp, #28]
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	f340 818e 	ble.w	801d1bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 801cea0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801cea4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cea8:	d406      	bmi.n	801ceb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ceaa:	4584      	cmp	ip, r0
 801ceac:	da04      	bge.n	801ceb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	db02      	blt.n	801ceb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ceb2:	42bb      	cmp	r3, r7
 801ceb4:	f2c0 8183 	blt.w	801d1be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 801ceb8:	f11c 0c01 	adds.w	ip, ip, #1
 801cebc:	f100 8173 	bmi.w	801d1a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801cec0:	4561      	cmp	r1, ip
 801cec2:	f2c0 8170 	blt.w	801d1a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801cec6:	3301      	adds	r3, #1
 801cec8:	f100 816d 	bmi.w	801d1a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801cecc:	429a      	cmp	r2, r3
 801cece:	f2c0 816a 	blt.w	801d1a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801ced2:	9b07      	ldr	r3, [sp, #28]
 801ced4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ced6:	9318      	str	r3, [sp, #96]	; 0x60
 801ced8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	f340 818c 	ble.w	801d1f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 801cee0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801cee2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801cee6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801cee8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801ceec:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801cef0:	1422      	asrs	r2, r4, #16
 801cef2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801cef6:	689b      	ldr	r3, [r3, #8]
 801cef8:	f100 81cd 	bmi.w	801d296 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801cefc:	f103 38ff 	add.w	r8, r3, #4294967295
 801cf00:	4542      	cmp	r2, r8
 801cf02:	f280 81c8 	bge.w	801d296 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801cf06:	f1bc 0f00 	cmp.w	ip, #0
 801cf0a:	f2c0 81c4 	blt.w	801d296 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801cf0e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801cf12:	45c4      	cmp	ip, r8
 801cf14:	f280 81bf 	bge.w	801d296 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801cf18:	b21b      	sxth	r3, r3
 801cf1a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801cf1c:	fb0c 2203 	mla	r2, ip, r3, r2
 801cf20:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 801cf24:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801cf28:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801cf2c:	2800      	cmp	r0, #0
 801cf2e:	f000 81a9 	beq.w	801d284 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 801cf32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801cf36:	950c      	str	r5, [sp, #48]	; 0x30
 801cf38:	0e2d      	lsrs	r5, r5, #24
 801cf3a:	9513      	str	r5, [sp, #76]	; 0x4c
 801cf3c:	b181      	cbz	r1, 801cf60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801cf3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801cf42:	3b01      	subs	r3, #1
 801cf44:	009b      	lsls	r3, r3, #2
 801cf46:	3304      	adds	r3, #4
 801cf48:	eb08 0c03 	add.w	ip, r8, r3
 801cf4c:	f858 3003 	ldr.w	r3, [r8, r3]
 801cf50:	9308      	str	r3, [sp, #32]
 801cf52:	0e1b      	lsrs	r3, r3, #24
 801cf54:	9311      	str	r3, [sp, #68]	; 0x44
 801cf56:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801cf5a:	930d      	str	r3, [sp, #52]	; 0x34
 801cf5c:	0e1b      	lsrs	r3, r3, #24
 801cf5e:	9314      	str	r3, [sp, #80]	; 0x50
 801cf60:	b280      	uxth	r0, r0
 801cf62:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cf64:	b289      	uxth	r1, r1
 801cf66:	fb00 f901 	mul.w	r9, r0, r1
 801cf6a:	0100      	lsls	r0, r0, #4
 801cf6c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cf70:	eba0 0809 	sub.w	r8, r0, r9
 801cf74:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801cf78:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cf7a:	b289      	uxth	r1, r1
 801cf7c:	fa1f f888 	uxth.w	r8, r8
 801cf80:	1a5b      	subs	r3, r3, r1
 801cf82:	fb08 f000 	mul.w	r0, r8, r0
 801cf86:	b29b      	uxth	r3, r3
 801cf88:	fb03 000e 	mla	r0, r3, lr, r0
 801cf8c:	fb01 0005 	mla	r0, r1, r5, r0
 801cf90:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801cf92:	fb09 0005 	mla	r0, r9, r5, r0
 801cf96:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801cf9a:	2800      	cmp	r0, #0
 801cf9c:	f000 80fa 	beq.w	801d194 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801cfa0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801cfa4:	d01b      	beq.n	801cfde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801cfa6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801cfaa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801cfae:	fb0e fa0a 	mul.w	sl, lr, sl
 801cfb2:	fb0e fe02 	mul.w	lr, lr, r2
 801cfb6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801cfba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801cfbe:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801cfc2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801cfc6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801cfca:	4452      	add	r2, sl
 801cfcc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cfd0:	0a12      	lsrs	r2, r2, #8
 801cfd2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801cfd6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801cfda:	ea42 020c 	orr.w	r2, r2, ip
 801cfde:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cfe0:	2dff      	cmp	r5, #255	; 0xff
 801cfe2:	d021      	beq.n	801d028 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801cfe4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cfe6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801cfea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cfec:	fb05 fb0b 	mul.w	fp, r5, fp
 801cff0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cff2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801cff6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cff8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801cffc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d000:	fb05 fa0a 	mul.w	sl, r5, sl
 801d004:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d008:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d00c:	44de      	add	lr, fp
 801d00e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d012:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d016:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d01a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d01e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d022:	ea4e 050a 	orr.w	r5, lr, sl
 801d026:	950c      	str	r5, [sp, #48]	; 0x30
 801d028:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d02a:	2dff      	cmp	r5, #255	; 0xff
 801d02c:	d021      	beq.n	801d072 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801d02e:	9d08      	ldr	r5, [sp, #32]
 801d030:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801d034:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d036:	fb05 fb0b 	mul.w	fp, r5, fp
 801d03a:	9d08      	ldr	r5, [sp, #32]
 801d03c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801d040:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d042:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d046:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d04a:	fb05 fa0a 	mul.w	sl, r5, sl
 801d04e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d052:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d056:	44de      	add	lr, fp
 801d058:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d05c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d060:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d064:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d068:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d06c:	ea4e 050a 	orr.w	r5, lr, sl
 801d070:	9508      	str	r5, [sp, #32]
 801d072:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d074:	2dff      	cmp	r5, #255	; 0xff
 801d076:	d021      	beq.n	801d0bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801d078:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d07a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801d07e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d080:	fb05 fb0b 	mul.w	fp, r5, fp
 801d084:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d086:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801d08a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d08c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d090:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d094:	fb05 fa0a 	mul.w	sl, r5, sl
 801d098:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d09c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d0a0:	44de      	add	lr, fp
 801d0a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d0a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d0aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d0ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d0b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d0b6:	ea4e 050a 	orr.w	r5, lr, sl
 801d0ba:	950d      	str	r5, [sp, #52]	; 0x34
 801d0bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d0be:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801d0c2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d0c6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801d0ca:	9d08      	ldr	r5, [sp, #32]
 801d0cc:	fb08 fc0c 	mul.w	ip, r8, ip
 801d0d0:	fb03 cc0e 	mla	ip, r3, lr, ip
 801d0d4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801d0d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d0da:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d0de:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801d0e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d0e4:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d0e8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801d0ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d0ee:	fb08 f80e 	mul.w	r8, r8, lr
 801d0f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d0f6:	fb03 8202 	mla	r2, r3, r2, r8
 801d0fa:	9b08      	ldr	r3, [sp, #32]
 801d0fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d100:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801d104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d106:	fb01 220a 	mla	r2, r1, sl, r2
 801d10a:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801d10e:	883b      	ldrh	r3, [r7, #0]
 801d110:	fb09 2901 	mla	r9, r9, r1, r2
 801d114:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d116:	1219      	asrs	r1, r3, #8
 801d118:	4342      	muls	r2, r0
 801d11a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d11e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d122:	1c50      	adds	r0, r2, #1
 801d124:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d128:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801d12c:	ea4c 0c09 	orr.w	ip, ip, r9
 801d130:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d134:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801d138:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801d13c:	fa5f fc8c 	uxtb.w	ip, ip
 801d140:	fb12 f205 	smulbb	r2, r2, r5
 801d144:	b2c0      	uxtb	r0, r0
 801d146:	fb1c fc05 	smulbb	ip, ip, r5
 801d14a:	fb01 2100 	mla	r1, r1, r0, r2
 801d14e:	10da      	asrs	r2, r3, #3
 801d150:	fb1e fe05 	smulbb	lr, lr, r5
 801d154:	00db      	lsls	r3, r3, #3
 801d156:	b289      	uxth	r1, r1
 801d158:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d15c:	b2db      	uxtb	r3, r3
 801d15e:	fb02 e200 	mla	r2, r2, r0, lr
 801d162:	fb03 c300 	mla	r3, r3, r0, ip
 801d166:	b292      	uxth	r2, r2
 801d168:	fa1f fc83 	uxth.w	ip, r3
 801d16c:	1c4b      	adds	r3, r1, #1
 801d16e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d172:	f10c 0301 	add.w	r3, ip, #1
 801d176:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801d17a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d17e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d182:	430b      	orrs	r3, r1
 801d184:	1c51      	adds	r1, r2, #1
 801d186:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d18a:	0952      	lsrs	r2, r2, #5
 801d18c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d190:	4313      	orrs	r3, r2
 801d192:	803b      	strh	r3, [r7, #0]
 801d194:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801d196:	3702      	adds	r7, #2
 801d198:	441c      	add	r4, r3
 801d19a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801d19c:	441e      	add	r6, r3
 801d19e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d1a0:	3b01      	subs	r3, #1
 801d1a2:	9318      	str	r3, [sp, #96]	; 0x60
 801d1a4:	e698      	b.n	801ced8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801d1a6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801d1a8:	441c      	add	r4, r3
 801d1aa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801d1ac:	441e      	add	r6, r3
 801d1ae:	9b07      	ldr	r3, [sp, #28]
 801d1b0:	3b01      	subs	r3, #1
 801d1b2:	9307      	str	r3, [sp, #28]
 801d1b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d1b6:	3302      	adds	r3, #2
 801d1b8:	930a      	str	r3, [sp, #40]	; 0x28
 801d1ba:	e66d      	b.n	801ce98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d1bc:	d023      	beq.n	801d206 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801d1be:	9b07      	ldr	r3, [sp, #28]
 801d1c0:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801d1c2:	3b01      	subs	r3, #1
 801d1c4:	fb00 4003 	mla	r0, r0, r3, r4
 801d1c8:	1400      	asrs	r0, r0, #16
 801d1ca:	f53f ae82 	bmi.w	801ced2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d1ce:	3901      	subs	r1, #1
 801d1d0:	4288      	cmp	r0, r1
 801d1d2:	f6bf ae7e 	bge.w	801ced2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d1d6:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801d1d8:	fb01 6303 	mla	r3, r1, r3, r6
 801d1dc:	141b      	asrs	r3, r3, #16
 801d1de:	f53f ae78 	bmi.w	801ced2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d1e2:	3a01      	subs	r2, #1
 801d1e4:	4293      	cmp	r3, r2
 801d1e6:	f6bf ae74 	bge.w	801ced2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d1ea:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d1ee:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801d1f2:	f1bb 0f00 	cmp.w	fp, #0
 801d1f6:	dc6c      	bgt.n	801d2d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 801d1f8:	9b07      	ldr	r3, [sp, #28]
 801d1fa:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801d1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d200:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801d204:	930a      	str	r3, [sp, #40]	; 0x28
 801d206:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d208:	2b00      	cmp	r3, #0
 801d20a:	f340 81b3 	ble.w	801d574 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 801d20e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d212:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d214:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d218:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d21c:	eef0 6a48 	vmov.f32	s13, s16
 801d220:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d224:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d228:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d22c:	ee16 4a90 	vmov	r4, s13
 801d230:	eef0 6a68 	vmov.f32	s13, s17
 801d234:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d238:	ee16 6a90 	vmov	r6, s13
 801d23c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d240:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d244:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d248:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d24c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d250:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d254:	ee18 2a10 	vmov	r2, s16
 801d258:	eeb0 8a47 	vmov.f32	s16, s14
 801d25c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d260:	ee18 2a90 	vmov	r2, s17
 801d264:	9331      	str	r3, [sp, #196]	; 0xc4
 801d266:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d268:	eef0 8a67 	vmov.f32	s17, s15
 801d26c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d270:	9332      	str	r3, [sp, #200]	; 0xc8
 801d272:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d274:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801d276:	3b01      	subs	r3, #1
 801d278:	9317      	str	r3, [sp, #92]	; 0x5c
 801d27a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d27c:	bf08      	it	eq
 801d27e:	4613      	moveq	r3, r2
 801d280:	9307      	str	r3, [sp, #28]
 801d282:	e5fb      	b.n	801ce7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d284:	2900      	cmp	r1, #0
 801d286:	f43f ae6b 	beq.w	801cf60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801d28a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801d28e:	9308      	str	r3, [sp, #32]
 801d290:	0e1b      	lsrs	r3, r3, #24
 801d292:	9311      	str	r3, [sp, #68]	; 0x44
 801d294:	e664      	b.n	801cf60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801d296:	f112 0801 	adds.w	r8, r2, #1
 801d29a:	f53f af7b 	bmi.w	801d194 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801d29e:	4543      	cmp	r3, r8
 801d2a0:	f6ff af78 	blt.w	801d194 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801d2a4:	f11c 0801 	adds.w	r8, ip, #1
 801d2a8:	f53f af74 	bmi.w	801d194 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801d2ac:	45c6      	cmp	lr, r8
 801d2ae:	f6ff af71 	blt.w	801d194 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801d2b2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801d2b4:	b21b      	sxth	r3, r3
 801d2b6:	9201      	str	r2, [sp, #4]
 801d2b8:	fa0f f28e 	sxth.w	r2, lr
 801d2bc:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801d2c0:	e9cd c002 	strd	ip, r0, [sp, #8]
 801d2c4:	9200      	str	r2, [sp, #0]
 801d2c6:	4639      	mov	r1, r7
 801d2c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d2ca:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801d2cc:	f7ff fc48 	bl	801cb60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 801d2d0:	e760      	b.n	801d194 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801d2d2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801d2d4:	1427      	asrs	r7, r4, #16
 801d2d6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801d2d8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801d2dc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d2e0:	1433      	asrs	r3, r6, #16
 801d2e2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d2e6:	fb01 7303 	mla	r3, r1, r3, r7
 801d2ea:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 801d2ee:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801d2f2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d2f6:	2a00      	cmp	r2, #0
 801d2f8:	f000 8133 	beq.w	801d562 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 801d2fc:	687d      	ldr	r5, [r7, #4]
 801d2fe:	950e      	str	r5, [sp, #56]	; 0x38
 801d300:	0e2d      	lsrs	r5, r5, #24
 801d302:	9515      	str	r5, [sp, #84]	; 0x54
 801d304:	b178      	cbz	r0, 801d326 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 801d306:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801d30a:	3901      	subs	r1, #1
 801d30c:	0089      	lsls	r1, r1, #2
 801d30e:	3104      	adds	r1, #4
 801d310:	eb07 0e01 	add.w	lr, r7, r1
 801d314:	5879      	ldr	r1, [r7, r1]
 801d316:	9109      	str	r1, [sp, #36]	; 0x24
 801d318:	0e09      	lsrs	r1, r1, #24
 801d31a:	9112      	str	r1, [sp, #72]	; 0x48
 801d31c:	f8de 1004 	ldr.w	r1, [lr, #4]
 801d320:	910f      	str	r1, [sp, #60]	; 0x3c
 801d322:	0e09      	lsrs	r1, r1, #24
 801d324:	9116      	str	r1, [sp, #88]	; 0x58
 801d326:	b292      	uxth	r2, r2
 801d328:	9915      	ldr	r1, [sp, #84]	; 0x54
 801d32a:	b280      	uxth	r0, r0
 801d32c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d32e:	fb02 f800 	mul.w	r8, r2, r0
 801d332:	0112      	lsls	r2, r2, #4
 801d334:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801d338:	eba2 0e08 	sub.w	lr, r2, r8
 801d33c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d340:	b280      	uxth	r0, r0
 801d342:	fa1f fe8e 	uxth.w	lr, lr
 801d346:	1a12      	subs	r2, r2, r0
 801d348:	fb0e f101 	mul.w	r1, lr, r1
 801d34c:	b292      	uxth	r2, r2
 801d34e:	fb02 110c 	mla	r1, r2, ip, r1
 801d352:	fb00 1105 	mla	r1, r0, r5, r1
 801d356:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d358:	fb08 1105 	mla	r1, r8, r5, r1
 801d35c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d360:	2900      	cmp	r1, #0
 801d362:	f000 80f5 	beq.w	801d550 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801d366:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d36a:	d019      	beq.n	801d3a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 801d36c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d370:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d374:	fb0c fa0a 	mul.w	sl, ip, sl
 801d378:	fb0c fc03 	mul.w	ip, ip, r3
 801d37c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d380:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d384:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801d388:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d38c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d390:	4453      	add	r3, sl
 801d392:	0a3f      	lsrs	r7, r7, #8
 801d394:	0a1b      	lsrs	r3, r3, #8
 801d396:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d39a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d39e:	433b      	orrs	r3, r7
 801d3a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d3a2:	2dff      	cmp	r5, #255	; 0xff
 801d3a4:	d020      	beq.n	801d3e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 801d3a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d3a8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801d3ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d3ae:	436f      	muls	r7, r5
 801d3b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d3b2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d3b6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801d3ba:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d3bc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d3c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d3c4:	fb05 fa0a 	mul.w	sl, r5, sl
 801d3c8:	44bc      	add	ip, r7
 801d3ca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d3ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d3d2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d3d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d3da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d3de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d3e2:	ea4c 050a 	orr.w	r5, ip, sl
 801d3e6:	950e      	str	r5, [sp, #56]	; 0x38
 801d3e8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d3ea:	2dff      	cmp	r5, #255	; 0xff
 801d3ec:	d020      	beq.n	801d430 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 801d3ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d3f0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801d3f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d3f6:	436f      	muls	r7, r5
 801d3f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d3fa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d3fe:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801d402:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d404:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d408:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d40c:	fb05 fa0a 	mul.w	sl, r5, sl
 801d410:	44bc      	add	ip, r7
 801d412:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d416:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d41a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d41e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d422:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d426:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d42a:	ea4c 050a 	orr.w	r5, ip, sl
 801d42e:	9509      	str	r5, [sp, #36]	; 0x24
 801d430:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d432:	2dff      	cmp	r5, #255	; 0xff
 801d434:	d020      	beq.n	801d478 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 801d436:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d438:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801d43c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d43e:	436f      	muls	r7, r5
 801d440:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d442:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d446:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801d44a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d44c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d450:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d454:	fb05 fa0a 	mul.w	sl, r5, sl
 801d458:	44bc      	add	ip, r7
 801d45a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d45e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d462:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d466:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d46a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d46e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d472:	ea4c 050a 	orr.w	r5, ip, sl
 801d476:	950f      	str	r5, [sp, #60]	; 0x3c
 801d478:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d47a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d47e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d482:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801d486:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d488:	fb0e f707 	mul.w	r7, lr, r7
 801d48c:	fb02 770c 	mla	r7, r2, ip, r7
 801d490:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801d494:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d496:	fb00 770c 	mla	r7, r0, ip, r7
 801d49a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801d49e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d4a0:	fb08 770c 	mla	r7, r8, ip, r7
 801d4a4:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801d4a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d4aa:	fb0e fe0c 	mul.w	lr, lr, ip
 801d4ae:	0a3f      	lsrs	r7, r7, #8
 801d4b0:	fb02 e303 	mla	r3, r2, r3, lr
 801d4b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d4b6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d4ba:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d4be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d4c0:	fb00 330a 	mla	r3, r0, sl, r3
 801d4c4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801d4c8:	f8b9 0000 	ldrh.w	r0, [r9]
 801d4cc:	fb08 3c0c 	mla	ip, r8, ip, r3
 801d4d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d4d2:	1202      	asrs	r2, r0, #8
 801d4d4:	4359      	muls	r1, r3
 801d4d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d4da:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801d4de:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d4e2:	1c4b      	adds	r3, r1, #1
 801d4e4:	ea47 070c 	orr.w	r7, r7, ip
 801d4e8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d4ec:	0c3b      	lsrs	r3, r7, #16
 801d4ee:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d4f2:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801d4f6:	b2ff      	uxtb	r7, r7
 801d4f8:	fb13 f305 	smulbb	r3, r3, r5
 801d4fc:	b2c9      	uxtb	r1, r1
 801d4fe:	fb17 f705 	smulbb	r7, r7, r5
 801d502:	fb02 3201 	mla	r2, r2, r1, r3
 801d506:	10c3      	asrs	r3, r0, #3
 801d508:	fb1c fc05 	smulbb	ip, ip, r5
 801d50c:	00c0      	lsls	r0, r0, #3
 801d50e:	b292      	uxth	r2, r2
 801d510:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801d514:	b2c0      	uxtb	r0, r0
 801d516:	fb03 c301 	mla	r3, r3, r1, ip
 801d51a:	fb00 7001 	mla	r0, r0, r1, r7
 801d51e:	1c51      	adds	r1, r2, #1
 801d520:	b29b      	uxth	r3, r3
 801d522:	b280      	uxth	r0, r0
 801d524:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d528:	f100 0c01 	add.w	ip, r0, #1
 801d52c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801d530:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 801d534:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d538:	ea4c 0202 	orr.w	r2, ip, r2
 801d53c:	f103 0c01 	add.w	ip, r3, #1
 801d540:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801d544:	095b      	lsrs	r3, r3, #5
 801d546:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d54a:	431a      	orrs	r2, r3
 801d54c:	f8a9 2000 	strh.w	r2, [r9]
 801d550:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801d552:	f109 0902 	add.w	r9, r9, #2
 801d556:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d55a:	441c      	add	r4, r3
 801d55c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801d55e:	441e      	add	r6, r3
 801d560:	e647      	b.n	801d1f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 801d562:	2800      	cmp	r0, #0
 801d564:	f43f aedf 	beq.w	801d326 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 801d568:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 801d56c:	9109      	str	r1, [sp, #36]	; 0x24
 801d56e:	0e09      	lsrs	r1, r1, #24
 801d570:	9112      	str	r1, [sp, #72]	; 0x48
 801d572:	e6d8      	b.n	801d326 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 801d574:	b01d      	add	sp, #116	; 0x74
 801d576:	ecbd 8b08 	vpop	{d8-d11}
 801d57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d580 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 801d580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d584:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801d588:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801d58c:	fb04 5603 	mla	r6, r4, r3, r5
 801d590:	2c00      	cmp	r4, #0
 801d592:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801d596:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801d59a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801d59e:	db37      	blt.n	801d610 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 801d5a0:	45a6      	cmp	lr, r4
 801d5a2:	dd35      	ble.n	801d610 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 801d5a4:	2d00      	cmp	r5, #0
 801d5a6:	db31      	blt.n	801d60c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 801d5a8:	42ab      	cmp	r3, r5
 801d5aa:	dd2f      	ble.n	801d60c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 801d5ac:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801d5b0:	1c6e      	adds	r6, r5, #1
 801d5b2:	d430      	bmi.n	801d616 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 801d5b4:	42b3      	cmp	r3, r6
 801d5b6:	dd2e      	ble.n	801d616 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 801d5b8:	b378      	cbz	r0, 801d61a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 801d5ba:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801d5be:	3401      	adds	r4, #1
 801d5c0:	d42f      	bmi.n	801d622 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 801d5c2:	45a6      	cmp	lr, r4
 801d5c4:	dd2d      	ble.n	801d622 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 801d5c6:	b37f      	cbz	r7, 801d628 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 801d5c8:	2d00      	cmp	r5, #0
 801d5ca:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 801d5ce:	db26      	blt.n	801d61e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 801d5d0:	42ab      	cmp	r3, r5
 801d5d2:	dd24      	ble.n	801d61e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 801d5d4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801d5d8:	3501      	adds	r5, #1
 801d5da:	d428      	bmi.n	801d62e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 801d5dc:	42ab      	cmp	r3, r5
 801d5de:	dd26      	ble.n	801d62e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 801d5e0:	b338      	cbz	r0, 801d632 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 801d5e2:	f8de 3004 	ldr.w	r3, [lr, #4]
 801d5e6:	280f      	cmp	r0, #15
 801d5e8:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801d5ec:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801d5f0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801d5f4:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801d5f8:	d801      	bhi.n	801d5fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 801d5fa:	2f0f      	cmp	r7, #15
 801d5fc:	d91b      	bls.n	801d636 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 801d5fe:	4b87      	ldr	r3, [pc, #540]	; (801d81c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 801d600:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801d604:	4a86      	ldr	r2, [pc, #536]	; (801d820 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 801d606:	4887      	ldr	r0, [pc, #540]	; (801d824 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 801d608:	f001 fd46 	bl	801f098 <__assert_func>
 801d60c:	2200      	movs	r2, #0
 801d60e:	e7cf      	b.n	801d5b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 801d610:	2600      	movs	r6, #0
 801d612:	4632      	mov	r2, r6
 801d614:	e7d3      	b.n	801d5be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 801d616:	2600      	movs	r6, #0
 801d618:	e7d1      	b.n	801d5be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 801d61a:	4606      	mov	r6, r0
 801d61c:	e7cf      	b.n	801d5be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 801d61e:	2400      	movs	r4, #0
 801d620:	e7da      	b.n	801d5d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 801d622:	2300      	movs	r3, #0
 801d624:	461c      	mov	r4, r3
 801d626:	e7de      	b.n	801d5e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 801d628:	463b      	mov	r3, r7
 801d62a:	463c      	mov	r4, r7
 801d62c:	e7db      	b.n	801d5e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 801d62e:	2300      	movs	r3, #0
 801d630:	e7d9      	b.n	801d5e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 801d632:	4603      	mov	r3, r0
 801d634:	e7d7      	b.n	801d5e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 801d636:	b280      	uxth	r0, r0
 801d638:	b2bf      	uxth	r7, r7
 801d63a:	fb07 fe00 	mul.w	lr, r7, r0
 801d63e:	0100      	lsls	r0, r0, #4
 801d640:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801d644:	eba0 0c0e 	sub.w	ip, r0, lr
 801d648:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801d64c:	b2bf      	uxth	r7, r7
 801d64e:	fa1f fc8c 	uxth.w	ip, ip
 801d652:	1bed      	subs	r5, r5, r7
 801d654:	fb0c f00a 	mul.w	r0, ip, sl
 801d658:	b2ad      	uxth	r5, r5
 801d65a:	fb0b 0005 	mla	r0, fp, r5, r0
 801d65e:	fb07 0009 	mla	r0, r7, r9, r0
 801d662:	fb0e 0008 	mla	r0, lr, r8, r0
 801d666:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d66a:	9001      	str	r0, [sp, #4]
 801d66c:	2800      	cmp	r0, #0
 801d66e:	f000 80d1 	beq.w	801d814 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 801d672:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d676:	d018      	beq.n	801d6aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 801d678:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801d67c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d680:	fb0b f000 	mul.w	r0, fp, r0
 801d684:	fb0b fb02 	mul.w	fp, fp, r2
 801d688:	0a02      	lsrs	r2, r0, #8
 801d68a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801d68e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d692:	4402      	add	r2, r0
 801d694:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801d698:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801d69c:	0a12      	lsrs	r2, r2, #8
 801d69e:	0a00      	lsrs	r0, r0, #8
 801d6a0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d6a4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d6a8:	4302      	orrs	r2, r0
 801d6aa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d6ae:	d01a      	beq.n	801d6e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 801d6b0:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801d6b4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d6b8:	fb0a f000 	mul.w	r0, sl, r0
 801d6bc:	fb0a fa06 	mul.w	sl, sl, r6
 801d6c0:	0a06      	lsrs	r6, r0, #8
 801d6c2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801d6c6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d6ca:	4406      	add	r6, r0
 801d6cc:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801d6d0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801d6d4:	0a36      	lsrs	r6, r6, #8
 801d6d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d6da:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d6de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d6e2:	ea46 060a 	orr.w	r6, r6, sl
 801d6e6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d6ea:	d01b      	beq.n	801d724 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 801d6ec:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801d6f0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d6f4:	fb09 fa0a 	mul.w	sl, r9, sl
 801d6f8:	fb09 f004 	mul.w	r0, r9, r4
 801d6fc:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801d700:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d704:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801d708:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d70c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801d710:	4454      	add	r4, sl
 801d712:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d716:	0a24      	lsrs	r4, r4, #8
 801d718:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d71c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d720:	ea44 0409 	orr.w	r4, r4, r9
 801d724:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d728:	d01b      	beq.n	801d762 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 801d72a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801d72e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d732:	fb08 f909 	mul.w	r9, r8, r9
 801d736:	fb08 f003 	mul.w	r0, r8, r3
 801d73a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801d73e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801d742:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801d746:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d74a:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801d74e:	444b      	add	r3, r9
 801d750:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d754:	0a1b      	lsrs	r3, r3, #8
 801d756:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d75a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d75e:	ea43 0308 	orr.w	r3, r3, r8
 801d762:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801d766:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d76a:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 801d76e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d772:	fb0c f808 	mul.w	r8, ip, r8
 801d776:	8808      	ldrh	r0, [r1, #0]
 801d778:	fb0c f606 	mul.w	r6, ip, r6
 801d77c:	fb05 8909 	mla	r9, r5, r9, r8
 801d780:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 801d784:	fb05 6502 	mla	r5, r5, r2, r6
 801d788:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d78c:	fb07 9908 	mla	r9, r7, r8, r9
 801d790:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801d794:	fb07 5704 	mla	r7, r7, r4, r5
 801d798:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d79c:	fb0e 9808 	mla	r8, lr, r8, r9
 801d7a0:	10c4      	asrs	r4, r0, #3
 801d7a2:	fb0e 7e03 	mla	lr, lr, r3, r7
 801d7a6:	9b01      	ldr	r3, [sp, #4]
 801d7a8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d7ac:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d7b0:	43da      	mvns	r2, r3
 801d7b2:	1203      	asrs	r3, r0, #8
 801d7b4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d7b8:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 801d7bc:	b2d2      	uxtb	r2, r2
 801d7be:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d7c2:	00c0      	lsls	r0, r0, #3
 801d7c4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801d7c8:	4353      	muls	r3, r2
 801d7ca:	b2c0      	uxtb	r0, r0
 801d7cc:	ea48 0e0e 	orr.w	lr, r8, lr
 801d7d0:	4354      	muls	r4, r2
 801d7d2:	4350      	muls	r0, r2
 801d7d4:	1c5a      	adds	r2, r3, #1
 801d7d6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d7da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801d7de:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d7e2:	1c62      	adds	r2, r4, #1
 801d7e4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801d7e8:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801d7ec:	021b      	lsls	r3, r3, #8
 801d7ee:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d7f2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801d7f6:	00d2      	lsls	r2, r2, #3
 801d7f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d7fc:	4313      	orrs	r3, r2
 801d7fe:	1c42      	adds	r2, r0, #1
 801d800:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d804:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 801d808:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 801d80c:	ea4e 0e03 	orr.w	lr, lr, r3
 801d810:	f8a1 e000 	strh.w	lr, [r1]
 801d814:	b003      	add	sp, #12
 801d816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d81a:	bf00      	nop
 801d81c:	08023551 	.word	0x08023551
 801d820:	08023b1e 	.word	0x08023b1e
 801d824:	080235d5 	.word	0x080235d5

0801d828 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d82c:	ed2d 8b08 	vpush	{d8-d11}
 801d830:	b09b      	sub	sp, #108	; 0x6c
 801d832:	eeb0 aa40 	vmov.f32	s20, s0
 801d836:	eef0 9a60 	vmov.f32	s19, s1
 801d83a:	9218      	str	r2, [sp, #96]	; 0x60
 801d83c:	eeb0 9a41 	vmov.f32	s18, s2
 801d840:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801d842:	eeb0 8a62 	vmov.f32	s16, s5
 801d846:	9019      	str	r0, [sp, #100]	; 0x64
 801d848:	eef0 8a43 	vmov.f32	s17, s6
 801d84c:	6850      	ldr	r0, [r2, #4]
 801d84e:	eef0 ba44 	vmov.f32	s23, s8
 801d852:	9116      	str	r1, [sp, #88]	; 0x58
 801d854:	eeb0 ba64 	vmov.f32	s22, s9
 801d858:	9307      	str	r3, [sp, #28]
 801d85a:	eef0 aa45 	vmov.f32	s21, s10
 801d85e:	6812      	ldr	r2, [r2, #0]
 801d860:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801d864:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 801d868:	fb00 1303 	mla	r3, r0, r3, r1
 801d86c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d870:	930a      	str	r3, [sp, #40]	; 0x28
 801d872:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801d874:	681b      	ldr	r3, [r3, #0]
 801d876:	930f      	str	r3, [sp, #60]	; 0x3c
 801d878:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	dc03      	bgt.n	801d886 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d87e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d880:	2b00      	cmp	r3, #0
 801d882:	f340 8387 	ble.w	801df94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 801d886:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801d888:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d88c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d890:	1e48      	subs	r0, r1, #1
 801d892:	1e57      	subs	r7, r2, #1
 801d894:	9b07      	ldr	r3, [sp, #28]
 801d896:	2b00      	cmp	r3, #0
 801d898:	f340 8166 	ble.w	801db68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 801d89c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d8a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d8a4:	d406      	bmi.n	801d8b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d8a6:	4584      	cmp	ip, r0
 801d8a8:	da04      	bge.n	801d8b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	db02      	blt.n	801d8b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d8ae:	42bb      	cmp	r3, r7
 801d8b0:	f2c0 815b 	blt.w	801db6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801d8b4:	f11c 0c01 	adds.w	ip, ip, #1
 801d8b8:	f100 814b 	bmi.w	801db52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801d8bc:	4561      	cmp	r1, ip
 801d8be:	f2c0 8148 	blt.w	801db52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801d8c2:	3301      	adds	r3, #1
 801d8c4:	f100 8145 	bmi.w	801db52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801d8c8:	429a      	cmp	r2, r3
 801d8ca:	f2c0 8142 	blt.w	801db52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801d8ce:	9b07      	ldr	r3, [sp, #28]
 801d8d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d8d2:	9317      	str	r3, [sp, #92]	; 0x5c
 801d8d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	f340 8165 	ble.w	801dba6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801d8dc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801d8de:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801d8e2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801d8e4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801d8e8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801d8ec:	1422      	asrs	r2, r4, #16
 801d8ee:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d8f2:	689b      	ldr	r3, [r3, #8]
 801d8f4:	f100 81d5 	bmi.w	801dca2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 801d8f8:	f103 38ff 	add.w	r8, r3, #4294967295
 801d8fc:	4542      	cmp	r2, r8
 801d8fe:	f280 81d0 	bge.w	801dca2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 801d902:	f1bc 0f00 	cmp.w	ip, #0
 801d906:	f2c0 81cc 	blt.w	801dca2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 801d90a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d90e:	45c4      	cmp	ip, r8
 801d910:	f280 81c7 	bge.w	801dca2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 801d914:	b21b      	sxth	r3, r3
 801d916:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d918:	fb0c 2203 	mla	r2, ip, r3, r2
 801d91c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 801d920:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801d924:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801d928:	2900      	cmp	r1, #0
 801d92a:	f000 8182 	beq.w	801dc32 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801d92e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d932:	950b      	str	r5, [sp, #44]	; 0x2c
 801d934:	0e2d      	lsrs	r5, r5, #24
 801d936:	9512      	str	r5, [sp, #72]	; 0x48
 801d938:	b180      	cbz	r0, 801d95c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801d93a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801d93e:	3b01      	subs	r3, #1
 801d940:	009b      	lsls	r3, r3, #2
 801d942:	3304      	adds	r3, #4
 801d944:	eb08 0c03 	add.w	ip, r8, r3
 801d948:	f858 3003 	ldr.w	r3, [r8, r3]
 801d94c:	9308      	str	r3, [sp, #32]
 801d94e:	0e1b      	lsrs	r3, r3, #24
 801d950:	9310      	str	r3, [sp, #64]	; 0x40
 801d952:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801d956:	930c      	str	r3, [sp, #48]	; 0x30
 801d958:	0e1b      	lsrs	r3, r3, #24
 801d95a:	9313      	str	r3, [sp, #76]	; 0x4c
 801d95c:	b289      	uxth	r1, r1
 801d95e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d960:	b280      	uxth	r0, r0
 801d962:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801d964:	fb01 f900 	mul.w	r9, r1, r0
 801d968:	0109      	lsls	r1, r1, #4
 801d96a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d96e:	eba1 0809 	sub.w	r8, r1, r9
 801d972:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801d976:	b280      	uxth	r0, r0
 801d978:	fa1f f888 	uxth.w	r8, r8
 801d97c:	1a09      	subs	r1, r1, r0
 801d97e:	fb08 f303 	mul.w	r3, r8, r3
 801d982:	b289      	uxth	r1, r1
 801d984:	fb01 330e 	mla	r3, r1, lr, r3
 801d988:	fb00 3305 	mla	r3, r0, r5, r3
 801d98c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d98e:	fb09 3305 	mla	r3, r9, r5, r3
 801d992:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d996:	2b00      	cmp	r3, #0
 801d998:	f000 80d2 	beq.w	801db40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801d99c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d9a0:	d01b      	beq.n	801d9da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801d9a2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801d9a6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d9aa:	fb0e fa0a 	mul.w	sl, lr, sl
 801d9ae:	fb0e fe02 	mul.w	lr, lr, r2
 801d9b2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801d9b6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d9ba:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d9be:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d9c2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d9c6:	4452      	add	r2, sl
 801d9c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d9cc:	0a12      	lsrs	r2, r2, #8
 801d9ce:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d9d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d9d6:	ea42 020c 	orr.w	r2, r2, ip
 801d9da:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d9dc:	2dff      	cmp	r5, #255	; 0xff
 801d9de:	d021      	beq.n	801da24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801d9e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d9e2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801d9e6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d9e8:	fb05 fb0b 	mul.w	fp, r5, fp
 801d9ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d9ee:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801d9f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d9f4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d9f8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d9fc:	fb05 fa0a 	mul.w	sl, r5, sl
 801da00:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801da04:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801da08:	44de      	add	lr, fp
 801da0a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801da0e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801da12:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801da16:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801da1a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801da1e:	ea4e 050a 	orr.w	r5, lr, sl
 801da22:	950b      	str	r5, [sp, #44]	; 0x2c
 801da24:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801da26:	2dff      	cmp	r5, #255	; 0xff
 801da28:	d021      	beq.n	801da6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801da2a:	9d08      	ldr	r5, [sp, #32]
 801da2c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801da30:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801da32:	fb05 fb0b 	mul.w	fp, r5, fp
 801da36:	9d08      	ldr	r5, [sp, #32]
 801da38:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801da3c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801da3e:	fb05 fa0e 	mul.w	sl, r5, lr
 801da42:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801da46:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801da4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801da4e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801da52:	44de      	add	lr, fp
 801da54:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801da58:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801da5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801da60:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801da64:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801da68:	ea4e 050a 	orr.w	r5, lr, sl
 801da6c:	9508      	str	r5, [sp, #32]
 801da6e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801da70:	2dff      	cmp	r5, #255	; 0xff
 801da72:	d021      	beq.n	801dab8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801da74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801da76:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801da7a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801da7c:	fb05 fb0b 	mul.w	fp, r5, fp
 801da80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801da82:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801da86:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801da88:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801da8c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801da90:	fb05 fa0a 	mul.w	sl, r5, sl
 801da94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801da98:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801da9c:	44de      	add	lr, fp
 801da9e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801daa2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801daa6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801daaa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801daae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dab2:	ea4e 050a 	orr.w	r5, lr, sl
 801dab6:	950c      	str	r5, [sp, #48]	; 0x30
 801dab8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801daba:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801dabe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dac2:	2bff      	cmp	r3, #255	; 0xff
 801dac4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801dac8:	9d08      	ldr	r5, [sp, #32]
 801daca:	fb08 fc0c 	mul.w	ip, r8, ip
 801dace:	fb01 cc0e 	mla	ip, r1, lr, ip
 801dad2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801dad6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dad8:	fb00 cc0e 	mla	ip, r0, lr, ip
 801dadc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801dae0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801dae2:	fb09 cc0e 	mla	ip, r9, lr, ip
 801dae6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801daea:	fb08 f80e 	mul.w	r8, r8, lr
 801daee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801daf2:	fb01 8202 	mla	r2, r1, r2, r8
 801daf6:	9908      	ldr	r1, [sp, #32]
 801daf8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dafc:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801db00:	990c      	ldr	r1, [sp, #48]	; 0x30
 801db02:	fb00 220a 	mla	r2, r0, sl, r2
 801db06:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801db0a:	fb09 2900 	mla	r9, r9, r0, r2
 801db0e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801db12:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801db16:	ea4c 0c09 	orr.w	ip, ip, r9
 801db1a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 801db1e:	f040 8091 	bne.w	801dc44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 801db22:	ea4f 135c 	mov.w	r3, ip, lsr #5
 801db26:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 801db2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801db2e:	f022 0207 	bic.w	r2, r2, #7
 801db32:	431a      	orrs	r2, r3
 801db34:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801db38:	ea4c 0c02 	orr.w	ip, ip, r2
 801db3c:	f8a7 c000 	strh.w	ip, [r7]
 801db40:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801db42:	3702      	adds	r7, #2
 801db44:	441c      	add	r4, r3
 801db46:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801db48:	441e      	add	r6, r3
 801db4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801db4c:	3b01      	subs	r3, #1
 801db4e:	9317      	str	r3, [sp, #92]	; 0x5c
 801db50:	e6c0      	b.n	801d8d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801db52:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801db54:	441c      	add	r4, r3
 801db56:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801db58:	441e      	add	r6, r3
 801db5a:	9b07      	ldr	r3, [sp, #28]
 801db5c:	3b01      	subs	r3, #1
 801db5e:	9307      	str	r3, [sp, #28]
 801db60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db62:	3302      	adds	r3, #2
 801db64:	930a      	str	r3, [sp, #40]	; 0x28
 801db66:	e695      	b.n	801d894 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801db68:	d024      	beq.n	801dbb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 801db6a:	9b07      	ldr	r3, [sp, #28]
 801db6c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801db6e:	3b01      	subs	r3, #1
 801db70:	fb00 4003 	mla	r0, r0, r3, r4
 801db74:	1400      	asrs	r0, r0, #16
 801db76:	f53f aeaa 	bmi.w	801d8ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801db7a:	3901      	subs	r1, #1
 801db7c:	4288      	cmp	r0, r1
 801db7e:	f6bf aea6 	bge.w	801d8ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801db82:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801db84:	fb01 6303 	mla	r3, r1, r3, r6
 801db88:	141b      	asrs	r3, r3, #16
 801db8a:	f53f aea0 	bmi.w	801d8ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801db8e:	3a01      	subs	r2, #1
 801db90:	4293      	cmp	r3, r2
 801db92:	f6bf ae9c 	bge.w	801d8ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801db96:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801db9a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801db9e:	f1bb 0f00 	cmp.w	fp, #0
 801dba2:	f300 809a 	bgt.w	801dcda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 801dba6:	9b07      	ldr	r3, [sp, #28]
 801dba8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801dbac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dbae:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801dbb2:	930a      	str	r3, [sp, #40]	; 0x28
 801dbb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	f340 81ec 	ble.w	801df94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 801dbbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dbc0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dbc2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801dbc6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801dbca:	eef0 6a48 	vmov.f32	s13, s16
 801dbce:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801dbd2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801dbd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dbda:	ee16 4a90 	vmov	r4, s13
 801dbde:	eef0 6a68 	vmov.f32	s13, s17
 801dbe2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dbe6:	ee16 6a90 	vmov	r6, s13
 801dbea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801dbee:	ee69 7a27 	vmul.f32	s15, s18, s15
 801dbf2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801dbf6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801dbfa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801dbfe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801dc02:	ee18 2a10 	vmov	r2, s16
 801dc06:	eeb0 8a47 	vmov.f32	s16, s14
 801dc0a:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc0e:	ee18 2a90 	vmov	r2, s17
 801dc12:	932f      	str	r3, [sp, #188]	; 0xbc
 801dc14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dc16:	eef0 8a67 	vmov.f32	s17, s15
 801dc1a:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc1e:	9330      	str	r3, [sp, #192]	; 0xc0
 801dc20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801dc22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801dc24:	3b01      	subs	r3, #1
 801dc26:	9316      	str	r3, [sp, #88]	; 0x58
 801dc28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dc2a:	bf08      	it	eq
 801dc2c:	4613      	moveq	r3, r2
 801dc2e:	9307      	str	r3, [sp, #28]
 801dc30:	e622      	b.n	801d878 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801dc32:	2800      	cmp	r0, #0
 801dc34:	f43f ae92 	beq.w	801d95c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801dc38:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801dc3c:	9308      	str	r3, [sp, #32]
 801dc3e:	0e1b      	lsrs	r3, r3, #24
 801dc40:	9310      	str	r3, [sp, #64]	; 0x40
 801dc42:	e68b      	b.n	801d95c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801dc44:	8839      	ldrh	r1, [r7, #0]
 801dc46:	43db      	mvns	r3, r3
 801dc48:	4dd5      	ldr	r5, [pc, #852]	; (801dfa0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 801dc4a:	ea4f 2e21 	mov.w	lr, r1, asr #8
 801dc4e:	fa5f f883 	uxtb.w	r8, r3
 801dc52:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801dc56:	10c8      	asrs	r0, r1, #3
 801dc58:	00cb      	lsls	r3, r1, #3
 801dc5a:	fb0e fe08 	mul.w	lr, lr, r8
 801dc5e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801dc62:	b2db      	uxtb	r3, r3
 801dc64:	f10e 0101 	add.w	r1, lr, #1
 801dc68:	fb00 f008 	mul.w	r0, r0, r8
 801dc6c:	fb03 f308 	mul.w	r3, r3, r8
 801dc70:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 801dc74:	ea4f 411c 	mov.w	r1, ip, lsr #16
 801dc78:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 801dc7c:	f100 0e01 	add.w	lr, r0, #1
 801dc80:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 801dc84:	b2c9      	uxtb	r1, r1
 801dc86:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801dc8a:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 801dc8e:	00d2      	lsls	r2, r2, #3
 801dc90:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dc94:	430a      	orrs	r2, r1
 801dc96:	1c59      	adds	r1, r3, #1
 801dc98:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801dc9c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801dca0:	e748      	b.n	801db34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801dca2:	f112 0801 	adds.w	r8, r2, #1
 801dca6:	f53f af4b 	bmi.w	801db40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801dcaa:	4543      	cmp	r3, r8
 801dcac:	f6ff af48 	blt.w	801db40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801dcb0:	f11c 0801 	adds.w	r8, ip, #1
 801dcb4:	f53f af44 	bmi.w	801db40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801dcb8:	45c6      	cmp	lr, r8
 801dcba:	f6ff af41 	blt.w	801db40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801dcbe:	b21b      	sxth	r3, r3
 801dcc0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801dcc4:	fa0f f28e 	sxth.w	r2, lr
 801dcc8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801dccc:	9200      	str	r2, [sp, #0]
 801dcce:	4639      	mov	r1, r7
 801dcd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dcd2:	9819      	ldr	r0, [sp, #100]	; 0x64
 801dcd4:	f7ff fc54 	bl	801d580 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 801dcd8:	e732      	b.n	801db40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801dcda:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801dcdc:	1421      	asrs	r1, r4, #16
 801dcde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801dce0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801dce4:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 801dce8:	1433      	asrs	r3, r6, #16
 801dcea:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801dcee:	fb07 1303 	mla	r3, r7, r3, r1
 801dcf2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801dcf4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801dcf8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801dcfc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801dd00:	2a00      	cmp	r2, #0
 801dd02:	f000 8108 	beq.w	801df16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 801dd06:	684d      	ldr	r5, [r1, #4]
 801dd08:	950d      	str	r5, [sp, #52]	; 0x34
 801dd0a:	0e2d      	lsrs	r5, r5, #24
 801dd0c:	9514      	str	r5, [sp, #80]	; 0x50
 801dd0e:	b178      	cbz	r0, 801dd30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 801dd10:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 801dd14:	3f01      	subs	r7, #1
 801dd16:	00bf      	lsls	r7, r7, #2
 801dd18:	3704      	adds	r7, #4
 801dd1a:	eb01 0e07 	add.w	lr, r1, r7
 801dd1e:	59c9      	ldr	r1, [r1, r7]
 801dd20:	9109      	str	r1, [sp, #36]	; 0x24
 801dd22:	0e09      	lsrs	r1, r1, #24
 801dd24:	9111      	str	r1, [sp, #68]	; 0x44
 801dd26:	f8de 1004 	ldr.w	r1, [lr, #4]
 801dd2a:	910e      	str	r1, [sp, #56]	; 0x38
 801dd2c:	0e09      	lsrs	r1, r1, #24
 801dd2e:	9115      	str	r1, [sp, #84]	; 0x54
 801dd30:	b292      	uxth	r2, r2
 801dd32:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801dd34:	b280      	uxth	r0, r0
 801dd36:	fb02 f900 	mul.w	r9, r2, r0
 801dd3a:	0112      	lsls	r2, r2, #4
 801dd3c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801dd40:	eba2 0e09 	sub.w	lr, r2, r9
 801dd44:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801dd48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dd4a:	b280      	uxth	r0, r0
 801dd4c:	fa1f fe8e 	uxth.w	lr, lr
 801dd50:	1a09      	subs	r1, r1, r0
 801dd52:	fb0e f202 	mul.w	r2, lr, r2
 801dd56:	b289      	uxth	r1, r1
 801dd58:	fb01 220c 	mla	r2, r1, ip, r2
 801dd5c:	fb00 2205 	mla	r2, r0, r5, r2
 801dd60:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801dd62:	fb09 2205 	mla	r2, r9, r5, r2
 801dd66:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801dd6a:	2a00      	cmp	r2, #0
 801dd6c:	f000 80ca 	beq.w	801df04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 801dd70:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801dd74:	d019      	beq.n	801ddaa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 801dd76:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801dd7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dd7e:	fb0c fa0a 	mul.w	sl, ip, sl
 801dd82:	fb0c fc03 	mul.w	ip, ip, r3
 801dd86:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dd8a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801dd8e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801dd92:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dd96:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801dd9a:	4453      	add	r3, sl
 801dd9c:	0a3f      	lsrs	r7, r7, #8
 801dd9e:	0a1b      	lsrs	r3, r3, #8
 801dda0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801dda4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dda8:	433b      	orrs	r3, r7
 801ddaa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ddac:	2dff      	cmp	r5, #255	; 0xff
 801ddae:	d020      	beq.n	801ddf2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 801ddb0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ddb2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801ddb6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ddb8:	436f      	muls	r7, r5
 801ddba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ddbc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ddc0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801ddc4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ddc6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ddca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ddce:	fb05 fa0a 	mul.w	sl, r5, sl
 801ddd2:	44bc      	add	ip, r7
 801ddd4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ddd8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dddc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dde0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dde4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dde8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ddec:	ea4c 050a 	orr.w	r5, ip, sl
 801ddf0:	950d      	str	r5, [sp, #52]	; 0x34
 801ddf2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ddf4:	2dff      	cmp	r5, #255	; 0xff
 801ddf6:	d020      	beq.n	801de3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 801ddf8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ddfa:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801ddfe:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801de00:	436f      	muls	r7, r5
 801de02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801de04:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801de08:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801de0a:	fb05 fa0c 	mul.w	sl, r5, ip
 801de0e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801de12:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801de16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801de1a:	44bc      	add	ip, r7
 801de1c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801de20:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801de24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801de28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801de2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801de30:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801de34:	ea4c 050a 	orr.w	r5, ip, sl
 801de38:	9509      	str	r5, [sp, #36]	; 0x24
 801de3a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801de3c:	2dff      	cmp	r5, #255	; 0xff
 801de3e:	d020      	beq.n	801de82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 801de40:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801de42:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801de46:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801de48:	436f      	muls	r7, r5
 801de4a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801de4c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801de50:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801de54:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801de56:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801de5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801de5e:	fb05 fa0a 	mul.w	sl, r5, sl
 801de62:	44bc      	add	ip, r7
 801de64:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801de68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801de6c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801de70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801de74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801de78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801de7c:	ea4c 050a 	orr.w	r5, ip, sl
 801de80:	950e      	str	r5, [sp, #56]	; 0x38
 801de82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801de84:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801de88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801de8c:	2aff      	cmp	r2, #255	; 0xff
 801de8e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801de92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801de94:	fb0e f707 	mul.w	r7, lr, r7
 801de98:	fb01 770c 	mla	r7, r1, ip, r7
 801de9c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801dea0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801dea2:	fb00 770c 	mla	r7, r0, ip, r7
 801dea6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801deaa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801deac:	fb09 770c 	mla	r7, r9, ip, r7
 801deb0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801deb4:	fb0e fe0c 	mul.w	lr, lr, ip
 801deb8:	ea4f 2717 	mov.w	r7, r7, lsr #8
 801debc:	fb01 e303 	mla	r3, r1, r3, lr
 801dec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dec2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801dec6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801deca:	990e      	ldr	r1, [sp, #56]	; 0x38
 801decc:	fb00 330a 	mla	r3, r0, sl, r3
 801ded0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801ded4:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ded8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dedc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801dee0:	ea47 070c 	orr.w	r7, r7, ip
 801dee4:	ea4f 2317 	mov.w	r3, r7, lsr #8
 801dee8:	d11e      	bne.n	801df28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 801deea:	097a      	lsrs	r2, r7, #5
 801deec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801def0:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 801def4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801def8:	f023 0307 	bic.w	r3, r3, #7
 801defc:	4313      	orrs	r3, r2
 801defe:	431f      	orrs	r7, r3
 801df00:	f8a8 7000 	strh.w	r7, [r8]
 801df04:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801df06:	f108 0802 	add.w	r8, r8, #2
 801df0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801df0e:	441c      	add	r4, r3
 801df10:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801df12:	441e      	add	r6, r3
 801df14:	e643      	b.n	801db9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 801df16:	2800      	cmp	r0, #0
 801df18:	f43f af0a 	beq.w	801dd30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 801df1c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801df20:	9109      	str	r1, [sp, #36]	; 0x24
 801df22:	0e09      	lsrs	r1, r1, #24
 801df24:	9111      	str	r1, [sp, #68]	; 0x44
 801df26:	e703      	b.n	801dd30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 801df28:	f8b8 1000 	ldrh.w	r1, [r8]
 801df2c:	43d2      	mvns	r2, r2
 801df2e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 801df32:	fa5f fe82 	uxtb.w	lr, r2
 801df36:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801df3a:	10c8      	asrs	r0, r1, #3
 801df3c:	00ca      	lsls	r2, r1, #3
 801df3e:	fb0c fc0e 	mul.w	ip, ip, lr
 801df42:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801df46:	b2d2      	uxtb	r2, r2
 801df48:	f10c 0101 	add.w	r1, ip, #1
 801df4c:	fb00 f00e 	mul.w	r0, r0, lr
 801df50:	fb02 f20e 	mul.w	r2, r2, lr
 801df54:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801df58:	0c39      	lsrs	r1, r7, #16
 801df5a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801df5e:	4910      	ldr	r1, [pc, #64]	; (801dfa0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 801df60:	fa5f fc8c 	uxtb.w	ip, ip
 801df64:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 801df68:	1c41      	adds	r1, r0, #1
 801df6a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801df6e:	1c51      	adds	r1, r2, #1
 801df70:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801df74:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801df78:	00c0      	lsls	r0, r0, #3
 801df7a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801df7e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801df82:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 801df86:	ea4c 0c00 	orr.w	ip, ip, r0
 801df8a:	ea47 0c0c 	orr.w	ip, r7, ip
 801df8e:	f8a8 c000 	strh.w	ip, [r8]
 801df92:	e7b7      	b.n	801df04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 801df94:	b01b      	add	sp, #108	; 0x6c
 801df96:	ecbd 8b08 	vpop	{d8-d11}
 801df9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df9e:	bf00      	nop
 801dfa0:	fffff800 	.word	0xfffff800

0801dfa4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 801dfa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dfa8:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 801dfac:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801dfb0:	2c00      	cmp	r4, #0
 801dfb2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801dfb6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801dfba:	fb04 ce03 	mla	lr, r4, r3, ip
 801dfbe:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801dfc2:	db60      	blt.n	801e086 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 801dfc4:	45a1      	cmp	r9, r4
 801dfc6:	dd5e      	ble.n	801e086 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 801dfc8:	f1bc 0f00 	cmp.w	ip, #0
 801dfcc:	db59      	blt.n	801e082 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 801dfce:	45e0      	cmp	r8, ip
 801dfd0:	dd57      	ble.n	801e082 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 801dfd2:	ea4f 005e 	mov.w	r0, lr, lsr #1
 801dfd6:	f01e 0f01 	tst.w	lr, #1
 801dfda:	5c16      	ldrb	r6, [r2, r0]
 801dfdc:	bf0c      	ite	eq
 801dfde:	f006 060f 	andeq.w	r6, r6, #15
 801dfe2:	1136      	asrne	r6, r6, #4
 801dfe4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801dfe8:	b2f6      	uxtb	r6, r6
 801dfea:	f11c 0001 	adds.w	r0, ip, #1
 801dfee:	d44d      	bmi.n	801e08c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 801dff0:	4580      	cmp	r8, r0
 801dff2:	dd4b      	ble.n	801e08c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 801dff4:	2d00      	cmp	r5, #0
 801dff6:	d04b      	beq.n	801e090 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 801dff8:	f10e 0a01 	add.w	sl, lr, #1
 801dffc:	ea4f 005a 	mov.w	r0, sl, lsr #1
 801e000:	f01a 0f01 	tst.w	sl, #1
 801e004:	5c10      	ldrb	r0, [r2, r0]
 801e006:	bf0c      	ite	eq
 801e008:	f000 000f 	andeq.w	r0, r0, #15
 801e00c:	1100      	asrne	r0, r0, #4
 801e00e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e012:	b2c0      	uxtb	r0, r0
 801e014:	3401      	adds	r4, #1
 801e016:	d43f      	bmi.n	801e098 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 801e018:	45a1      	cmp	r9, r4
 801e01a:	dd3d      	ble.n	801e098 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 801e01c:	2f00      	cmp	r7, #0
 801e01e:	f000 80a8 	beq.w	801e172 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 801e022:	f1bc 0f00 	cmp.w	ip, #0
 801e026:	db35      	blt.n	801e094 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 801e028:	45e0      	cmp	r8, ip
 801e02a:	dd33      	ble.n	801e094 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 801e02c:	eb03 090e 	add.w	r9, r3, lr
 801e030:	ea4f 0459 	mov.w	r4, r9, lsr #1
 801e034:	f019 0f01 	tst.w	r9, #1
 801e038:	5d14      	ldrb	r4, [r2, r4]
 801e03a:	bf0c      	ite	eq
 801e03c:	f004 040f 	andeq.w	r4, r4, #15
 801e040:	1124      	asrne	r4, r4, #4
 801e042:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801e046:	b2e4      	uxtb	r4, r4
 801e048:	f11c 0c01 	adds.w	ip, ip, #1
 801e04c:	d427      	bmi.n	801e09e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 801e04e:	45e0      	cmp	r8, ip
 801e050:	dd25      	ble.n	801e09e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 801e052:	b335      	cbz	r5, 801e0a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 801e054:	3301      	adds	r3, #1
 801e056:	449e      	add	lr, r3
 801e058:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801e05c:	f01e 0f01 	tst.w	lr, #1
 801e060:	5cd2      	ldrb	r2, [r2, r3]
 801e062:	bf0c      	ite	eq
 801e064:	f002 020f 	andeq.w	r2, r2, #15
 801e068:	1112      	asrne	r2, r2, #4
 801e06a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e06e:	b2d3      	uxtb	r3, r2
 801e070:	2d0f      	cmp	r5, #15
 801e072:	d917      	bls.n	801e0a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 801e074:	4b42      	ldr	r3, [pc, #264]	; (801e180 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 801e076:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801e07a:	4a42      	ldr	r2, [pc, #264]	; (801e184 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 801e07c:	4842      	ldr	r0, [pc, #264]	; (801e188 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 801e07e:	f001 f80b 	bl	801f098 <__assert_func>
 801e082:	2600      	movs	r6, #0
 801e084:	e7b1      	b.n	801dfea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 801e086:	2000      	movs	r0, #0
 801e088:	4606      	mov	r6, r0
 801e08a:	e7c3      	b.n	801e014 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801e08c:	2000      	movs	r0, #0
 801e08e:	e7c1      	b.n	801e014 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801e090:	4628      	mov	r0, r5
 801e092:	e7bf      	b.n	801e014 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801e094:	2400      	movs	r4, #0
 801e096:	e7d7      	b.n	801e048 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 801e098:	2300      	movs	r3, #0
 801e09a:	461c      	mov	r4, r3
 801e09c:	e7e8      	b.n	801e070 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 801e09e:	2300      	movs	r3, #0
 801e0a0:	e7e6      	b.n	801e070 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 801e0a2:	462b      	mov	r3, r5
 801e0a4:	2f0f      	cmp	r7, #15
 801e0a6:	d8e5      	bhi.n	801e074 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 801e0a8:	b2ad      	uxth	r5, r5
 801e0aa:	b2bf      	uxth	r7, r7
 801e0ac:	fb05 fc07 	mul.w	ip, r5, r7
 801e0b0:	012d      	lsls	r5, r5, #4
 801e0b2:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 801e0b6:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 801e0ba:	eba5 050c 	sub.w	r5, r5, ip
 801e0be:	b2bf      	uxth	r7, r7
 801e0c0:	b2ad      	uxth	r5, r5
 801e0c2:	1bd2      	subs	r2, r2, r7
 801e0c4:	4368      	muls	r0, r5
 801e0c6:	b292      	uxth	r2, r2
 801e0c8:	fb06 0002 	mla	r0, r6, r2, r0
 801e0cc:	fb07 0404 	mla	r4, r7, r4, r0
 801e0d0:	fb0c 4303 	mla	r3, ip, r3, r4
 801e0d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e0d8:	b1b3      	cbz	r3, 801e108 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 801e0da:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801e0de:	435a      	muls	r2, r3
 801e0e0:	1c53      	adds	r3, r2, #1
 801e0e2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e0e6:	4a29      	ldr	r2, [pc, #164]	; (801e18c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 801e0e8:	121b      	asrs	r3, r3, #8
 801e0ea:	6812      	ldr	r2, [r2, #0]
 801e0ec:	2bff      	cmp	r3, #255	; 0xff
 801e0ee:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801e0f2:	d10b      	bne.n	801e10c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 801e0f4:	0950      	lsrs	r0, r2, #5
 801e0f6:	4b26      	ldr	r3, [pc, #152]	; (801e190 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 801e0f8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e0fc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e100:	4033      	ands	r3, r6
 801e102:	4318      	orrs	r0, r3
 801e104:	4302      	orrs	r2, r0
 801e106:	800a      	strh	r2, [r1, #0]
 801e108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e10c:	880d      	ldrh	r5, [r1, #0]
 801e10e:	b29f      	uxth	r7, r3
 801e110:	f3c2 4007 	ubfx	r0, r2, #16, #8
 801e114:	43db      	mvns	r3, r3
 801e116:	122c      	asrs	r4, r5, #8
 801e118:	fb10 f007 	smulbb	r0, r0, r7
 801e11c:	b2db      	uxtb	r3, r3
 801e11e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801e122:	b2f6      	uxtb	r6, r6
 801e124:	b2d2      	uxtb	r2, r2
 801e126:	fb04 0403 	mla	r4, r4, r3, r0
 801e12a:	10e8      	asrs	r0, r5, #3
 801e12c:	fb12 f207 	smulbb	r2, r2, r7
 801e130:	00ed      	lsls	r5, r5, #3
 801e132:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e136:	b2a4      	uxth	r4, r4
 801e138:	fb16 f607 	smulbb	r6, r6, r7
 801e13c:	b2ed      	uxtb	r5, r5
 801e13e:	fb00 6603 	mla	r6, r0, r3, r6
 801e142:	fb05 2303 	mla	r3, r5, r3, r2
 801e146:	b2b0      	uxth	r0, r6
 801e148:	b29a      	uxth	r2, r3
 801e14a:	1c63      	adds	r3, r4, #1
 801e14c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e150:	1c53      	adds	r3, r2, #1
 801e152:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e156:	1c42      	adds	r2, r0, #1
 801e158:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801e15c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e160:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e164:	0940      	lsrs	r0, r0, #5
 801e166:	4323      	orrs	r3, r4
 801e168:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e16c:	4303      	orrs	r3, r0
 801e16e:	800b      	strh	r3, [r1, #0]
 801e170:	e7ca      	b.n	801e108 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 801e172:	2d0f      	cmp	r5, #15
 801e174:	f63f af7e 	bhi.w	801e074 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 801e178:	463b      	mov	r3, r7
 801e17a:	463c      	mov	r4, r7
 801e17c:	e794      	b.n	801e0a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 801e17e:	bf00      	nop
 801e180:	08023551 	.word	0x08023551
 801e184:	08023b1e 	.word	0x08023b1e
 801e188:	080235d5 	.word	0x080235d5
 801e18c:	20009f9c 	.word	0x20009f9c
 801e190:	00fff800 	.word	0x00fff800

0801e194 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e198:	ed2d 8b08 	vpush	{d8-d11}
 801e19c:	b097      	sub	sp, #92	; 0x5c
 801e19e:	eeb0 aa40 	vmov.f32	s20, s0
 801e1a2:	eef0 9a60 	vmov.f32	s19, s1
 801e1a6:	9214      	str	r2, [sp, #80]	; 0x50
 801e1a8:	eeb0 9a41 	vmov.f32	s18, s2
 801e1ac:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e1ae:	eeb0 8a62 	vmov.f32	s16, s5
 801e1b2:	9309      	str	r3, [sp, #36]	; 0x24
 801e1b4:	eef0 8a43 	vmov.f32	s17, s6
 801e1b8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801e1bc:	eef0 ba44 	vmov.f32	s23, s8
 801e1c0:	9015      	str	r0, [sp, #84]	; 0x54
 801e1c2:	eeb0 ba64 	vmov.f32	s22, s9
 801e1c6:	6850      	ldr	r0, [r2, #4]
 801e1c8:	eef0 aa45 	vmov.f32	s21, s10
 801e1cc:	910d      	str	r1, [sp, #52]	; 0x34
 801e1ce:	930f      	str	r3, [sp, #60]	; 0x3c
 801e1d0:	6812      	ldr	r2, [r2, #0]
 801e1d2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801e1d6:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 801e1da:	fb00 1303 	mla	r3, r0, r3, r1
 801e1de:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801e1e2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e1e4:	689b      	ldr	r3, [r3, #8]
 801e1e6:	3301      	adds	r3, #1
 801e1e8:	f023 0301 	bic.w	r3, r3, #1
 801e1ec:	930a      	str	r3, [sp, #40]	; 0x28
 801e1ee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e1f0:	681f      	ldr	r7, [r3, #0]
 801e1f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	dc03      	bgt.n	801e200 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e1f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e1fa:	2b00      	cmp	r3, #0
 801e1fc:	f340 8289 	ble.w	801e712 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801e200:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e202:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e206:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e20a:	1e48      	subs	r0, r1, #1
 801e20c:	f102 3cff 	add.w	ip, r2, #4294967295
 801e210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e212:	2b00      	cmp	r3, #0
 801e214:	f340 80c5 	ble.w	801e3a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801e218:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801e21c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e220:	d406      	bmi.n	801e230 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e222:	4586      	cmp	lr, r0
 801e224:	da04      	bge.n	801e230 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e226:	2b00      	cmp	r3, #0
 801e228:	db02      	blt.n	801e230 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e22a:	4563      	cmp	r3, ip
 801e22c:	f2c0 80ba 	blt.w	801e3a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e230:	f11e 0e01 	adds.w	lr, lr, #1
 801e234:	f100 80ab 	bmi.w	801e38e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e238:	4571      	cmp	r1, lr
 801e23a:	f2c0 80a8 	blt.w	801e38e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e23e:	3301      	adds	r3, #1
 801e240:	f100 80a5 	bmi.w	801e38e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e244:	429a      	cmp	r2, r3
 801e246:	f2c0 80a2 	blt.w	801e38e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e24c:	46c8      	mov	r8, r9
 801e24e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 801e252:	930e      	str	r3, [sp, #56]	; 0x38
 801e254:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e256:	2b00      	cmp	r3, #0
 801e258:	f340 80c4 	ble.w	801e3e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801e25c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e25e:	1430      	asrs	r0, r6, #16
 801e260:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801e264:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e268:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801e26c:	1423      	asrs	r3, r4, #16
 801e26e:	f100 814f 	bmi.w	801e510 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801e272:	f10c 3bff 	add.w	fp, ip, #4294967295
 801e276:	455b      	cmp	r3, fp
 801e278:	f280 814a 	bge.w	801e510 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801e27c:	2800      	cmp	r0, #0
 801e27e:	f2c0 8147 	blt.w	801e510 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801e282:	f10e 3bff 	add.w	fp, lr, #4294967295
 801e286:	4558      	cmp	r0, fp
 801e288:	f280 8142 	bge.w	801e510 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801e28c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e28e:	fb00 3305 	mla	r3, r0, r5, r3
 801e292:	0858      	lsrs	r0, r3, #1
 801e294:	07dd      	lsls	r5, r3, #31
 801e296:	f817 c000 	ldrb.w	ip, [r7, r0]
 801e29a:	bf54      	ite	pl
 801e29c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e2a0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e2a4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e2a8:	fa5f fc8c 	uxtb.w	ip, ip
 801e2ac:	2a00      	cmp	r2, #0
 801e2ae:	f000 80dd 	beq.w	801e46c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e2b2:	1c58      	adds	r0, r3, #1
 801e2b4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801e2b8:	07c0      	lsls	r0, r0, #31
 801e2ba:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801e2be:	bf54      	ite	pl
 801e2c0:	f00e 0e0f 	andpl.w	lr, lr, #15
 801e2c4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801e2c8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801e2cc:	fa5f f08e 	uxtb.w	r0, lr
 801e2d0:	9010      	str	r0, [sp, #64]	; 0x40
 801e2d2:	b1d9      	cbz	r1, 801e30c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 801e2d4:	4453      	add	r3, sl
 801e2d6:	0858      	lsrs	r0, r3, #1
 801e2d8:	07dd      	lsls	r5, r3, #31
 801e2da:	f103 0301 	add.w	r3, r3, #1
 801e2de:	5c38      	ldrb	r0, [r7, r0]
 801e2e0:	bf54      	ite	pl
 801e2e2:	f000 000f 	andpl.w	r0, r0, #15
 801e2e6:	1100      	asrmi	r0, r0, #4
 801e2e8:	07dd      	lsls	r5, r3, #31
 801e2ea:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e2ee:	b2c0      	uxtb	r0, r0
 801e2f0:	900b      	str	r0, [sp, #44]	; 0x2c
 801e2f2:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801e2f6:	f817 e000 	ldrb.w	lr, [r7, r0]
 801e2fa:	bf54      	ite	pl
 801e2fc:	f00e 030f 	andpl.w	r3, lr, #15
 801e300:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801e304:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e308:	b2db      	uxtb	r3, r3
 801e30a:	9311      	str	r3, [sp, #68]	; 0x44
 801e30c:	b292      	uxth	r2, r2
 801e30e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801e310:	b289      	uxth	r1, r1
 801e312:	fb02 f301 	mul.w	r3, r2, r1
 801e316:	0112      	lsls	r2, r2, #4
 801e318:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801e31c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801e320:	1ad2      	subs	r2, r2, r3
 801e322:	b289      	uxth	r1, r1
 801e324:	b292      	uxth	r2, r2
 801e326:	1a40      	subs	r0, r0, r1
 801e328:	436a      	muls	r2, r5
 801e32a:	b280      	uxth	r0, r0
 801e32c:	fb0c 2c00 	mla	ip, ip, r0, r2
 801e330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e332:	fb01 c102 	mla	r1, r1, r2, ip
 801e336:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e338:	fb03 1302 	mla	r3, r3, r2, r1
 801e33c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e340:	b1db      	cbz	r3, 801e37a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e342:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e344:	4353      	muls	r3, r2
 801e346:	1c5a      	adds	r2, r3, #1
 801e348:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e34c:	4ac6      	ldr	r2, [pc, #792]	; (801e668 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801e34e:	121b      	asrs	r3, r3, #8
 801e350:	6812      	ldr	r2, [r2, #0]
 801e352:	2bff      	cmp	r3, #255	; 0xff
 801e354:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801e358:	f040 8099 	bne.w	801e48e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801e35c:	0953      	lsrs	r3, r2, #5
 801e35e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801e362:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e366:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e36a:	f02c 0c07 	bic.w	ip, ip, #7
 801e36e:	ea43 0c0c 	orr.w	ip, r3, ip
 801e372:	ea4c 0202 	orr.w	r2, ip, r2
 801e376:	f8a8 2000 	strh.w	r2, [r8]
 801e37a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e37c:	f108 0802 	add.w	r8, r8, #2
 801e380:	441c      	add	r4, r3
 801e382:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e384:	441e      	add	r6, r3
 801e386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e388:	3b01      	subs	r3, #1
 801e38a:	930e      	str	r3, [sp, #56]	; 0x38
 801e38c:	e762      	b.n	801e254 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 801e38e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e390:	f109 0902 	add.w	r9, r9, #2
 801e394:	441c      	add	r4, r3
 801e396:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e398:	441e      	add	r6, r3
 801e39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e39c:	3b01      	subs	r3, #1
 801e39e:	9309      	str	r3, [sp, #36]	; 0x24
 801e3a0:	e736      	b.n	801e210 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e3a2:	d024      	beq.n	801e3ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801e3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3a6:	982b      	ldr	r0, [sp, #172]	; 0xac
 801e3a8:	3b01      	subs	r3, #1
 801e3aa:	fb00 4003 	mla	r0, r0, r3, r4
 801e3ae:	1400      	asrs	r0, r0, #16
 801e3b0:	f53f af4b 	bmi.w	801e24a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801e3b4:	3901      	subs	r1, #1
 801e3b6:	4288      	cmp	r0, r1
 801e3b8:	f6bf af47 	bge.w	801e24a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801e3bc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801e3be:	fb01 6303 	mla	r3, r1, r3, r6
 801e3c2:	141b      	asrs	r3, r3, #16
 801e3c4:	f53f af41 	bmi.w	801e24a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801e3c8:	3a01      	subs	r2, #1
 801e3ca:	4293      	cmp	r3, r2
 801e3cc:	f6bf af3d 	bge.w	801e24a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801e3d0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801e3d4:	46c8      	mov	r8, r9
 801e3d6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801e3da:	930e      	str	r3, [sp, #56]	; 0x38
 801e3dc:	f1bb 0f00 	cmp.w	fp, #0
 801e3e0:	f300 80b7 	bgt.w	801e552 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801e3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3e6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801e3ea:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801e3ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	f340 818e 	ble.w	801e712 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801e3f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e3fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e3fc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e400:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e404:	eef0 6a48 	vmov.f32	s13, s16
 801e408:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e40c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e410:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e414:	ee16 4a90 	vmov	r4, s13
 801e418:	eef0 6a68 	vmov.f32	s13, s17
 801e41c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e420:	ee16 6a90 	vmov	r6, s13
 801e424:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e428:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e42c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e430:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e434:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e438:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e43c:	ee18 2a10 	vmov	r2, s16
 801e440:	eeb0 8a47 	vmov.f32	s16, s14
 801e444:	fb92 f3f3 	sdiv	r3, r2, r3
 801e448:	ee18 2a90 	vmov	r2, s17
 801e44c:	932b      	str	r3, [sp, #172]	; 0xac
 801e44e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e450:	eef0 8a67 	vmov.f32	s17, s15
 801e454:	fb92 f3f3 	sdiv	r3, r2, r3
 801e458:	932c      	str	r3, [sp, #176]	; 0xb0
 801e45a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e45c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e45e:	3b01      	subs	r3, #1
 801e460:	930d      	str	r3, [sp, #52]	; 0x34
 801e462:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e464:	bf08      	it	eq
 801e466:	4613      	moveq	r3, r2
 801e468:	9309      	str	r3, [sp, #36]	; 0x24
 801e46a:	e6c2      	b.n	801e1f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e46c:	2900      	cmp	r1, #0
 801e46e:	f43f af4d 	beq.w	801e30c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 801e472:	eb0a 0003 	add.w	r0, sl, r3
 801e476:	0843      	lsrs	r3, r0, #1
 801e478:	07c0      	lsls	r0, r0, #31
 801e47a:	5cfb      	ldrb	r3, [r7, r3]
 801e47c:	bf54      	ite	pl
 801e47e:	f003 030f 	andpl.w	r3, r3, #15
 801e482:	111b      	asrmi	r3, r3, #4
 801e484:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e488:	b2db      	uxtb	r3, r3
 801e48a:	930b      	str	r3, [sp, #44]	; 0x2c
 801e48c:	e73e      	b.n	801e30c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 801e48e:	f8b8 e000 	ldrh.w	lr, [r8]
 801e492:	fa1f fb83 	uxth.w	fp, r3
 801e496:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801e49a:	43db      	mvns	r3, r3
 801e49c:	ea4f 202e 	mov.w	r0, lr, asr #8
 801e4a0:	fb11 f10b 	smulbb	r1, r1, fp
 801e4a4:	b2db      	uxtb	r3, r3
 801e4a6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e4aa:	fa5f fc8c 	uxtb.w	ip, ip
 801e4ae:	b2d2      	uxtb	r2, r2
 801e4b0:	fb00 1003 	mla	r0, r0, r3, r1
 801e4b4:	ea4f 01ee 	mov.w	r1, lr, asr #3
 801e4b8:	fb1c fc0b 	smulbb	ip, ip, fp
 801e4bc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e4c0:	b280      	uxth	r0, r0
 801e4c2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e4c6:	fb12 fb0b 	smulbb	fp, r2, fp
 801e4ca:	fa5f fe8e 	uxtb.w	lr, lr
 801e4ce:	fb01 cc03 	mla	ip, r1, r3, ip
 801e4d2:	fb0e bb03 	mla	fp, lr, r3, fp
 801e4d6:	1c43      	adds	r3, r0, #1
 801e4d8:	fa1f fc8c 	uxth.w	ip, ip
 801e4dc:	fa1f fb8b 	uxth.w	fp, fp
 801e4e0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e4e4:	f10c 0101 	add.w	r1, ip, #1
 801e4e8:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 801e4ec:	f10b 0001 	add.w	r0, fp, #1
 801e4f0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801e4f4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801e4f8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e4fc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801e500:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801e504:	4318      	orrs	r0, r3
 801e506:	ea40 000c 	orr.w	r0, r0, ip
 801e50a:	f8a8 0000 	strh.w	r0, [r8]
 801e50e:	e734      	b.n	801e37a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e510:	f113 0b01 	adds.w	fp, r3, #1
 801e514:	f53f af31 	bmi.w	801e37a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e518:	45dc      	cmp	ip, fp
 801e51a:	f6ff af2e 	blt.w	801e37a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e51e:	f110 0b01 	adds.w	fp, r0, #1
 801e522:	f53f af2a 	bmi.w	801e37a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e526:	45de      	cmp	lr, fp
 801e528:	f6ff af27 	blt.w	801e37a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e52c:	9302      	str	r3, [sp, #8]
 801e52e:	fa0f f38e 	sxth.w	r3, lr
 801e532:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801e534:	9301      	str	r3, [sp, #4]
 801e536:	fa0f f38c 	sxth.w	r3, ip
 801e53a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801e53e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801e542:	9300      	str	r3, [sp, #0]
 801e544:	463a      	mov	r2, r7
 801e546:	4653      	mov	r3, sl
 801e548:	4641      	mov	r1, r8
 801e54a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e54c:	f7ff fd2a 	bl	801dfa4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 801e550:	e713      	b.n	801e37a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e552:	1422      	asrs	r2, r4, #16
 801e554:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e556:	1433      	asrs	r3, r6, #16
 801e558:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801e55c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e560:	fb05 2303 	mla	r3, r5, r3, r2
 801e564:	085a      	lsrs	r2, r3, #1
 801e566:	07dd      	lsls	r5, r3, #31
 801e568:	5cba      	ldrb	r2, [r7, r2]
 801e56a:	bf54      	ite	pl
 801e56c:	f002 020f 	andpl.w	r2, r2, #15
 801e570:	1112      	asrmi	r2, r2, #4
 801e572:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e576:	b2d2      	uxtb	r2, r2
 801e578:	2900      	cmp	r1, #0
 801e57a:	d077      	beq.n	801e66c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801e57c:	f103 0e01 	add.w	lr, r3, #1
 801e580:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801e584:	f01e 0f01 	tst.w	lr, #1
 801e588:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e58c:	bf0c      	ite	eq
 801e58e:	f00c 0c0f 	andeq.w	ip, ip, #15
 801e592:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801e596:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e59a:	fa5f f58c 	uxtb.w	r5, ip
 801e59e:	9512      	str	r5, [sp, #72]	; 0x48
 801e5a0:	b308      	cbz	r0, 801e5e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e5a2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e5a4:	442b      	add	r3, r5
 801e5a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e5aa:	07dd      	lsls	r5, r3, #31
 801e5ac:	f103 0301 	add.w	r3, r3, #1
 801e5b0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e5b4:	bf54      	ite	pl
 801e5b6:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e5ba:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e5be:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e5c2:	fa5f f58c 	uxtb.w	r5, ip
 801e5c6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e5ca:	950c      	str	r5, [sp, #48]	; 0x30
 801e5cc:	07dd      	lsls	r5, r3, #31
 801e5ce:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e5d2:	bf54      	ite	pl
 801e5d4:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e5d8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e5dc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e5e0:	fa5f f38c 	uxtb.w	r3, ip
 801e5e4:	9313      	str	r3, [sp, #76]	; 0x4c
 801e5e6:	b289      	uxth	r1, r1
 801e5e8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e5ea:	b280      	uxth	r0, r0
 801e5ec:	fb01 f300 	mul.w	r3, r1, r0
 801e5f0:	0109      	lsls	r1, r1, #4
 801e5f2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801e5f6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801e5fa:	1ac9      	subs	r1, r1, r3
 801e5fc:	b280      	uxth	r0, r0
 801e5fe:	b289      	uxth	r1, r1
 801e600:	ebac 0c00 	sub.w	ip, ip, r0
 801e604:	4369      	muls	r1, r5
 801e606:	fa1f fc8c 	uxth.w	ip, ip
 801e60a:	fb02 120c 	mla	r2, r2, ip, r1
 801e60e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e610:	fb00 2001 	mla	r0, r0, r1, r2
 801e614:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e616:	fb03 0302 	mla	r3, r3, r2, r0
 801e61a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e61e:	b1d3      	cbz	r3, 801e656 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e620:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e622:	4353      	muls	r3, r2
 801e624:	1c5a      	adds	r2, r3, #1
 801e626:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e62a:	4a0f      	ldr	r2, [pc, #60]	; (801e668 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801e62c:	121b      	asrs	r3, r3, #8
 801e62e:	6812      	ldr	r2, [r2, #0]
 801e630:	2bff      	cmp	r3, #255	; 0xff
 801e632:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801e636:	d12d      	bne.n	801e694 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801e638:	0953      	lsrs	r3, r2, #5
 801e63a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801e63e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e642:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e646:	f02c 0c07 	bic.w	ip, ip, #7
 801e64a:	ea43 0c0c 	orr.w	ip, r3, ip
 801e64e:	ea4c 0202 	orr.w	r2, ip, r2
 801e652:	f8a8 2000 	strh.w	r2, [r8]
 801e656:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e658:	f108 0802 	add.w	r8, r8, #2
 801e65c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e660:	441c      	add	r4, r3
 801e662:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e664:	441e      	add	r6, r3
 801e666:	e6b9      	b.n	801e3dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e668:	20009f9c 	.word	0x20009f9c
 801e66c:	2800      	cmp	r0, #0
 801e66e:	d0ba      	beq.n	801e5e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e670:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e672:	442b      	add	r3, r5
 801e674:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e678:	07db      	lsls	r3, r3, #31
 801e67a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e67e:	bf54      	ite	pl
 801e680:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e684:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e688:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e68c:	fa5f f38c 	uxtb.w	r3, ip
 801e690:	930c      	str	r3, [sp, #48]	; 0x30
 801e692:	e7a8      	b.n	801e5e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e694:	f8b8 e000 	ldrh.w	lr, [r8]
 801e698:	fa1f fa83 	uxth.w	sl, r3
 801e69c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801e6a0:	43db      	mvns	r3, r3
 801e6a2:	ea4f 202e 	mov.w	r0, lr, asr #8
 801e6a6:	fb11 f10a 	smulbb	r1, r1, sl
 801e6aa:	b2db      	uxtb	r3, r3
 801e6ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e6b0:	b2d2      	uxtb	r2, r2
 801e6b2:	fa5f fc8c 	uxtb.w	ip, ip
 801e6b6:	fb00 1003 	mla	r0, r0, r3, r1
 801e6ba:	ea4f 01ee 	mov.w	r1, lr, asr #3
 801e6be:	fb12 f20a 	smulbb	r2, r2, sl
 801e6c2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e6c6:	b280      	uxth	r0, r0
 801e6c8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e6cc:	fb1c fc0a 	smulbb	ip, ip, sl
 801e6d0:	fa5f fe8e 	uxtb.w	lr, lr
 801e6d4:	fb0e 2203 	mla	r2, lr, r3, r2
 801e6d8:	fb01 cc03 	mla	ip, r1, r3, ip
 801e6dc:	1c43      	adds	r3, r0, #1
 801e6de:	b292      	uxth	r2, r2
 801e6e0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e6e4:	1c51      	adds	r1, r2, #1
 801e6e6:	fa1f fc8c 	uxth.w	ip, ip
 801e6ea:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e6ee:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801e6f2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801e6f6:	4308      	orrs	r0, r1
 801e6f8:	f10c 0101 	add.w	r1, ip, #1
 801e6fc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801e700:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e704:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801e708:	ea40 000c 	orr.w	r0, r0, ip
 801e70c:	f8a8 0000 	strh.w	r0, [r8]
 801e710:	e7a1      	b.n	801e656 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e712:	b017      	add	sp, #92	; 0x5c
 801e714:	ecbd 8b08 	vpop	{d8-d11}
 801e718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e71c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 801e71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e720:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 801e724:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801e728:	2c00      	cmp	r4, #0
 801e72a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801e72e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801e732:	fb04 ce03 	mla	lr, r4, r3, ip
 801e736:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801e73a:	db60      	blt.n	801e7fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 801e73c:	45a1      	cmp	r9, r4
 801e73e:	dd5e      	ble.n	801e7fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 801e740:	f1bc 0f00 	cmp.w	ip, #0
 801e744:	db59      	blt.n	801e7fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 801e746:	45e0      	cmp	r8, ip
 801e748:	dd57      	ble.n	801e7fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 801e74a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 801e74e:	f01e 0f01 	tst.w	lr, #1
 801e752:	5c16      	ldrb	r6, [r2, r0]
 801e754:	bf0c      	ite	eq
 801e756:	f006 060f 	andeq.w	r6, r6, #15
 801e75a:	1136      	asrne	r6, r6, #4
 801e75c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801e760:	b2f6      	uxtb	r6, r6
 801e762:	f11c 0001 	adds.w	r0, ip, #1
 801e766:	d44d      	bmi.n	801e804 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 801e768:	4580      	cmp	r8, r0
 801e76a:	dd4b      	ble.n	801e804 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 801e76c:	2d00      	cmp	r5, #0
 801e76e:	d04b      	beq.n	801e808 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 801e770:	f10e 0a01 	add.w	sl, lr, #1
 801e774:	ea4f 005a 	mov.w	r0, sl, lsr #1
 801e778:	f01a 0f01 	tst.w	sl, #1
 801e77c:	5c10      	ldrb	r0, [r2, r0]
 801e77e:	bf0c      	ite	eq
 801e780:	f000 000f 	andeq.w	r0, r0, #15
 801e784:	1100      	asrne	r0, r0, #4
 801e786:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e78a:	b2c0      	uxtb	r0, r0
 801e78c:	3401      	adds	r4, #1
 801e78e:	d43f      	bmi.n	801e810 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 801e790:	45a1      	cmp	r9, r4
 801e792:	dd3d      	ble.n	801e810 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 801e794:	2f00      	cmp	r7, #0
 801e796:	f000 8093 	beq.w	801e8c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 801e79a:	f1bc 0f00 	cmp.w	ip, #0
 801e79e:	db35      	blt.n	801e80c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 801e7a0:	45e0      	cmp	r8, ip
 801e7a2:	dd33      	ble.n	801e80c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 801e7a4:	eb03 090e 	add.w	r9, r3, lr
 801e7a8:	ea4f 0459 	mov.w	r4, r9, lsr #1
 801e7ac:	f019 0f01 	tst.w	r9, #1
 801e7b0:	5d14      	ldrb	r4, [r2, r4]
 801e7b2:	bf0c      	ite	eq
 801e7b4:	f004 040f 	andeq.w	r4, r4, #15
 801e7b8:	1124      	asrne	r4, r4, #4
 801e7ba:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801e7be:	b2e4      	uxtb	r4, r4
 801e7c0:	f11c 0c01 	adds.w	ip, ip, #1
 801e7c4:	d427      	bmi.n	801e816 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 801e7c6:	45e0      	cmp	r8, ip
 801e7c8:	dd25      	ble.n	801e816 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 801e7ca:	b335      	cbz	r5, 801e81a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 801e7cc:	3301      	adds	r3, #1
 801e7ce:	449e      	add	lr, r3
 801e7d0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801e7d4:	f01e 0f01 	tst.w	lr, #1
 801e7d8:	5cd2      	ldrb	r2, [r2, r3]
 801e7da:	bf0c      	ite	eq
 801e7dc:	f002 020f 	andeq.w	r2, r2, #15
 801e7e0:	1112      	asrne	r2, r2, #4
 801e7e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e7e6:	b2d3      	uxtb	r3, r2
 801e7e8:	2d0f      	cmp	r5, #15
 801e7ea:	d917      	bls.n	801e81c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 801e7ec:	4b37      	ldr	r3, [pc, #220]	; (801e8cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 801e7ee:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 801e7f2:	4a37      	ldr	r2, [pc, #220]	; (801e8d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 801e7f4:	4837      	ldr	r0, [pc, #220]	; (801e8d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 801e7f6:	f000 fc4f 	bl	801f098 <__assert_func>
 801e7fa:	2600      	movs	r6, #0
 801e7fc:	e7b1      	b.n	801e762 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 801e7fe:	2000      	movs	r0, #0
 801e800:	4606      	mov	r6, r0
 801e802:	e7c3      	b.n	801e78c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801e804:	2000      	movs	r0, #0
 801e806:	e7c1      	b.n	801e78c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801e808:	4628      	mov	r0, r5
 801e80a:	e7bf      	b.n	801e78c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801e80c:	2400      	movs	r4, #0
 801e80e:	e7d7      	b.n	801e7c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 801e810:	2300      	movs	r3, #0
 801e812:	461c      	mov	r4, r3
 801e814:	e7e8      	b.n	801e7e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 801e816:	2300      	movs	r3, #0
 801e818:	e7e6      	b.n	801e7e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 801e81a:	462b      	mov	r3, r5
 801e81c:	2f0f      	cmp	r7, #15
 801e81e:	d8e5      	bhi.n	801e7ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 801e820:	b2ad      	uxth	r5, r5
 801e822:	b2bf      	uxth	r7, r7
 801e824:	fb05 fc07 	mul.w	ip, r5, r7
 801e828:	012d      	lsls	r5, r5, #4
 801e82a:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 801e82e:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 801e832:	eba5 050c 	sub.w	r5, r5, ip
 801e836:	b2bf      	uxth	r7, r7
 801e838:	b2ad      	uxth	r5, r5
 801e83a:	1bd2      	subs	r2, r2, r7
 801e83c:	4368      	muls	r0, r5
 801e83e:	b292      	uxth	r2, r2
 801e840:	fb06 0002 	mla	r0, r6, r2, r0
 801e844:	fb07 0404 	mla	r4, r7, r4, r0
 801e848:	fb0c 4303 	mla	r3, ip, r3, r4
 801e84c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e850:	b3a3      	cbz	r3, 801e8bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 801e852:	4a21      	ldr	r2, [pc, #132]	; (801e8d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 801e854:	880e      	ldrh	r6, [r1, #0]
 801e856:	6815      	ldr	r5, [r2, #0]
 801e858:	b29a      	uxth	r2, r3
 801e85a:	1234      	asrs	r4, r6, #8
 801e85c:	43db      	mvns	r3, r3
 801e85e:	f3c5 4007 	ubfx	r0, r5, #16, #8
 801e862:	f3c5 2707 	ubfx	r7, r5, #8, #8
 801e866:	b2db      	uxtb	r3, r3
 801e868:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801e86c:	fb10 f002 	smulbb	r0, r0, r2
 801e870:	b2ed      	uxtb	r5, r5
 801e872:	fb17 f702 	smulbb	r7, r7, r2
 801e876:	fb04 0403 	mla	r4, r4, r3, r0
 801e87a:	10f0      	asrs	r0, r6, #3
 801e87c:	fb15 f202 	smulbb	r2, r5, r2
 801e880:	00f6      	lsls	r6, r6, #3
 801e882:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e886:	b2a4      	uxth	r4, r4
 801e888:	b2f6      	uxtb	r6, r6
 801e88a:	fb00 7003 	mla	r0, r0, r3, r7
 801e88e:	fb06 2303 	mla	r3, r6, r3, r2
 801e892:	b280      	uxth	r0, r0
 801e894:	b29a      	uxth	r2, r3
 801e896:	1c63      	adds	r3, r4, #1
 801e898:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e89c:	1c53      	adds	r3, r2, #1
 801e89e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e8a2:	1c42      	adds	r2, r0, #1
 801e8a4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801e8a8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e8ac:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e8b0:	0940      	lsrs	r0, r0, #5
 801e8b2:	4323      	orrs	r3, r4
 801e8b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e8b8:	4303      	orrs	r3, r0
 801e8ba:	800b      	strh	r3, [r1, #0]
 801e8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8c0:	2d0f      	cmp	r5, #15
 801e8c2:	d893      	bhi.n	801e7ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 801e8c4:	463b      	mov	r3, r7
 801e8c6:	463c      	mov	r4, r7
 801e8c8:	e7aa      	b.n	801e820 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 801e8ca:	bf00      	nop
 801e8cc:	08023551 	.word	0x08023551
 801e8d0:	08023b1e 	.word	0x08023b1e
 801e8d4:	080235d5 	.word	0x080235d5
 801e8d8:	20009f9c 	.word	0x20009f9c

0801e8dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8e0:	ed2d 8b08 	vpush	{d8-d11}
 801e8e4:	b093      	sub	sp, #76	; 0x4c
 801e8e6:	461d      	mov	r5, r3
 801e8e8:	eeb0 aa40 	vmov.f32	s20, s0
 801e8ec:	920c      	str	r2, [sp, #48]	; 0x30
 801e8ee:	eef0 9a60 	vmov.f32	s19, s1
 801e8f2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e8f4:	eeb0 9a41 	vmov.f32	s18, s2
 801e8f8:	9011      	str	r0, [sp, #68]	; 0x44
 801e8fa:	eeb0 8a62 	vmov.f32	s16, s5
 801e8fe:	6850      	ldr	r0, [r2, #4]
 801e900:	eef0 8a43 	vmov.f32	s17, s6
 801e904:	9107      	str	r1, [sp, #28]
 801e906:	eef0 ba44 	vmov.f32	s23, s8
 801e90a:	6812      	ldr	r2, [r2, #0]
 801e90c:	eeb0 ba64 	vmov.f32	s22, s9
 801e910:	eef0 aa45 	vmov.f32	s21, s10
 801e914:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801e918:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 801e91c:	fb00 1303 	mla	r3, r0, r3, r1
 801e920:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801e924:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e926:	689b      	ldr	r3, [r3, #8]
 801e928:	3301      	adds	r3, #1
 801e92a:	f023 0301 	bic.w	r3, r3, #1
 801e92e:	9306      	str	r3, [sp, #24]
 801e930:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e932:	681f      	ldr	r7, [r3, #0]
 801e934:	9b07      	ldr	r3, [sp, #28]
 801e936:	2b00      	cmp	r3, #0
 801e938:	dc03      	bgt.n	801e942 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e93a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	f340 8267 	ble.w	801ee10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 801e942:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e944:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e948:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e94c:	1e48      	subs	r0, r1, #1
 801e94e:	f102 3cff 	add.w	ip, r2, #4294967295
 801e952:	2d00      	cmp	r5, #0
 801e954:	f340 80b7 	ble.w	801eac6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e958:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801e95c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e960:	d406      	bmi.n	801e970 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e962:	4586      	cmp	lr, r0
 801e964:	da04      	bge.n	801e970 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e966:	2b00      	cmp	r3, #0
 801e968:	db02      	blt.n	801e970 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e96a:	4563      	cmp	r3, ip
 801e96c:	f2c0 80ac 	blt.w	801eac8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801e970:	f11e 0e01 	adds.w	lr, lr, #1
 801e974:	f100 809f 	bmi.w	801eab6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801e978:	4571      	cmp	r1, lr
 801e97a:	f2c0 809c 	blt.w	801eab6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801e97e:	3301      	adds	r3, #1
 801e980:	f100 8099 	bmi.w	801eab6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801e984:	429a      	cmp	r2, r3
 801e986:	f2c0 8096 	blt.w	801eab6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801e98a:	46c8      	mov	r8, r9
 801e98c:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 801e990:	9509      	str	r5, [sp, #36]	; 0x24
 801e992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e994:	2b00      	cmp	r3, #0
 801e996:	f340 80b5 	ble.w	801eb04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e99a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801e99e:	1430      	asrs	r0, r6, #16
 801e9a0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e9a4:	9308      	str	r3, [sp, #32]
 801e9a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e9a8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801e9ac:	1423      	asrs	r3, r4, #16
 801e9ae:	f100 813f 	bmi.w	801ec30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801e9b2:	f10c 3bff 	add.w	fp, ip, #4294967295
 801e9b6:	455b      	cmp	r3, fp
 801e9b8:	f280 813a 	bge.w	801ec30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801e9bc:	2800      	cmp	r0, #0
 801e9be:	f2c0 8137 	blt.w	801ec30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801e9c2:	f10e 3bff 	add.w	fp, lr, #4294967295
 801e9c6:	4558      	cmp	r0, fp
 801e9c8:	f280 8132 	bge.w	801ec30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801e9cc:	9a06      	ldr	r2, [sp, #24]
 801e9ce:	fb00 3302 	mla	r3, r0, r2, r3
 801e9d2:	0858      	lsrs	r0, r3, #1
 801e9d4:	07da      	lsls	r2, r3, #31
 801e9d6:	9a08      	ldr	r2, [sp, #32]
 801e9d8:	f817 c000 	ldrb.w	ip, [r7, r0]
 801e9dc:	bf54      	ite	pl
 801e9de:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e9e2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e9e6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e9ea:	fa5f fc8c 	uxtb.w	ip, ip
 801e9ee:	2a00      	cmp	r2, #0
 801e9f0:	f000 80cc 	beq.w	801eb8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e9f4:	1c58      	adds	r0, r3, #1
 801e9f6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801e9fa:	07c0      	lsls	r0, r0, #31
 801e9fc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ea00:	bf54      	ite	pl
 801ea02:	f00e 0e0f 	andpl.w	lr, lr, #15
 801ea06:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801ea0a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801ea0e:	fa5f fe8e 	uxtb.w	lr, lr
 801ea12:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801ea16:	b1b9      	cbz	r1, 801ea48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ea18:	4453      	add	r3, sl
 801ea1a:	0858      	lsrs	r0, r3, #1
 801ea1c:	07da      	lsls	r2, r3, #31
 801ea1e:	5c38      	ldrb	r0, [r7, r0]
 801ea20:	bf54      	ite	pl
 801ea22:	f000 000f 	andpl.w	r0, r0, #15
 801ea26:	1100      	asrmi	r0, r0, #4
 801ea28:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801ea2c:	b2c0      	uxtb	r0, r0
 801ea2e:	900a      	str	r0, [sp, #40]	; 0x28
 801ea30:	1c58      	adds	r0, r3, #1
 801ea32:	0843      	lsrs	r3, r0, #1
 801ea34:	07c2      	lsls	r2, r0, #31
 801ea36:	5cfb      	ldrb	r3, [r7, r3]
 801ea38:	bf54      	ite	pl
 801ea3a:	f003 030f 	andpl.w	r3, r3, #15
 801ea3e:	111b      	asrmi	r3, r3, #4
 801ea40:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ea44:	b2db      	uxtb	r3, r3
 801ea46:	930e      	str	r3, [sp, #56]	; 0x38
 801ea48:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ea4c:	b289      	uxth	r1, r1
 801ea4e:	fb02 f301 	mul.w	r3, r2, r1
 801ea52:	0112      	lsls	r2, r2, #4
 801ea54:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801ea58:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801ea5c:	1ad2      	subs	r2, r2, r3
 801ea5e:	b289      	uxth	r1, r1
 801ea60:	b292      	uxth	r2, r2
 801ea62:	1a40      	subs	r0, r0, r1
 801ea64:	fa1f fe80 	uxth.w	lr, r0
 801ea68:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ea6a:	4342      	muls	r2, r0
 801ea6c:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801ea70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ea72:	fb01 c102 	mla	r1, r1, r2, ip
 801ea76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ea78:	fb03 1302 	mla	r3, r3, r2, r1
 801ea7c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ea80:	2bff      	cmp	r3, #255	; 0xff
 801ea82:	f040 8094 	bne.w	801ebae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 801ea86:	4bbf      	ldr	r3, [pc, #764]	; (801ed84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 801ea88:	681a      	ldr	r2, [r3, #0]
 801ea8a:	4bbf      	ldr	r3, [pc, #764]	; (801ed88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 801ea8c:	0951      	lsrs	r1, r2, #5
 801ea8e:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 801ea92:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ea96:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ea9a:	430b      	orrs	r3, r1
 801ea9c:	4313      	orrs	r3, r2
 801ea9e:	f8a8 3000 	strh.w	r3, [r8]
 801eaa2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801eaa4:	f108 0802 	add.w	r8, r8, #2
 801eaa8:	441c      	add	r4, r3
 801eaaa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eaac:	441e      	add	r6, r3
 801eaae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eab0:	3b01      	subs	r3, #1
 801eab2:	9309      	str	r3, [sp, #36]	; 0x24
 801eab4:	e76d      	b.n	801e992 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801eab6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801eab8:	3d01      	subs	r5, #1
 801eaba:	f109 0902 	add.w	r9, r9, #2
 801eabe:	441c      	add	r4, r3
 801eac0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eac2:	441e      	add	r6, r3
 801eac4:	e745      	b.n	801e952 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801eac6:	d021      	beq.n	801eb0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801eac8:	1e6b      	subs	r3, r5, #1
 801eaca:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801eacc:	fb00 4003 	mla	r0, r0, r3, r4
 801ead0:	1400      	asrs	r0, r0, #16
 801ead2:	f53f af5a 	bmi.w	801e98a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801ead6:	3901      	subs	r1, #1
 801ead8:	4288      	cmp	r0, r1
 801eada:	f6bf af56 	bge.w	801e98a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801eade:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801eae0:	fb01 6303 	mla	r3, r1, r3, r6
 801eae4:	141b      	asrs	r3, r3, #16
 801eae6:	f53f af50 	bmi.w	801e98a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801eaea:	3a01      	subs	r2, #1
 801eaec:	4293      	cmp	r3, r2
 801eaee:	f6bf af4c 	bge.w	801e98a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801eaf2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801eaf6:	46a8      	mov	r8, r5
 801eaf8:	46ce      	mov	lr, r9
 801eafa:	9308      	str	r3, [sp, #32]
 801eafc:	f1b8 0f00 	cmp.w	r8, #0
 801eb00:	f300 80b6 	bgt.w	801ec70 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801eb04:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801eb08:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801eb0c:	9b07      	ldr	r3, [sp, #28]
 801eb0e:	2b00      	cmp	r3, #0
 801eb10:	f340 817e 	ble.w	801ee10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 801eb14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eb18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eb1a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801eb1e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801eb22:	eef0 6a48 	vmov.f32	s13, s16
 801eb26:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801eb2a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801eb2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb32:	ee16 4a90 	vmov	r4, s13
 801eb36:	eef0 6a68 	vmov.f32	s13, s17
 801eb3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb3e:	ee16 6a90 	vmov	r6, s13
 801eb42:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801eb46:	ee69 7a27 	vmul.f32	s15, s18, s15
 801eb4a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801eb4e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801eb52:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801eb56:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801eb5a:	ee18 2a10 	vmov	r2, s16
 801eb5e:	eeb0 8a47 	vmov.f32	s16, s14
 801eb62:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb66:	ee18 2a90 	vmov	r2, s17
 801eb6a:	9327      	str	r3, [sp, #156]	; 0x9c
 801eb6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eb6e:	eef0 8a67 	vmov.f32	s17, s15
 801eb72:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb76:	9328      	str	r3, [sp, #160]	; 0xa0
 801eb78:	9b07      	ldr	r3, [sp, #28]
 801eb7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eb7c:	3b01      	subs	r3, #1
 801eb7e:	9307      	str	r3, [sp, #28]
 801eb80:	bf08      	it	eq
 801eb82:	4615      	moveq	r5, r2
 801eb84:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eb86:	bf18      	it	ne
 801eb88:	461d      	movne	r5, r3
 801eb8a:	e6d3      	b.n	801e934 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801eb8c:	2900      	cmp	r1, #0
 801eb8e:	f43f af5b 	beq.w	801ea48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801eb92:	eb0a 0003 	add.w	r0, sl, r3
 801eb96:	0843      	lsrs	r3, r0, #1
 801eb98:	07c0      	lsls	r0, r0, #31
 801eb9a:	5cfb      	ldrb	r3, [r7, r3]
 801eb9c:	bf54      	ite	pl
 801eb9e:	f003 030f 	andpl.w	r3, r3, #15
 801eba2:	111b      	asrmi	r3, r3, #4
 801eba4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801eba8:	b2db      	uxtb	r3, r3
 801ebaa:	930a      	str	r3, [sp, #40]	; 0x28
 801ebac:	e74c      	b.n	801ea48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ebae:	2b00      	cmp	r3, #0
 801ebb0:	f43f af77 	beq.w	801eaa2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801ebb4:	4a73      	ldr	r2, [pc, #460]	; (801ed84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 801ebb6:	fa1f fe83 	uxth.w	lr, r3
 801ebba:	f8b8 c000 	ldrh.w	ip, [r8]
 801ebbe:	43db      	mvns	r3, r3
 801ebc0:	6810      	ldr	r0, [r2, #0]
 801ebc2:	ea4f 212c 	mov.w	r1, ip, asr #8
 801ebc6:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801ebca:	b2db      	uxtb	r3, r3
 801ebcc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ebd0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 801ebd4:	fb12 f20e 	smulbb	r2, r2, lr
 801ebd8:	b2c0      	uxtb	r0, r0
 801ebda:	fb1b fb0e 	smulbb	fp, fp, lr
 801ebde:	fb01 2103 	mla	r1, r1, r3, r2
 801ebe2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801ebe6:	fb10 fe0e 	smulbb	lr, r0, lr
 801ebea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ebee:	b289      	uxth	r1, r1
 801ebf0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ebf4:	fa5f fc8c 	uxtb.w	ip, ip
 801ebf8:	fb02 b203 	mla	r2, r2, r3, fp
 801ebfc:	1c48      	adds	r0, r1, #1
 801ebfe:	fb0c e303 	mla	r3, ip, r3, lr
 801ec02:	b292      	uxth	r2, r2
 801ec04:	b29b      	uxth	r3, r3
 801ec06:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801ec0a:	f102 0b01 	add.w	fp, r2, #1
 801ec0e:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 801ec12:	1c59      	adds	r1, r3, #1
 801ec14:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801ec18:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ec1c:	0952      	lsrs	r2, r2, #5
 801ec1e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801ec22:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ec26:	4301      	orrs	r1, r0
 801ec28:	4311      	orrs	r1, r2
 801ec2a:	f8a8 1000 	strh.w	r1, [r8]
 801ec2e:	e738      	b.n	801eaa2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801ec30:	f113 0b01 	adds.w	fp, r3, #1
 801ec34:	f53f af35 	bmi.w	801eaa2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801ec38:	45dc      	cmp	ip, fp
 801ec3a:	f6ff af32 	blt.w	801eaa2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801ec3e:	f110 0b01 	adds.w	fp, r0, #1
 801ec42:	f53f af2e 	bmi.w	801eaa2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801ec46:	45de      	cmp	lr, fp
 801ec48:	f6ff af2b 	blt.w	801eaa2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801ec4c:	9302      	str	r3, [sp, #8]
 801ec4e:	fa0f f38e 	sxth.w	r3, lr
 801ec52:	9a08      	ldr	r2, [sp, #32]
 801ec54:	9301      	str	r3, [sp, #4]
 801ec56:	fa0f f38c 	sxth.w	r3, ip
 801ec5a:	9105      	str	r1, [sp, #20]
 801ec5c:	4641      	mov	r1, r8
 801ec5e:	9300      	str	r3, [sp, #0]
 801ec60:	4653      	mov	r3, sl
 801ec62:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801ec66:	463a      	mov	r2, r7
 801ec68:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ec6a:	f7ff fd57 	bl	801e71c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 801ec6e:	e718      	b.n	801eaa2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801ec70:	1422      	asrs	r2, r4, #16
 801ec72:	9906      	ldr	r1, [sp, #24]
 801ec74:	1433      	asrs	r3, r6, #16
 801ec76:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801ec7a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801ec7e:	fb01 2303 	mla	r3, r1, r3, r2
 801ec82:	085a      	lsrs	r2, r3, #1
 801ec84:	07d9      	lsls	r1, r3, #31
 801ec86:	5cba      	ldrb	r2, [r7, r2]
 801ec88:	bf54      	ite	pl
 801ec8a:	f002 020f 	andpl.w	r2, r2, #15
 801ec8e:	1112      	asrmi	r2, r2, #4
 801ec90:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ec94:	b2d2      	uxtb	r2, r2
 801ec96:	2800      	cmp	r0, #0
 801ec98:	d063      	beq.n	801ed62 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801ec9a:	f103 0a01 	add.w	sl, r3, #1
 801ec9e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801eca2:	f01a 0f01 	tst.w	sl, #1
 801eca6:	5c79      	ldrb	r1, [r7, r1]
 801eca8:	bf0c      	ite	eq
 801ecaa:	f001 010f 	andeq.w	r1, r1, #15
 801ecae:	1109      	asrne	r1, r1, #4
 801ecb0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ecb4:	b2c9      	uxtb	r1, r1
 801ecb6:	910f      	str	r1, [sp, #60]	; 0x3c
 801ecb8:	f1bc 0f00 	cmp.w	ip, #0
 801ecbc:	d01a      	beq.n	801ecf4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 801ecbe:	9908      	ldr	r1, [sp, #32]
 801ecc0:	440b      	add	r3, r1
 801ecc2:	0859      	lsrs	r1, r3, #1
 801ecc4:	f013 0f01 	tst.w	r3, #1
 801ecc8:	f103 0301 	add.w	r3, r3, #1
 801eccc:	5c79      	ldrb	r1, [r7, r1]
 801ecce:	bf0c      	ite	eq
 801ecd0:	f001 010f 	andeq.w	r1, r1, #15
 801ecd4:	1109      	asrne	r1, r1, #4
 801ecd6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ecda:	b2c9      	uxtb	r1, r1
 801ecdc:	910b      	str	r1, [sp, #44]	; 0x2c
 801ecde:	0859      	lsrs	r1, r3, #1
 801ece0:	07db      	lsls	r3, r3, #31
 801ece2:	5c79      	ldrb	r1, [r7, r1]
 801ece4:	bf54      	ite	pl
 801ece6:	f001 010f 	andpl.w	r1, r1, #15
 801ecea:	1109      	asrmi	r1, r1, #4
 801ecec:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ecf0:	b2c9      	uxtb	r1, r1
 801ecf2:	9110      	str	r1, [sp, #64]	; 0x40
 801ecf4:	b280      	uxth	r0, r0
 801ecf6:	fa1f fc8c 	uxth.w	ip, ip
 801ecfa:	fb00 f30c 	mul.w	r3, r0, ip
 801ecfe:	0100      	lsls	r0, r0, #4
 801ed00:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 801ed04:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801ed08:	1ac0      	subs	r0, r0, r3
 801ed0a:	fa1f fc8c 	uxth.w	ip, ip
 801ed0e:	b280      	uxth	r0, r0
 801ed10:	eba1 010c 	sub.w	r1, r1, ip
 801ed14:	fa1f fa81 	uxth.w	sl, r1
 801ed18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ed1a:	4348      	muls	r0, r1
 801ed1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ed1e:	fb02 020a 	mla	r2, r2, sl, r0
 801ed22:	fb0c 2c01 	mla	ip, ip, r1, r2
 801ed26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ed28:	fb03 c302 	mla	r3, r3, r2, ip
 801ed2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ed30:	2bff      	cmp	r3, #255	; 0xff
 801ed32:	d12b      	bne.n	801ed8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801ed34:	4b13      	ldr	r3, [pc, #76]	; (801ed84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 801ed36:	681a      	ldr	r2, [r3, #0]
 801ed38:	4b13      	ldr	r3, [pc, #76]	; (801ed88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 801ed3a:	0951      	lsrs	r1, r2, #5
 801ed3c:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 801ed40:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ed44:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ed48:	430b      	orrs	r3, r1
 801ed4a:	4313      	orrs	r3, r2
 801ed4c:	f8ae 3000 	strh.w	r3, [lr]
 801ed50:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ed52:	f10e 0e02 	add.w	lr, lr, #2
 801ed56:	f108 38ff 	add.w	r8, r8, #4294967295
 801ed5a:	441c      	add	r4, r3
 801ed5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ed5e:	441e      	add	r6, r3
 801ed60:	e6cc      	b.n	801eafc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ed62:	f1bc 0f00 	cmp.w	ip, #0
 801ed66:	d0c5      	beq.n	801ecf4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 801ed68:	9908      	ldr	r1, [sp, #32]
 801ed6a:	440b      	add	r3, r1
 801ed6c:	0859      	lsrs	r1, r3, #1
 801ed6e:	07db      	lsls	r3, r3, #31
 801ed70:	5c79      	ldrb	r1, [r7, r1]
 801ed72:	bf54      	ite	pl
 801ed74:	f001 010f 	andpl.w	r1, r1, #15
 801ed78:	1109      	asrmi	r1, r1, #4
 801ed7a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ed7e:	b2c9      	uxtb	r1, r1
 801ed80:	910b      	str	r1, [sp, #44]	; 0x2c
 801ed82:	e7b7      	b.n	801ecf4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 801ed84:	20009f9c 	.word	0x20009f9c
 801ed88:	fffff800 	.word	0xfffff800
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	d0df      	beq.n	801ed50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 801ed90:	4a22      	ldr	r2, [pc, #136]	; (801ee1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 801ed92:	fa1f fa83 	uxth.w	sl, r3
 801ed96:	f8be c000 	ldrh.w	ip, [lr]
 801ed9a:	43db      	mvns	r3, r3
 801ed9c:	6810      	ldr	r0, [r2, #0]
 801ed9e:	ea4f 212c 	mov.w	r1, ip, asr #8
 801eda2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801eda6:	b2db      	uxtb	r3, r3
 801eda8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801edac:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 801edb0:	fb12 f20a 	smulbb	r2, r2, sl
 801edb4:	b2c0      	uxtb	r0, r0
 801edb6:	fb1b fb0a 	smulbb	fp, fp, sl
 801edba:	fb01 2103 	mla	r1, r1, r3, r2
 801edbe:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801edc2:	fb10 f00a 	smulbb	r0, r0, sl
 801edc6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801edca:	b289      	uxth	r1, r1
 801edcc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801edd0:	fa5f fc8c 	uxtb.w	ip, ip
 801edd4:	fb02 b203 	mla	r2, r2, r3, fp
 801edd8:	fb0c 0003 	mla	r0, ip, r3, r0
 801eddc:	1c4b      	adds	r3, r1, #1
 801edde:	b292      	uxth	r2, r2
 801ede0:	b280      	uxth	r0, r0
 801ede2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801ede6:	f100 0b01 	add.w	fp, r0, #1
 801edea:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801edee:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 801edf2:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801edf6:	ea4b 0101 	orr.w	r1, fp, r1
 801edfa:	f102 0b01 	add.w	fp, r2, #1
 801edfe:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801ee02:	0952      	lsrs	r2, r2, #5
 801ee04:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ee08:	4311      	orrs	r1, r2
 801ee0a:	f8ae 1000 	strh.w	r1, [lr]
 801ee0e:	e79f      	b.n	801ed50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 801ee10:	b013      	add	sp, #76	; 0x4c
 801ee12:	ecbd 8b08 	vpop	{d8-d11}
 801ee16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee1a:	bf00      	nop
 801ee1c:	20009f9c 	.word	0x20009f9c

0801ee20 <CRC_Lock>:
 801ee20:	4a20      	ldr	r2, [pc, #128]	; (801eea4 <CRC_Lock+0x84>)
 801ee22:	b530      	push	{r4, r5, lr}
 801ee24:	6813      	ldr	r3, [r2, #0]
 801ee26:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801ee2a:	f24c 2540 	movw	r5, #49728	; 0xc240
 801ee2e:	f023 0301 	bic.w	r3, r3, #1
 801ee32:	6013      	str	r3, [r2, #0]
 801ee34:	4b1c      	ldr	r3, [pc, #112]	; (801eea8 <CRC_Lock+0x88>)
 801ee36:	681a      	ldr	r2, [r3, #0]
 801ee38:	4022      	ands	r2, r4
 801ee3a:	42aa      	cmp	r2, r5
 801ee3c:	d005      	beq.n	801ee4a <CRC_Lock+0x2a>
 801ee3e:	681b      	ldr	r3, [r3, #0]
 801ee40:	f24c 2270 	movw	r2, #49776	; 0xc270
 801ee44:	4023      	ands	r3, r4
 801ee46:	4293      	cmp	r3, r2
 801ee48:	d124      	bne.n	801ee94 <CRC_Lock+0x74>
 801ee4a:	4b18      	ldr	r3, [pc, #96]	; (801eeac <CRC_Lock+0x8c>)
 801ee4c:	681b      	ldr	r3, [r3, #0]
 801ee4e:	bb0b      	cbnz	r3, 801ee94 <CRC_Lock+0x74>
 801ee50:	4b17      	ldr	r3, [pc, #92]	; (801eeb0 <CRC_Lock+0x90>)
 801ee52:	681a      	ldr	r2, [r3, #0]
 801ee54:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801ee58:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801ee5c:	d00d      	beq.n	801ee7a <CRC_Lock+0x5a>
 801ee5e:	681a      	ldr	r2, [r3, #0]
 801ee60:	f240 4483 	movw	r4, #1155	; 0x483
 801ee64:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801ee68:	42a2      	cmp	r2, r4
 801ee6a:	d006      	beq.n	801ee7a <CRC_Lock+0x5a>
 801ee6c:	681b      	ldr	r3, [r3, #0]
 801ee6e:	f240 4285 	movw	r2, #1157	; 0x485
 801ee72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ee76:	4293      	cmp	r3, r2
 801ee78:	d10c      	bne.n	801ee94 <CRC_Lock+0x74>
 801ee7a:	4b0e      	ldr	r3, [pc, #56]	; (801eeb4 <CRC_Lock+0x94>)
 801ee7c:	2201      	movs	r2, #1
 801ee7e:	601a      	str	r2, [r3, #0]
 801ee80:	681a      	ldr	r2, [r3, #0]
 801ee82:	2a00      	cmp	r2, #0
 801ee84:	d1fc      	bne.n	801ee80 <CRC_Lock+0x60>
 801ee86:	4b0c      	ldr	r3, [pc, #48]	; (801eeb8 <CRC_Lock+0x98>)
 801ee88:	6018      	str	r0, [r3, #0]
 801ee8a:	6818      	ldr	r0, [r3, #0]
 801ee8c:	1a43      	subs	r3, r0, r1
 801ee8e:	4258      	negs	r0, r3
 801ee90:	4158      	adcs	r0, r3
 801ee92:	bd30      	pop	{r4, r5, pc}
 801ee94:	4b09      	ldr	r3, [pc, #36]	; (801eebc <CRC_Lock+0x9c>)
 801ee96:	2201      	movs	r2, #1
 801ee98:	601a      	str	r2, [r3, #0]
 801ee9a:	681a      	ldr	r2, [r3, #0]
 801ee9c:	2a00      	cmp	r2, #0
 801ee9e:	d1fc      	bne.n	801ee9a <CRC_Lock+0x7a>
 801eea0:	4b07      	ldr	r3, [pc, #28]	; (801eec0 <CRC_Lock+0xa0>)
 801eea2:	e7f1      	b.n	801ee88 <CRC_Lock+0x68>
 801eea4:	e0002000 	.word	0xe0002000
 801eea8:	e000ed00 	.word	0xe000ed00
 801eeac:	e0042000 	.word	0xe0042000
 801eeb0:	5c001000 	.word	0x5c001000
 801eeb4:	58024c08 	.word	0x58024c08
 801eeb8:	58024c00 	.word	0x58024c00
 801eebc:	40023008 	.word	0x40023008
 801eec0:	40023000 	.word	0x40023000

0801eec4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801eec4:	6101      	str	r1, [r0, #16]
 801eec6:	4770      	bx	lr

0801eec8 <_ZN8touchgfx8Gestures4tickEv>:
 801eec8:	7b83      	ldrb	r3, [r0, #14]
 801eeca:	b14b      	cbz	r3, 801eee0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801eecc:	8903      	ldrh	r3, [r0, #8]
 801eece:	3301      	adds	r3, #1
 801eed0:	b29b      	uxth	r3, r3
 801eed2:	2b07      	cmp	r3, #7
 801eed4:	8103      	strh	r3, [r0, #8]
 801eed6:	bf81      	itttt	hi
 801eed8:	2300      	movhi	r3, #0
 801eeda:	8143      	strhhi	r3, [r0, #10]
 801eedc:	8183      	strhhi	r3, [r0, #12]
 801eede:	7383      	strbhi	r3, [r0, #14]
 801eee0:	4770      	bx	lr
	...

0801eee4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801eee4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801eee8:	4604      	mov	r4, r0
 801eeea:	4698      	mov	r8, r3
 801eeec:	8880      	ldrh	r0, [r0, #4]
 801eeee:	4617      	mov	r7, r2
 801eef0:	4b1d      	ldr	r3, [pc, #116]	; (801ef68 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801eef2:	460e      	mov	r6, r1
 801eef4:	f8ad 0006 	strh.w	r0, [sp, #6]
 801eef8:	eba8 0000 	sub.w	r0, r8, r0
 801eefc:	9300      	str	r3, [sp, #0]
 801eefe:	2300      	movs	r3, #0
 801ef00:	b280      	uxth	r0, r0
 801ef02:	8aa2      	ldrh	r2, [r4, #20]
 801ef04:	f88d 3004 	strb.w	r3, [sp, #4]
 801ef08:	b203      	sxth	r3, r0
 801ef0a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801ef0e:	88e1      	ldrh	r1, [r4, #6]
 801ef10:	2b00      	cmp	r3, #0
 801ef12:	f8ad 800a 	strh.w	r8, [sp, #10]
 801ef16:	f8ad 1008 	strh.w	r1, [sp, #8]
 801ef1a:	bfb8      	it	lt
 801ef1c:	4240      	neglt	r0, r0
 801ef1e:	f8ad 500c 	strh.w	r5, [sp, #12]
 801ef22:	bfb8      	it	lt
 801ef24:	b203      	sxthlt	r3, r0
 801ef26:	4293      	cmp	r3, r2
 801ef28:	dc08      	bgt.n	801ef3c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801ef2a:	1a69      	subs	r1, r5, r1
 801ef2c:	b289      	uxth	r1, r1
 801ef2e:	b20b      	sxth	r3, r1
 801ef30:	2b00      	cmp	r3, #0
 801ef32:	bfbc      	itt	lt
 801ef34:	4249      	neglt	r1, r1
 801ef36:	b20b      	sxthlt	r3, r1
 801ef38:	429a      	cmp	r2, r3
 801ef3a:	da13      	bge.n	801ef64 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801ef3c:	6920      	ldr	r0, [r4, #16]
 801ef3e:	4669      	mov	r1, sp
 801ef40:	eba8 0606 	sub.w	r6, r8, r6
 801ef44:	1bef      	subs	r7, r5, r7
 801ef46:	6803      	ldr	r3, [r0, #0]
 801ef48:	685b      	ldr	r3, [r3, #4]
 801ef4a:	4798      	blx	r3
 801ef4c:	2300      	movs	r3, #0
 801ef4e:	2001      	movs	r0, #1
 801ef50:	8166      	strh	r6, [r4, #10]
 801ef52:	8123      	strh	r3, [r4, #8]
 801ef54:	81a7      	strh	r7, [r4, #12]
 801ef56:	f8a4 8004 	strh.w	r8, [r4, #4]
 801ef5a:	80e5      	strh	r5, [r4, #6]
 801ef5c:	73a0      	strb	r0, [r4, #14]
 801ef5e:	b004      	add	sp, #16
 801ef60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef64:	2000      	movs	r0, #0
 801ef66:	e7fa      	b.n	801ef5e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801ef68:	080229e0 	.word	0x080229e0

0801ef6c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801ef6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef6e:	461e      	mov	r6, r3
 801ef70:	1e4b      	subs	r3, r1, #1
 801ef72:	b085      	sub	sp, #20
 801ef74:	4604      	mov	r4, r0
 801ef76:	2b01      	cmp	r3, #1
 801ef78:	460d      	mov	r5, r1
 801ef7a:	4617      	mov	r7, r2
 801ef7c:	d84b      	bhi.n	801f016 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801ef7e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ef82:	1cd3      	adds	r3, r2, #3
 801ef84:	b29b      	uxth	r3, r3
 801ef86:	2b06      	cmp	r3, #6
 801ef88:	d916      	bls.n	801efb8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801ef8a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801f02c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801ef8e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ef92:	f8cd c004 	str.w	ip, [sp, #4]
 801ef96:	f04f 0c00 	mov.w	ip, #0
 801ef9a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ef9e:	6900      	ldr	r0, [r0, #16]
 801efa0:	f8ad 100c 	strh.w	r1, [sp, #12]
 801efa4:	a901      	add	r1, sp, #4
 801efa6:	f88d c008 	strb.w	ip, [sp, #8]
 801efaa:	f8ad 200a 	strh.w	r2, [sp, #10]
 801efae:	f8ad 300e 	strh.w	r3, [sp, #14]
 801efb2:	6803      	ldr	r3, [r0, #0]
 801efb4:	689b      	ldr	r3, [r3, #8]
 801efb6:	4798      	blx	r3
 801efb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801efbc:	1cd3      	adds	r3, r2, #3
 801efbe:	b29b      	uxth	r3, r3
 801efc0:	2b06      	cmp	r3, #6
 801efc2:	d916      	bls.n	801eff2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801efc4:	f8df c064 	ldr.w	ip, [pc, #100]	; 801f02c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801efc8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801efcc:	f8cd c004 	str.w	ip, [sp, #4]
 801efd0:	f04f 0c01 	mov.w	ip, #1
 801efd4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801efd8:	6920      	ldr	r0, [r4, #16]
 801efda:	f8ad 100c 	strh.w	r1, [sp, #12]
 801efde:	a901      	add	r1, sp, #4
 801efe0:	f88d c008 	strb.w	ip, [sp, #8]
 801efe4:	f8ad 200a 	strh.w	r2, [sp, #10]
 801efe8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801efec:	6803      	ldr	r3, [r0, #0]
 801efee:	689b      	ldr	r3, [r3, #8]
 801eff0:	4798      	blx	r3
 801eff2:	4b0d      	ldr	r3, [pc, #52]	; (801f028 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801eff4:	a901      	add	r1, sp, #4
 801eff6:	6920      	ldr	r0, [r4, #16]
 801eff8:	9301      	str	r3, [sp, #4]
 801effa:	2300      	movs	r3, #0
 801effc:	f88d 5008 	strb.w	r5, [sp, #8]
 801f000:	f8ad 700a 	strh.w	r7, [sp, #10]
 801f004:	f8ad 600c 	strh.w	r6, [sp, #12]
 801f008:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f00c:	6803      	ldr	r3, [r0, #0]
 801f00e:	681b      	ldr	r3, [r3, #0]
 801f010:	4798      	blx	r3
 801f012:	b005      	add	sp, #20
 801f014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f016:	2900      	cmp	r1, #0
 801f018:	d1eb      	bne.n	801eff2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f01a:	80a2      	strh	r2, [r4, #4]
 801f01c:	80c6      	strh	r6, [r0, #6]
 801f01e:	60a1      	str	r1, [r4, #8]
 801f020:	81a1      	strh	r1, [r4, #12]
 801f022:	73a1      	strb	r1, [r4, #14]
 801f024:	e7e5      	b.n	801eff2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f026:	bf00      	nop
 801f028:	080229cc 	.word	0x080229cc
 801f02c:	080229f4 	.word	0x080229f4

0801f030 <__aeabi_atexit>:
 801f030:	460b      	mov	r3, r1
 801f032:	4601      	mov	r1, r0
 801f034:	4618      	mov	r0, r3
 801f036:	f000 b853 	b.w	801f0e0 <__cxa_atexit>

0801f03a <_ZdlPvj>:
 801f03a:	f000 b812 	b.w	801f062 <_ZdlPv>

0801f03e <__cxa_guard_acquire>:
 801f03e:	6803      	ldr	r3, [r0, #0]
 801f040:	07db      	lsls	r3, r3, #31
 801f042:	d406      	bmi.n	801f052 <__cxa_guard_acquire+0x14>
 801f044:	7843      	ldrb	r3, [r0, #1]
 801f046:	b103      	cbz	r3, 801f04a <__cxa_guard_acquire+0xc>
 801f048:	deff      	udf	#255	; 0xff
 801f04a:	2301      	movs	r3, #1
 801f04c:	7043      	strb	r3, [r0, #1]
 801f04e:	4618      	mov	r0, r3
 801f050:	4770      	bx	lr
 801f052:	2000      	movs	r0, #0
 801f054:	4770      	bx	lr

0801f056 <__cxa_guard_release>:
 801f056:	2301      	movs	r3, #1
 801f058:	6003      	str	r3, [r0, #0]
 801f05a:	4770      	bx	lr

0801f05c <__cxa_pure_virtual>:
 801f05c:	b508      	push	{r3, lr}
 801f05e:	f000 f80f 	bl	801f080 <_ZSt9terminatev>

0801f062 <_ZdlPv>:
 801f062:	f000 b989 	b.w	801f378 <free>

0801f066 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801f066:	b508      	push	{r3, lr}
 801f068:	4780      	blx	r0
 801f06a:	f000 f80e 	bl	801f08a <abort>
	...

0801f070 <_ZSt13get_terminatev>:
 801f070:	4b02      	ldr	r3, [pc, #8]	; (801f07c <_ZSt13get_terminatev+0xc>)
 801f072:	6818      	ldr	r0, [r3, #0]
 801f074:	f3bf 8f5b 	dmb	ish
 801f078:	4770      	bx	lr
 801f07a:	bf00      	nop
 801f07c:	20000090 	.word	0x20000090

0801f080 <_ZSt9terminatev>:
 801f080:	b508      	push	{r3, lr}
 801f082:	f7ff fff5 	bl	801f070 <_ZSt13get_terminatev>
 801f086:	f7ff ffee 	bl	801f066 <_ZN10__cxxabiv111__terminateEPFvvE>

0801f08a <abort>:
 801f08a:	b508      	push	{r3, lr}
 801f08c:	2006      	movs	r0, #6
 801f08e:	f000 fdcb 	bl	801fc28 <raise>
 801f092:	2001      	movs	r0, #1
 801f094:	f7e2 fa4a 	bl	800152c <_exit>

0801f098 <__assert_func>:
 801f098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f09a:	4614      	mov	r4, r2
 801f09c:	461a      	mov	r2, r3
 801f09e:	4b09      	ldr	r3, [pc, #36]	; (801f0c4 <__assert_func+0x2c>)
 801f0a0:	681b      	ldr	r3, [r3, #0]
 801f0a2:	4605      	mov	r5, r0
 801f0a4:	68d8      	ldr	r0, [r3, #12]
 801f0a6:	b14c      	cbz	r4, 801f0bc <__assert_func+0x24>
 801f0a8:	4b07      	ldr	r3, [pc, #28]	; (801f0c8 <__assert_func+0x30>)
 801f0aa:	9100      	str	r1, [sp, #0]
 801f0ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f0b0:	4906      	ldr	r1, [pc, #24]	; (801f0cc <__assert_func+0x34>)
 801f0b2:	462b      	mov	r3, r5
 801f0b4:	f000 f8fe 	bl	801f2b4 <fiprintf>
 801f0b8:	f7ff ffe7 	bl	801f08a <abort>
 801f0bc:	4b04      	ldr	r3, [pc, #16]	; (801f0d0 <__assert_func+0x38>)
 801f0be:	461c      	mov	r4, r3
 801f0c0:	e7f3      	b.n	801f0aa <__assert_func+0x12>
 801f0c2:	bf00      	nop
 801f0c4:	20000094 	.word	0x20000094
 801f0c8:	08023d59 	.word	0x08023d59
 801f0cc:	08023d66 	.word	0x08023d66
 801f0d0:	08023d94 	.word	0x08023d94

0801f0d4 <atexit>:
 801f0d4:	2300      	movs	r3, #0
 801f0d6:	4601      	mov	r1, r0
 801f0d8:	461a      	mov	r2, r3
 801f0da:	4618      	mov	r0, r3
 801f0dc:	f000 bed6 	b.w	801fe8c <__register_exitproc>

0801f0e0 <__cxa_atexit>:
 801f0e0:	b510      	push	{r4, lr}
 801f0e2:	4c05      	ldr	r4, [pc, #20]	; (801f0f8 <__cxa_atexit+0x18>)
 801f0e4:	4613      	mov	r3, r2
 801f0e6:	b12c      	cbz	r4, 801f0f4 <__cxa_atexit+0x14>
 801f0e8:	460a      	mov	r2, r1
 801f0ea:	4601      	mov	r1, r0
 801f0ec:	2002      	movs	r0, #2
 801f0ee:	f000 fecd 	bl	801fe8c <__register_exitproc>
 801f0f2:	bd10      	pop	{r4, pc}
 801f0f4:	4620      	mov	r0, r4
 801f0f6:	e7fc      	b.n	801f0f2 <__cxa_atexit+0x12>
 801f0f8:	0801fe8d 	.word	0x0801fe8d

0801f0fc <__errno>:
 801f0fc:	4b01      	ldr	r3, [pc, #4]	; (801f104 <__errno+0x8>)
 801f0fe:	6818      	ldr	r0, [r3, #0]
 801f100:	4770      	bx	lr
 801f102:	bf00      	nop
 801f104:	20000094 	.word	0x20000094

0801f108 <std>:
 801f108:	2300      	movs	r3, #0
 801f10a:	b510      	push	{r4, lr}
 801f10c:	4604      	mov	r4, r0
 801f10e:	e9c0 3300 	strd	r3, r3, [r0]
 801f112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f116:	6083      	str	r3, [r0, #8]
 801f118:	8181      	strh	r1, [r0, #12]
 801f11a:	6643      	str	r3, [r0, #100]	; 0x64
 801f11c:	81c2      	strh	r2, [r0, #14]
 801f11e:	6183      	str	r3, [r0, #24]
 801f120:	4619      	mov	r1, r3
 801f122:	2208      	movs	r2, #8
 801f124:	305c      	adds	r0, #92	; 0x5c
 801f126:	f000 f93d 	bl	801f3a4 <memset>
 801f12a:	4b05      	ldr	r3, [pc, #20]	; (801f140 <std+0x38>)
 801f12c:	6263      	str	r3, [r4, #36]	; 0x24
 801f12e:	4b05      	ldr	r3, [pc, #20]	; (801f144 <std+0x3c>)
 801f130:	62a3      	str	r3, [r4, #40]	; 0x28
 801f132:	4b05      	ldr	r3, [pc, #20]	; (801f148 <std+0x40>)
 801f134:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f136:	4b05      	ldr	r3, [pc, #20]	; (801f14c <std+0x44>)
 801f138:	6224      	str	r4, [r4, #32]
 801f13a:	6323      	str	r3, [r4, #48]	; 0x30
 801f13c:	bd10      	pop	{r4, pc}
 801f13e:	bf00      	nop
 801f140:	0801fc61 	.word	0x0801fc61
 801f144:	0801fc83 	.word	0x0801fc83
 801f148:	0801fcbb 	.word	0x0801fcbb
 801f14c:	0801fcdf 	.word	0x0801fcdf

0801f150 <_cleanup_r>:
 801f150:	4901      	ldr	r1, [pc, #4]	; (801f158 <_cleanup_r+0x8>)
 801f152:	f000 b8c1 	b.w	801f2d8 <_fwalk_reent>
 801f156:	bf00      	nop
 801f158:	0802007d 	.word	0x0802007d

0801f15c <__sfmoreglue>:
 801f15c:	b570      	push	{r4, r5, r6, lr}
 801f15e:	1e4a      	subs	r2, r1, #1
 801f160:	2568      	movs	r5, #104	; 0x68
 801f162:	4355      	muls	r5, r2
 801f164:	460e      	mov	r6, r1
 801f166:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f16a:	f000 f973 	bl	801f454 <_malloc_r>
 801f16e:	4604      	mov	r4, r0
 801f170:	b140      	cbz	r0, 801f184 <__sfmoreglue+0x28>
 801f172:	2100      	movs	r1, #0
 801f174:	e9c0 1600 	strd	r1, r6, [r0]
 801f178:	300c      	adds	r0, #12
 801f17a:	60a0      	str	r0, [r4, #8]
 801f17c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f180:	f000 f910 	bl	801f3a4 <memset>
 801f184:	4620      	mov	r0, r4
 801f186:	bd70      	pop	{r4, r5, r6, pc}

0801f188 <__sfp_lock_acquire>:
 801f188:	4801      	ldr	r0, [pc, #4]	; (801f190 <__sfp_lock_acquire+0x8>)
 801f18a:	f000 b8ea 	b.w	801f362 <__retarget_lock_acquire_recursive>
 801f18e:	bf00      	nop
 801f190:	2000a4f4 	.word	0x2000a4f4

0801f194 <__sfp_lock_release>:
 801f194:	4801      	ldr	r0, [pc, #4]	; (801f19c <__sfp_lock_release+0x8>)
 801f196:	f000 b8e6 	b.w	801f366 <__retarget_lock_release_recursive>
 801f19a:	bf00      	nop
 801f19c:	2000a4f4 	.word	0x2000a4f4

0801f1a0 <__sinit_lock_acquire>:
 801f1a0:	4801      	ldr	r0, [pc, #4]	; (801f1a8 <__sinit_lock_acquire+0x8>)
 801f1a2:	f000 b8de 	b.w	801f362 <__retarget_lock_acquire_recursive>
 801f1a6:	bf00      	nop
 801f1a8:	2000a4ef 	.word	0x2000a4ef

0801f1ac <__sinit_lock_release>:
 801f1ac:	4801      	ldr	r0, [pc, #4]	; (801f1b4 <__sinit_lock_release+0x8>)
 801f1ae:	f000 b8da 	b.w	801f366 <__retarget_lock_release_recursive>
 801f1b2:	bf00      	nop
 801f1b4:	2000a4ef 	.word	0x2000a4ef

0801f1b8 <__sinit>:
 801f1b8:	b510      	push	{r4, lr}
 801f1ba:	4604      	mov	r4, r0
 801f1bc:	f7ff fff0 	bl	801f1a0 <__sinit_lock_acquire>
 801f1c0:	69a3      	ldr	r3, [r4, #24]
 801f1c2:	b11b      	cbz	r3, 801f1cc <__sinit+0x14>
 801f1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1c8:	f7ff bff0 	b.w	801f1ac <__sinit_lock_release>
 801f1cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f1d0:	6523      	str	r3, [r4, #80]	; 0x50
 801f1d2:	4b13      	ldr	r3, [pc, #76]	; (801f220 <__sinit+0x68>)
 801f1d4:	4a13      	ldr	r2, [pc, #76]	; (801f224 <__sinit+0x6c>)
 801f1d6:	681b      	ldr	r3, [r3, #0]
 801f1d8:	62a2      	str	r2, [r4, #40]	; 0x28
 801f1da:	42a3      	cmp	r3, r4
 801f1dc:	bf04      	itt	eq
 801f1de:	2301      	moveq	r3, #1
 801f1e0:	61a3      	streq	r3, [r4, #24]
 801f1e2:	4620      	mov	r0, r4
 801f1e4:	f000 f820 	bl	801f228 <__sfp>
 801f1e8:	6060      	str	r0, [r4, #4]
 801f1ea:	4620      	mov	r0, r4
 801f1ec:	f000 f81c 	bl	801f228 <__sfp>
 801f1f0:	60a0      	str	r0, [r4, #8]
 801f1f2:	4620      	mov	r0, r4
 801f1f4:	f000 f818 	bl	801f228 <__sfp>
 801f1f8:	2200      	movs	r2, #0
 801f1fa:	60e0      	str	r0, [r4, #12]
 801f1fc:	2104      	movs	r1, #4
 801f1fe:	6860      	ldr	r0, [r4, #4]
 801f200:	f7ff ff82 	bl	801f108 <std>
 801f204:	68a0      	ldr	r0, [r4, #8]
 801f206:	2201      	movs	r2, #1
 801f208:	2109      	movs	r1, #9
 801f20a:	f7ff ff7d 	bl	801f108 <std>
 801f20e:	68e0      	ldr	r0, [r4, #12]
 801f210:	2202      	movs	r2, #2
 801f212:	2112      	movs	r1, #18
 801f214:	f7ff ff78 	bl	801f108 <std>
 801f218:	2301      	movs	r3, #1
 801f21a:	61a3      	str	r3, [r4, #24]
 801f21c:	e7d2      	b.n	801f1c4 <__sinit+0xc>
 801f21e:	bf00      	nop
 801f220:	08023df8 	.word	0x08023df8
 801f224:	0801f151 	.word	0x0801f151

0801f228 <__sfp>:
 801f228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f22a:	4607      	mov	r7, r0
 801f22c:	f7ff ffac 	bl	801f188 <__sfp_lock_acquire>
 801f230:	4b1e      	ldr	r3, [pc, #120]	; (801f2ac <__sfp+0x84>)
 801f232:	681e      	ldr	r6, [r3, #0]
 801f234:	69b3      	ldr	r3, [r6, #24]
 801f236:	b913      	cbnz	r3, 801f23e <__sfp+0x16>
 801f238:	4630      	mov	r0, r6
 801f23a:	f7ff ffbd 	bl	801f1b8 <__sinit>
 801f23e:	3648      	adds	r6, #72	; 0x48
 801f240:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f244:	3b01      	subs	r3, #1
 801f246:	d503      	bpl.n	801f250 <__sfp+0x28>
 801f248:	6833      	ldr	r3, [r6, #0]
 801f24a:	b30b      	cbz	r3, 801f290 <__sfp+0x68>
 801f24c:	6836      	ldr	r6, [r6, #0]
 801f24e:	e7f7      	b.n	801f240 <__sfp+0x18>
 801f250:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f254:	b9d5      	cbnz	r5, 801f28c <__sfp+0x64>
 801f256:	4b16      	ldr	r3, [pc, #88]	; (801f2b0 <__sfp+0x88>)
 801f258:	60e3      	str	r3, [r4, #12]
 801f25a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f25e:	6665      	str	r5, [r4, #100]	; 0x64
 801f260:	f000 f87e 	bl	801f360 <__retarget_lock_init_recursive>
 801f264:	f7ff ff96 	bl	801f194 <__sfp_lock_release>
 801f268:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f26c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f270:	6025      	str	r5, [r4, #0]
 801f272:	61a5      	str	r5, [r4, #24]
 801f274:	2208      	movs	r2, #8
 801f276:	4629      	mov	r1, r5
 801f278:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f27c:	f000 f892 	bl	801f3a4 <memset>
 801f280:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f284:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f288:	4620      	mov	r0, r4
 801f28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f28c:	3468      	adds	r4, #104	; 0x68
 801f28e:	e7d9      	b.n	801f244 <__sfp+0x1c>
 801f290:	2104      	movs	r1, #4
 801f292:	4638      	mov	r0, r7
 801f294:	f7ff ff62 	bl	801f15c <__sfmoreglue>
 801f298:	4604      	mov	r4, r0
 801f29a:	6030      	str	r0, [r6, #0]
 801f29c:	2800      	cmp	r0, #0
 801f29e:	d1d5      	bne.n	801f24c <__sfp+0x24>
 801f2a0:	f7ff ff78 	bl	801f194 <__sfp_lock_release>
 801f2a4:	230c      	movs	r3, #12
 801f2a6:	603b      	str	r3, [r7, #0]
 801f2a8:	e7ee      	b.n	801f288 <__sfp+0x60>
 801f2aa:	bf00      	nop
 801f2ac:	08023df8 	.word	0x08023df8
 801f2b0:	ffff0001 	.word	0xffff0001

0801f2b4 <fiprintf>:
 801f2b4:	b40e      	push	{r1, r2, r3}
 801f2b6:	b503      	push	{r0, r1, lr}
 801f2b8:	4601      	mov	r1, r0
 801f2ba:	ab03      	add	r3, sp, #12
 801f2bc:	4805      	ldr	r0, [pc, #20]	; (801f2d4 <fiprintf+0x20>)
 801f2be:	f853 2b04 	ldr.w	r2, [r3], #4
 801f2c2:	6800      	ldr	r0, [r0, #0]
 801f2c4:	9301      	str	r3, [sp, #4]
 801f2c6:	f000 f949 	bl	801f55c <_vfiprintf_r>
 801f2ca:	b002      	add	sp, #8
 801f2cc:	f85d eb04 	ldr.w	lr, [sp], #4
 801f2d0:	b003      	add	sp, #12
 801f2d2:	4770      	bx	lr
 801f2d4:	20000094 	.word	0x20000094

0801f2d8 <_fwalk_reent>:
 801f2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f2dc:	4606      	mov	r6, r0
 801f2de:	4688      	mov	r8, r1
 801f2e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f2e4:	2700      	movs	r7, #0
 801f2e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f2ea:	f1b9 0901 	subs.w	r9, r9, #1
 801f2ee:	d505      	bpl.n	801f2fc <_fwalk_reent+0x24>
 801f2f0:	6824      	ldr	r4, [r4, #0]
 801f2f2:	2c00      	cmp	r4, #0
 801f2f4:	d1f7      	bne.n	801f2e6 <_fwalk_reent+0xe>
 801f2f6:	4638      	mov	r0, r7
 801f2f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f2fc:	89ab      	ldrh	r3, [r5, #12]
 801f2fe:	2b01      	cmp	r3, #1
 801f300:	d907      	bls.n	801f312 <_fwalk_reent+0x3a>
 801f302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f306:	3301      	adds	r3, #1
 801f308:	d003      	beq.n	801f312 <_fwalk_reent+0x3a>
 801f30a:	4629      	mov	r1, r5
 801f30c:	4630      	mov	r0, r6
 801f30e:	47c0      	blx	r8
 801f310:	4307      	orrs	r7, r0
 801f312:	3568      	adds	r5, #104	; 0x68
 801f314:	e7e9      	b.n	801f2ea <_fwalk_reent+0x12>
	...

0801f318 <__libc_init_array>:
 801f318:	b570      	push	{r4, r5, r6, lr}
 801f31a:	4d0d      	ldr	r5, [pc, #52]	; (801f350 <__libc_init_array+0x38>)
 801f31c:	4c0d      	ldr	r4, [pc, #52]	; (801f354 <__libc_init_array+0x3c>)
 801f31e:	1b64      	subs	r4, r4, r5
 801f320:	10a4      	asrs	r4, r4, #2
 801f322:	2600      	movs	r6, #0
 801f324:	42a6      	cmp	r6, r4
 801f326:	d109      	bne.n	801f33c <__libc_init_array+0x24>
 801f328:	4d0b      	ldr	r5, [pc, #44]	; (801f358 <__libc_init_array+0x40>)
 801f32a:	4c0c      	ldr	r4, [pc, #48]	; (801f35c <__libc_init_array+0x44>)
 801f32c:	f000 ff98 	bl	8020260 <_init>
 801f330:	1b64      	subs	r4, r4, r5
 801f332:	10a4      	asrs	r4, r4, #2
 801f334:	2600      	movs	r6, #0
 801f336:	42a6      	cmp	r6, r4
 801f338:	d105      	bne.n	801f346 <__libc_init_array+0x2e>
 801f33a:	bd70      	pop	{r4, r5, r6, pc}
 801f33c:	f855 3b04 	ldr.w	r3, [r5], #4
 801f340:	4798      	blx	r3
 801f342:	3601      	adds	r6, #1
 801f344:	e7ee      	b.n	801f324 <__libc_init_array+0xc>
 801f346:	f855 3b04 	ldr.w	r3, [r5], #4
 801f34a:	4798      	blx	r3
 801f34c:	3601      	adds	r6, #1
 801f34e:	e7f2      	b.n	801f336 <__libc_init_array+0x1e>
 801f350:	0809c488 	.word	0x0809c488
 801f354:	0809c488 	.word	0x0809c488
 801f358:	0809c488 	.word	0x0809c488
 801f35c:	0809c49c 	.word	0x0809c49c

0801f360 <__retarget_lock_init_recursive>:
 801f360:	4770      	bx	lr

0801f362 <__retarget_lock_acquire_recursive>:
 801f362:	4770      	bx	lr

0801f364 <__retarget_lock_release>:
 801f364:	4770      	bx	lr

0801f366 <__retarget_lock_release_recursive>:
 801f366:	4770      	bx	lr

0801f368 <malloc>:
 801f368:	4b02      	ldr	r3, [pc, #8]	; (801f374 <malloc+0xc>)
 801f36a:	4601      	mov	r1, r0
 801f36c:	6818      	ldr	r0, [r3, #0]
 801f36e:	f000 b871 	b.w	801f454 <_malloc_r>
 801f372:	bf00      	nop
 801f374:	20000094 	.word	0x20000094

0801f378 <free>:
 801f378:	4b02      	ldr	r3, [pc, #8]	; (801f384 <free+0xc>)
 801f37a:	4601      	mov	r1, r0
 801f37c:	6818      	ldr	r0, [r3, #0]
 801f37e:	f000 b819 	b.w	801f3b4 <_free_r>
 801f382:	bf00      	nop
 801f384:	20000094 	.word	0x20000094

0801f388 <memcpy>:
 801f388:	440a      	add	r2, r1
 801f38a:	4291      	cmp	r1, r2
 801f38c:	f100 33ff 	add.w	r3, r0, #4294967295
 801f390:	d100      	bne.n	801f394 <memcpy+0xc>
 801f392:	4770      	bx	lr
 801f394:	b510      	push	{r4, lr}
 801f396:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f39a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f39e:	4291      	cmp	r1, r2
 801f3a0:	d1f9      	bne.n	801f396 <memcpy+0xe>
 801f3a2:	bd10      	pop	{r4, pc}

0801f3a4 <memset>:
 801f3a4:	4402      	add	r2, r0
 801f3a6:	4603      	mov	r3, r0
 801f3a8:	4293      	cmp	r3, r2
 801f3aa:	d100      	bne.n	801f3ae <memset+0xa>
 801f3ac:	4770      	bx	lr
 801f3ae:	f803 1b01 	strb.w	r1, [r3], #1
 801f3b2:	e7f9      	b.n	801f3a8 <memset+0x4>

0801f3b4 <_free_r>:
 801f3b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f3b6:	2900      	cmp	r1, #0
 801f3b8:	d048      	beq.n	801f44c <_free_r+0x98>
 801f3ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f3be:	9001      	str	r0, [sp, #4]
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	f1a1 0404 	sub.w	r4, r1, #4
 801f3c6:	bfb8      	it	lt
 801f3c8:	18e4      	addlt	r4, r4, r3
 801f3ca:	f000 ff09 	bl	80201e0 <__malloc_lock>
 801f3ce:	4a20      	ldr	r2, [pc, #128]	; (801f450 <_free_r+0x9c>)
 801f3d0:	9801      	ldr	r0, [sp, #4]
 801f3d2:	6813      	ldr	r3, [r2, #0]
 801f3d4:	4615      	mov	r5, r2
 801f3d6:	b933      	cbnz	r3, 801f3e6 <_free_r+0x32>
 801f3d8:	6063      	str	r3, [r4, #4]
 801f3da:	6014      	str	r4, [r2, #0]
 801f3dc:	b003      	add	sp, #12
 801f3de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f3e2:	f000 bf03 	b.w	80201ec <__malloc_unlock>
 801f3e6:	42a3      	cmp	r3, r4
 801f3e8:	d90b      	bls.n	801f402 <_free_r+0x4e>
 801f3ea:	6821      	ldr	r1, [r4, #0]
 801f3ec:	1862      	adds	r2, r4, r1
 801f3ee:	4293      	cmp	r3, r2
 801f3f0:	bf04      	itt	eq
 801f3f2:	681a      	ldreq	r2, [r3, #0]
 801f3f4:	685b      	ldreq	r3, [r3, #4]
 801f3f6:	6063      	str	r3, [r4, #4]
 801f3f8:	bf04      	itt	eq
 801f3fa:	1852      	addeq	r2, r2, r1
 801f3fc:	6022      	streq	r2, [r4, #0]
 801f3fe:	602c      	str	r4, [r5, #0]
 801f400:	e7ec      	b.n	801f3dc <_free_r+0x28>
 801f402:	461a      	mov	r2, r3
 801f404:	685b      	ldr	r3, [r3, #4]
 801f406:	b10b      	cbz	r3, 801f40c <_free_r+0x58>
 801f408:	42a3      	cmp	r3, r4
 801f40a:	d9fa      	bls.n	801f402 <_free_r+0x4e>
 801f40c:	6811      	ldr	r1, [r2, #0]
 801f40e:	1855      	adds	r5, r2, r1
 801f410:	42a5      	cmp	r5, r4
 801f412:	d10b      	bne.n	801f42c <_free_r+0x78>
 801f414:	6824      	ldr	r4, [r4, #0]
 801f416:	4421      	add	r1, r4
 801f418:	1854      	adds	r4, r2, r1
 801f41a:	42a3      	cmp	r3, r4
 801f41c:	6011      	str	r1, [r2, #0]
 801f41e:	d1dd      	bne.n	801f3dc <_free_r+0x28>
 801f420:	681c      	ldr	r4, [r3, #0]
 801f422:	685b      	ldr	r3, [r3, #4]
 801f424:	6053      	str	r3, [r2, #4]
 801f426:	4421      	add	r1, r4
 801f428:	6011      	str	r1, [r2, #0]
 801f42a:	e7d7      	b.n	801f3dc <_free_r+0x28>
 801f42c:	d902      	bls.n	801f434 <_free_r+0x80>
 801f42e:	230c      	movs	r3, #12
 801f430:	6003      	str	r3, [r0, #0]
 801f432:	e7d3      	b.n	801f3dc <_free_r+0x28>
 801f434:	6825      	ldr	r5, [r4, #0]
 801f436:	1961      	adds	r1, r4, r5
 801f438:	428b      	cmp	r3, r1
 801f43a:	bf04      	itt	eq
 801f43c:	6819      	ldreq	r1, [r3, #0]
 801f43e:	685b      	ldreq	r3, [r3, #4]
 801f440:	6063      	str	r3, [r4, #4]
 801f442:	bf04      	itt	eq
 801f444:	1949      	addeq	r1, r1, r5
 801f446:	6021      	streq	r1, [r4, #0]
 801f448:	6054      	str	r4, [r2, #4]
 801f44a:	e7c7      	b.n	801f3dc <_free_r+0x28>
 801f44c:	b003      	add	sp, #12
 801f44e:	bd30      	pop	{r4, r5, pc}
 801f450:	2000a090 	.word	0x2000a090

0801f454 <_malloc_r>:
 801f454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f456:	1ccd      	adds	r5, r1, #3
 801f458:	f025 0503 	bic.w	r5, r5, #3
 801f45c:	3508      	adds	r5, #8
 801f45e:	2d0c      	cmp	r5, #12
 801f460:	bf38      	it	cc
 801f462:	250c      	movcc	r5, #12
 801f464:	2d00      	cmp	r5, #0
 801f466:	4606      	mov	r6, r0
 801f468:	db01      	blt.n	801f46e <_malloc_r+0x1a>
 801f46a:	42a9      	cmp	r1, r5
 801f46c:	d903      	bls.n	801f476 <_malloc_r+0x22>
 801f46e:	230c      	movs	r3, #12
 801f470:	6033      	str	r3, [r6, #0]
 801f472:	2000      	movs	r0, #0
 801f474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f476:	f000 feb3 	bl	80201e0 <__malloc_lock>
 801f47a:	4921      	ldr	r1, [pc, #132]	; (801f500 <_malloc_r+0xac>)
 801f47c:	680a      	ldr	r2, [r1, #0]
 801f47e:	4614      	mov	r4, r2
 801f480:	b99c      	cbnz	r4, 801f4aa <_malloc_r+0x56>
 801f482:	4f20      	ldr	r7, [pc, #128]	; (801f504 <_malloc_r+0xb0>)
 801f484:	683b      	ldr	r3, [r7, #0]
 801f486:	b923      	cbnz	r3, 801f492 <_malloc_r+0x3e>
 801f488:	4621      	mov	r1, r4
 801f48a:	4630      	mov	r0, r6
 801f48c:	f000 fb94 	bl	801fbb8 <_sbrk_r>
 801f490:	6038      	str	r0, [r7, #0]
 801f492:	4629      	mov	r1, r5
 801f494:	4630      	mov	r0, r6
 801f496:	f000 fb8f 	bl	801fbb8 <_sbrk_r>
 801f49a:	1c43      	adds	r3, r0, #1
 801f49c:	d123      	bne.n	801f4e6 <_malloc_r+0x92>
 801f49e:	230c      	movs	r3, #12
 801f4a0:	6033      	str	r3, [r6, #0]
 801f4a2:	4630      	mov	r0, r6
 801f4a4:	f000 fea2 	bl	80201ec <__malloc_unlock>
 801f4a8:	e7e3      	b.n	801f472 <_malloc_r+0x1e>
 801f4aa:	6823      	ldr	r3, [r4, #0]
 801f4ac:	1b5b      	subs	r3, r3, r5
 801f4ae:	d417      	bmi.n	801f4e0 <_malloc_r+0x8c>
 801f4b0:	2b0b      	cmp	r3, #11
 801f4b2:	d903      	bls.n	801f4bc <_malloc_r+0x68>
 801f4b4:	6023      	str	r3, [r4, #0]
 801f4b6:	441c      	add	r4, r3
 801f4b8:	6025      	str	r5, [r4, #0]
 801f4ba:	e004      	b.n	801f4c6 <_malloc_r+0x72>
 801f4bc:	6863      	ldr	r3, [r4, #4]
 801f4be:	42a2      	cmp	r2, r4
 801f4c0:	bf0c      	ite	eq
 801f4c2:	600b      	streq	r3, [r1, #0]
 801f4c4:	6053      	strne	r3, [r2, #4]
 801f4c6:	4630      	mov	r0, r6
 801f4c8:	f000 fe90 	bl	80201ec <__malloc_unlock>
 801f4cc:	f104 000b 	add.w	r0, r4, #11
 801f4d0:	1d23      	adds	r3, r4, #4
 801f4d2:	f020 0007 	bic.w	r0, r0, #7
 801f4d6:	1ac2      	subs	r2, r0, r3
 801f4d8:	d0cc      	beq.n	801f474 <_malloc_r+0x20>
 801f4da:	1a1b      	subs	r3, r3, r0
 801f4dc:	50a3      	str	r3, [r4, r2]
 801f4de:	e7c9      	b.n	801f474 <_malloc_r+0x20>
 801f4e0:	4622      	mov	r2, r4
 801f4e2:	6864      	ldr	r4, [r4, #4]
 801f4e4:	e7cc      	b.n	801f480 <_malloc_r+0x2c>
 801f4e6:	1cc4      	adds	r4, r0, #3
 801f4e8:	f024 0403 	bic.w	r4, r4, #3
 801f4ec:	42a0      	cmp	r0, r4
 801f4ee:	d0e3      	beq.n	801f4b8 <_malloc_r+0x64>
 801f4f0:	1a21      	subs	r1, r4, r0
 801f4f2:	4630      	mov	r0, r6
 801f4f4:	f000 fb60 	bl	801fbb8 <_sbrk_r>
 801f4f8:	3001      	adds	r0, #1
 801f4fa:	d1dd      	bne.n	801f4b8 <_malloc_r+0x64>
 801f4fc:	e7cf      	b.n	801f49e <_malloc_r+0x4a>
 801f4fe:	bf00      	nop
 801f500:	2000a090 	.word	0x2000a090
 801f504:	2000a094 	.word	0x2000a094

0801f508 <__sfputc_r>:
 801f508:	6893      	ldr	r3, [r2, #8]
 801f50a:	3b01      	subs	r3, #1
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	b410      	push	{r4}
 801f510:	6093      	str	r3, [r2, #8]
 801f512:	da08      	bge.n	801f526 <__sfputc_r+0x1e>
 801f514:	6994      	ldr	r4, [r2, #24]
 801f516:	42a3      	cmp	r3, r4
 801f518:	db01      	blt.n	801f51e <__sfputc_r+0x16>
 801f51a:	290a      	cmp	r1, #10
 801f51c:	d103      	bne.n	801f526 <__sfputc_r+0x1e>
 801f51e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f522:	f000 bbe1 	b.w	801fce8 <__swbuf_r>
 801f526:	6813      	ldr	r3, [r2, #0]
 801f528:	1c58      	adds	r0, r3, #1
 801f52a:	6010      	str	r0, [r2, #0]
 801f52c:	7019      	strb	r1, [r3, #0]
 801f52e:	4608      	mov	r0, r1
 801f530:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f534:	4770      	bx	lr

0801f536 <__sfputs_r>:
 801f536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f538:	4606      	mov	r6, r0
 801f53a:	460f      	mov	r7, r1
 801f53c:	4614      	mov	r4, r2
 801f53e:	18d5      	adds	r5, r2, r3
 801f540:	42ac      	cmp	r4, r5
 801f542:	d101      	bne.n	801f548 <__sfputs_r+0x12>
 801f544:	2000      	movs	r0, #0
 801f546:	e007      	b.n	801f558 <__sfputs_r+0x22>
 801f548:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f54c:	463a      	mov	r2, r7
 801f54e:	4630      	mov	r0, r6
 801f550:	f7ff ffda 	bl	801f508 <__sfputc_r>
 801f554:	1c43      	adds	r3, r0, #1
 801f556:	d1f3      	bne.n	801f540 <__sfputs_r+0xa>
 801f558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f55c <_vfiprintf_r>:
 801f55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f560:	460d      	mov	r5, r1
 801f562:	b09d      	sub	sp, #116	; 0x74
 801f564:	4614      	mov	r4, r2
 801f566:	4698      	mov	r8, r3
 801f568:	4606      	mov	r6, r0
 801f56a:	b118      	cbz	r0, 801f574 <_vfiprintf_r+0x18>
 801f56c:	6983      	ldr	r3, [r0, #24]
 801f56e:	b90b      	cbnz	r3, 801f574 <_vfiprintf_r+0x18>
 801f570:	f7ff fe22 	bl	801f1b8 <__sinit>
 801f574:	4b89      	ldr	r3, [pc, #548]	; (801f79c <_vfiprintf_r+0x240>)
 801f576:	429d      	cmp	r5, r3
 801f578:	d11b      	bne.n	801f5b2 <_vfiprintf_r+0x56>
 801f57a:	6875      	ldr	r5, [r6, #4]
 801f57c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f57e:	07d9      	lsls	r1, r3, #31
 801f580:	d405      	bmi.n	801f58e <_vfiprintf_r+0x32>
 801f582:	89ab      	ldrh	r3, [r5, #12]
 801f584:	059a      	lsls	r2, r3, #22
 801f586:	d402      	bmi.n	801f58e <_vfiprintf_r+0x32>
 801f588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f58a:	f7ff feea 	bl	801f362 <__retarget_lock_acquire_recursive>
 801f58e:	89ab      	ldrh	r3, [r5, #12]
 801f590:	071b      	lsls	r3, r3, #28
 801f592:	d501      	bpl.n	801f598 <_vfiprintf_r+0x3c>
 801f594:	692b      	ldr	r3, [r5, #16]
 801f596:	b9eb      	cbnz	r3, 801f5d4 <_vfiprintf_r+0x78>
 801f598:	4629      	mov	r1, r5
 801f59a:	4630      	mov	r0, r6
 801f59c:	f000 fc08 	bl	801fdb0 <__swsetup_r>
 801f5a0:	b1c0      	cbz	r0, 801f5d4 <_vfiprintf_r+0x78>
 801f5a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f5a4:	07dc      	lsls	r4, r3, #31
 801f5a6:	d50e      	bpl.n	801f5c6 <_vfiprintf_r+0x6a>
 801f5a8:	f04f 30ff 	mov.w	r0, #4294967295
 801f5ac:	b01d      	add	sp, #116	; 0x74
 801f5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5b2:	4b7b      	ldr	r3, [pc, #492]	; (801f7a0 <_vfiprintf_r+0x244>)
 801f5b4:	429d      	cmp	r5, r3
 801f5b6:	d101      	bne.n	801f5bc <_vfiprintf_r+0x60>
 801f5b8:	68b5      	ldr	r5, [r6, #8]
 801f5ba:	e7df      	b.n	801f57c <_vfiprintf_r+0x20>
 801f5bc:	4b79      	ldr	r3, [pc, #484]	; (801f7a4 <_vfiprintf_r+0x248>)
 801f5be:	429d      	cmp	r5, r3
 801f5c0:	bf08      	it	eq
 801f5c2:	68f5      	ldreq	r5, [r6, #12]
 801f5c4:	e7da      	b.n	801f57c <_vfiprintf_r+0x20>
 801f5c6:	89ab      	ldrh	r3, [r5, #12]
 801f5c8:	0598      	lsls	r0, r3, #22
 801f5ca:	d4ed      	bmi.n	801f5a8 <_vfiprintf_r+0x4c>
 801f5cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f5ce:	f7ff feca 	bl	801f366 <__retarget_lock_release_recursive>
 801f5d2:	e7e9      	b.n	801f5a8 <_vfiprintf_r+0x4c>
 801f5d4:	2300      	movs	r3, #0
 801f5d6:	9309      	str	r3, [sp, #36]	; 0x24
 801f5d8:	2320      	movs	r3, #32
 801f5da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f5de:	f8cd 800c 	str.w	r8, [sp, #12]
 801f5e2:	2330      	movs	r3, #48	; 0x30
 801f5e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f7a8 <_vfiprintf_r+0x24c>
 801f5e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f5ec:	f04f 0901 	mov.w	r9, #1
 801f5f0:	4623      	mov	r3, r4
 801f5f2:	469a      	mov	sl, r3
 801f5f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f5f8:	b10a      	cbz	r2, 801f5fe <_vfiprintf_r+0xa2>
 801f5fa:	2a25      	cmp	r2, #37	; 0x25
 801f5fc:	d1f9      	bne.n	801f5f2 <_vfiprintf_r+0x96>
 801f5fe:	ebba 0b04 	subs.w	fp, sl, r4
 801f602:	d00b      	beq.n	801f61c <_vfiprintf_r+0xc0>
 801f604:	465b      	mov	r3, fp
 801f606:	4622      	mov	r2, r4
 801f608:	4629      	mov	r1, r5
 801f60a:	4630      	mov	r0, r6
 801f60c:	f7ff ff93 	bl	801f536 <__sfputs_r>
 801f610:	3001      	adds	r0, #1
 801f612:	f000 80aa 	beq.w	801f76a <_vfiprintf_r+0x20e>
 801f616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f618:	445a      	add	r2, fp
 801f61a:	9209      	str	r2, [sp, #36]	; 0x24
 801f61c:	f89a 3000 	ldrb.w	r3, [sl]
 801f620:	2b00      	cmp	r3, #0
 801f622:	f000 80a2 	beq.w	801f76a <_vfiprintf_r+0x20e>
 801f626:	2300      	movs	r3, #0
 801f628:	f04f 32ff 	mov.w	r2, #4294967295
 801f62c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f630:	f10a 0a01 	add.w	sl, sl, #1
 801f634:	9304      	str	r3, [sp, #16]
 801f636:	9307      	str	r3, [sp, #28]
 801f638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f63c:	931a      	str	r3, [sp, #104]	; 0x68
 801f63e:	4654      	mov	r4, sl
 801f640:	2205      	movs	r2, #5
 801f642:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f646:	4858      	ldr	r0, [pc, #352]	; (801f7a8 <_vfiprintf_r+0x24c>)
 801f648:	f7e0 fde2 	bl	8000210 <memchr>
 801f64c:	9a04      	ldr	r2, [sp, #16]
 801f64e:	b9d8      	cbnz	r0, 801f688 <_vfiprintf_r+0x12c>
 801f650:	06d1      	lsls	r1, r2, #27
 801f652:	bf44      	itt	mi
 801f654:	2320      	movmi	r3, #32
 801f656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f65a:	0713      	lsls	r3, r2, #28
 801f65c:	bf44      	itt	mi
 801f65e:	232b      	movmi	r3, #43	; 0x2b
 801f660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f664:	f89a 3000 	ldrb.w	r3, [sl]
 801f668:	2b2a      	cmp	r3, #42	; 0x2a
 801f66a:	d015      	beq.n	801f698 <_vfiprintf_r+0x13c>
 801f66c:	9a07      	ldr	r2, [sp, #28]
 801f66e:	4654      	mov	r4, sl
 801f670:	2000      	movs	r0, #0
 801f672:	f04f 0c0a 	mov.w	ip, #10
 801f676:	4621      	mov	r1, r4
 801f678:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f67c:	3b30      	subs	r3, #48	; 0x30
 801f67e:	2b09      	cmp	r3, #9
 801f680:	d94e      	bls.n	801f720 <_vfiprintf_r+0x1c4>
 801f682:	b1b0      	cbz	r0, 801f6b2 <_vfiprintf_r+0x156>
 801f684:	9207      	str	r2, [sp, #28]
 801f686:	e014      	b.n	801f6b2 <_vfiprintf_r+0x156>
 801f688:	eba0 0308 	sub.w	r3, r0, r8
 801f68c:	fa09 f303 	lsl.w	r3, r9, r3
 801f690:	4313      	orrs	r3, r2
 801f692:	9304      	str	r3, [sp, #16]
 801f694:	46a2      	mov	sl, r4
 801f696:	e7d2      	b.n	801f63e <_vfiprintf_r+0xe2>
 801f698:	9b03      	ldr	r3, [sp, #12]
 801f69a:	1d19      	adds	r1, r3, #4
 801f69c:	681b      	ldr	r3, [r3, #0]
 801f69e:	9103      	str	r1, [sp, #12]
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	bfbb      	ittet	lt
 801f6a4:	425b      	neglt	r3, r3
 801f6a6:	f042 0202 	orrlt.w	r2, r2, #2
 801f6aa:	9307      	strge	r3, [sp, #28]
 801f6ac:	9307      	strlt	r3, [sp, #28]
 801f6ae:	bfb8      	it	lt
 801f6b0:	9204      	strlt	r2, [sp, #16]
 801f6b2:	7823      	ldrb	r3, [r4, #0]
 801f6b4:	2b2e      	cmp	r3, #46	; 0x2e
 801f6b6:	d10c      	bne.n	801f6d2 <_vfiprintf_r+0x176>
 801f6b8:	7863      	ldrb	r3, [r4, #1]
 801f6ba:	2b2a      	cmp	r3, #42	; 0x2a
 801f6bc:	d135      	bne.n	801f72a <_vfiprintf_r+0x1ce>
 801f6be:	9b03      	ldr	r3, [sp, #12]
 801f6c0:	1d1a      	adds	r2, r3, #4
 801f6c2:	681b      	ldr	r3, [r3, #0]
 801f6c4:	9203      	str	r2, [sp, #12]
 801f6c6:	2b00      	cmp	r3, #0
 801f6c8:	bfb8      	it	lt
 801f6ca:	f04f 33ff 	movlt.w	r3, #4294967295
 801f6ce:	3402      	adds	r4, #2
 801f6d0:	9305      	str	r3, [sp, #20]
 801f6d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f7b8 <_vfiprintf_r+0x25c>
 801f6d6:	7821      	ldrb	r1, [r4, #0]
 801f6d8:	2203      	movs	r2, #3
 801f6da:	4650      	mov	r0, sl
 801f6dc:	f7e0 fd98 	bl	8000210 <memchr>
 801f6e0:	b140      	cbz	r0, 801f6f4 <_vfiprintf_r+0x198>
 801f6e2:	2340      	movs	r3, #64	; 0x40
 801f6e4:	eba0 000a 	sub.w	r0, r0, sl
 801f6e8:	fa03 f000 	lsl.w	r0, r3, r0
 801f6ec:	9b04      	ldr	r3, [sp, #16]
 801f6ee:	4303      	orrs	r3, r0
 801f6f0:	3401      	adds	r4, #1
 801f6f2:	9304      	str	r3, [sp, #16]
 801f6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f6f8:	482c      	ldr	r0, [pc, #176]	; (801f7ac <_vfiprintf_r+0x250>)
 801f6fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f6fe:	2206      	movs	r2, #6
 801f700:	f7e0 fd86 	bl	8000210 <memchr>
 801f704:	2800      	cmp	r0, #0
 801f706:	d03f      	beq.n	801f788 <_vfiprintf_r+0x22c>
 801f708:	4b29      	ldr	r3, [pc, #164]	; (801f7b0 <_vfiprintf_r+0x254>)
 801f70a:	bb1b      	cbnz	r3, 801f754 <_vfiprintf_r+0x1f8>
 801f70c:	9b03      	ldr	r3, [sp, #12]
 801f70e:	3307      	adds	r3, #7
 801f710:	f023 0307 	bic.w	r3, r3, #7
 801f714:	3308      	adds	r3, #8
 801f716:	9303      	str	r3, [sp, #12]
 801f718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f71a:	443b      	add	r3, r7
 801f71c:	9309      	str	r3, [sp, #36]	; 0x24
 801f71e:	e767      	b.n	801f5f0 <_vfiprintf_r+0x94>
 801f720:	fb0c 3202 	mla	r2, ip, r2, r3
 801f724:	460c      	mov	r4, r1
 801f726:	2001      	movs	r0, #1
 801f728:	e7a5      	b.n	801f676 <_vfiprintf_r+0x11a>
 801f72a:	2300      	movs	r3, #0
 801f72c:	3401      	adds	r4, #1
 801f72e:	9305      	str	r3, [sp, #20]
 801f730:	4619      	mov	r1, r3
 801f732:	f04f 0c0a 	mov.w	ip, #10
 801f736:	4620      	mov	r0, r4
 801f738:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f73c:	3a30      	subs	r2, #48	; 0x30
 801f73e:	2a09      	cmp	r2, #9
 801f740:	d903      	bls.n	801f74a <_vfiprintf_r+0x1ee>
 801f742:	2b00      	cmp	r3, #0
 801f744:	d0c5      	beq.n	801f6d2 <_vfiprintf_r+0x176>
 801f746:	9105      	str	r1, [sp, #20]
 801f748:	e7c3      	b.n	801f6d2 <_vfiprintf_r+0x176>
 801f74a:	fb0c 2101 	mla	r1, ip, r1, r2
 801f74e:	4604      	mov	r4, r0
 801f750:	2301      	movs	r3, #1
 801f752:	e7f0      	b.n	801f736 <_vfiprintf_r+0x1da>
 801f754:	ab03      	add	r3, sp, #12
 801f756:	9300      	str	r3, [sp, #0]
 801f758:	462a      	mov	r2, r5
 801f75a:	4b16      	ldr	r3, [pc, #88]	; (801f7b4 <_vfiprintf_r+0x258>)
 801f75c:	a904      	add	r1, sp, #16
 801f75e:	4630      	mov	r0, r6
 801f760:	f3af 8000 	nop.w
 801f764:	4607      	mov	r7, r0
 801f766:	1c78      	adds	r0, r7, #1
 801f768:	d1d6      	bne.n	801f718 <_vfiprintf_r+0x1bc>
 801f76a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f76c:	07d9      	lsls	r1, r3, #31
 801f76e:	d405      	bmi.n	801f77c <_vfiprintf_r+0x220>
 801f770:	89ab      	ldrh	r3, [r5, #12]
 801f772:	059a      	lsls	r2, r3, #22
 801f774:	d402      	bmi.n	801f77c <_vfiprintf_r+0x220>
 801f776:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f778:	f7ff fdf5 	bl	801f366 <__retarget_lock_release_recursive>
 801f77c:	89ab      	ldrh	r3, [r5, #12]
 801f77e:	065b      	lsls	r3, r3, #25
 801f780:	f53f af12 	bmi.w	801f5a8 <_vfiprintf_r+0x4c>
 801f784:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f786:	e711      	b.n	801f5ac <_vfiprintf_r+0x50>
 801f788:	ab03      	add	r3, sp, #12
 801f78a:	9300      	str	r3, [sp, #0]
 801f78c:	462a      	mov	r2, r5
 801f78e:	4b09      	ldr	r3, [pc, #36]	; (801f7b4 <_vfiprintf_r+0x258>)
 801f790:	a904      	add	r1, sp, #16
 801f792:	4630      	mov	r0, r6
 801f794:	f000 f880 	bl	801f898 <_printf_i>
 801f798:	e7e4      	b.n	801f764 <_vfiprintf_r+0x208>
 801f79a:	bf00      	nop
 801f79c:	08023db8 	.word	0x08023db8
 801f7a0:	08023dd8 	.word	0x08023dd8
 801f7a4:	08023d98 	.word	0x08023d98
 801f7a8:	08023dfc 	.word	0x08023dfc
 801f7ac:	08023e06 	.word	0x08023e06
 801f7b0:	00000000 	.word	0x00000000
 801f7b4:	0801f537 	.word	0x0801f537
 801f7b8:	08023e02 	.word	0x08023e02

0801f7bc <_printf_common>:
 801f7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f7c0:	4616      	mov	r6, r2
 801f7c2:	4699      	mov	r9, r3
 801f7c4:	688a      	ldr	r2, [r1, #8]
 801f7c6:	690b      	ldr	r3, [r1, #16]
 801f7c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f7cc:	4293      	cmp	r3, r2
 801f7ce:	bfb8      	it	lt
 801f7d0:	4613      	movlt	r3, r2
 801f7d2:	6033      	str	r3, [r6, #0]
 801f7d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f7d8:	4607      	mov	r7, r0
 801f7da:	460c      	mov	r4, r1
 801f7dc:	b10a      	cbz	r2, 801f7e2 <_printf_common+0x26>
 801f7de:	3301      	adds	r3, #1
 801f7e0:	6033      	str	r3, [r6, #0]
 801f7e2:	6823      	ldr	r3, [r4, #0]
 801f7e4:	0699      	lsls	r1, r3, #26
 801f7e6:	bf42      	ittt	mi
 801f7e8:	6833      	ldrmi	r3, [r6, #0]
 801f7ea:	3302      	addmi	r3, #2
 801f7ec:	6033      	strmi	r3, [r6, #0]
 801f7ee:	6825      	ldr	r5, [r4, #0]
 801f7f0:	f015 0506 	ands.w	r5, r5, #6
 801f7f4:	d106      	bne.n	801f804 <_printf_common+0x48>
 801f7f6:	f104 0a19 	add.w	sl, r4, #25
 801f7fa:	68e3      	ldr	r3, [r4, #12]
 801f7fc:	6832      	ldr	r2, [r6, #0]
 801f7fe:	1a9b      	subs	r3, r3, r2
 801f800:	42ab      	cmp	r3, r5
 801f802:	dc26      	bgt.n	801f852 <_printf_common+0x96>
 801f804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f808:	1e13      	subs	r3, r2, #0
 801f80a:	6822      	ldr	r2, [r4, #0]
 801f80c:	bf18      	it	ne
 801f80e:	2301      	movne	r3, #1
 801f810:	0692      	lsls	r2, r2, #26
 801f812:	d42b      	bmi.n	801f86c <_printf_common+0xb0>
 801f814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f818:	4649      	mov	r1, r9
 801f81a:	4638      	mov	r0, r7
 801f81c:	47c0      	blx	r8
 801f81e:	3001      	adds	r0, #1
 801f820:	d01e      	beq.n	801f860 <_printf_common+0xa4>
 801f822:	6823      	ldr	r3, [r4, #0]
 801f824:	68e5      	ldr	r5, [r4, #12]
 801f826:	6832      	ldr	r2, [r6, #0]
 801f828:	f003 0306 	and.w	r3, r3, #6
 801f82c:	2b04      	cmp	r3, #4
 801f82e:	bf08      	it	eq
 801f830:	1aad      	subeq	r5, r5, r2
 801f832:	68a3      	ldr	r3, [r4, #8]
 801f834:	6922      	ldr	r2, [r4, #16]
 801f836:	bf0c      	ite	eq
 801f838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f83c:	2500      	movne	r5, #0
 801f83e:	4293      	cmp	r3, r2
 801f840:	bfc4      	itt	gt
 801f842:	1a9b      	subgt	r3, r3, r2
 801f844:	18ed      	addgt	r5, r5, r3
 801f846:	2600      	movs	r6, #0
 801f848:	341a      	adds	r4, #26
 801f84a:	42b5      	cmp	r5, r6
 801f84c:	d11a      	bne.n	801f884 <_printf_common+0xc8>
 801f84e:	2000      	movs	r0, #0
 801f850:	e008      	b.n	801f864 <_printf_common+0xa8>
 801f852:	2301      	movs	r3, #1
 801f854:	4652      	mov	r2, sl
 801f856:	4649      	mov	r1, r9
 801f858:	4638      	mov	r0, r7
 801f85a:	47c0      	blx	r8
 801f85c:	3001      	adds	r0, #1
 801f85e:	d103      	bne.n	801f868 <_printf_common+0xac>
 801f860:	f04f 30ff 	mov.w	r0, #4294967295
 801f864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f868:	3501      	adds	r5, #1
 801f86a:	e7c6      	b.n	801f7fa <_printf_common+0x3e>
 801f86c:	18e1      	adds	r1, r4, r3
 801f86e:	1c5a      	adds	r2, r3, #1
 801f870:	2030      	movs	r0, #48	; 0x30
 801f872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f876:	4422      	add	r2, r4
 801f878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f87c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f880:	3302      	adds	r3, #2
 801f882:	e7c7      	b.n	801f814 <_printf_common+0x58>
 801f884:	2301      	movs	r3, #1
 801f886:	4622      	mov	r2, r4
 801f888:	4649      	mov	r1, r9
 801f88a:	4638      	mov	r0, r7
 801f88c:	47c0      	blx	r8
 801f88e:	3001      	adds	r0, #1
 801f890:	d0e6      	beq.n	801f860 <_printf_common+0xa4>
 801f892:	3601      	adds	r6, #1
 801f894:	e7d9      	b.n	801f84a <_printf_common+0x8e>
	...

0801f898 <_printf_i>:
 801f898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f89c:	460c      	mov	r4, r1
 801f89e:	4691      	mov	r9, r2
 801f8a0:	7e27      	ldrb	r7, [r4, #24]
 801f8a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f8a4:	2f78      	cmp	r7, #120	; 0x78
 801f8a6:	4680      	mov	r8, r0
 801f8a8:	469a      	mov	sl, r3
 801f8aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f8ae:	d807      	bhi.n	801f8c0 <_printf_i+0x28>
 801f8b0:	2f62      	cmp	r7, #98	; 0x62
 801f8b2:	d80a      	bhi.n	801f8ca <_printf_i+0x32>
 801f8b4:	2f00      	cmp	r7, #0
 801f8b6:	f000 80d8 	beq.w	801fa6a <_printf_i+0x1d2>
 801f8ba:	2f58      	cmp	r7, #88	; 0x58
 801f8bc:	f000 80a3 	beq.w	801fa06 <_printf_i+0x16e>
 801f8c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f8c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f8c8:	e03a      	b.n	801f940 <_printf_i+0xa8>
 801f8ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f8ce:	2b15      	cmp	r3, #21
 801f8d0:	d8f6      	bhi.n	801f8c0 <_printf_i+0x28>
 801f8d2:	a001      	add	r0, pc, #4	; (adr r0, 801f8d8 <_printf_i+0x40>)
 801f8d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801f8d8:	0801f931 	.word	0x0801f931
 801f8dc:	0801f945 	.word	0x0801f945
 801f8e0:	0801f8c1 	.word	0x0801f8c1
 801f8e4:	0801f8c1 	.word	0x0801f8c1
 801f8e8:	0801f8c1 	.word	0x0801f8c1
 801f8ec:	0801f8c1 	.word	0x0801f8c1
 801f8f0:	0801f945 	.word	0x0801f945
 801f8f4:	0801f8c1 	.word	0x0801f8c1
 801f8f8:	0801f8c1 	.word	0x0801f8c1
 801f8fc:	0801f8c1 	.word	0x0801f8c1
 801f900:	0801f8c1 	.word	0x0801f8c1
 801f904:	0801fa51 	.word	0x0801fa51
 801f908:	0801f975 	.word	0x0801f975
 801f90c:	0801fa33 	.word	0x0801fa33
 801f910:	0801f8c1 	.word	0x0801f8c1
 801f914:	0801f8c1 	.word	0x0801f8c1
 801f918:	0801fa73 	.word	0x0801fa73
 801f91c:	0801f8c1 	.word	0x0801f8c1
 801f920:	0801f975 	.word	0x0801f975
 801f924:	0801f8c1 	.word	0x0801f8c1
 801f928:	0801f8c1 	.word	0x0801f8c1
 801f92c:	0801fa3b 	.word	0x0801fa3b
 801f930:	680b      	ldr	r3, [r1, #0]
 801f932:	1d1a      	adds	r2, r3, #4
 801f934:	681b      	ldr	r3, [r3, #0]
 801f936:	600a      	str	r2, [r1, #0]
 801f938:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f93c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f940:	2301      	movs	r3, #1
 801f942:	e0a3      	b.n	801fa8c <_printf_i+0x1f4>
 801f944:	6825      	ldr	r5, [r4, #0]
 801f946:	6808      	ldr	r0, [r1, #0]
 801f948:	062e      	lsls	r6, r5, #24
 801f94a:	f100 0304 	add.w	r3, r0, #4
 801f94e:	d50a      	bpl.n	801f966 <_printf_i+0xce>
 801f950:	6805      	ldr	r5, [r0, #0]
 801f952:	600b      	str	r3, [r1, #0]
 801f954:	2d00      	cmp	r5, #0
 801f956:	da03      	bge.n	801f960 <_printf_i+0xc8>
 801f958:	232d      	movs	r3, #45	; 0x2d
 801f95a:	426d      	negs	r5, r5
 801f95c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f960:	485e      	ldr	r0, [pc, #376]	; (801fadc <_printf_i+0x244>)
 801f962:	230a      	movs	r3, #10
 801f964:	e019      	b.n	801f99a <_printf_i+0x102>
 801f966:	f015 0f40 	tst.w	r5, #64	; 0x40
 801f96a:	6805      	ldr	r5, [r0, #0]
 801f96c:	600b      	str	r3, [r1, #0]
 801f96e:	bf18      	it	ne
 801f970:	b22d      	sxthne	r5, r5
 801f972:	e7ef      	b.n	801f954 <_printf_i+0xbc>
 801f974:	680b      	ldr	r3, [r1, #0]
 801f976:	6825      	ldr	r5, [r4, #0]
 801f978:	1d18      	adds	r0, r3, #4
 801f97a:	6008      	str	r0, [r1, #0]
 801f97c:	0628      	lsls	r0, r5, #24
 801f97e:	d501      	bpl.n	801f984 <_printf_i+0xec>
 801f980:	681d      	ldr	r5, [r3, #0]
 801f982:	e002      	b.n	801f98a <_printf_i+0xf2>
 801f984:	0669      	lsls	r1, r5, #25
 801f986:	d5fb      	bpl.n	801f980 <_printf_i+0xe8>
 801f988:	881d      	ldrh	r5, [r3, #0]
 801f98a:	4854      	ldr	r0, [pc, #336]	; (801fadc <_printf_i+0x244>)
 801f98c:	2f6f      	cmp	r7, #111	; 0x6f
 801f98e:	bf0c      	ite	eq
 801f990:	2308      	moveq	r3, #8
 801f992:	230a      	movne	r3, #10
 801f994:	2100      	movs	r1, #0
 801f996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f99a:	6866      	ldr	r6, [r4, #4]
 801f99c:	60a6      	str	r6, [r4, #8]
 801f99e:	2e00      	cmp	r6, #0
 801f9a0:	bfa2      	ittt	ge
 801f9a2:	6821      	ldrge	r1, [r4, #0]
 801f9a4:	f021 0104 	bicge.w	r1, r1, #4
 801f9a8:	6021      	strge	r1, [r4, #0]
 801f9aa:	b90d      	cbnz	r5, 801f9b0 <_printf_i+0x118>
 801f9ac:	2e00      	cmp	r6, #0
 801f9ae:	d04d      	beq.n	801fa4c <_printf_i+0x1b4>
 801f9b0:	4616      	mov	r6, r2
 801f9b2:	fbb5 f1f3 	udiv	r1, r5, r3
 801f9b6:	fb03 5711 	mls	r7, r3, r1, r5
 801f9ba:	5dc7      	ldrb	r7, [r0, r7]
 801f9bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f9c0:	462f      	mov	r7, r5
 801f9c2:	42bb      	cmp	r3, r7
 801f9c4:	460d      	mov	r5, r1
 801f9c6:	d9f4      	bls.n	801f9b2 <_printf_i+0x11a>
 801f9c8:	2b08      	cmp	r3, #8
 801f9ca:	d10b      	bne.n	801f9e4 <_printf_i+0x14c>
 801f9cc:	6823      	ldr	r3, [r4, #0]
 801f9ce:	07df      	lsls	r7, r3, #31
 801f9d0:	d508      	bpl.n	801f9e4 <_printf_i+0x14c>
 801f9d2:	6923      	ldr	r3, [r4, #16]
 801f9d4:	6861      	ldr	r1, [r4, #4]
 801f9d6:	4299      	cmp	r1, r3
 801f9d8:	bfde      	ittt	le
 801f9da:	2330      	movle	r3, #48	; 0x30
 801f9dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f9e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801f9e4:	1b92      	subs	r2, r2, r6
 801f9e6:	6122      	str	r2, [r4, #16]
 801f9e8:	f8cd a000 	str.w	sl, [sp]
 801f9ec:	464b      	mov	r3, r9
 801f9ee:	aa03      	add	r2, sp, #12
 801f9f0:	4621      	mov	r1, r4
 801f9f2:	4640      	mov	r0, r8
 801f9f4:	f7ff fee2 	bl	801f7bc <_printf_common>
 801f9f8:	3001      	adds	r0, #1
 801f9fa:	d14c      	bne.n	801fa96 <_printf_i+0x1fe>
 801f9fc:	f04f 30ff 	mov.w	r0, #4294967295
 801fa00:	b004      	add	sp, #16
 801fa02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fa06:	4835      	ldr	r0, [pc, #212]	; (801fadc <_printf_i+0x244>)
 801fa08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801fa0c:	6823      	ldr	r3, [r4, #0]
 801fa0e:	680e      	ldr	r6, [r1, #0]
 801fa10:	061f      	lsls	r7, r3, #24
 801fa12:	f856 5b04 	ldr.w	r5, [r6], #4
 801fa16:	600e      	str	r6, [r1, #0]
 801fa18:	d514      	bpl.n	801fa44 <_printf_i+0x1ac>
 801fa1a:	07d9      	lsls	r1, r3, #31
 801fa1c:	bf44      	itt	mi
 801fa1e:	f043 0320 	orrmi.w	r3, r3, #32
 801fa22:	6023      	strmi	r3, [r4, #0]
 801fa24:	b91d      	cbnz	r5, 801fa2e <_printf_i+0x196>
 801fa26:	6823      	ldr	r3, [r4, #0]
 801fa28:	f023 0320 	bic.w	r3, r3, #32
 801fa2c:	6023      	str	r3, [r4, #0]
 801fa2e:	2310      	movs	r3, #16
 801fa30:	e7b0      	b.n	801f994 <_printf_i+0xfc>
 801fa32:	6823      	ldr	r3, [r4, #0]
 801fa34:	f043 0320 	orr.w	r3, r3, #32
 801fa38:	6023      	str	r3, [r4, #0]
 801fa3a:	2378      	movs	r3, #120	; 0x78
 801fa3c:	4828      	ldr	r0, [pc, #160]	; (801fae0 <_printf_i+0x248>)
 801fa3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fa42:	e7e3      	b.n	801fa0c <_printf_i+0x174>
 801fa44:	065e      	lsls	r6, r3, #25
 801fa46:	bf48      	it	mi
 801fa48:	b2ad      	uxthmi	r5, r5
 801fa4a:	e7e6      	b.n	801fa1a <_printf_i+0x182>
 801fa4c:	4616      	mov	r6, r2
 801fa4e:	e7bb      	b.n	801f9c8 <_printf_i+0x130>
 801fa50:	680b      	ldr	r3, [r1, #0]
 801fa52:	6826      	ldr	r6, [r4, #0]
 801fa54:	6960      	ldr	r0, [r4, #20]
 801fa56:	1d1d      	adds	r5, r3, #4
 801fa58:	600d      	str	r5, [r1, #0]
 801fa5a:	0635      	lsls	r5, r6, #24
 801fa5c:	681b      	ldr	r3, [r3, #0]
 801fa5e:	d501      	bpl.n	801fa64 <_printf_i+0x1cc>
 801fa60:	6018      	str	r0, [r3, #0]
 801fa62:	e002      	b.n	801fa6a <_printf_i+0x1d2>
 801fa64:	0671      	lsls	r1, r6, #25
 801fa66:	d5fb      	bpl.n	801fa60 <_printf_i+0x1c8>
 801fa68:	8018      	strh	r0, [r3, #0]
 801fa6a:	2300      	movs	r3, #0
 801fa6c:	6123      	str	r3, [r4, #16]
 801fa6e:	4616      	mov	r6, r2
 801fa70:	e7ba      	b.n	801f9e8 <_printf_i+0x150>
 801fa72:	680b      	ldr	r3, [r1, #0]
 801fa74:	1d1a      	adds	r2, r3, #4
 801fa76:	600a      	str	r2, [r1, #0]
 801fa78:	681e      	ldr	r6, [r3, #0]
 801fa7a:	6862      	ldr	r2, [r4, #4]
 801fa7c:	2100      	movs	r1, #0
 801fa7e:	4630      	mov	r0, r6
 801fa80:	f7e0 fbc6 	bl	8000210 <memchr>
 801fa84:	b108      	cbz	r0, 801fa8a <_printf_i+0x1f2>
 801fa86:	1b80      	subs	r0, r0, r6
 801fa88:	6060      	str	r0, [r4, #4]
 801fa8a:	6863      	ldr	r3, [r4, #4]
 801fa8c:	6123      	str	r3, [r4, #16]
 801fa8e:	2300      	movs	r3, #0
 801fa90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fa94:	e7a8      	b.n	801f9e8 <_printf_i+0x150>
 801fa96:	6923      	ldr	r3, [r4, #16]
 801fa98:	4632      	mov	r2, r6
 801fa9a:	4649      	mov	r1, r9
 801fa9c:	4640      	mov	r0, r8
 801fa9e:	47d0      	blx	sl
 801faa0:	3001      	adds	r0, #1
 801faa2:	d0ab      	beq.n	801f9fc <_printf_i+0x164>
 801faa4:	6823      	ldr	r3, [r4, #0]
 801faa6:	079b      	lsls	r3, r3, #30
 801faa8:	d413      	bmi.n	801fad2 <_printf_i+0x23a>
 801faaa:	68e0      	ldr	r0, [r4, #12]
 801faac:	9b03      	ldr	r3, [sp, #12]
 801faae:	4298      	cmp	r0, r3
 801fab0:	bfb8      	it	lt
 801fab2:	4618      	movlt	r0, r3
 801fab4:	e7a4      	b.n	801fa00 <_printf_i+0x168>
 801fab6:	2301      	movs	r3, #1
 801fab8:	4632      	mov	r2, r6
 801faba:	4649      	mov	r1, r9
 801fabc:	4640      	mov	r0, r8
 801fabe:	47d0      	blx	sl
 801fac0:	3001      	adds	r0, #1
 801fac2:	d09b      	beq.n	801f9fc <_printf_i+0x164>
 801fac4:	3501      	adds	r5, #1
 801fac6:	68e3      	ldr	r3, [r4, #12]
 801fac8:	9903      	ldr	r1, [sp, #12]
 801faca:	1a5b      	subs	r3, r3, r1
 801facc:	42ab      	cmp	r3, r5
 801face:	dcf2      	bgt.n	801fab6 <_printf_i+0x21e>
 801fad0:	e7eb      	b.n	801faaa <_printf_i+0x212>
 801fad2:	2500      	movs	r5, #0
 801fad4:	f104 0619 	add.w	r6, r4, #25
 801fad8:	e7f5      	b.n	801fac6 <_printf_i+0x22e>
 801fada:	bf00      	nop
 801fadc:	08023e0d 	.word	0x08023e0d
 801fae0:	08023e1e 	.word	0x08023e1e

0801fae4 <cleanup_glue>:
 801fae4:	b538      	push	{r3, r4, r5, lr}
 801fae6:	460c      	mov	r4, r1
 801fae8:	6809      	ldr	r1, [r1, #0]
 801faea:	4605      	mov	r5, r0
 801faec:	b109      	cbz	r1, 801faf2 <cleanup_glue+0xe>
 801faee:	f7ff fff9 	bl	801fae4 <cleanup_glue>
 801faf2:	4621      	mov	r1, r4
 801faf4:	4628      	mov	r0, r5
 801faf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fafa:	f7ff bc5b 	b.w	801f3b4 <_free_r>
	...

0801fb00 <_reclaim_reent>:
 801fb00:	4b2c      	ldr	r3, [pc, #176]	; (801fbb4 <_reclaim_reent+0xb4>)
 801fb02:	681b      	ldr	r3, [r3, #0]
 801fb04:	4283      	cmp	r3, r0
 801fb06:	b570      	push	{r4, r5, r6, lr}
 801fb08:	4604      	mov	r4, r0
 801fb0a:	d051      	beq.n	801fbb0 <_reclaim_reent+0xb0>
 801fb0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801fb0e:	b143      	cbz	r3, 801fb22 <_reclaim_reent+0x22>
 801fb10:	68db      	ldr	r3, [r3, #12]
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	d14a      	bne.n	801fbac <_reclaim_reent+0xac>
 801fb16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fb18:	6819      	ldr	r1, [r3, #0]
 801fb1a:	b111      	cbz	r1, 801fb22 <_reclaim_reent+0x22>
 801fb1c:	4620      	mov	r0, r4
 801fb1e:	f7ff fc49 	bl	801f3b4 <_free_r>
 801fb22:	6961      	ldr	r1, [r4, #20]
 801fb24:	b111      	cbz	r1, 801fb2c <_reclaim_reent+0x2c>
 801fb26:	4620      	mov	r0, r4
 801fb28:	f7ff fc44 	bl	801f3b4 <_free_r>
 801fb2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801fb2e:	b111      	cbz	r1, 801fb36 <_reclaim_reent+0x36>
 801fb30:	4620      	mov	r0, r4
 801fb32:	f7ff fc3f 	bl	801f3b4 <_free_r>
 801fb36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801fb38:	b111      	cbz	r1, 801fb40 <_reclaim_reent+0x40>
 801fb3a:	4620      	mov	r0, r4
 801fb3c:	f7ff fc3a 	bl	801f3b4 <_free_r>
 801fb40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801fb42:	b111      	cbz	r1, 801fb4a <_reclaim_reent+0x4a>
 801fb44:	4620      	mov	r0, r4
 801fb46:	f7ff fc35 	bl	801f3b4 <_free_r>
 801fb4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fb4c:	b111      	cbz	r1, 801fb54 <_reclaim_reent+0x54>
 801fb4e:	4620      	mov	r0, r4
 801fb50:	f7ff fc30 	bl	801f3b4 <_free_r>
 801fb54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801fb56:	b111      	cbz	r1, 801fb5e <_reclaim_reent+0x5e>
 801fb58:	4620      	mov	r0, r4
 801fb5a:	f7ff fc2b 	bl	801f3b4 <_free_r>
 801fb5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801fb60:	b111      	cbz	r1, 801fb68 <_reclaim_reent+0x68>
 801fb62:	4620      	mov	r0, r4
 801fb64:	f7ff fc26 	bl	801f3b4 <_free_r>
 801fb68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fb6a:	b111      	cbz	r1, 801fb72 <_reclaim_reent+0x72>
 801fb6c:	4620      	mov	r0, r4
 801fb6e:	f7ff fc21 	bl	801f3b4 <_free_r>
 801fb72:	69a3      	ldr	r3, [r4, #24]
 801fb74:	b1e3      	cbz	r3, 801fbb0 <_reclaim_reent+0xb0>
 801fb76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fb78:	4620      	mov	r0, r4
 801fb7a:	4798      	blx	r3
 801fb7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801fb7e:	b1b9      	cbz	r1, 801fbb0 <_reclaim_reent+0xb0>
 801fb80:	4620      	mov	r0, r4
 801fb82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fb86:	f7ff bfad 	b.w	801fae4 <cleanup_glue>
 801fb8a:	5949      	ldr	r1, [r1, r5]
 801fb8c:	b941      	cbnz	r1, 801fba0 <_reclaim_reent+0xa0>
 801fb8e:	3504      	adds	r5, #4
 801fb90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fb92:	2d80      	cmp	r5, #128	; 0x80
 801fb94:	68d9      	ldr	r1, [r3, #12]
 801fb96:	d1f8      	bne.n	801fb8a <_reclaim_reent+0x8a>
 801fb98:	4620      	mov	r0, r4
 801fb9a:	f7ff fc0b 	bl	801f3b4 <_free_r>
 801fb9e:	e7ba      	b.n	801fb16 <_reclaim_reent+0x16>
 801fba0:	680e      	ldr	r6, [r1, #0]
 801fba2:	4620      	mov	r0, r4
 801fba4:	f7ff fc06 	bl	801f3b4 <_free_r>
 801fba8:	4631      	mov	r1, r6
 801fbaa:	e7ef      	b.n	801fb8c <_reclaim_reent+0x8c>
 801fbac:	2500      	movs	r5, #0
 801fbae:	e7ef      	b.n	801fb90 <_reclaim_reent+0x90>
 801fbb0:	bd70      	pop	{r4, r5, r6, pc}
 801fbb2:	bf00      	nop
 801fbb4:	20000094 	.word	0x20000094

0801fbb8 <_sbrk_r>:
 801fbb8:	b538      	push	{r3, r4, r5, lr}
 801fbba:	4d06      	ldr	r5, [pc, #24]	; (801fbd4 <_sbrk_r+0x1c>)
 801fbbc:	2300      	movs	r3, #0
 801fbbe:	4604      	mov	r4, r0
 801fbc0:	4608      	mov	r0, r1
 801fbc2:	602b      	str	r3, [r5, #0]
 801fbc4:	f7e1 fd2a 	bl	800161c <_sbrk>
 801fbc8:	1c43      	adds	r3, r0, #1
 801fbca:	d102      	bne.n	801fbd2 <_sbrk_r+0x1a>
 801fbcc:	682b      	ldr	r3, [r5, #0]
 801fbce:	b103      	cbz	r3, 801fbd2 <_sbrk_r+0x1a>
 801fbd0:	6023      	str	r3, [r4, #0]
 801fbd2:	bd38      	pop	{r3, r4, r5, pc}
 801fbd4:	2000a4f8 	.word	0x2000a4f8

0801fbd8 <_raise_r>:
 801fbd8:	291f      	cmp	r1, #31
 801fbda:	b538      	push	{r3, r4, r5, lr}
 801fbdc:	4604      	mov	r4, r0
 801fbde:	460d      	mov	r5, r1
 801fbe0:	d904      	bls.n	801fbec <_raise_r+0x14>
 801fbe2:	2316      	movs	r3, #22
 801fbe4:	6003      	str	r3, [r0, #0]
 801fbe6:	f04f 30ff 	mov.w	r0, #4294967295
 801fbea:	bd38      	pop	{r3, r4, r5, pc}
 801fbec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801fbee:	b112      	cbz	r2, 801fbf6 <_raise_r+0x1e>
 801fbf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fbf4:	b94b      	cbnz	r3, 801fc0a <_raise_r+0x32>
 801fbf6:	4620      	mov	r0, r4
 801fbf8:	f000 f830 	bl	801fc5c <_getpid_r>
 801fbfc:	462a      	mov	r2, r5
 801fbfe:	4601      	mov	r1, r0
 801fc00:	4620      	mov	r0, r4
 801fc02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fc06:	f000 b817 	b.w	801fc38 <_kill_r>
 801fc0a:	2b01      	cmp	r3, #1
 801fc0c:	d00a      	beq.n	801fc24 <_raise_r+0x4c>
 801fc0e:	1c59      	adds	r1, r3, #1
 801fc10:	d103      	bne.n	801fc1a <_raise_r+0x42>
 801fc12:	2316      	movs	r3, #22
 801fc14:	6003      	str	r3, [r0, #0]
 801fc16:	2001      	movs	r0, #1
 801fc18:	e7e7      	b.n	801fbea <_raise_r+0x12>
 801fc1a:	2400      	movs	r4, #0
 801fc1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fc20:	4628      	mov	r0, r5
 801fc22:	4798      	blx	r3
 801fc24:	2000      	movs	r0, #0
 801fc26:	e7e0      	b.n	801fbea <_raise_r+0x12>

0801fc28 <raise>:
 801fc28:	4b02      	ldr	r3, [pc, #8]	; (801fc34 <raise+0xc>)
 801fc2a:	4601      	mov	r1, r0
 801fc2c:	6818      	ldr	r0, [r3, #0]
 801fc2e:	f7ff bfd3 	b.w	801fbd8 <_raise_r>
 801fc32:	bf00      	nop
 801fc34:	20000094 	.word	0x20000094

0801fc38 <_kill_r>:
 801fc38:	b538      	push	{r3, r4, r5, lr}
 801fc3a:	4d07      	ldr	r5, [pc, #28]	; (801fc58 <_kill_r+0x20>)
 801fc3c:	2300      	movs	r3, #0
 801fc3e:	4604      	mov	r4, r0
 801fc40:	4608      	mov	r0, r1
 801fc42:	4611      	mov	r1, r2
 801fc44:	602b      	str	r3, [r5, #0]
 801fc46:	f7e1 fc61 	bl	800150c <_kill>
 801fc4a:	1c43      	adds	r3, r0, #1
 801fc4c:	d102      	bne.n	801fc54 <_kill_r+0x1c>
 801fc4e:	682b      	ldr	r3, [r5, #0]
 801fc50:	b103      	cbz	r3, 801fc54 <_kill_r+0x1c>
 801fc52:	6023      	str	r3, [r4, #0]
 801fc54:	bd38      	pop	{r3, r4, r5, pc}
 801fc56:	bf00      	nop
 801fc58:	2000a4f8 	.word	0x2000a4f8

0801fc5c <_getpid_r>:
 801fc5c:	f7e1 bc4e 	b.w	80014fc <_getpid>

0801fc60 <__sread>:
 801fc60:	b510      	push	{r4, lr}
 801fc62:	460c      	mov	r4, r1
 801fc64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fc68:	f000 fac6 	bl	80201f8 <_read_r>
 801fc6c:	2800      	cmp	r0, #0
 801fc6e:	bfab      	itete	ge
 801fc70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fc72:	89a3      	ldrhlt	r3, [r4, #12]
 801fc74:	181b      	addge	r3, r3, r0
 801fc76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fc7a:	bfac      	ite	ge
 801fc7c:	6563      	strge	r3, [r4, #84]	; 0x54
 801fc7e:	81a3      	strhlt	r3, [r4, #12]
 801fc80:	bd10      	pop	{r4, pc}

0801fc82 <__swrite>:
 801fc82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc86:	461f      	mov	r7, r3
 801fc88:	898b      	ldrh	r3, [r1, #12]
 801fc8a:	05db      	lsls	r3, r3, #23
 801fc8c:	4605      	mov	r5, r0
 801fc8e:	460c      	mov	r4, r1
 801fc90:	4616      	mov	r6, r2
 801fc92:	d505      	bpl.n	801fca0 <__swrite+0x1e>
 801fc94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fc98:	2302      	movs	r3, #2
 801fc9a:	2200      	movs	r2, #0
 801fc9c:	f000 fa2a 	bl	80200f4 <_lseek_r>
 801fca0:	89a3      	ldrh	r3, [r4, #12]
 801fca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fcaa:	81a3      	strh	r3, [r4, #12]
 801fcac:	4632      	mov	r2, r6
 801fcae:	463b      	mov	r3, r7
 801fcb0:	4628      	mov	r0, r5
 801fcb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fcb6:	f000 b869 	b.w	801fd8c <_write_r>

0801fcba <__sseek>:
 801fcba:	b510      	push	{r4, lr}
 801fcbc:	460c      	mov	r4, r1
 801fcbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fcc2:	f000 fa17 	bl	80200f4 <_lseek_r>
 801fcc6:	1c43      	adds	r3, r0, #1
 801fcc8:	89a3      	ldrh	r3, [r4, #12]
 801fcca:	bf15      	itete	ne
 801fccc:	6560      	strne	r0, [r4, #84]	; 0x54
 801fcce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fcd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fcd6:	81a3      	strheq	r3, [r4, #12]
 801fcd8:	bf18      	it	ne
 801fcda:	81a3      	strhne	r3, [r4, #12]
 801fcdc:	bd10      	pop	{r4, pc}

0801fcde <__sclose>:
 801fcde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fce2:	f000 b935 	b.w	801ff50 <_close_r>
	...

0801fce8 <__swbuf_r>:
 801fce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcea:	460e      	mov	r6, r1
 801fcec:	4614      	mov	r4, r2
 801fcee:	4605      	mov	r5, r0
 801fcf0:	b118      	cbz	r0, 801fcfa <__swbuf_r+0x12>
 801fcf2:	6983      	ldr	r3, [r0, #24]
 801fcf4:	b90b      	cbnz	r3, 801fcfa <__swbuf_r+0x12>
 801fcf6:	f7ff fa5f 	bl	801f1b8 <__sinit>
 801fcfa:	4b21      	ldr	r3, [pc, #132]	; (801fd80 <__swbuf_r+0x98>)
 801fcfc:	429c      	cmp	r4, r3
 801fcfe:	d12b      	bne.n	801fd58 <__swbuf_r+0x70>
 801fd00:	686c      	ldr	r4, [r5, #4]
 801fd02:	69a3      	ldr	r3, [r4, #24]
 801fd04:	60a3      	str	r3, [r4, #8]
 801fd06:	89a3      	ldrh	r3, [r4, #12]
 801fd08:	071a      	lsls	r2, r3, #28
 801fd0a:	d52f      	bpl.n	801fd6c <__swbuf_r+0x84>
 801fd0c:	6923      	ldr	r3, [r4, #16]
 801fd0e:	b36b      	cbz	r3, 801fd6c <__swbuf_r+0x84>
 801fd10:	6923      	ldr	r3, [r4, #16]
 801fd12:	6820      	ldr	r0, [r4, #0]
 801fd14:	1ac0      	subs	r0, r0, r3
 801fd16:	6963      	ldr	r3, [r4, #20]
 801fd18:	b2f6      	uxtb	r6, r6
 801fd1a:	4283      	cmp	r3, r0
 801fd1c:	4637      	mov	r7, r6
 801fd1e:	dc04      	bgt.n	801fd2a <__swbuf_r+0x42>
 801fd20:	4621      	mov	r1, r4
 801fd22:	4628      	mov	r0, r5
 801fd24:	f000 f9aa 	bl	802007c <_fflush_r>
 801fd28:	bb30      	cbnz	r0, 801fd78 <__swbuf_r+0x90>
 801fd2a:	68a3      	ldr	r3, [r4, #8]
 801fd2c:	3b01      	subs	r3, #1
 801fd2e:	60a3      	str	r3, [r4, #8]
 801fd30:	6823      	ldr	r3, [r4, #0]
 801fd32:	1c5a      	adds	r2, r3, #1
 801fd34:	6022      	str	r2, [r4, #0]
 801fd36:	701e      	strb	r6, [r3, #0]
 801fd38:	6963      	ldr	r3, [r4, #20]
 801fd3a:	3001      	adds	r0, #1
 801fd3c:	4283      	cmp	r3, r0
 801fd3e:	d004      	beq.n	801fd4a <__swbuf_r+0x62>
 801fd40:	89a3      	ldrh	r3, [r4, #12]
 801fd42:	07db      	lsls	r3, r3, #31
 801fd44:	d506      	bpl.n	801fd54 <__swbuf_r+0x6c>
 801fd46:	2e0a      	cmp	r6, #10
 801fd48:	d104      	bne.n	801fd54 <__swbuf_r+0x6c>
 801fd4a:	4621      	mov	r1, r4
 801fd4c:	4628      	mov	r0, r5
 801fd4e:	f000 f995 	bl	802007c <_fflush_r>
 801fd52:	b988      	cbnz	r0, 801fd78 <__swbuf_r+0x90>
 801fd54:	4638      	mov	r0, r7
 801fd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fd58:	4b0a      	ldr	r3, [pc, #40]	; (801fd84 <__swbuf_r+0x9c>)
 801fd5a:	429c      	cmp	r4, r3
 801fd5c:	d101      	bne.n	801fd62 <__swbuf_r+0x7a>
 801fd5e:	68ac      	ldr	r4, [r5, #8]
 801fd60:	e7cf      	b.n	801fd02 <__swbuf_r+0x1a>
 801fd62:	4b09      	ldr	r3, [pc, #36]	; (801fd88 <__swbuf_r+0xa0>)
 801fd64:	429c      	cmp	r4, r3
 801fd66:	bf08      	it	eq
 801fd68:	68ec      	ldreq	r4, [r5, #12]
 801fd6a:	e7ca      	b.n	801fd02 <__swbuf_r+0x1a>
 801fd6c:	4621      	mov	r1, r4
 801fd6e:	4628      	mov	r0, r5
 801fd70:	f000 f81e 	bl	801fdb0 <__swsetup_r>
 801fd74:	2800      	cmp	r0, #0
 801fd76:	d0cb      	beq.n	801fd10 <__swbuf_r+0x28>
 801fd78:	f04f 37ff 	mov.w	r7, #4294967295
 801fd7c:	e7ea      	b.n	801fd54 <__swbuf_r+0x6c>
 801fd7e:	bf00      	nop
 801fd80:	08023db8 	.word	0x08023db8
 801fd84:	08023dd8 	.word	0x08023dd8
 801fd88:	08023d98 	.word	0x08023d98

0801fd8c <_write_r>:
 801fd8c:	b538      	push	{r3, r4, r5, lr}
 801fd8e:	4d07      	ldr	r5, [pc, #28]	; (801fdac <_write_r+0x20>)
 801fd90:	4604      	mov	r4, r0
 801fd92:	4608      	mov	r0, r1
 801fd94:	4611      	mov	r1, r2
 801fd96:	2200      	movs	r2, #0
 801fd98:	602a      	str	r2, [r5, #0]
 801fd9a:	461a      	mov	r2, r3
 801fd9c:	f7e1 fbed 	bl	800157a <_write>
 801fda0:	1c43      	adds	r3, r0, #1
 801fda2:	d102      	bne.n	801fdaa <_write_r+0x1e>
 801fda4:	682b      	ldr	r3, [r5, #0]
 801fda6:	b103      	cbz	r3, 801fdaa <_write_r+0x1e>
 801fda8:	6023      	str	r3, [r4, #0]
 801fdaa:	bd38      	pop	{r3, r4, r5, pc}
 801fdac:	2000a4f8 	.word	0x2000a4f8

0801fdb0 <__swsetup_r>:
 801fdb0:	4b32      	ldr	r3, [pc, #200]	; (801fe7c <__swsetup_r+0xcc>)
 801fdb2:	b570      	push	{r4, r5, r6, lr}
 801fdb4:	681d      	ldr	r5, [r3, #0]
 801fdb6:	4606      	mov	r6, r0
 801fdb8:	460c      	mov	r4, r1
 801fdba:	b125      	cbz	r5, 801fdc6 <__swsetup_r+0x16>
 801fdbc:	69ab      	ldr	r3, [r5, #24]
 801fdbe:	b913      	cbnz	r3, 801fdc6 <__swsetup_r+0x16>
 801fdc0:	4628      	mov	r0, r5
 801fdc2:	f7ff f9f9 	bl	801f1b8 <__sinit>
 801fdc6:	4b2e      	ldr	r3, [pc, #184]	; (801fe80 <__swsetup_r+0xd0>)
 801fdc8:	429c      	cmp	r4, r3
 801fdca:	d10f      	bne.n	801fdec <__swsetup_r+0x3c>
 801fdcc:	686c      	ldr	r4, [r5, #4]
 801fdce:	89a3      	ldrh	r3, [r4, #12]
 801fdd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fdd4:	0719      	lsls	r1, r3, #28
 801fdd6:	d42c      	bmi.n	801fe32 <__swsetup_r+0x82>
 801fdd8:	06dd      	lsls	r5, r3, #27
 801fdda:	d411      	bmi.n	801fe00 <__swsetup_r+0x50>
 801fddc:	2309      	movs	r3, #9
 801fdde:	6033      	str	r3, [r6, #0]
 801fde0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fde4:	81a3      	strh	r3, [r4, #12]
 801fde6:	f04f 30ff 	mov.w	r0, #4294967295
 801fdea:	e03e      	b.n	801fe6a <__swsetup_r+0xba>
 801fdec:	4b25      	ldr	r3, [pc, #148]	; (801fe84 <__swsetup_r+0xd4>)
 801fdee:	429c      	cmp	r4, r3
 801fdf0:	d101      	bne.n	801fdf6 <__swsetup_r+0x46>
 801fdf2:	68ac      	ldr	r4, [r5, #8]
 801fdf4:	e7eb      	b.n	801fdce <__swsetup_r+0x1e>
 801fdf6:	4b24      	ldr	r3, [pc, #144]	; (801fe88 <__swsetup_r+0xd8>)
 801fdf8:	429c      	cmp	r4, r3
 801fdfa:	bf08      	it	eq
 801fdfc:	68ec      	ldreq	r4, [r5, #12]
 801fdfe:	e7e6      	b.n	801fdce <__swsetup_r+0x1e>
 801fe00:	0758      	lsls	r0, r3, #29
 801fe02:	d512      	bpl.n	801fe2a <__swsetup_r+0x7a>
 801fe04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fe06:	b141      	cbz	r1, 801fe1a <__swsetup_r+0x6a>
 801fe08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fe0c:	4299      	cmp	r1, r3
 801fe0e:	d002      	beq.n	801fe16 <__swsetup_r+0x66>
 801fe10:	4630      	mov	r0, r6
 801fe12:	f7ff facf 	bl	801f3b4 <_free_r>
 801fe16:	2300      	movs	r3, #0
 801fe18:	6363      	str	r3, [r4, #52]	; 0x34
 801fe1a:	89a3      	ldrh	r3, [r4, #12]
 801fe1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fe20:	81a3      	strh	r3, [r4, #12]
 801fe22:	2300      	movs	r3, #0
 801fe24:	6063      	str	r3, [r4, #4]
 801fe26:	6923      	ldr	r3, [r4, #16]
 801fe28:	6023      	str	r3, [r4, #0]
 801fe2a:	89a3      	ldrh	r3, [r4, #12]
 801fe2c:	f043 0308 	orr.w	r3, r3, #8
 801fe30:	81a3      	strh	r3, [r4, #12]
 801fe32:	6923      	ldr	r3, [r4, #16]
 801fe34:	b94b      	cbnz	r3, 801fe4a <__swsetup_r+0x9a>
 801fe36:	89a3      	ldrh	r3, [r4, #12]
 801fe38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fe3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fe40:	d003      	beq.n	801fe4a <__swsetup_r+0x9a>
 801fe42:	4621      	mov	r1, r4
 801fe44:	4630      	mov	r0, r6
 801fe46:	f000 f98b 	bl	8020160 <__smakebuf_r>
 801fe4a:	89a0      	ldrh	r0, [r4, #12]
 801fe4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fe50:	f010 0301 	ands.w	r3, r0, #1
 801fe54:	d00a      	beq.n	801fe6c <__swsetup_r+0xbc>
 801fe56:	2300      	movs	r3, #0
 801fe58:	60a3      	str	r3, [r4, #8]
 801fe5a:	6963      	ldr	r3, [r4, #20]
 801fe5c:	425b      	negs	r3, r3
 801fe5e:	61a3      	str	r3, [r4, #24]
 801fe60:	6923      	ldr	r3, [r4, #16]
 801fe62:	b943      	cbnz	r3, 801fe76 <__swsetup_r+0xc6>
 801fe64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fe68:	d1ba      	bne.n	801fde0 <__swsetup_r+0x30>
 801fe6a:	bd70      	pop	{r4, r5, r6, pc}
 801fe6c:	0781      	lsls	r1, r0, #30
 801fe6e:	bf58      	it	pl
 801fe70:	6963      	ldrpl	r3, [r4, #20]
 801fe72:	60a3      	str	r3, [r4, #8]
 801fe74:	e7f4      	b.n	801fe60 <__swsetup_r+0xb0>
 801fe76:	2000      	movs	r0, #0
 801fe78:	e7f7      	b.n	801fe6a <__swsetup_r+0xba>
 801fe7a:	bf00      	nop
 801fe7c:	20000094 	.word	0x20000094
 801fe80:	08023db8 	.word	0x08023db8
 801fe84:	08023dd8 	.word	0x08023dd8
 801fe88:	08023d98 	.word	0x08023d98

0801fe8c <__register_exitproc>:
 801fe8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe90:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801ff4c <__register_exitproc+0xc0>
 801fe94:	4606      	mov	r6, r0
 801fe96:	f8d8 0000 	ldr.w	r0, [r8]
 801fe9a:	461f      	mov	r7, r3
 801fe9c:	460d      	mov	r5, r1
 801fe9e:	4691      	mov	r9, r2
 801fea0:	f7ff fa5f 	bl	801f362 <__retarget_lock_acquire_recursive>
 801fea4:	4b25      	ldr	r3, [pc, #148]	; (801ff3c <__register_exitproc+0xb0>)
 801fea6:	681c      	ldr	r4, [r3, #0]
 801fea8:	b934      	cbnz	r4, 801feb8 <__register_exitproc+0x2c>
 801feaa:	4c25      	ldr	r4, [pc, #148]	; (801ff40 <__register_exitproc+0xb4>)
 801feac:	601c      	str	r4, [r3, #0]
 801feae:	4b25      	ldr	r3, [pc, #148]	; (801ff44 <__register_exitproc+0xb8>)
 801feb0:	b113      	cbz	r3, 801feb8 <__register_exitproc+0x2c>
 801feb2:	681b      	ldr	r3, [r3, #0]
 801feb4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801feb8:	6863      	ldr	r3, [r4, #4]
 801feba:	2b1f      	cmp	r3, #31
 801febc:	dd07      	ble.n	801fece <__register_exitproc+0x42>
 801febe:	f8d8 0000 	ldr.w	r0, [r8]
 801fec2:	f7ff fa50 	bl	801f366 <__retarget_lock_release_recursive>
 801fec6:	f04f 30ff 	mov.w	r0, #4294967295
 801feca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fece:	b34e      	cbz	r6, 801ff24 <__register_exitproc+0x98>
 801fed0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801fed4:	b988      	cbnz	r0, 801fefa <__register_exitproc+0x6e>
 801fed6:	4b1c      	ldr	r3, [pc, #112]	; (801ff48 <__register_exitproc+0xbc>)
 801fed8:	b923      	cbnz	r3, 801fee4 <__register_exitproc+0x58>
 801feda:	f8d8 0000 	ldr.w	r0, [r8]
 801fede:	f7ff fa41 	bl	801f364 <__retarget_lock_release>
 801fee2:	e7f0      	b.n	801fec6 <__register_exitproc+0x3a>
 801fee4:	f44f 7084 	mov.w	r0, #264	; 0x108
 801fee8:	f7ff fa3e 	bl	801f368 <malloc>
 801feec:	2800      	cmp	r0, #0
 801feee:	d0f4      	beq.n	801feda <__register_exitproc+0x4e>
 801fef0:	2300      	movs	r3, #0
 801fef2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801fef6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801fefa:	6863      	ldr	r3, [r4, #4]
 801fefc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801ff00:	2201      	movs	r2, #1
 801ff02:	409a      	lsls	r2, r3
 801ff04:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801ff08:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801ff0c:	4313      	orrs	r3, r2
 801ff0e:	2e02      	cmp	r6, #2
 801ff10:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801ff14:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801ff18:	bf02      	ittt	eq
 801ff1a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801ff1e:	431a      	orreq	r2, r3
 801ff20:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801ff24:	6863      	ldr	r3, [r4, #4]
 801ff26:	f8d8 0000 	ldr.w	r0, [r8]
 801ff2a:	1c5a      	adds	r2, r3, #1
 801ff2c:	3302      	adds	r3, #2
 801ff2e:	6062      	str	r2, [r4, #4]
 801ff30:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801ff34:	f7ff fa17 	bl	801f366 <__retarget_lock_release_recursive>
 801ff38:	2000      	movs	r0, #0
 801ff3a:	e7c6      	b.n	801feca <__register_exitproc+0x3e>
 801ff3c:	2000a22c 	.word	0x2000a22c
 801ff40:	2000a1a0 	.word	0x2000a1a0
 801ff44:	08023e30 	.word	0x08023e30
 801ff48:	0801f369 	.word	0x0801f369
 801ff4c:	200000f8 	.word	0x200000f8

0801ff50 <_close_r>:
 801ff50:	b538      	push	{r3, r4, r5, lr}
 801ff52:	4d06      	ldr	r5, [pc, #24]	; (801ff6c <_close_r+0x1c>)
 801ff54:	2300      	movs	r3, #0
 801ff56:	4604      	mov	r4, r0
 801ff58:	4608      	mov	r0, r1
 801ff5a:	602b      	str	r3, [r5, #0]
 801ff5c:	f7e1 fb29 	bl	80015b2 <_close>
 801ff60:	1c43      	adds	r3, r0, #1
 801ff62:	d102      	bne.n	801ff6a <_close_r+0x1a>
 801ff64:	682b      	ldr	r3, [r5, #0]
 801ff66:	b103      	cbz	r3, 801ff6a <_close_r+0x1a>
 801ff68:	6023      	str	r3, [r4, #0]
 801ff6a:	bd38      	pop	{r3, r4, r5, pc}
 801ff6c:	2000a4f8 	.word	0x2000a4f8

0801ff70 <__sflush_r>:
 801ff70:	898a      	ldrh	r2, [r1, #12]
 801ff72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff76:	4605      	mov	r5, r0
 801ff78:	0710      	lsls	r0, r2, #28
 801ff7a:	460c      	mov	r4, r1
 801ff7c:	d458      	bmi.n	8020030 <__sflush_r+0xc0>
 801ff7e:	684b      	ldr	r3, [r1, #4]
 801ff80:	2b00      	cmp	r3, #0
 801ff82:	dc05      	bgt.n	801ff90 <__sflush_r+0x20>
 801ff84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ff86:	2b00      	cmp	r3, #0
 801ff88:	dc02      	bgt.n	801ff90 <__sflush_r+0x20>
 801ff8a:	2000      	movs	r0, #0
 801ff8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ff92:	2e00      	cmp	r6, #0
 801ff94:	d0f9      	beq.n	801ff8a <__sflush_r+0x1a>
 801ff96:	2300      	movs	r3, #0
 801ff98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ff9c:	682f      	ldr	r7, [r5, #0]
 801ff9e:	602b      	str	r3, [r5, #0]
 801ffa0:	d032      	beq.n	8020008 <__sflush_r+0x98>
 801ffa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ffa4:	89a3      	ldrh	r3, [r4, #12]
 801ffa6:	075a      	lsls	r2, r3, #29
 801ffa8:	d505      	bpl.n	801ffb6 <__sflush_r+0x46>
 801ffaa:	6863      	ldr	r3, [r4, #4]
 801ffac:	1ac0      	subs	r0, r0, r3
 801ffae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ffb0:	b10b      	cbz	r3, 801ffb6 <__sflush_r+0x46>
 801ffb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ffb4:	1ac0      	subs	r0, r0, r3
 801ffb6:	2300      	movs	r3, #0
 801ffb8:	4602      	mov	r2, r0
 801ffba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ffbc:	6a21      	ldr	r1, [r4, #32]
 801ffbe:	4628      	mov	r0, r5
 801ffc0:	47b0      	blx	r6
 801ffc2:	1c43      	adds	r3, r0, #1
 801ffc4:	89a3      	ldrh	r3, [r4, #12]
 801ffc6:	d106      	bne.n	801ffd6 <__sflush_r+0x66>
 801ffc8:	6829      	ldr	r1, [r5, #0]
 801ffca:	291d      	cmp	r1, #29
 801ffcc:	d82c      	bhi.n	8020028 <__sflush_r+0xb8>
 801ffce:	4a2a      	ldr	r2, [pc, #168]	; (8020078 <__sflush_r+0x108>)
 801ffd0:	40ca      	lsrs	r2, r1
 801ffd2:	07d6      	lsls	r6, r2, #31
 801ffd4:	d528      	bpl.n	8020028 <__sflush_r+0xb8>
 801ffd6:	2200      	movs	r2, #0
 801ffd8:	6062      	str	r2, [r4, #4]
 801ffda:	04d9      	lsls	r1, r3, #19
 801ffdc:	6922      	ldr	r2, [r4, #16]
 801ffde:	6022      	str	r2, [r4, #0]
 801ffe0:	d504      	bpl.n	801ffec <__sflush_r+0x7c>
 801ffe2:	1c42      	adds	r2, r0, #1
 801ffe4:	d101      	bne.n	801ffea <__sflush_r+0x7a>
 801ffe6:	682b      	ldr	r3, [r5, #0]
 801ffe8:	b903      	cbnz	r3, 801ffec <__sflush_r+0x7c>
 801ffea:	6560      	str	r0, [r4, #84]	; 0x54
 801ffec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ffee:	602f      	str	r7, [r5, #0]
 801fff0:	2900      	cmp	r1, #0
 801fff2:	d0ca      	beq.n	801ff8a <__sflush_r+0x1a>
 801fff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fff8:	4299      	cmp	r1, r3
 801fffa:	d002      	beq.n	8020002 <__sflush_r+0x92>
 801fffc:	4628      	mov	r0, r5
 801fffe:	f7ff f9d9 	bl	801f3b4 <_free_r>
 8020002:	2000      	movs	r0, #0
 8020004:	6360      	str	r0, [r4, #52]	; 0x34
 8020006:	e7c1      	b.n	801ff8c <__sflush_r+0x1c>
 8020008:	6a21      	ldr	r1, [r4, #32]
 802000a:	2301      	movs	r3, #1
 802000c:	4628      	mov	r0, r5
 802000e:	47b0      	blx	r6
 8020010:	1c41      	adds	r1, r0, #1
 8020012:	d1c7      	bne.n	801ffa4 <__sflush_r+0x34>
 8020014:	682b      	ldr	r3, [r5, #0]
 8020016:	2b00      	cmp	r3, #0
 8020018:	d0c4      	beq.n	801ffa4 <__sflush_r+0x34>
 802001a:	2b1d      	cmp	r3, #29
 802001c:	d001      	beq.n	8020022 <__sflush_r+0xb2>
 802001e:	2b16      	cmp	r3, #22
 8020020:	d101      	bne.n	8020026 <__sflush_r+0xb6>
 8020022:	602f      	str	r7, [r5, #0]
 8020024:	e7b1      	b.n	801ff8a <__sflush_r+0x1a>
 8020026:	89a3      	ldrh	r3, [r4, #12]
 8020028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802002c:	81a3      	strh	r3, [r4, #12]
 802002e:	e7ad      	b.n	801ff8c <__sflush_r+0x1c>
 8020030:	690f      	ldr	r7, [r1, #16]
 8020032:	2f00      	cmp	r7, #0
 8020034:	d0a9      	beq.n	801ff8a <__sflush_r+0x1a>
 8020036:	0793      	lsls	r3, r2, #30
 8020038:	680e      	ldr	r6, [r1, #0]
 802003a:	bf08      	it	eq
 802003c:	694b      	ldreq	r3, [r1, #20]
 802003e:	600f      	str	r7, [r1, #0]
 8020040:	bf18      	it	ne
 8020042:	2300      	movne	r3, #0
 8020044:	eba6 0807 	sub.w	r8, r6, r7
 8020048:	608b      	str	r3, [r1, #8]
 802004a:	f1b8 0f00 	cmp.w	r8, #0
 802004e:	dd9c      	ble.n	801ff8a <__sflush_r+0x1a>
 8020050:	6a21      	ldr	r1, [r4, #32]
 8020052:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020054:	4643      	mov	r3, r8
 8020056:	463a      	mov	r2, r7
 8020058:	4628      	mov	r0, r5
 802005a:	47b0      	blx	r6
 802005c:	2800      	cmp	r0, #0
 802005e:	dc06      	bgt.n	802006e <__sflush_r+0xfe>
 8020060:	89a3      	ldrh	r3, [r4, #12]
 8020062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020066:	81a3      	strh	r3, [r4, #12]
 8020068:	f04f 30ff 	mov.w	r0, #4294967295
 802006c:	e78e      	b.n	801ff8c <__sflush_r+0x1c>
 802006e:	4407      	add	r7, r0
 8020070:	eba8 0800 	sub.w	r8, r8, r0
 8020074:	e7e9      	b.n	802004a <__sflush_r+0xda>
 8020076:	bf00      	nop
 8020078:	20400001 	.word	0x20400001

0802007c <_fflush_r>:
 802007c:	b538      	push	{r3, r4, r5, lr}
 802007e:	690b      	ldr	r3, [r1, #16]
 8020080:	4605      	mov	r5, r0
 8020082:	460c      	mov	r4, r1
 8020084:	b913      	cbnz	r3, 802008c <_fflush_r+0x10>
 8020086:	2500      	movs	r5, #0
 8020088:	4628      	mov	r0, r5
 802008a:	bd38      	pop	{r3, r4, r5, pc}
 802008c:	b118      	cbz	r0, 8020096 <_fflush_r+0x1a>
 802008e:	6983      	ldr	r3, [r0, #24]
 8020090:	b90b      	cbnz	r3, 8020096 <_fflush_r+0x1a>
 8020092:	f7ff f891 	bl	801f1b8 <__sinit>
 8020096:	4b14      	ldr	r3, [pc, #80]	; (80200e8 <_fflush_r+0x6c>)
 8020098:	429c      	cmp	r4, r3
 802009a:	d11b      	bne.n	80200d4 <_fflush_r+0x58>
 802009c:	686c      	ldr	r4, [r5, #4]
 802009e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	d0ef      	beq.n	8020086 <_fflush_r+0xa>
 80200a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80200a8:	07d0      	lsls	r0, r2, #31
 80200aa:	d404      	bmi.n	80200b6 <_fflush_r+0x3a>
 80200ac:	0599      	lsls	r1, r3, #22
 80200ae:	d402      	bmi.n	80200b6 <_fflush_r+0x3a>
 80200b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80200b2:	f7ff f956 	bl	801f362 <__retarget_lock_acquire_recursive>
 80200b6:	4628      	mov	r0, r5
 80200b8:	4621      	mov	r1, r4
 80200ba:	f7ff ff59 	bl	801ff70 <__sflush_r>
 80200be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80200c0:	07da      	lsls	r2, r3, #31
 80200c2:	4605      	mov	r5, r0
 80200c4:	d4e0      	bmi.n	8020088 <_fflush_r+0xc>
 80200c6:	89a3      	ldrh	r3, [r4, #12]
 80200c8:	059b      	lsls	r3, r3, #22
 80200ca:	d4dd      	bmi.n	8020088 <_fflush_r+0xc>
 80200cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80200ce:	f7ff f94a 	bl	801f366 <__retarget_lock_release_recursive>
 80200d2:	e7d9      	b.n	8020088 <_fflush_r+0xc>
 80200d4:	4b05      	ldr	r3, [pc, #20]	; (80200ec <_fflush_r+0x70>)
 80200d6:	429c      	cmp	r4, r3
 80200d8:	d101      	bne.n	80200de <_fflush_r+0x62>
 80200da:	68ac      	ldr	r4, [r5, #8]
 80200dc:	e7df      	b.n	802009e <_fflush_r+0x22>
 80200de:	4b04      	ldr	r3, [pc, #16]	; (80200f0 <_fflush_r+0x74>)
 80200e0:	429c      	cmp	r4, r3
 80200e2:	bf08      	it	eq
 80200e4:	68ec      	ldreq	r4, [r5, #12]
 80200e6:	e7da      	b.n	802009e <_fflush_r+0x22>
 80200e8:	08023db8 	.word	0x08023db8
 80200ec:	08023dd8 	.word	0x08023dd8
 80200f0:	08023d98 	.word	0x08023d98

080200f4 <_lseek_r>:
 80200f4:	b538      	push	{r3, r4, r5, lr}
 80200f6:	4d07      	ldr	r5, [pc, #28]	; (8020114 <_lseek_r+0x20>)
 80200f8:	4604      	mov	r4, r0
 80200fa:	4608      	mov	r0, r1
 80200fc:	4611      	mov	r1, r2
 80200fe:	2200      	movs	r2, #0
 8020100:	602a      	str	r2, [r5, #0]
 8020102:	461a      	mov	r2, r3
 8020104:	f7e1 fa7c 	bl	8001600 <_lseek>
 8020108:	1c43      	adds	r3, r0, #1
 802010a:	d102      	bne.n	8020112 <_lseek_r+0x1e>
 802010c:	682b      	ldr	r3, [r5, #0]
 802010e:	b103      	cbz	r3, 8020112 <_lseek_r+0x1e>
 8020110:	6023      	str	r3, [r4, #0]
 8020112:	bd38      	pop	{r3, r4, r5, pc}
 8020114:	2000a4f8 	.word	0x2000a4f8

08020118 <__swhatbuf_r>:
 8020118:	b570      	push	{r4, r5, r6, lr}
 802011a:	460e      	mov	r6, r1
 802011c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020120:	2900      	cmp	r1, #0
 8020122:	b096      	sub	sp, #88	; 0x58
 8020124:	4614      	mov	r4, r2
 8020126:	461d      	mov	r5, r3
 8020128:	da07      	bge.n	802013a <__swhatbuf_r+0x22>
 802012a:	2300      	movs	r3, #0
 802012c:	602b      	str	r3, [r5, #0]
 802012e:	89b3      	ldrh	r3, [r6, #12]
 8020130:	061a      	lsls	r2, r3, #24
 8020132:	d410      	bmi.n	8020156 <__swhatbuf_r+0x3e>
 8020134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020138:	e00e      	b.n	8020158 <__swhatbuf_r+0x40>
 802013a:	466a      	mov	r2, sp
 802013c:	f000 f86e 	bl	802021c <_fstat_r>
 8020140:	2800      	cmp	r0, #0
 8020142:	dbf2      	blt.n	802012a <__swhatbuf_r+0x12>
 8020144:	9a01      	ldr	r2, [sp, #4]
 8020146:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802014a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802014e:	425a      	negs	r2, r3
 8020150:	415a      	adcs	r2, r3
 8020152:	602a      	str	r2, [r5, #0]
 8020154:	e7ee      	b.n	8020134 <__swhatbuf_r+0x1c>
 8020156:	2340      	movs	r3, #64	; 0x40
 8020158:	2000      	movs	r0, #0
 802015a:	6023      	str	r3, [r4, #0]
 802015c:	b016      	add	sp, #88	; 0x58
 802015e:	bd70      	pop	{r4, r5, r6, pc}

08020160 <__smakebuf_r>:
 8020160:	898b      	ldrh	r3, [r1, #12]
 8020162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020164:	079d      	lsls	r5, r3, #30
 8020166:	4606      	mov	r6, r0
 8020168:	460c      	mov	r4, r1
 802016a:	d507      	bpl.n	802017c <__smakebuf_r+0x1c>
 802016c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020170:	6023      	str	r3, [r4, #0]
 8020172:	6123      	str	r3, [r4, #16]
 8020174:	2301      	movs	r3, #1
 8020176:	6163      	str	r3, [r4, #20]
 8020178:	b002      	add	sp, #8
 802017a:	bd70      	pop	{r4, r5, r6, pc}
 802017c:	ab01      	add	r3, sp, #4
 802017e:	466a      	mov	r2, sp
 8020180:	f7ff ffca 	bl	8020118 <__swhatbuf_r>
 8020184:	9900      	ldr	r1, [sp, #0]
 8020186:	4605      	mov	r5, r0
 8020188:	4630      	mov	r0, r6
 802018a:	f7ff f963 	bl	801f454 <_malloc_r>
 802018e:	b948      	cbnz	r0, 80201a4 <__smakebuf_r+0x44>
 8020190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020194:	059a      	lsls	r2, r3, #22
 8020196:	d4ef      	bmi.n	8020178 <__smakebuf_r+0x18>
 8020198:	f023 0303 	bic.w	r3, r3, #3
 802019c:	f043 0302 	orr.w	r3, r3, #2
 80201a0:	81a3      	strh	r3, [r4, #12]
 80201a2:	e7e3      	b.n	802016c <__smakebuf_r+0xc>
 80201a4:	4b0d      	ldr	r3, [pc, #52]	; (80201dc <__smakebuf_r+0x7c>)
 80201a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80201a8:	89a3      	ldrh	r3, [r4, #12]
 80201aa:	6020      	str	r0, [r4, #0]
 80201ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80201b0:	81a3      	strh	r3, [r4, #12]
 80201b2:	9b00      	ldr	r3, [sp, #0]
 80201b4:	6163      	str	r3, [r4, #20]
 80201b6:	9b01      	ldr	r3, [sp, #4]
 80201b8:	6120      	str	r0, [r4, #16]
 80201ba:	b15b      	cbz	r3, 80201d4 <__smakebuf_r+0x74>
 80201bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80201c0:	4630      	mov	r0, r6
 80201c2:	f000 f83d 	bl	8020240 <_isatty_r>
 80201c6:	b128      	cbz	r0, 80201d4 <__smakebuf_r+0x74>
 80201c8:	89a3      	ldrh	r3, [r4, #12]
 80201ca:	f023 0303 	bic.w	r3, r3, #3
 80201ce:	f043 0301 	orr.w	r3, r3, #1
 80201d2:	81a3      	strh	r3, [r4, #12]
 80201d4:	89a0      	ldrh	r0, [r4, #12]
 80201d6:	4305      	orrs	r5, r0
 80201d8:	81a5      	strh	r5, [r4, #12]
 80201da:	e7cd      	b.n	8020178 <__smakebuf_r+0x18>
 80201dc:	0801f151 	.word	0x0801f151

080201e0 <__malloc_lock>:
 80201e0:	4801      	ldr	r0, [pc, #4]	; (80201e8 <__malloc_lock+0x8>)
 80201e2:	f7ff b8be 	b.w	801f362 <__retarget_lock_acquire_recursive>
 80201e6:	bf00      	nop
 80201e8:	2000a4f0 	.word	0x2000a4f0

080201ec <__malloc_unlock>:
 80201ec:	4801      	ldr	r0, [pc, #4]	; (80201f4 <__malloc_unlock+0x8>)
 80201ee:	f7ff b8ba 	b.w	801f366 <__retarget_lock_release_recursive>
 80201f2:	bf00      	nop
 80201f4:	2000a4f0 	.word	0x2000a4f0

080201f8 <_read_r>:
 80201f8:	b538      	push	{r3, r4, r5, lr}
 80201fa:	4d07      	ldr	r5, [pc, #28]	; (8020218 <_read_r+0x20>)
 80201fc:	4604      	mov	r4, r0
 80201fe:	4608      	mov	r0, r1
 8020200:	4611      	mov	r1, r2
 8020202:	2200      	movs	r2, #0
 8020204:	602a      	str	r2, [r5, #0]
 8020206:	461a      	mov	r2, r3
 8020208:	f7e1 f99a 	bl	8001540 <_read>
 802020c:	1c43      	adds	r3, r0, #1
 802020e:	d102      	bne.n	8020216 <_read_r+0x1e>
 8020210:	682b      	ldr	r3, [r5, #0]
 8020212:	b103      	cbz	r3, 8020216 <_read_r+0x1e>
 8020214:	6023      	str	r3, [r4, #0]
 8020216:	bd38      	pop	{r3, r4, r5, pc}
 8020218:	2000a4f8 	.word	0x2000a4f8

0802021c <_fstat_r>:
 802021c:	b538      	push	{r3, r4, r5, lr}
 802021e:	4d07      	ldr	r5, [pc, #28]	; (802023c <_fstat_r+0x20>)
 8020220:	2300      	movs	r3, #0
 8020222:	4604      	mov	r4, r0
 8020224:	4608      	mov	r0, r1
 8020226:	4611      	mov	r1, r2
 8020228:	602b      	str	r3, [r5, #0]
 802022a:	f7e1 f9ce 	bl	80015ca <_fstat>
 802022e:	1c43      	adds	r3, r0, #1
 8020230:	d102      	bne.n	8020238 <_fstat_r+0x1c>
 8020232:	682b      	ldr	r3, [r5, #0]
 8020234:	b103      	cbz	r3, 8020238 <_fstat_r+0x1c>
 8020236:	6023      	str	r3, [r4, #0]
 8020238:	bd38      	pop	{r3, r4, r5, pc}
 802023a:	bf00      	nop
 802023c:	2000a4f8 	.word	0x2000a4f8

08020240 <_isatty_r>:
 8020240:	b538      	push	{r3, r4, r5, lr}
 8020242:	4d06      	ldr	r5, [pc, #24]	; (802025c <_isatty_r+0x1c>)
 8020244:	2300      	movs	r3, #0
 8020246:	4604      	mov	r4, r0
 8020248:	4608      	mov	r0, r1
 802024a:	602b      	str	r3, [r5, #0]
 802024c:	f7e1 f9cd 	bl	80015ea <_isatty>
 8020250:	1c43      	adds	r3, r0, #1
 8020252:	d102      	bne.n	802025a <_isatty_r+0x1a>
 8020254:	682b      	ldr	r3, [r5, #0]
 8020256:	b103      	cbz	r3, 802025a <_isatty_r+0x1a>
 8020258:	6023      	str	r3, [r4, #0]
 802025a:	bd38      	pop	{r3, r4, r5, pc}
 802025c:	2000a4f8 	.word	0x2000a4f8

08020260 <_init>:
 8020260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020262:	bf00      	nop
 8020264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020266:	bc08      	pop	{r3}
 8020268:	469e      	mov	lr, r3
 802026a:	4770      	bx	lr

0802026c <_fini>:
 802026c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802026e:	bf00      	nop
 8020270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020272:	bc08      	pop	{r3}
 8020274:	469e      	mov	lr, r3
 8020276:	4770      	bx	lr
