/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/seedphrasesetupdisplay_screen/SeedPhraseSetupDisplayViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

SeedPhraseSetupDisplayViewBase::SeedPhraseSetupDisplayViewBase() :
    buttonCallback(this, &SeedPhraseSetupDisplayViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &SeedPhraseSetupDisplayViewBase::flexButtonCallbackHandler),
    updateItemCallback(this, &SeedPhraseSetupDisplayViewBase::updateItemCallbackHandler)
{

    __background.setPosition(0, 0, 272, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    l2.setPosition(240, 0, 240, 297);
    l2.setColor(touchgfx::Color::getColorFromRGB(37, 37, 37));

    l3.setPosition(250, 30, 212, 228);
    l3.setColor(touchgfx::Color::getColorFromRGB(51, 51, 51));

    progressSlider.setXY(462, 47);
    progressSlider.setBitmaps(touchgfx::Bitmap(BITMAP_SEEDPHRASE_SLIDER_BAR_ID), touchgfx::Bitmap(BITMAP_SEEDPHRASE_SLIDER_BAR_ID), touchgfx::Bitmap(BITMAP_SEEDPHRASE_SLIDER_BUTTON_ID));
    progressSlider.setupVerticalSlider(0, 0, 0, 0, 173);
    progressSlider.setValueRange(0, 100);
    progressSlider.setValue(100);

    seedWordScrollList.setPosition(250, 28, 243, 226);
    seedWordScrollList.setHorizontal(false);
    seedWordScrollList.setCircular(false);
    seedWordScrollList.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    seedWordScrollList.setSwipeAcceleration(10);
    seedWordScrollList.setDragAcceleration(10);
    seedWordScrollList.setNumberOfItems(24);
    seedWordScrollList.setPadding(0, 0);
    seedWordScrollList.setSnapping(true);
    seedWordScrollList.setDrawableSize(28, 0);
    seedWordScrollList.setDrawables(seedWordScrollListListItems, updateItemCallback);

    walletName.setXY(42, 136);
    walletName.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    walletName.setLinespacing(0);
    Unicode::snprintf(walletNameBuffer, WALLETNAME_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID114).getText());
    walletName.setWildcard(walletNameBuffer);
    walletName.resizeToCurrentText();
    walletName.setTypedText(touchgfx::TypedText(T_SINGLEUSEID113));

    screenName.setXY(261, 5);
    screenName.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    screenName.setLinespacing(0);
    screenName.setTypedText(touchgfx::TypedText(T_SINGLEUSEID118));

    walletBackupNotice.setXY(42, 17);
    walletBackupNotice.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    walletBackupNotice.setLinespacing(0);
    walletBackupNotice.setTypedText(touchgfx::TypedText(T_SINGLEUSEID119));

    exitConfirmation.setBackground(touchgfx::BitmapId(BITMAP_PIN_PAD_BACKGROUND_ID), 0, 0);
    exitConfirmation.setShadeColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    exitConfirmation.setShadeAlpha(0);
    exitConfirmation.hide();

    washoutSeedPhraseConfirm.setPosition(13, 10, 455, 250);
    washoutSeedPhraseConfirm.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    washoutSeedPhraseConfirm.setAlpha(0);
    exitConfirmation.add(washoutSeedPhraseConfirm);

    seedPhraseBackupWarning.setXY(67, 38);
    seedPhraseBackupWarning.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    seedPhraseBackupWarning.setLinespacing(0);
    seedPhraseBackupWarning.setTypedText(touchgfx::TypedText(T_SINGLEUSEID120));
    exitConfirmation.add(seedPhraseBackupWarning);

    seedPhraseBackupConfirmCancel.setXY(39, 179);
    seedPhraseBackupConfirmCancel.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    seedPhraseBackupConfirmCancel.setLabelText(touchgfx::TypedText(T_SINGLEUSEID122));
    seedPhraseBackupConfirmCancel.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    seedPhraseBackupConfirmCancel.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    seedPhraseBackupConfirmCancel.setAction(buttonCallback);
    exitConfirmation.add(seedPhraseBackupConfirmCancel);

    seedPhraseBackupConfirm.setXY(258, 179);
    seedPhraseBackupConfirm.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    seedPhraseBackupConfirm.setLabelText(touchgfx::TypedText(T_SINGLEUSEID121));
    seedPhraseBackupConfirm.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    seedPhraseBackupConfirm.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    seedPhraseBackupConfirm.setAction(buttonCallback);
    exitConfirmation.add(seedPhraseBackupConfirm);

    seedPhraseVerification.setBackground(touchgfx::BitmapId(BITMAP_PIN_PAD_BACKGROUND_ID), 0, 0);
    seedPhraseVerification.setShadeColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    seedPhraseVerification.hide();

    backupVerificationTitle.setXY(28, 15);
    backupVerificationTitle.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    backupVerificationTitle.setLinespacing(0);
    backupVerificationTitle.setTypedText(touchgfx::TypedText(T_SINGLEUSEID127));
    seedPhraseVerification.add(backupVerificationTitle);

    verificationWordNumber.setXY(79, 73);
    verificationWordNumber.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    verificationWordNumber.setLinespacing(0);
    Unicode::snprintf(verificationWordNumberBuffer, VERIFICATIONWORDNUMBER_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID129).getText());
    verificationWordNumber.setWildcard(verificationWordNumberBuffer);
    verificationWordNumber.resizeToCurrentText();
    verificationWordNumber.setTypedText(touchgfx::TypedText(T_SINGLEUSEID128));
    seedPhraseVerification.add(verificationWordNumber);

    optionAFlx.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    optionAFlx.setBitmapXY(0, 0);
    optionAFlx.setWildcardText(TypedText(T_SINGLEUSEID132));
    Unicode::snprintf(optionAFlxBuffer, OPTIONAFLX_SIZE, "%s", TypedText(T_SINGLEUSEID133).getText());
    optionAFlx.setWildcardTextBuffer(optionAFlxBuffer);
    optionAFlx.setWildcardTextPosition(0, 18, 170, 60);
    optionAFlx.setWildcardTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
    optionAFlx.setPosition(58, 115, 170, 60);
    optionAFlx.setAction(flexButtonCallback);
    seedPhraseVerification.add(optionAFlx);

    optionBFlx.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    optionBFlx.setBitmapXY(0, 0);
    optionBFlx.setWildcardText(TypedText(T_SINGLEUSEID134));
    Unicode::snprintf(optionBFlxBuffer, OPTIONBFLX_SIZE, "%s", TypedText(T_SINGLEUSEID135).getText());
    optionBFlx.setWildcardTextBuffer(optionBFlxBuffer);
    optionBFlx.setWildcardTextPosition(0, 18, 170, 60);
    optionBFlx.setWildcardTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
    optionBFlx.setPosition(251, 115, 170, 60);
    optionBFlx.setAction(flexButtonCallback);
    seedPhraseVerification.add(optionBFlx);

    optionCFlx.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    optionCFlx.setBitmapXY(0, 0);
    optionCFlx.setWildcardText(TypedText(T_SINGLEUSEID136));
    Unicode::snprintf(optionCFlxBuffer, OPTIONCFLX_SIZE, "%s", TypedText(T_SINGLEUSEID137).getText());
    optionCFlx.setWildcardTextBuffer(optionCFlxBuffer);
    optionCFlx.setWildcardTextPosition(0, 18, 170, 60);
    optionCFlx.setWildcardTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
    optionCFlx.setPosition(58, 191, 170, 60);
    optionCFlx.setAction(flexButtonCallback);
    seedPhraseVerification.add(optionCFlx);

    optionDFlx.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    optionDFlx.setBitmapXY(0, 0);
    optionDFlx.setWildcardText(TypedText(T_SINGLEUSEID138));
    Unicode::snprintf(optionDFlxBuffer, OPTIONDFLX_SIZE, "%s", TypedText(T_SINGLEUSEID139).getText());
    optionDFlx.setWildcardTextBuffer(optionDFlxBuffer);
    optionDFlx.setWildcardTextPosition(0, 18, 170, 60);
    optionDFlx.setWildcardTextColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255));
    optionDFlx.setPosition(251, 191, 170, 60);
    optionDFlx.setAction(flexButtonCallback);
    seedPhraseVerification.add(optionDFlx);

    seedPhraseBackupComplete.setBackground(touchgfx::BitmapId(BITMAP_PIN_PAD_BACKGROUND_ID), 0, 0);
    seedPhraseBackupComplete.setShadeColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    seedPhraseBackupComplete.setShadeAlpha(0);
    seedPhraseBackupComplete.hide();

    backupCompleteText.setXY(55, 5);
    backupCompleteText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    backupCompleteText.setLinespacing(0);
    backupCompleteText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID140));
    seedPhraseBackupComplete.add(backupCompleteText);

    backupCompleteNoSharingWarning.setXY(125, 121);
    backupCompleteNoSharingWarning.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    backupCompleteNoSharingWarning.setLinespacing(0);
    backupCompleteNoSharingWarning.setTypedText(touchgfx::TypedText(T_SINGLEUSEID141));
    seedPhraseBackupComplete.add(backupCompleteNoSharingWarning);

    backupCompleteProceed.setXY(155, 192);
    backupCompleteProceed.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    backupCompleteProceed.setLabelText(touchgfx::TypedText(T_SINGLEUSEID142));
    backupCompleteProceed.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    backupCompleteProceed.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    seedPhraseBackupComplete.add(backupCompleteProceed);

    genNewSeedPhraseButton.setXY(30, 150);
    genNewSeedPhraseButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    genNewSeedPhraseButton.setLabelText(touchgfx::TypedText(T_SINGLEUSEID147));
    genNewSeedPhraseButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    genNewSeedPhraseButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));

    confirmSeedPhraseBackup.setXY(30, 210);
    confirmSeedPhraseBackup.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    confirmSeedPhraseBackup.setLabelText(touchgfx::TypedText(T_SINGLEUSEID148));
    confirmSeedPhraseBackup.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    confirmSeedPhraseBackup.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));

    add(__background);
    add(l2);
    add(l3);
    add(progressSlider);
    add(seedWordScrollList);
    add(walletName);
    add(screenName);
    add(walletBackupNotice);
    add(exitConfirmation);
    add(seedPhraseVerification);
    add(seedPhraseBackupComplete);
    add(genNewSeedPhraseButton);
    add(confirmSeedPhraseBackup);
}

void SeedPhraseSetupDisplayViewBase::setupScreen()
{
    seedWordScrollList.initialize();
    for (int i = 0; i < seedWordScrollListListItems.getNumberOfDrawables(); i++)
    {
        seedWordScrollListListItems[i].initialize();
    }
}

void SeedPhraseSetupDisplayViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &seedPhraseBackupConfirmCancel)
    {
        //seedPhraseConfirmationCancel
        //When seedPhraseBackupConfirmCancel clicked call virtual function
        //Call seedPhraseConfirmationCancel
        seedPhraseConfirmationCancel();
    }
    else if (&src == &seedPhraseBackupConfirm)
    {
        //seedPhraseBackupVerification
        //When seedPhraseBackupConfirm clicked call virtual function
        //Call seedPhraseBackupVerification
        seedPhraseBackupVerification();
    }
}

void SeedPhraseSetupDisplayViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &optionAFlx)
    {
        //AnswerASelected
        //When optionAFlx clicked call virtual function
        //Call answerASelected
        answerASelected();
    }
    else if (&src == &optionBFlx)
    {
        //AnswerBSelected
        //When optionBFlx clicked call virtual function
        //Call answerBSelected
        answerBSelected();
    }
    else if (&src == &optionCFlx)
    {
        //AnswerCSelected
        //When optionCFlx clicked call virtual function
        //Call answerCSelected
        answerCSelected();
    }
    else if (&src == &optionDFlx)
    {
        //AnswerDSelected
        //When optionDFlx clicked call virtual function
        //Call answerDSelected
        answerDSelected();
    }
}

void SeedPhraseSetupDisplayViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &seedWordScrollListListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        SeedWordCustomContainer* cc = (SeedWordCustomContainer*)d;
        seedWordScrollListUpdateItem(*cc, itemIndex);
    }
}
