/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

//Default typed text database
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x31, 0x2d, 0x36, 0x20, 0x64, 0x69, 0x67, 0x69, 0x74, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x70, 0x69, 0x6e, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0xa, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x70, 0x69, 0x6e, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x20, 0xa, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x2e, 0x20, 0x44, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x61, 0x73, 0x79, 0x20, 0x74, 0x6f, 0xa, 0x67, 0x75, 0x65, 0x73, 0x73, 0x20, 0x70, 0x69, 0x6e, 0x2e, 0x20, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x27, 0x45, 0x4e, 0x54, 0x27, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x70, 0x69, 0x6e, 0x2e, 0x0, // @0 "Create a 1-6 digit long pin. This is the first?part of your pin number that will secure ?your bitcoins. Do not choose an easy to?guess pin. Press 'ENT' to submit your pin."
    0x54, 0x48, 0x49, 0x53, 0x20, 0x49, 0x53, 0x20, 0x59, 0x4f, 0x55, 0x52, 0x20, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x20, 0xa, 0x53, 0x45, 0x45, 0x44, 0x2e, 0x20, 0x49, 0x4e, 0x20, 0x54, 0x48, 0x45, 0x20, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x20, 0x59, 0x4f, 0x55, 0x20, 0xa, 0x4c, 0x4f, 0x53, 0x45, 0x20, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x20, 0x54, 0x4f, 0x20, 0x54, 0x48, 0x49, 0x53, 0x20, 0xa, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x20, 0x4f, 0x52, 0x20, 0x50, 0x49, 0x4e, 0x20, 0x49, 0x46, 0x20, 0x54, 0x48, 0x49, 0x53, 0x20, 0xa, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x20, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x20, 0x55, 0x50, 0x20, 0x59, 0x4f, 0x55, 0x20, 0xa, 0x43, 0x41, 0x4e, 0x20, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x20, 0x59, 0x4f, 0x55, 0x52, 0x20, 0xa, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x2e, 0x20, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x20, 0x4d, 0x41, 0x54, 0x54, 0x45, 0x52, 0x53, 0x20, 0x0, // @172 "THIS IS YOUR BITCOIN ?SEED. IN THE EVENT YOU ?LOSE ACCESS TO THIS ?DEVICE OR PIN IF THIS ?PHRASE BACKED UP YOU ?CAN RESTORE YOUR ?BITCOINS. ORDER MATTERS "
    0x4e, 0x45, 0x56, 0x45, 0x52, 0x20, 0x53, 0x48, 0x41, 0x52, 0x45, 0x20, 0x59, 0x4f, 0x55, 0x52, 0x20, 0x53, 0x45, 0x45, 0x44, 0x20, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x20, 0x45, 0x56, 0x45, 0x52, 0x2e, 0x20, 0xa, 0x59, 0x4f, 0x55, 0x52, 0x20, 0x53, 0x45, 0x45, 0x44, 0x20, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x20, 0x49, 0x53, 0x20, 0x59, 0x4f, 0x55, 0x52, 0x20, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x2e, 0xa, 0x49, 0x46, 0x20, 0x41, 0x4e, 0x59, 0x4f, 0x4e, 0x45, 0x20, 0x47, 0x45, 0x54, 0x53, 0x20, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x20, 0x54, 0x48, 0x45, 0x59, 0x20, 0x41, 0x4c, 0x53, 0x4f, 0x20, 0x48, 0x41, 0x56, 0x45, 0x20, 0xa, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x20, 0x54, 0x4f, 0x20, 0x59, 0x4f, 0x55, 0x52, 0x20, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x2e, 0x0, // @327 "NEVER SHARE YOUR SEED PHRASE EVER. ?YOUR SEED PHRASE IS YOUR BITCOIN.?IF ANYONE GETS ACCESS THEY ALSO HAVE ?ACCESS TO YOUR COINS."
    0x31, 0x2e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x50, 0x49, 0x4e, 0xa, 0x32, 0x2e, 0x20, 0x41, 0x6e, 0x74, 0x69, 0x20, 0x50, 0x68, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x20, 0xa, 0x33, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x64, 0x20, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x20, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0xa, 0x34, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x64, 0x20, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x20, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @457 "1. Create a PIN?2. Anti Phishing Image ?3. Seed Phrase Backup?4. Seed Phrase Verification"
    0x59, 0x4f, 0x55, 0x20, 0x4e, 0x4f, 0x57, 0x20, 0x57, 0x49, 0x4c, 0x4c, 0x20, 0x42, 0x45, 0x20, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x20, 0x50, 0x41, 0x52, 0x54, 0x20, 0x32, 0x20, 0x4f, 0x46, 0x20, 0x59, 0x4f, 0x55, 0x52, 0xa, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x20, 0x50, 0x49, 0x4e, 0x2e, 0x20, 0x0, // @547 "YOU NOW WILL BE CREATING PART 2 OF YOUR?SECURITY PIN. "
    0x54, 0x48, 0x49, 0x53, 0x20, 0x49, 0x53, 0x20, 0x54, 0x48, 0x45, 0x20, 0x46, 0x49, 0x52, 0x53, 0x54, 0x20, 0x54, 0x49, 0x4d, 0x45, 0x20, 0xa, 0x54, 0x48, 0x49, 0x53, 0x20, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0xa, 0x48, 0x41, 0x53, 0x20, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x45, 0x44, 0x20, 0x4f, 0x4e, 0x2e, 0x0, // @602 "THIS IS THE FIRST TIME ?THIS DEVICE?HAS POWERED ON."
    0x59, 0x4f, 0x55, 0x52, 0x20, 0x50, 0x49, 0x4e, 0x20, 0x49, 0x53, 0x20, 0x53, 0x45, 0x54, 0x55, 0x50, 0xa, 0x2d, 0x20, 0x44, 0x4f, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x53, 0x48, 0x41, 0x52, 0x45, 0x20, 0x49, 0x54, 0x20, 0x2d, 0x0, // @654 "YOUR PIN IS SETUP?- DO NOT SHARE IT -"
    0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4d, 0x55, 0xa, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x53, 0x65, 0x74, 0x75, 0x70, 0x0, // @692 "Welcome to the CoinEMU?Device Setup"
    0x57, 0x4f, 0x52, 0x44, 0x20, 0x2, 0x20, 0x4f, 0x46, 0x20, 0x59, 0x4f, 0x55, 0x52, 0x20, 0x53, 0x45, 0x45, 0x44, 0x20, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x20, 0x49, 0x53, 0x20, 0x0, // @728 "WORD <> OF YOUR SEED PHRASE IS "
    0x49, 0x20, 0x48, 0x41, 0x56, 0x45, 0x20, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x20, 0x55, 0x50, 0xa, 0x4d, 0x59, 0x20, 0x53, 0x45, 0x45, 0x44, 0x20, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x0, // @759 "I HAVE BACKED UP?MY SEED PHRASE"
    0x53, 0x45, 0x45, 0x44, 0x20, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x20, 0xa, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x20, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x0, // @791 "SEED PHRASE ?BACKUP COMPLETE"
    0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x20, 0x59, 0x4f, 0x55, 0x52, 0xa, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x20, 0x45, 0x4d, 0x4f, 0x4a, 0x49, 0x0, // @820 "SELECT YOUR?SECURITY EMOJI"
    0x53, 0x45, 0x54, 0x55, 0x50, 0x20, 0x50, 0x49, 0x4e, 0x20, 0x50, 0x41, 0x52, 0x54, 0x20, 0x2, 0x0, // @847 "SETUP PIN PART <>"
    0x55, 0x53, 0x49, 0x4e, 0x47, 0x20, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x20, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x0, // @864 "USING UNKNOWN WALLET"
    0x45, 0x4e, 0x54, 0x45, 0x52, 0x20, 0x50, 0x49, 0x4e, 0x20, 0x54, 0x4f, 0x20, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x0, // @885 "ENTER PIN TO UNLOCK"
    0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x20, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x0, // @905 "BACKUP VERIFICATION"
    0x59, 0x4f, 0x55, 0x52, 0x20, 0x53, 0x45, 0x45, 0x44, 0x20, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x20, 0x0, // @925 "YOUR SEED PHRASE "
    0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3a, 0x20, 0x52, 0x75, 0x73, 0x73, 0x65, 0x72, 0x65, 0x65, 0x0, // @943 "Author: Russeree"
    0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x30, 0x2e, 0x31, 0x2e, 0x31, 0x0, // @960 "Version: 0.1.1"
    0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x0, // @975 "Confirm Backup"
    0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x20, 0x50, 0x41, 0x52, 0x54, 0x20, 0x32, 0x0, // @990 "CREATE PART 2"
    0x55, 0x53, 0x45, 0x52, 0x20, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x0, // @1004 "USER NOTICE"
    0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x53, 0x65, 0x74, 0x75, 0x70, 0x0, // @1016 "Start Setup"
    0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x20, 0x53, 0x45, 0x45, 0x44, 0x0, // @1028 "CREATE SEED"
    0x53, 0x65, 0x65, 0x64, 0x20, 0x57, 0x6f, 0x72, 0x64, 0x51, 0x0, // @1040 "Seed WordQ"
    0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x20, 0x45, 0x4d, 0x55, 0x20, 0x0, // @1051 "BLOCK EMU "
    0x50, 0x49, 0x4e, 0x20, 0x50, 0x41, 0x52, 0x54, 0x20, 0x32, 0x0, // @1062 "PIN PART 2"
    0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x20, 0x50, 0x49, 0x4e, 0x0, // @1073 "VERIFY PIN"
    0x4e, 0x65, 0x77, 0x20, 0x54, 0x65, 0x78, 0x74, 0x0, // @1084 "New Text"
    0x4e, 0x65, 0x77, 0x20, 0x53, 0x65, 0x65, 0x64, 0x0, // @1093 "New Seed"
    0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x0, // @1102 "CONTINE"
    0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x0, // @1110 "CONFIRM"
    0x47, 0x4f, 0x20, 0x42, 0x41, 0x43, 0x4b, 0x0, // @1118 "GO BACK"
    0x45, 0x4e, 0x54, 0x45, 0x52, 0x0, // @1126 "ENTER"
    0x44, 0x45, 0x4c, 0x0, // @1132 "DEL"
    0x45, 0x4e, 0x54, 0x0, // @1136 "ENT"
    0x30, 0x30, 0x0, // @1140 "00"
    0x2a, 0x0, // @1143 "*"
    0x41, 0x0, // @1145 "A"
    0x42, 0x0, // @1147 "B"
    0x43, 0x0 // @1149 "C"
};
TEXT_LOCATION_FLASH_PRAGMA
KEEP extern uint32_t const indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

//array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

//Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
